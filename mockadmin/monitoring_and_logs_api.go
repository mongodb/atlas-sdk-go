// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20241023001/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MonitoringAndLogsApi is an autogenerated mock type for the MonitoringAndLogsApi type
type MonitoringAndLogsApi struct {
	mock.Mock
}

type MonitoringAndLogsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitoringAndLogsApi) EXPECT() *MonitoringAndLogsApi_Expecter {
	return &MonitoringAndLogsApi_Expecter{mock: &_m.Mock}
}

// GetAtlasProcess provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) GetAtlasProcess(ctx context.Context, groupId string, processId string) admin.GetAtlasProcessApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasProcess")
	}

	var r0 admin.GetAtlasProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAtlasProcessApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasProcessApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetAtlasProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasProcess'
type MonitoringAndLogsApi_GetAtlasProcess_Call struct {
	*mock.Call
}

// GetAtlasProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetAtlasProcess(ctx any, groupId any, processId any) *MonitoringAndLogsApi_GetAtlasProcess_Call {
	return &MonitoringAndLogsApi_GetAtlasProcess_Call{Call: _e.mock.On("GetAtlasProcess", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_GetAtlasProcess_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_GetAtlasProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcess_Call) Return(_a0 admin.GetAtlasProcessApiRequest) *MonitoringAndLogsApi_GetAtlasProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcess_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAtlasProcessApiRequest) *MonitoringAndLogsApi_GetAtlasProcess_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasProcessExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetAtlasProcessExecute(r admin.GetAtlasProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasProcessExecute")
	}

	var r0 *admin.ApiHostViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAtlasProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAtlasProcessApiRequest) *admin.ApiHostViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiHostViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAtlasProcessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAtlasProcessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetAtlasProcessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasProcessExecute'
type MonitoringAndLogsApi_GetAtlasProcessExecute_Call struct {
	*mock.Call
}

// GetAtlasProcessExecute is a helper method to define mock.On call
//   - r admin.GetAtlasProcessApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetAtlasProcessExecute(r any) *MonitoringAndLogsApi_GetAtlasProcessExecute_Call {
	return &MonitoringAndLogsApi_GetAtlasProcessExecute_Call{Call: _e.mock.On("GetAtlasProcessExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessExecute_Call) Run(run func(r admin.GetAtlasProcessApiRequest)) *MonitoringAndLogsApi_GetAtlasProcessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAtlasProcessApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessExecute_Call) Return(_a0 *admin.ApiHostViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetAtlasProcessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessExecute_Call) RunAndReturn(run func(admin.GetAtlasProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetAtlasProcessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasProcessWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetAtlasProcessWithParams(ctx context.Context, args *admin.GetAtlasProcessApiParams) admin.GetAtlasProcessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasProcessWithParams")
	}

	var r0 admin.GetAtlasProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAtlasProcessApiParams) admin.GetAtlasProcessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasProcessApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetAtlasProcessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasProcessWithParams'
type MonitoringAndLogsApi_GetAtlasProcessWithParams_Call struct {
	*mock.Call
}

// GetAtlasProcessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAtlasProcessApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetAtlasProcessWithParams(ctx any, args any) *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call {
	return &MonitoringAndLogsApi_GetAtlasProcessWithParams_Call{Call: _e.mock.On("GetAtlasProcessWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAtlasProcessApiParams)) *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAtlasProcessApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call) Return(_a0 admin.GetAtlasProcessApiRequest) *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAtlasProcessApiParams) admin.GetAtlasProcessApiRequest) *MonitoringAndLogsApi_GetAtlasProcessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabase provides a mock function with given fields: ctx, groupId, databaseName, processId
func (_m *MonitoringAndLogsApi) GetDatabase(ctx context.Context, groupId string, databaseName string, processId string) admin.GetDatabaseApiRequest {
	ret := _m.Called(ctx, groupId, databaseName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 admin.GetDatabaseApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDatabaseApiRequest); ok {
		r0 = rf(ctx, groupId, databaseName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabase'
type MonitoringAndLogsApi_GetDatabase_Call struct {
	*mock.Call
}

// GetDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - databaseName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetDatabase(ctx any, groupId any, databaseName any, processId any) *MonitoringAndLogsApi_GetDatabase_Call {
	return &MonitoringAndLogsApi_GetDatabase_Call{Call: _e.mock.On("GetDatabase", ctx, groupId, databaseName, processId)}
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) Run(run func(ctx context.Context, groupId string, databaseName string, processId string)) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) Return(_a0 admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetDatabaseExecute(r admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseExecute")
	}

	var r0 *admin.MesurementsDatabase
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseApiRequest) *admin.MesurementsDatabase); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MesurementsDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDatabaseApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDatabaseApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetDatabaseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseExecute'
type MonitoringAndLogsApi_GetDatabaseExecute_Call struct {
	*mock.Call
}

// GetDatabaseExecute is a helper method to define mock.On call
//   - r admin.GetDatabaseApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseExecute(r any) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	return &MonitoringAndLogsApi_GetDatabaseExecute_Call{Call: _e.mock.On("GetDatabaseExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) Run(run func(r admin.GetDatabaseApiRequest)) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDatabaseApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) Return(_a0 *admin.MesurementsDatabase, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) RunAndReturn(run func(admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error)) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurements provides a mock function with given fields: ctx, groupId, databaseName, processId
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurements(ctx context.Context, groupId string, databaseName string, processId string) admin.GetDatabaseMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, databaseName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurements")
	}

	var r0 admin.GetDatabaseMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDatabaseMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, databaseName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurements'
type MonitoringAndLogsApi_GetDatabaseMeasurements_Call struct {
	*mock.Call
}

// GetDatabaseMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - databaseName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurements(ctx any, groupId any, databaseName any, processId any) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurements_Call{Call: _e.mock.On("GetDatabaseMeasurements", ctx, groupId, databaseName, processId)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) Run(run func(ctx context.Context, groupId string, databaseName string, processId string)) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) Return(_a0 admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurementsExecute(r admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDatabaseMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDatabaseMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurementsExecute'
type MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call struct {
	*mock.Call
}

// GetDatabaseMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetDatabaseMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurementsExecute(r any) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call{Call: _e.mock.On("GetDatabaseMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) Run(run func(r admin.GetDatabaseMeasurementsApiRequest)) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDatabaseMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) RunAndReturn(run func(admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurementsWithParams(ctx context.Context, args *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurementsWithParams")
	}

	var r0 admin.GetDatabaseMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurementsWithParams'
type MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetDatabaseMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDatabaseMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call{Call: _e.mock.On("GetDatabaseMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDatabaseMeasurementsApiParams)) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDatabaseMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) Return(_a0 admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetDatabaseWithParams(ctx context.Context, args *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseWithParams")
	}

	var r0 admin.GetDatabaseApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseWithParams'
type MonitoringAndLogsApi_GetDatabaseWithParams_Call struct {
	*mock.Call
}

// GetDatabaseWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDatabaseApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseWithParams(ctx any, args any) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	return &MonitoringAndLogsApi_GetDatabaseWithParams_Call{Call: _e.mock.On("GetDatabaseWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDatabaseApiParams)) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDatabaseApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) Return(_a0 admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiskMeasurements provides a mock function with given fields: ctx, groupId, partitionName, processId
func (_m *MonitoringAndLogsApi) GetDiskMeasurements(ctx context.Context, groupId string, partitionName string, processId string) admin.GetDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, partitionName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskMeasurements")
	}

	var r0 admin.GetDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, partitionName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDiskMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskMeasurements'
type MonitoringAndLogsApi_GetDiskMeasurements_Call struct {
	*mock.Call
}

// GetDiskMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - partitionName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetDiskMeasurements(ctx any, groupId any, partitionName any, processId any) *MonitoringAndLogsApi_GetDiskMeasurements_Call {
	return &MonitoringAndLogsApi_GetDiskMeasurements_Call{Call: _e.mock.On("GetDiskMeasurements", ctx, groupId, partitionName, processId)}
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurements_Call) Run(run func(ctx context.Context, groupId string, partitionName string, processId string)) *MonitoringAndLogsApi_GetDiskMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurements_Call) Return(_a0 admin.GetDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetDiskMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetDiskMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiskMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetDiskMeasurementsExecute(r admin.GetDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDiskMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDiskMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDiskMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskMeasurementsExecute'
type MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call struct {
	*mock.Call
}

// GetDiskMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetDiskMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetDiskMeasurementsExecute(r any) *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call{Call: _e.mock.On("GetDiskMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call) Run(run func(r admin.GetDiskMeasurementsApiRequest)) *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDiskMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call) RunAndReturn(run func(admin.GetDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetDiskMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiskMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetDiskMeasurementsWithParams(ctx context.Context, args *admin.GetDiskMeasurementsApiParams) admin.GetDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskMeasurementsWithParams")
	}

	var r0 admin.GetDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDiskMeasurementsApiParams) admin.GetDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskMeasurementsWithParams'
type MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetDiskMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDiskMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetDiskMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call{Call: _e.mock.On("GetDiskMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDiskMeasurementsApiParams)) *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDiskMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call) Return(_a0 admin.GetDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDiskMeasurementsApiParams) admin.GetDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetDiskMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostLogs provides a mock function with given fields: ctx, groupId, hostName, logName
func (_m *MonitoringAndLogsApi) GetHostLogs(ctx context.Context, groupId string, hostName string, logName string) admin.GetHostLogsApiRequest {
	ret := _m.Called(ctx, groupId, hostName, logName)

	if len(ret) == 0 {
		panic("no return value specified for GetHostLogs")
	}

	var r0 admin.GetHostLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetHostLogsApiRequest); ok {
		r0 = rf(ctx, groupId, hostName, logName)
	} else {
		r0 = ret.Get(0).(admin.GetHostLogsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetHostLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostLogs'
type MonitoringAndLogsApi_GetHostLogs_Call struct {
	*mock.Call
}

// GetHostLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - hostName string
//   - logName string
func (_e *MonitoringAndLogsApi_Expecter) GetHostLogs(ctx any, groupId any, hostName any, logName any) *MonitoringAndLogsApi_GetHostLogs_Call {
	return &MonitoringAndLogsApi_GetHostLogs_Call{Call: _e.mock.On("GetHostLogs", ctx, groupId, hostName, logName)}
}

func (_c *MonitoringAndLogsApi_GetHostLogs_Call) Run(run func(ctx context.Context, groupId string, hostName string, logName string)) *MonitoringAndLogsApi_GetHostLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogs_Call) Return(_a0 admin.GetHostLogsApiRequest) *MonitoringAndLogsApi_GetHostLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogs_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetHostLogsApiRequest) *MonitoringAndLogsApi_GetHostLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostLogsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetHostLogsExecute(r admin.GetHostLogsApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetHostLogsExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetHostLogsApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetHostLogsApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetHostLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetHostLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetHostLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostLogsExecute'
type MonitoringAndLogsApi_GetHostLogsExecute_Call struct {
	*mock.Call
}

// GetHostLogsExecute is a helper method to define mock.On call
//   - r admin.GetHostLogsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetHostLogsExecute(r any) *MonitoringAndLogsApi_GetHostLogsExecute_Call {
	return &MonitoringAndLogsApi_GetHostLogsExecute_Call{Call: _e.mock.On("GetHostLogsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetHostLogsExecute_Call) Run(run func(r admin.GetHostLogsApiRequest)) *MonitoringAndLogsApi_GetHostLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetHostLogsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogsExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetHostLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogsExecute_Call) RunAndReturn(run func(admin.GetHostLogsApiRequest) (io.ReadCloser, *http.Response, error)) *MonitoringAndLogsApi_GetHostLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostLogsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetHostLogsWithParams(ctx context.Context, args *admin.GetHostLogsApiParams) admin.GetHostLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetHostLogsWithParams")
	}

	var r0 admin.GetHostLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetHostLogsApiParams) admin.GetHostLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetHostLogsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetHostLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostLogsWithParams'
type MonitoringAndLogsApi_GetHostLogsWithParams_Call struct {
	*mock.Call
}

// GetHostLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetHostLogsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetHostLogsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetHostLogsWithParams_Call {
	return &MonitoringAndLogsApi_GetHostLogsWithParams_Call{Call: _e.mock.On("GetHostLogsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetHostLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetHostLogsApiParams)) *MonitoringAndLogsApi_GetHostLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetHostLogsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogsWithParams_Call) Return(_a0 admin.GetHostLogsApiRequest) *MonitoringAndLogsApi_GetHostLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetHostLogsApiParams) admin.GetHostLogsApiRequest) *MonitoringAndLogsApi_GetHostLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostMeasurements provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) GetHostMeasurements(ctx context.Context, groupId string, processId string) admin.GetHostMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetHostMeasurements")
	}

	var r0 admin.GetHostMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetHostMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetHostMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetHostMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostMeasurements'
type MonitoringAndLogsApi_GetHostMeasurements_Call struct {
	*mock.Call
}

// GetHostMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetHostMeasurements(ctx any, groupId any, processId any) *MonitoringAndLogsApi_GetHostMeasurements_Call {
	return &MonitoringAndLogsApi_GetHostMeasurements_Call{Call: _e.mock.On("GetHostMeasurements", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_GetHostMeasurements_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_GetHostMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurements_Call) Return(_a0 admin.GetHostMeasurementsApiRequest) *MonitoringAndLogsApi_GetHostMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurements_Call) RunAndReturn(run func(context.Context, string, string) admin.GetHostMeasurementsApiRequest) *MonitoringAndLogsApi_GetHostMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetHostMeasurementsExecute(r admin.GetHostMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetHostMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetHostMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetHostMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetHostMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetHostMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetHostMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostMeasurementsExecute'
type MonitoringAndLogsApi_GetHostMeasurementsExecute_Call struct {
	*mock.Call
}

// GetHostMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetHostMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetHostMeasurementsExecute(r any) *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetHostMeasurementsExecute_Call{Call: _e.mock.On("GetHostMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call) Run(run func(r admin.GetHostMeasurementsApiRequest)) *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetHostMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call) RunAndReturn(run func(admin.GetHostMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetHostMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetHostMeasurementsWithParams(ctx context.Context, args *admin.GetHostMeasurementsApiParams) admin.GetHostMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetHostMeasurementsWithParams")
	}

	var r0 admin.GetHostMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetHostMeasurementsApiParams) admin.GetHostMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetHostMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostMeasurementsWithParams'
type MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetHostMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetHostMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetHostMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call{Call: _e.mock.On("GetHostMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetHostMeasurementsApiParams)) *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetHostMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call) Return(_a0 admin.GetHostMeasurementsApiRequest) *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetHostMeasurementsApiParams) admin.GetHostMeasurementsApiRequest) *MonitoringAndLogsApi_GetHostMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMetrics provides a mock function with given fields: ctx, processId, indexName, databaseName, collectionName, groupId
func (_m *MonitoringAndLogsApi) GetIndexMetrics(ctx context.Context, processId string, indexName string, databaseName string, collectionName string, groupId string) admin.GetIndexMetricsApiRequest {
	ret := _m.Called(ctx, processId, indexName, databaseName, collectionName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMetrics")
	}

	var r0 admin.GetIndexMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.GetIndexMetricsApiRequest); ok {
		r0 = rf(ctx, processId, indexName, databaseName, collectionName, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetIndexMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetIndexMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMetrics'
type MonitoringAndLogsApi_GetIndexMetrics_Call struct {
	*mock.Call
}

// GetIndexMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - indexName string
//   - databaseName string
//   - collectionName string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMetrics(ctx any, processId any, indexName any, databaseName any, collectionName any, groupId any) *MonitoringAndLogsApi_GetIndexMetrics_Call {
	return &MonitoringAndLogsApi_GetIndexMetrics_Call{Call: _e.mock.On("GetIndexMetrics", ctx, processId, indexName, databaseName, collectionName, groupId)}
}

func (_c *MonitoringAndLogsApi_GetIndexMetrics_Call) Run(run func(ctx context.Context, processId string, indexName string, databaseName string, collectionName string, groupId string)) *MonitoringAndLogsApi_GetIndexMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetrics_Call) Return(_a0 admin.GetIndexMetricsApiRequest) *MonitoringAndLogsApi_GetIndexMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetrics_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.GetIndexMetricsApiRequest) *MonitoringAndLogsApi_GetIndexMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMetricsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetIndexMetricsExecute(r admin.GetIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMetricsExecute")
	}

	var r0 *admin.MeasurementsIndexes
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetIndexMetricsApiRequest) *admin.MeasurementsIndexes); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsIndexes)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetIndexMetricsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetIndexMetricsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetIndexMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMetricsExecute'
type MonitoringAndLogsApi_GetIndexMetricsExecute_Call struct {
	*mock.Call
}

// GetIndexMetricsExecute is a helper method to define mock.On call
//   - r admin.GetIndexMetricsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMetricsExecute(r any) *MonitoringAndLogsApi_GetIndexMetricsExecute_Call {
	return &MonitoringAndLogsApi_GetIndexMetricsExecute_Call{Call: _e.mock.On("GetIndexMetricsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsExecute_Call) Run(run func(r admin.GetIndexMetricsApiRequest)) *MonitoringAndLogsApi_GetIndexMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetIndexMetricsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsExecute_Call) Return(_a0 *admin.MeasurementsIndexes, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetIndexMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsExecute_Call) RunAndReturn(run func(admin.GetIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)) *MonitoringAndLogsApi_GetIndexMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMetricsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetIndexMetricsWithParams(ctx context.Context, args *admin.GetIndexMetricsApiParams) admin.GetIndexMetricsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMetricsWithParams")
	}

	var r0 admin.GetIndexMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetIndexMetricsApiParams) admin.GetIndexMetricsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetIndexMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetIndexMetricsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMetricsWithParams'
type MonitoringAndLogsApi_GetIndexMetricsWithParams_Call struct {
	*mock.Call
}

// GetIndexMetricsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetIndexMetricsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMetricsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call {
	return &MonitoringAndLogsApi_GetIndexMetricsWithParams_Call{Call: _e.mock.On("GetIndexMetricsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetIndexMetricsApiParams)) *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetIndexMetricsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call) Return(_a0 admin.GetIndexMetricsApiRequest) *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetIndexMetricsApiParams) admin.GetIndexMetricsApiRequest) *MonitoringAndLogsApi_GetIndexMetricsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeasurements provides a mock function with given fields: ctx, processId, groupId
func (_m *MonitoringAndLogsApi) GetMeasurements(ctx context.Context, processId string, groupId string) admin.GetMeasurementsApiRequest {
	ret := _m.Called(ctx, processId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetMeasurements")
	}

	var r0 admin.GetMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetMeasurementsApiRequest); ok {
		r0 = rf(ctx, processId, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeasurements'
type MonitoringAndLogsApi_GetMeasurements_Call struct {
	*mock.Call
}

// GetMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) GetMeasurements(ctx any, processId any, groupId any) *MonitoringAndLogsApi_GetMeasurements_Call {
	return &MonitoringAndLogsApi_GetMeasurements_Call{Call: _e.mock.On("GetMeasurements", ctx, processId, groupId)}
}

func (_c *MonitoringAndLogsApi_GetMeasurements_Call) Run(run func(ctx context.Context, processId string, groupId string)) *MonitoringAndLogsApi_GetMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurements_Call) Return(_a0 admin.GetMeasurementsApiRequest) *MonitoringAndLogsApi_GetMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurements_Call) RunAndReturn(run func(context.Context, string, string) admin.GetMeasurementsApiRequest) *MonitoringAndLogsApi_GetMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetMeasurementsExecute(r admin.GetMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetMeasurementsExecute")
	}

	var r0 *admin.MeasurementsNonIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetMeasurementsApiRequest) *admin.MeasurementsNonIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsNonIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeasurementsExecute'
type MonitoringAndLogsApi_GetMeasurementsExecute_Call struct {
	*mock.Call
}

// GetMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetMeasurementsExecute(r any) *MonitoringAndLogsApi_GetMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetMeasurementsExecute_Call{Call: _e.mock.On("GetMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetMeasurementsExecute_Call) Run(run func(r admin.GetMeasurementsApiRequest)) *MonitoringAndLogsApi_GetMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsNonIndex, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurementsExecute_Call) RunAndReturn(run func(admin.GetMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error)) *MonitoringAndLogsApi_GetMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetMeasurementsWithParams(ctx context.Context, args *admin.GetMeasurementsApiParams) admin.GetMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetMeasurementsWithParams")
	}

	var r0 admin.GetMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetMeasurementsApiParams) admin.GetMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeasurementsWithParams'
type MonitoringAndLogsApi_GetMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetMeasurementsWithParams_Call{Call: _e.mock.On("GetMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetMeasurementsApiParams)) *MonitoringAndLogsApi_GetMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurementsWithParams_Call) Return(_a0 admin.GetMeasurementsApiRequest) *MonitoringAndLogsApi_GetMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetMeasurementsApiParams) admin.GetMeasurementsApiRequest) *MonitoringAndLogsApi_GetMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasProcesses provides a mock function with given fields: ctx, groupId
func (_m *MonitoringAndLogsApi) ListAtlasProcesses(ctx context.Context, groupId string) admin.ListAtlasProcessesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasProcesses")
	}

	var r0 admin.ListAtlasProcessesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListAtlasProcessesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListAtlasProcessesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListAtlasProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasProcesses'
type MonitoringAndLogsApi_ListAtlasProcesses_Call struct {
	*mock.Call
}

// ListAtlasProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListAtlasProcesses(ctx any, groupId any) *MonitoringAndLogsApi_ListAtlasProcesses_Call {
	return &MonitoringAndLogsApi_ListAtlasProcesses_Call{Call: _e.mock.On("ListAtlasProcesses", ctx, groupId)}
}

func (_c *MonitoringAndLogsApi_ListAtlasProcesses_Call) Run(run func(ctx context.Context, groupId string)) *MonitoringAndLogsApi_ListAtlasProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcesses_Call) Return(_a0 admin.ListAtlasProcessesApiRequest) *MonitoringAndLogsApi_ListAtlasProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcesses_Call) RunAndReturn(run func(context.Context, string) admin.ListAtlasProcessesApiRequest) *MonitoringAndLogsApi_ListAtlasProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasProcessesExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListAtlasProcessesExecute(r admin.ListAtlasProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasProcessesExecute")
	}

	var r0 *admin.PaginatedHostViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAtlasProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAtlasProcessesApiRequest) *admin.PaginatedHostViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedHostViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAtlasProcessesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAtlasProcessesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListAtlasProcessesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasProcessesExecute'
type MonitoringAndLogsApi_ListAtlasProcessesExecute_Call struct {
	*mock.Call
}

// ListAtlasProcessesExecute is a helper method to define mock.On call
//   - r admin.ListAtlasProcessesApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListAtlasProcessesExecute(r any) *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call {
	return &MonitoringAndLogsApi_ListAtlasProcessesExecute_Call{Call: _e.mock.On("ListAtlasProcessesExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call) Run(run func(r admin.ListAtlasProcessesApiRequest)) *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAtlasProcessesApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call) Return(_a0 *admin.PaginatedHostViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call) RunAndReturn(run func(admin.ListAtlasProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_ListAtlasProcessesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasProcessesWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListAtlasProcessesWithParams(ctx context.Context, args *admin.ListAtlasProcessesApiParams) admin.ListAtlasProcessesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasProcessesWithParams")
	}

	var r0 admin.ListAtlasProcessesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAtlasProcessesApiParams) admin.ListAtlasProcessesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAtlasProcessesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasProcessesWithParams'
type MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call struct {
	*mock.Call
}

// ListAtlasProcessesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAtlasProcessesApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListAtlasProcessesWithParams(ctx any, args any) *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call {
	return &MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call{Call: _e.mock.On("ListAtlasProcessesWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAtlasProcessesApiParams)) *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAtlasProcessesApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call) Return(_a0 admin.ListAtlasProcessesApiRequest) *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAtlasProcessesApiParams) admin.ListAtlasProcessesApiRequest) *MonitoringAndLogsApi_ListAtlasProcessesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) ListDatabases(ctx context.Context, groupId string, processId string) admin.ListDatabasesApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 admin.ListDatabasesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDatabasesApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListDatabasesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MonitoringAndLogsApi_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) ListDatabases(ctx any, groupId any, processId any) *MonitoringAndLogsApi_ListDatabases_Call {
	return &MonitoringAndLogsApi_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) Return(_a0 admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabasesExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListDatabasesExecute(r admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabasesExecute")
	}

	var r0 *admin.PaginatedDatabase
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDatabasesApiRequest) *admin.PaginatedDatabase); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDatabasesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDatabasesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListDatabasesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabasesExecute'
type MonitoringAndLogsApi_ListDatabasesExecute_Call struct {
	*mock.Call
}

// ListDatabasesExecute is a helper method to define mock.On call
//   - r admin.ListDatabasesApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListDatabasesExecute(r any) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	return &MonitoringAndLogsApi_ListDatabasesExecute_Call{Call: _e.mock.On("ListDatabasesExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) Run(run func(r admin.ListDatabasesApiRequest)) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDatabasesApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) Return(_a0 *admin.PaginatedDatabase, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) RunAndReturn(run func(admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error)) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabasesWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListDatabasesWithParams(ctx context.Context, args *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabasesWithParams")
	}

	var r0 admin.ListDatabasesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDatabasesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDatabasesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabasesWithParams'
type MonitoringAndLogsApi_ListDatabasesWithParams_Call struct {
	*mock.Call
}

// ListDatabasesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDatabasesApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListDatabasesWithParams(ctx any, args any) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	return &MonitoringAndLogsApi_ListDatabasesWithParams_Call{Call: _e.mock.On("ListDatabasesWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDatabasesApiParams)) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDatabasesApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) Return(_a0 admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskMeasurements provides a mock function with given fields: ctx, partitionName, groupId, processId
func (_m *MonitoringAndLogsApi) ListDiskMeasurements(ctx context.Context, partitionName string, groupId string, processId string) admin.ListDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, partitionName, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskMeasurements")
	}

	var r0 admin.ListDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.ListDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, partitionName, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDiskMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskMeasurements'
type MonitoringAndLogsApi_ListDiskMeasurements_Call struct {
	*mock.Call
}

// ListDiskMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionName string
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) ListDiskMeasurements(ctx any, partitionName any, groupId any, processId any) *MonitoringAndLogsApi_ListDiskMeasurements_Call {
	return &MonitoringAndLogsApi_ListDiskMeasurements_Call{Call: _e.mock.On("ListDiskMeasurements", ctx, partitionName, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurements_Call) Run(run func(ctx context.Context, partitionName string, groupId string, processId string)) *MonitoringAndLogsApi_ListDiskMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurements_Call) Return(_a0 admin.ListDiskMeasurementsApiRequest) *MonitoringAndLogsApi_ListDiskMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string) admin.ListDiskMeasurementsApiRequest) *MonitoringAndLogsApi_ListDiskMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListDiskMeasurementsExecute(r admin.ListDiskMeasurementsApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskMeasurementsExecute")
	}

	var r0 *admin.MeasurementDiskPartition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDiskMeasurementsApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDiskMeasurementsApiRequest) *admin.MeasurementDiskPartition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementDiskPartition)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDiskMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDiskMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskMeasurementsExecute'
type MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call struct {
	*mock.Call
}

// ListDiskMeasurementsExecute is a helper method to define mock.On call
//   - r admin.ListDiskMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListDiskMeasurementsExecute(r any) *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call{Call: _e.mock.On("ListDiskMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call) Run(run func(r admin.ListDiskMeasurementsApiRequest)) *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDiskMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call) Return(_a0 *admin.MeasurementDiskPartition, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call) RunAndReturn(run func(admin.ListDiskMeasurementsApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error)) *MonitoringAndLogsApi_ListDiskMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListDiskMeasurementsWithParams(ctx context.Context, args *admin.ListDiskMeasurementsApiParams) admin.ListDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskMeasurementsWithParams")
	}

	var r0 admin.ListDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDiskMeasurementsApiParams) admin.ListDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskMeasurementsWithParams'
type MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call struct {
	*mock.Call
}

// ListDiskMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDiskMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListDiskMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call{Call: _e.mock.On("ListDiskMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDiskMeasurementsApiParams)) *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDiskMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call) Return(_a0 admin.ListDiskMeasurementsApiRequest) *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDiskMeasurementsApiParams) admin.ListDiskMeasurementsApiRequest) *MonitoringAndLogsApi_ListDiskMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskPartitions provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) ListDiskPartitions(ctx context.Context, groupId string, processId string) admin.ListDiskPartitionsApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskPartitions")
	}

	var r0 admin.ListDiskPartitionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDiskPartitionsApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListDiskPartitionsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDiskPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskPartitions'
type MonitoringAndLogsApi_ListDiskPartitions_Call struct {
	*mock.Call
}

// ListDiskPartitions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) ListDiskPartitions(ctx any, groupId any, processId any) *MonitoringAndLogsApi_ListDiskPartitions_Call {
	return &MonitoringAndLogsApi_ListDiskPartitions_Call{Call: _e.mock.On("ListDiskPartitions", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_ListDiskPartitions_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_ListDiskPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitions_Call) Return(_a0 admin.ListDiskPartitionsApiRequest) *MonitoringAndLogsApi_ListDiskPartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitions_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDiskPartitionsApiRequest) *MonitoringAndLogsApi_ListDiskPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskPartitionsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListDiskPartitionsExecute(r admin.ListDiskPartitionsApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskPartitionsExecute")
	}

	var r0 *admin.PaginatedDiskPartition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDiskPartitionsApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDiskPartitionsApiRequest) *admin.PaginatedDiskPartition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedDiskPartition)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDiskPartitionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDiskPartitionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListDiskPartitionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskPartitionsExecute'
type MonitoringAndLogsApi_ListDiskPartitionsExecute_Call struct {
	*mock.Call
}

// ListDiskPartitionsExecute is a helper method to define mock.On call
//   - r admin.ListDiskPartitionsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListDiskPartitionsExecute(r any) *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call {
	return &MonitoringAndLogsApi_ListDiskPartitionsExecute_Call{Call: _e.mock.On("ListDiskPartitionsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call) Run(run func(r admin.ListDiskPartitionsApiRequest)) *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDiskPartitionsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call) Return(_a0 *admin.PaginatedDiskPartition, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call) RunAndReturn(run func(admin.ListDiskPartitionsApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error)) *MonitoringAndLogsApi_ListDiskPartitionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiskPartitionsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListDiskPartitionsWithParams(ctx context.Context, args *admin.ListDiskPartitionsApiParams) admin.ListDiskPartitionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDiskPartitionsWithParams")
	}

	var r0 admin.ListDiskPartitionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDiskPartitionsApiParams) admin.ListDiskPartitionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDiskPartitionsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiskPartitionsWithParams'
type MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call struct {
	*mock.Call
}

// ListDiskPartitionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDiskPartitionsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListDiskPartitionsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call {
	return &MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call{Call: _e.mock.On("ListDiskPartitionsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDiskPartitionsApiParams)) *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDiskPartitionsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call) Return(_a0 admin.ListDiskPartitionsApiRequest) *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDiskPartitionsApiParams) admin.ListDiskPartitionsApiRequest) *MonitoringAndLogsApi_ListDiskPartitionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMetrics provides a mock function with given fields: ctx, processId, databaseName, collectionName, groupId
func (_m *MonitoringAndLogsApi) ListIndexMetrics(ctx context.Context, processId string, databaseName string, collectionName string, groupId string) admin.ListIndexMetricsApiRequest {
	ret := _m.Called(ctx, processId, databaseName, collectionName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMetrics")
	}

	var r0 admin.ListIndexMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListIndexMetricsApiRequest); ok {
		r0 = rf(ctx, processId, databaseName, collectionName, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListIndexMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListIndexMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMetrics'
type MonitoringAndLogsApi_ListIndexMetrics_Call struct {
	*mock.Call
}

// ListIndexMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - databaseName string
//   - collectionName string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMetrics(ctx any, processId any, databaseName any, collectionName any, groupId any) *MonitoringAndLogsApi_ListIndexMetrics_Call {
	return &MonitoringAndLogsApi_ListIndexMetrics_Call{Call: _e.mock.On("ListIndexMetrics", ctx, processId, databaseName, collectionName, groupId)}
}

func (_c *MonitoringAndLogsApi_ListIndexMetrics_Call) Run(run func(ctx context.Context, processId string, databaseName string, collectionName string, groupId string)) *MonitoringAndLogsApi_ListIndexMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetrics_Call) Return(_a0 admin.ListIndexMetricsApiRequest) *MonitoringAndLogsApi_ListIndexMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetrics_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListIndexMetricsApiRequest) *MonitoringAndLogsApi_ListIndexMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMetricsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListIndexMetricsExecute(r admin.ListIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMetricsExecute")
	}

	var r0 *admin.MeasurementsIndexes
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListIndexMetricsApiRequest) *admin.MeasurementsIndexes); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsIndexes)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListIndexMetricsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListIndexMetricsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListIndexMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMetricsExecute'
type MonitoringAndLogsApi_ListIndexMetricsExecute_Call struct {
	*mock.Call
}

// ListIndexMetricsExecute is a helper method to define mock.On call
//   - r admin.ListIndexMetricsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMetricsExecute(r any) *MonitoringAndLogsApi_ListIndexMetricsExecute_Call {
	return &MonitoringAndLogsApi_ListIndexMetricsExecute_Call{Call: _e.mock.On("ListIndexMetricsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsExecute_Call) Run(run func(r admin.ListIndexMetricsApiRequest)) *MonitoringAndLogsApi_ListIndexMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListIndexMetricsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsExecute_Call) Return(_a0 *admin.MeasurementsIndexes, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListIndexMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsExecute_Call) RunAndReturn(run func(admin.ListIndexMetricsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)) *MonitoringAndLogsApi_ListIndexMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMetricsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListIndexMetricsWithParams(ctx context.Context, args *admin.ListIndexMetricsApiParams) admin.ListIndexMetricsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMetricsWithParams")
	}

	var r0 admin.ListIndexMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListIndexMetricsApiParams) admin.ListIndexMetricsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListIndexMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListIndexMetricsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMetricsWithParams'
type MonitoringAndLogsApi_ListIndexMetricsWithParams_Call struct {
	*mock.Call
}

// ListIndexMetricsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListIndexMetricsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMetricsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call {
	return &MonitoringAndLogsApi_ListIndexMetricsWithParams_Call{Call: _e.mock.On("ListIndexMetricsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListIndexMetricsApiParams)) *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListIndexMetricsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call) Return(_a0 admin.ListIndexMetricsApiRequest) *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListIndexMetricsApiParams) admin.ListIndexMetricsApiRequest) *MonitoringAndLogsApi_ListIndexMetricsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricTypes provides a mock function with given fields: ctx, processId, groupId
func (_m *MonitoringAndLogsApi) ListMetricTypes(ctx context.Context, processId string, groupId string) admin.ListMetricTypesApiRequest {
	ret := _m.Called(ctx, processId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricTypes")
	}

	var r0 admin.ListMetricTypesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListMetricTypesApiRequest); ok {
		r0 = rf(ctx, processId, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListMetricTypesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListMetricTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricTypes'
type MonitoringAndLogsApi_ListMetricTypes_Call struct {
	*mock.Call
}

// ListMetricTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListMetricTypes(ctx any, processId any, groupId any) *MonitoringAndLogsApi_ListMetricTypes_Call {
	return &MonitoringAndLogsApi_ListMetricTypes_Call{Call: _e.mock.On("ListMetricTypes", ctx, processId, groupId)}
}

func (_c *MonitoringAndLogsApi_ListMetricTypes_Call) Run(run func(ctx context.Context, processId string, groupId string)) *MonitoringAndLogsApi_ListMetricTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypes_Call) Return(_a0 admin.ListMetricTypesApiRequest) *MonitoringAndLogsApi_ListMetricTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypes_Call) RunAndReturn(run func(context.Context, string, string) admin.ListMetricTypesApiRequest) *MonitoringAndLogsApi_ListMetricTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricTypesExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListMetricTypesExecute(r admin.ListMetricTypesApiRequest) (*admin.CloudSearchMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricTypesExecute")
	}

	var r0 *admin.CloudSearchMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListMetricTypesApiRequest) (*admin.CloudSearchMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListMetricTypesApiRequest) *admin.CloudSearchMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudSearchMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListMetricTypesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListMetricTypesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListMetricTypesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricTypesExecute'
type MonitoringAndLogsApi_ListMetricTypesExecute_Call struct {
	*mock.Call
}

// ListMetricTypesExecute is a helper method to define mock.On call
//   - r admin.ListMetricTypesApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListMetricTypesExecute(r any) *MonitoringAndLogsApi_ListMetricTypesExecute_Call {
	return &MonitoringAndLogsApi_ListMetricTypesExecute_Call{Call: _e.mock.On("ListMetricTypesExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListMetricTypesExecute_Call) Run(run func(r admin.ListMetricTypesApiRequest)) *MonitoringAndLogsApi_ListMetricTypesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListMetricTypesApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypesExecute_Call) Return(_a0 *admin.CloudSearchMetrics, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListMetricTypesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypesExecute_Call) RunAndReturn(run func(admin.ListMetricTypesApiRequest) (*admin.CloudSearchMetrics, *http.Response, error)) *MonitoringAndLogsApi_ListMetricTypesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricTypesWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListMetricTypesWithParams(ctx context.Context, args *admin.ListMetricTypesApiParams) admin.ListMetricTypesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricTypesWithParams")
	}

	var r0 admin.ListMetricTypesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMetricTypesApiParams) admin.ListMetricTypesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListMetricTypesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListMetricTypesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricTypesWithParams'
type MonitoringAndLogsApi_ListMetricTypesWithParams_Call struct {
	*mock.Call
}

// ListMetricTypesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListMetricTypesApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListMetricTypesWithParams(ctx any, args any) *MonitoringAndLogsApi_ListMetricTypesWithParams_Call {
	return &MonitoringAndLogsApi_ListMetricTypesWithParams_Call{Call: _e.mock.On("ListMetricTypesWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListMetricTypesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListMetricTypesApiParams)) *MonitoringAndLogsApi_ListMetricTypesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListMetricTypesApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypesWithParams_Call) Return(_a0 admin.ListMetricTypesApiRequest) *MonitoringAndLogsApi_ListMetricTypesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMetricTypesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListMetricTypesApiParams) admin.ListMetricTypesApiRequest) *MonitoringAndLogsApi_ListMetricTypesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitoringAndLogsApi creates a new instance of MonitoringAndLogsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitoringAndLogsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitoringAndLogsApi {
	mock := &MonitoringAndLogsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
