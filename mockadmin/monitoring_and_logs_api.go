// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MonitoringAndLogsApi is an autogenerated mock type for the MonitoringAndLogsApi type
type MonitoringAndLogsApi struct {
	mock.Mock
}

type MonitoringAndLogsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitoringAndLogsApi) EXPECT() *MonitoringAndLogsApi_Expecter {
	return &MonitoringAndLogsApi_Expecter{mock: &_m.Mock}
}

// DownloadClusterLog provides a mock function with given fields: ctx, groupId, hostName, logName
func (_m *MonitoringAndLogsApi) DownloadClusterLog(ctx context.Context, groupId string, hostName string, logName string) admin.DownloadClusterLogApiRequest {
	ret := _m.Called(ctx, groupId, hostName, logName)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterLog")
	}

	var r0 admin.DownloadClusterLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DownloadClusterLogApiRequest); ok {
		r0 = rf(ctx, groupId, hostName, logName)
	} else {
		r0 = ret.Get(0).(admin.DownloadClusterLogApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_DownloadClusterLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterLog'
type MonitoringAndLogsApi_DownloadClusterLog_Call struct {
	*mock.Call
}

// DownloadClusterLog is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - hostName string
//   - logName string
func (_e *MonitoringAndLogsApi_Expecter) DownloadClusterLog(ctx any, groupId any, hostName any, logName any) *MonitoringAndLogsApi_DownloadClusterLog_Call {
	return &MonitoringAndLogsApi_DownloadClusterLog_Call{Call: _e.mock.On("DownloadClusterLog", ctx, groupId, hostName, logName)}
}

func (_c *MonitoringAndLogsApi_DownloadClusterLog_Call) Run(run func(ctx context.Context, groupId string, hostName string, logName string)) *MonitoringAndLogsApi_DownloadClusterLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLog_Call) Return(_a0 admin.DownloadClusterLogApiRequest) *MonitoringAndLogsApi_DownloadClusterLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLog_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DownloadClusterLogApiRequest) *MonitoringAndLogsApi_DownloadClusterLog_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadClusterLogExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) DownloadClusterLogExecute(r admin.DownloadClusterLogApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterLogExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadClusterLogApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadClusterLogApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadClusterLogApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadClusterLogApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_DownloadClusterLogExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterLogExecute'
type MonitoringAndLogsApi_DownloadClusterLogExecute_Call struct {
	*mock.Call
}

// DownloadClusterLogExecute is a helper method to define mock.On call
//   - r admin.DownloadClusterLogApiRequest
func (_e *MonitoringAndLogsApi_Expecter) DownloadClusterLogExecute(r any) *MonitoringAndLogsApi_DownloadClusterLogExecute_Call {
	return &MonitoringAndLogsApi_DownloadClusterLogExecute_Call{Call: _e.mock.On("DownloadClusterLogExecute", r)}
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogExecute_Call) Run(run func(r admin.DownloadClusterLogApiRequest)) *MonitoringAndLogsApi_DownloadClusterLogExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadClusterLogApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_DownloadClusterLogExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogExecute_Call) RunAndReturn(run func(admin.DownloadClusterLogApiRequest) (io.ReadCloser, *http.Response, error)) *MonitoringAndLogsApi_DownloadClusterLogExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadClusterLogWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) DownloadClusterLogWithParams(ctx context.Context, args *admin.DownloadClusterLogApiParams) admin.DownloadClusterLogApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterLogWithParams")
	}

	var r0 admin.DownloadClusterLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadClusterLogApiParams) admin.DownloadClusterLogApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadClusterLogApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_DownloadClusterLogWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterLogWithParams'
type MonitoringAndLogsApi_DownloadClusterLogWithParams_Call struct {
	*mock.Call
}

// DownloadClusterLogWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadClusterLogApiParams
func (_e *MonitoringAndLogsApi_Expecter) DownloadClusterLogWithParams(ctx any, args any) *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call {
	return &MonitoringAndLogsApi_DownloadClusterLogWithParams_Call{Call: _e.mock.On("DownloadClusterLogWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadClusterLogApiParams)) *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadClusterLogApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call) Return(_a0 admin.DownloadClusterLogApiRequest) *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadClusterLogApiParams) admin.DownloadClusterLogApiRequest) *MonitoringAndLogsApi_DownloadClusterLogWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabase provides a mock function with given fields: ctx, groupId, databaseName, processId
func (_m *MonitoringAndLogsApi) GetDatabase(ctx context.Context, groupId string, databaseName string, processId string) admin.GetDatabaseApiRequest {
	ret := _m.Called(ctx, groupId, databaseName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 admin.GetDatabaseApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDatabaseApiRequest); ok {
		r0 = rf(ctx, groupId, databaseName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabase'
type MonitoringAndLogsApi_GetDatabase_Call struct {
	*mock.Call
}

// GetDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - databaseName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetDatabase(ctx any, groupId any, databaseName any, processId any) *MonitoringAndLogsApi_GetDatabase_Call {
	return &MonitoringAndLogsApi_GetDatabase_Call{Call: _e.mock.On("GetDatabase", ctx, groupId, databaseName, processId)}
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) Run(run func(ctx context.Context, groupId string, databaseName string, processId string)) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) Return(_a0 admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabase_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetDatabaseExecute(r admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseExecute")
	}

	var r0 *admin.MesurementsDatabase
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseApiRequest) *admin.MesurementsDatabase); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MesurementsDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDatabaseApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDatabaseApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetDatabaseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseExecute'
type MonitoringAndLogsApi_GetDatabaseExecute_Call struct {
	*mock.Call
}

// GetDatabaseExecute is a helper method to define mock.On call
//   - r admin.GetDatabaseApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseExecute(r any) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	return &MonitoringAndLogsApi_GetDatabaseExecute_Call{Call: _e.mock.On("GetDatabaseExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) Run(run func(r admin.GetDatabaseApiRequest)) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDatabaseApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) Return(_a0 *admin.MesurementsDatabase, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseExecute_Call) RunAndReturn(run func(admin.GetDatabaseApiRequest) (*admin.MesurementsDatabase, *http.Response, error)) *MonitoringAndLogsApi_GetDatabaseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurements provides a mock function with given fields: ctx, groupId, databaseName, processId
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurements(ctx context.Context, groupId string, databaseName string, processId string) admin.GetDatabaseMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, databaseName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurements")
	}

	var r0 admin.GetDatabaseMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDatabaseMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, databaseName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurements'
type MonitoringAndLogsApi_GetDatabaseMeasurements_Call struct {
	*mock.Call
}

// GetDatabaseMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - databaseName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurements(ctx any, groupId any, databaseName any, processId any) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurements_Call{Call: _e.mock.On("GetDatabaseMeasurements", ctx, groupId, databaseName, processId)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) Run(run func(ctx context.Context, groupId string, databaseName string, processId string)) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) Return(_a0 admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurementsExecute(r admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDatabaseMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDatabaseMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDatabaseMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurementsExecute'
type MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call struct {
	*mock.Call
}

// GetDatabaseMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetDatabaseMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurementsExecute(r any) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call{Call: _e.mock.On("GetDatabaseMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) Run(run func(r admin.GetDatabaseMeasurementsApiRequest)) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDatabaseMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call) RunAndReturn(run func(admin.GetDatabaseMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetDatabaseMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetDatabaseMeasurementsWithParams(ctx context.Context, args *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseMeasurementsWithParams")
	}

	var r0 admin.GetDatabaseMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseMeasurementsWithParams'
type MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetDatabaseMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDatabaseMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call{Call: _e.mock.On("GetDatabaseMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDatabaseMeasurementsApiParams)) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDatabaseMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) Return(_a0 admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDatabaseMeasurementsApiParams) admin.GetDatabaseMeasurementsApiRequest) *MonitoringAndLogsApi_GetDatabaseMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetDatabaseWithParams(ctx context.Context, args *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseWithParams")
	}

	var r0 admin.GetDatabaseApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDatabaseApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetDatabaseWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseWithParams'
type MonitoringAndLogsApi_GetDatabaseWithParams_Call struct {
	*mock.Call
}

// GetDatabaseWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDatabaseApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetDatabaseWithParams(ctx any, args any) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	return &MonitoringAndLogsApi_GetDatabaseWithParams_Call{Call: _e.mock.On("GetDatabaseWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDatabaseApiParams)) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDatabaseApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) Return(_a0 admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetDatabaseWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDatabaseApiParams) admin.GetDatabaseApiRequest) *MonitoringAndLogsApi_GetDatabaseWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupProcess provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) GetGroupProcess(ctx context.Context, groupId string, processId string) admin.GetGroupProcessApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProcess")
	}

	var r0 admin.GetGroupProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupProcessApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupProcessApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetGroupProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupProcess'
type MonitoringAndLogsApi_GetGroupProcess_Call struct {
	*mock.Call
}

// GetGroupProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetGroupProcess(ctx any, groupId any, processId any) *MonitoringAndLogsApi_GetGroupProcess_Call {
	return &MonitoringAndLogsApi_GetGroupProcess_Call{Call: _e.mock.On("GetGroupProcess", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_GetGroupProcess_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_GetGroupProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcess_Call) Return(_a0 admin.GetGroupProcessApiRequest) *MonitoringAndLogsApi_GetGroupProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcess_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupProcessApiRequest) *MonitoringAndLogsApi_GetGroupProcess_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupProcessExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetGroupProcessExecute(r admin.GetGroupProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProcessExecute")
	}

	var r0 *admin.ApiHostViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupProcessApiRequest) *admin.ApiHostViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiHostViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupProcessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupProcessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetGroupProcessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupProcessExecute'
type MonitoringAndLogsApi_GetGroupProcessExecute_Call struct {
	*mock.Call
}

// GetGroupProcessExecute is a helper method to define mock.On call
//   - r admin.GetGroupProcessApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetGroupProcessExecute(r any) *MonitoringAndLogsApi_GetGroupProcessExecute_Call {
	return &MonitoringAndLogsApi_GetGroupProcessExecute_Call{Call: _e.mock.On("GetGroupProcessExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetGroupProcessExecute_Call) Run(run func(r admin.GetGroupProcessApiRequest)) *MonitoringAndLogsApi_GetGroupProcessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupProcessApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcessExecute_Call) Return(_a0 *admin.ApiHostViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetGroupProcessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcessExecute_Call) RunAndReturn(run func(admin.GetGroupProcessApiRequest) (*admin.ApiHostViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetGroupProcessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupProcessWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetGroupProcessWithParams(ctx context.Context, args *admin.GetGroupProcessApiParams) admin.GetGroupProcessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProcessWithParams")
	}

	var r0 admin.GetGroupProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupProcessApiParams) admin.GetGroupProcessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupProcessApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetGroupProcessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupProcessWithParams'
type MonitoringAndLogsApi_GetGroupProcessWithParams_Call struct {
	*mock.Call
}

// GetGroupProcessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupProcessApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetGroupProcessWithParams(ctx any, args any) *MonitoringAndLogsApi_GetGroupProcessWithParams_Call {
	return &MonitoringAndLogsApi_GetGroupProcessWithParams_Call{Call: _e.mock.On("GetGroupProcessWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetGroupProcessWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupProcessApiParams)) *MonitoringAndLogsApi_GetGroupProcessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupProcessApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcessWithParams_Call) Return(_a0 admin.GetGroupProcessApiRequest) *MonitoringAndLogsApi_GetGroupProcessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetGroupProcessWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupProcessApiParams) admin.GetGroupProcessApiRequest) *MonitoringAndLogsApi_GetGroupProcessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMeasurements provides a mock function with given fields: ctx, processId, indexName, databaseName, collectionName, groupId
func (_m *MonitoringAndLogsApi) GetIndexMeasurements(ctx context.Context, processId string, indexName string, databaseName string, collectionName string, groupId string) admin.GetIndexMeasurementsApiRequest {
	ret := _m.Called(ctx, processId, indexName, databaseName, collectionName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMeasurements")
	}

	var r0 admin.GetIndexMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.GetIndexMeasurementsApiRequest); ok {
		r0 = rf(ctx, processId, indexName, databaseName, collectionName, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetIndexMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetIndexMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMeasurements'
type MonitoringAndLogsApi_GetIndexMeasurements_Call struct {
	*mock.Call
}

// GetIndexMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - indexName string
//   - databaseName string
//   - collectionName string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMeasurements(ctx any, processId any, indexName any, databaseName any, collectionName any, groupId any) *MonitoringAndLogsApi_GetIndexMeasurements_Call {
	return &MonitoringAndLogsApi_GetIndexMeasurements_Call{Call: _e.mock.On("GetIndexMeasurements", ctx, processId, indexName, databaseName, collectionName, groupId)}
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurements_Call) Run(run func(ctx context.Context, processId string, indexName string, databaseName string, collectionName string, groupId string)) *MonitoringAndLogsApi_GetIndexMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurements_Call) Return(_a0 admin.GetIndexMeasurementsApiRequest) *MonitoringAndLogsApi_GetIndexMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.GetIndexMeasurementsApiRequest) *MonitoringAndLogsApi_GetIndexMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetIndexMeasurementsExecute(r admin.GetIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMeasurementsExecute")
	}

	var r0 *admin.MeasurementsIndexes
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetIndexMeasurementsApiRequest) *admin.MeasurementsIndexes); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsIndexes)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetIndexMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetIndexMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMeasurementsExecute'
type MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call struct {
	*mock.Call
}

// GetIndexMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetIndexMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMeasurementsExecute(r any) *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call{Call: _e.mock.On("GetIndexMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call) Run(run func(r admin.GetIndexMeasurementsApiRequest)) *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetIndexMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsIndexes, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call) RunAndReturn(run func(admin.GetIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)) *MonitoringAndLogsApi_GetIndexMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetIndexMeasurementsWithParams(ctx context.Context, args *admin.GetIndexMeasurementsApiParams) admin.GetIndexMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexMeasurementsWithParams")
	}

	var r0 admin.GetIndexMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetIndexMeasurementsApiParams) admin.GetIndexMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetIndexMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexMeasurementsWithParams'
type MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetIndexMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetIndexMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetIndexMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call{Call: _e.mock.On("GetIndexMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetIndexMeasurementsApiParams)) *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetIndexMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call) Return(_a0 admin.GetIndexMeasurementsApiRequest) *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetIndexMeasurementsApiParams) admin.GetIndexMeasurementsApiRequest) *MonitoringAndLogsApi_GetIndexMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDisk provides a mock function with given fields: ctx, partitionName, groupId, processId
func (_m *MonitoringAndLogsApi) GetProcessDisk(ctx context.Context, partitionName string, groupId string, processId string) admin.GetProcessDiskApiRequest {
	ret := _m.Called(ctx, partitionName, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDisk")
	}

	var r0 admin.GetProcessDiskApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetProcessDiskApiRequest); ok {
		r0 = rf(ctx, partitionName, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetProcessDiskApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDisk'
type MonitoringAndLogsApi_GetProcessDisk_Call struct {
	*mock.Call
}

// GetProcessDisk is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionName string
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDisk(ctx any, partitionName any, groupId any, processId any) *MonitoringAndLogsApi_GetProcessDisk_Call {
	return &MonitoringAndLogsApi_GetProcessDisk_Call{Call: _e.mock.On("GetProcessDisk", ctx, partitionName, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_GetProcessDisk_Call) Run(run func(ctx context.Context, partitionName string, groupId string, processId string)) *MonitoringAndLogsApi_GetProcessDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDisk_Call) Return(_a0 admin.GetProcessDiskApiRequest) *MonitoringAndLogsApi_GetProcessDisk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDisk_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetProcessDiskApiRequest) *MonitoringAndLogsApi_GetProcessDisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDiskExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetProcessDiskExecute(r admin.GetProcessDiskApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDiskExecute")
	}

	var r0 *admin.MeasurementDiskPartition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProcessDiskApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProcessDiskApiRequest) *admin.MeasurementDiskPartition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementDiskPartition)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProcessDiskApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProcessDiskApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetProcessDiskExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDiskExecute'
type MonitoringAndLogsApi_GetProcessDiskExecute_Call struct {
	*mock.Call
}

// GetProcessDiskExecute is a helper method to define mock.On call
//   - r admin.GetProcessDiskApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDiskExecute(r any) *MonitoringAndLogsApi_GetProcessDiskExecute_Call {
	return &MonitoringAndLogsApi_GetProcessDiskExecute_Call{Call: _e.mock.On("GetProcessDiskExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetProcessDiskExecute_Call) Run(run func(r admin.GetProcessDiskApiRequest)) *MonitoringAndLogsApi_GetProcessDiskExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProcessDiskApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskExecute_Call) Return(_a0 *admin.MeasurementDiskPartition, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetProcessDiskExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskExecute_Call) RunAndReturn(run func(admin.GetProcessDiskApiRequest) (*admin.MeasurementDiskPartition, *http.Response, error)) *MonitoringAndLogsApi_GetProcessDiskExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDiskMeasurements provides a mock function with given fields: ctx, groupId, partitionName, processId
func (_m *MonitoringAndLogsApi) GetProcessDiskMeasurements(ctx context.Context, groupId string, partitionName string, processId string) admin.GetProcessDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, partitionName, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDiskMeasurements")
	}

	var r0 admin.GetProcessDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetProcessDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, partitionName, processId)
	} else {
		r0 = ret.Get(0).(admin.GetProcessDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessDiskMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDiskMeasurements'
type MonitoringAndLogsApi_GetProcessDiskMeasurements_Call struct {
	*mock.Call
}

// GetProcessDiskMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - partitionName string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDiskMeasurements(ctx any, groupId any, partitionName any, processId any) *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call {
	return &MonitoringAndLogsApi_GetProcessDiskMeasurements_Call{Call: _e.mock.On("GetProcessDiskMeasurements", ctx, groupId, partitionName, processId)}
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call) Run(run func(ctx context.Context, groupId string, partitionName string, processId string)) *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call) Return(_a0 admin.GetProcessDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetProcessDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessDiskMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDiskMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetProcessDiskMeasurementsExecute(r admin.GetProcessDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDiskMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProcessDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProcessDiskMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProcessDiskMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProcessDiskMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDiskMeasurementsExecute'
type MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call struct {
	*mock.Call
}

// GetProcessDiskMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetProcessDiskMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDiskMeasurementsExecute(r any) *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call{Call: _e.mock.On("GetProcessDiskMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call) Run(run func(r admin.GetProcessDiskMeasurementsApiRequest)) *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProcessDiskMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call) RunAndReturn(run func(admin.GetProcessDiskMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetProcessDiskMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDiskMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetProcessDiskMeasurementsWithParams(ctx context.Context, args *admin.GetProcessDiskMeasurementsApiParams) admin.GetProcessDiskMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDiskMeasurementsWithParams")
	}

	var r0 admin.GetProcessDiskMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProcessDiskMeasurementsApiParams) admin.GetProcessDiskMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProcessDiskMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDiskMeasurementsWithParams'
type MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetProcessDiskMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProcessDiskMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDiskMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call{Call: _e.mock.On("GetProcessDiskMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProcessDiskMeasurementsApiParams)) *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProcessDiskMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call) Return(_a0 admin.GetProcessDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProcessDiskMeasurementsApiParams) admin.GetProcessDiskMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessDiskMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessDiskWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetProcessDiskWithParams(ctx context.Context, args *admin.GetProcessDiskApiParams) admin.GetProcessDiskApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessDiskWithParams")
	}

	var r0 admin.GetProcessDiskApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProcessDiskApiParams) admin.GetProcessDiskApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProcessDiskApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessDiskWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessDiskWithParams'
type MonitoringAndLogsApi_GetProcessDiskWithParams_Call struct {
	*mock.Call
}

// GetProcessDiskWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProcessDiskApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetProcessDiskWithParams(ctx any, args any) *MonitoringAndLogsApi_GetProcessDiskWithParams_Call {
	return &MonitoringAndLogsApi_GetProcessDiskWithParams_Call{Call: _e.mock.On("GetProcessDiskWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetProcessDiskWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProcessDiskApiParams)) *MonitoringAndLogsApi_GetProcessDiskWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProcessDiskApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskWithParams_Call) Return(_a0 admin.GetProcessDiskApiRequest) *MonitoringAndLogsApi_GetProcessDiskWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessDiskWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProcessDiskApiParams) admin.GetProcessDiskApiRequest) *MonitoringAndLogsApi_GetProcessDiskWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessMeasurements provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) GetProcessMeasurements(ctx context.Context, groupId string, processId string) admin.GetProcessMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessMeasurements")
	}

	var r0 admin.GetProcessMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProcessMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetProcessMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessMeasurements'
type MonitoringAndLogsApi_GetProcessMeasurements_Call struct {
	*mock.Call
}

// GetProcessMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) GetProcessMeasurements(ctx any, groupId any, processId any) *MonitoringAndLogsApi_GetProcessMeasurements_Call {
	return &MonitoringAndLogsApi_GetProcessMeasurements_Call{Call: _e.mock.On("GetProcessMeasurements", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurements_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_GetProcessMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurements_Call) Return(_a0 admin.GetProcessMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurements_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProcessMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) GetProcessMeasurementsExecute(r admin.GetProcessMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessMeasurementsExecute")
	}

	var r0 *admin.ApiMeasurementsGeneralViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProcessMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProcessMeasurementsApiRequest) *admin.ApiMeasurementsGeneralViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiMeasurementsGeneralViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProcessMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProcessMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessMeasurementsExecute'
type MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call struct {
	*mock.Call
}

// GetProcessMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetProcessMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) GetProcessMeasurementsExecute(r any) *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call{Call: _e.mock.On("GetProcessMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call) Run(run func(r admin.GetProcessMeasurementsApiRequest)) *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProcessMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call) Return(_a0 *admin.ApiMeasurementsGeneralViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call) RunAndReturn(run func(admin.GetProcessMeasurementsApiRequest) (*admin.ApiMeasurementsGeneralViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_GetProcessMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) GetProcessMeasurementsWithParams(ctx context.Context, args *admin.GetProcessMeasurementsApiParams) admin.GetProcessMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessMeasurementsWithParams")
	}

	var r0 admin.GetProcessMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProcessMeasurementsApiParams) admin.GetProcessMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProcessMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessMeasurementsWithParams'
type MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetProcessMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProcessMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) GetProcessMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call{Call: _e.mock.On("GetProcessMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProcessMeasurementsApiParams)) *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProcessMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call) Return(_a0 admin.GetProcessMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProcessMeasurementsApiParams) admin.GetProcessMeasurementsApiRequest) *MonitoringAndLogsApi_GetProcessMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) ListDatabases(ctx context.Context, groupId string, processId string) admin.ListDatabasesApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 admin.ListDatabasesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDatabasesApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListDatabasesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MonitoringAndLogsApi_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) ListDatabases(ctx any, groupId any, processId any) *MonitoringAndLogsApi_ListDatabases_Call {
	return &MonitoringAndLogsApi_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) Return(_a0 admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabases_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabasesExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListDatabasesExecute(r admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabasesExecute")
	}

	var r0 *admin.PaginatedDatabase
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDatabasesApiRequest) *admin.PaginatedDatabase); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDatabasesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDatabasesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListDatabasesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabasesExecute'
type MonitoringAndLogsApi_ListDatabasesExecute_Call struct {
	*mock.Call
}

// ListDatabasesExecute is a helper method to define mock.On call
//   - r admin.ListDatabasesApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListDatabasesExecute(r any) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	return &MonitoringAndLogsApi_ListDatabasesExecute_Call{Call: _e.mock.On("ListDatabasesExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) Run(run func(r admin.ListDatabasesApiRequest)) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDatabasesApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) Return(_a0 *admin.PaginatedDatabase, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesExecute_Call) RunAndReturn(run func(admin.ListDatabasesApiRequest) (*admin.PaginatedDatabase, *http.Response, error)) *MonitoringAndLogsApi_ListDatabasesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabasesWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListDatabasesWithParams(ctx context.Context, args *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabasesWithParams")
	}

	var r0 admin.ListDatabasesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDatabasesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListDatabasesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabasesWithParams'
type MonitoringAndLogsApi_ListDatabasesWithParams_Call struct {
	*mock.Call
}

// ListDatabasesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDatabasesApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListDatabasesWithParams(ctx any, args any) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	return &MonitoringAndLogsApi_ListDatabasesWithParams_Call{Call: _e.mock.On("ListDatabasesWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDatabasesApiParams)) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDatabasesApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) Return(_a0 admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListDatabasesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDatabasesApiParams) admin.ListDatabasesApiRequest) *MonitoringAndLogsApi_ListDatabasesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProcesses provides a mock function with given fields: ctx, groupId
func (_m *MonitoringAndLogsApi) ListGroupProcesses(ctx context.Context, groupId string) admin.ListGroupProcessesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProcesses")
	}

	var r0 admin.ListGroupProcessesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupProcessesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupProcessesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListGroupProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProcesses'
type MonitoringAndLogsApi_ListGroupProcesses_Call struct {
	*mock.Call
}

// ListGroupProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListGroupProcesses(ctx any, groupId any) *MonitoringAndLogsApi_ListGroupProcesses_Call {
	return &MonitoringAndLogsApi_ListGroupProcesses_Call{Call: _e.mock.On("ListGroupProcesses", ctx, groupId)}
}

func (_c *MonitoringAndLogsApi_ListGroupProcesses_Call) Run(run func(ctx context.Context, groupId string)) *MonitoringAndLogsApi_ListGroupProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcesses_Call) Return(_a0 admin.ListGroupProcessesApiRequest) *MonitoringAndLogsApi_ListGroupProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcesses_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupProcessesApiRequest) *MonitoringAndLogsApi_ListGroupProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProcessesExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListGroupProcessesExecute(r admin.ListGroupProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProcessesExecute")
	}

	var r0 *admin.PaginatedHostViewAtlas
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupProcessesApiRequest) *admin.PaginatedHostViewAtlas); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedHostViewAtlas)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupProcessesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupProcessesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListGroupProcessesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProcessesExecute'
type MonitoringAndLogsApi_ListGroupProcessesExecute_Call struct {
	*mock.Call
}

// ListGroupProcessesExecute is a helper method to define mock.On call
//   - r admin.ListGroupProcessesApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListGroupProcessesExecute(r any) *MonitoringAndLogsApi_ListGroupProcessesExecute_Call {
	return &MonitoringAndLogsApi_ListGroupProcessesExecute_Call{Call: _e.mock.On("ListGroupProcessesExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesExecute_Call) Run(run func(r admin.ListGroupProcessesApiRequest)) *MonitoringAndLogsApi_ListGroupProcessesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupProcessesApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesExecute_Call) Return(_a0 *admin.PaginatedHostViewAtlas, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListGroupProcessesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesExecute_Call) RunAndReturn(run func(admin.ListGroupProcessesApiRequest) (*admin.PaginatedHostViewAtlas, *http.Response, error)) *MonitoringAndLogsApi_ListGroupProcessesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProcessesWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListGroupProcessesWithParams(ctx context.Context, args *admin.ListGroupProcessesApiParams) admin.ListGroupProcessesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProcessesWithParams")
	}

	var r0 admin.ListGroupProcessesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupProcessesApiParams) admin.ListGroupProcessesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupProcessesApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListGroupProcessesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProcessesWithParams'
type MonitoringAndLogsApi_ListGroupProcessesWithParams_Call struct {
	*mock.Call
}

// ListGroupProcessesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupProcessesApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListGroupProcessesWithParams(ctx any, args any) *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call {
	return &MonitoringAndLogsApi_ListGroupProcessesWithParams_Call{Call: _e.mock.On("ListGroupProcessesWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupProcessesApiParams)) *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupProcessesApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call) Return(_a0 admin.ListGroupProcessesApiRequest) *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupProcessesApiParams) admin.ListGroupProcessesApiRequest) *MonitoringAndLogsApi_ListGroupProcessesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListHostFtsMetrics provides a mock function with given fields: ctx, processId, groupId
func (_m *MonitoringAndLogsApi) ListHostFtsMetrics(ctx context.Context, processId string, groupId string) admin.ListHostFtsMetricsApiRequest {
	ret := _m.Called(ctx, processId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListHostFtsMetrics")
	}

	var r0 admin.ListHostFtsMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListHostFtsMetricsApiRequest); ok {
		r0 = rf(ctx, processId, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListHostFtsMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListHostFtsMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHostFtsMetrics'
type MonitoringAndLogsApi_ListHostFtsMetrics_Call struct {
	*mock.Call
}

// ListHostFtsMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListHostFtsMetrics(ctx any, processId any, groupId any) *MonitoringAndLogsApi_ListHostFtsMetrics_Call {
	return &MonitoringAndLogsApi_ListHostFtsMetrics_Call{Call: _e.mock.On("ListHostFtsMetrics", ctx, processId, groupId)}
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetrics_Call) Run(run func(ctx context.Context, processId string, groupId string)) *MonitoringAndLogsApi_ListHostFtsMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetrics_Call) Return(_a0 admin.ListHostFtsMetricsApiRequest) *MonitoringAndLogsApi_ListHostFtsMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetrics_Call) RunAndReturn(run func(context.Context, string, string) admin.ListHostFtsMetricsApiRequest) *MonitoringAndLogsApi_ListHostFtsMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListHostFtsMetricsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListHostFtsMetricsExecute(r admin.ListHostFtsMetricsApiRequest) (*admin.CloudSearchMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListHostFtsMetricsExecute")
	}

	var r0 *admin.CloudSearchMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListHostFtsMetricsApiRequest) (*admin.CloudSearchMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListHostFtsMetricsApiRequest) *admin.CloudSearchMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudSearchMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListHostFtsMetricsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListHostFtsMetricsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHostFtsMetricsExecute'
type MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call struct {
	*mock.Call
}

// ListHostFtsMetricsExecute is a helper method to define mock.On call
//   - r admin.ListHostFtsMetricsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListHostFtsMetricsExecute(r any) *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call {
	return &MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call{Call: _e.mock.On("ListHostFtsMetricsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call) Run(run func(r admin.ListHostFtsMetricsApiRequest)) *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListHostFtsMetricsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call) Return(_a0 *admin.CloudSearchMetrics, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call) RunAndReturn(run func(admin.ListHostFtsMetricsApiRequest) (*admin.CloudSearchMetrics, *http.Response, error)) *MonitoringAndLogsApi_ListHostFtsMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListHostFtsMetricsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListHostFtsMetricsWithParams(ctx context.Context, args *admin.ListHostFtsMetricsApiParams) admin.ListHostFtsMetricsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListHostFtsMetricsWithParams")
	}

	var r0 admin.ListHostFtsMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListHostFtsMetricsApiParams) admin.ListHostFtsMetricsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListHostFtsMetricsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHostFtsMetricsWithParams'
type MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call struct {
	*mock.Call
}

// ListHostFtsMetricsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListHostFtsMetricsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListHostFtsMetricsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call {
	return &MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call{Call: _e.mock.On("ListHostFtsMetricsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListHostFtsMetricsApiParams)) *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListHostFtsMetricsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call) Return(_a0 admin.ListHostFtsMetricsApiRequest) *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListHostFtsMetricsApiParams) admin.ListHostFtsMetricsApiRequest) *MonitoringAndLogsApi_ListHostFtsMetricsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMeasurements provides a mock function with given fields: ctx, processId, databaseName, collectionName, groupId
func (_m *MonitoringAndLogsApi) ListIndexMeasurements(ctx context.Context, processId string, databaseName string, collectionName string, groupId string) admin.ListIndexMeasurementsApiRequest {
	ret := _m.Called(ctx, processId, databaseName, collectionName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMeasurements")
	}

	var r0 admin.ListIndexMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListIndexMeasurementsApiRequest); ok {
		r0 = rf(ctx, processId, databaseName, collectionName, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListIndexMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListIndexMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMeasurements'
type MonitoringAndLogsApi_ListIndexMeasurements_Call struct {
	*mock.Call
}

// ListIndexMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - databaseName string
//   - collectionName string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMeasurements(ctx any, processId any, databaseName any, collectionName any, groupId any) *MonitoringAndLogsApi_ListIndexMeasurements_Call {
	return &MonitoringAndLogsApi_ListIndexMeasurements_Call{Call: _e.mock.On("ListIndexMeasurements", ctx, processId, databaseName, collectionName, groupId)}
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurements_Call) Run(run func(ctx context.Context, processId string, databaseName string, collectionName string, groupId string)) *MonitoringAndLogsApi_ListIndexMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurements_Call) Return(_a0 admin.ListIndexMeasurementsApiRequest) *MonitoringAndLogsApi_ListIndexMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListIndexMeasurementsApiRequest) *MonitoringAndLogsApi_ListIndexMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListIndexMeasurementsExecute(r admin.ListIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMeasurementsExecute")
	}

	var r0 *admin.MeasurementsIndexes
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListIndexMeasurementsApiRequest) *admin.MeasurementsIndexes); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsIndexes)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListIndexMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListIndexMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMeasurementsExecute'
type MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call struct {
	*mock.Call
}

// ListIndexMeasurementsExecute is a helper method to define mock.On call
//   - r admin.ListIndexMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMeasurementsExecute(r any) *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call{Call: _e.mock.On("ListIndexMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call) Run(run func(r admin.ListIndexMeasurementsApiRequest)) *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListIndexMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsIndexes, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call) RunAndReturn(run func(admin.ListIndexMeasurementsApiRequest) (*admin.MeasurementsIndexes, *http.Response, error)) *MonitoringAndLogsApi_ListIndexMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListIndexMeasurementsWithParams(ctx context.Context, args *admin.ListIndexMeasurementsApiParams) admin.ListIndexMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexMeasurementsWithParams")
	}

	var r0 admin.ListIndexMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListIndexMeasurementsApiParams) admin.ListIndexMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListIndexMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexMeasurementsWithParams'
type MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call struct {
	*mock.Call
}

// ListIndexMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListIndexMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListIndexMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call{Call: _e.mock.On("ListIndexMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListIndexMeasurementsApiParams)) *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListIndexMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call) Return(_a0 admin.ListIndexMeasurementsApiRequest) *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListIndexMeasurementsApiParams) admin.ListIndexMeasurementsApiRequest) *MonitoringAndLogsApi_ListIndexMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListMeasurements provides a mock function with given fields: ctx, processId, groupId
func (_m *MonitoringAndLogsApi) ListMeasurements(ctx context.Context, processId string, groupId string) admin.ListMeasurementsApiRequest {
	ret := _m.Called(ctx, processId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListMeasurements")
	}

	var r0 admin.ListMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListMeasurementsApiRequest); ok {
		r0 = rf(ctx, processId, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMeasurements'
type MonitoringAndLogsApi_ListMeasurements_Call struct {
	*mock.Call
}

// ListMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - processId string
//   - groupId string
func (_e *MonitoringAndLogsApi_Expecter) ListMeasurements(ctx any, processId any, groupId any) *MonitoringAndLogsApi_ListMeasurements_Call {
	return &MonitoringAndLogsApi_ListMeasurements_Call{Call: _e.mock.On("ListMeasurements", ctx, processId, groupId)}
}

func (_c *MonitoringAndLogsApi_ListMeasurements_Call) Run(run func(ctx context.Context, processId string, groupId string)) *MonitoringAndLogsApi_ListMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurements_Call) Return(_a0 admin.ListMeasurementsApiRequest) *MonitoringAndLogsApi_ListMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurements_Call) RunAndReturn(run func(context.Context, string, string) admin.ListMeasurementsApiRequest) *MonitoringAndLogsApi_ListMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// ListMeasurementsExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListMeasurementsExecute(r admin.ListMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListMeasurementsExecute")
	}

	var r0 *admin.MeasurementsNonIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListMeasurementsApiRequest) *admin.MeasurementsNonIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsNonIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMeasurementsExecute'
type MonitoringAndLogsApi_ListMeasurementsExecute_Call struct {
	*mock.Call
}

// ListMeasurementsExecute is a helper method to define mock.On call
//   - r admin.ListMeasurementsApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListMeasurementsExecute(r any) *MonitoringAndLogsApi_ListMeasurementsExecute_Call {
	return &MonitoringAndLogsApi_ListMeasurementsExecute_Call{Call: _e.mock.On("ListMeasurementsExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListMeasurementsExecute_Call) Run(run func(r admin.ListMeasurementsApiRequest)) *MonitoringAndLogsApi_ListMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListMeasurementsApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsNonIndex, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurementsExecute_Call) RunAndReturn(run func(admin.ListMeasurementsApiRequest) (*admin.MeasurementsNonIndex, *http.Response, error)) *MonitoringAndLogsApi_ListMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListMeasurementsWithParams(ctx context.Context, args *admin.ListMeasurementsApiParams) admin.ListMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListMeasurementsWithParams")
	}

	var r0 admin.ListMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMeasurementsApiParams) admin.ListMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListMeasurementsApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMeasurementsWithParams'
type MonitoringAndLogsApi_ListMeasurementsWithParams_Call struct {
	*mock.Call
}

// ListMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListMeasurementsApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListMeasurementsWithParams(ctx any, args any) *MonitoringAndLogsApi_ListMeasurementsWithParams_Call {
	return &MonitoringAndLogsApi_ListMeasurementsWithParams_Call{Call: _e.mock.On("ListMeasurementsWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListMeasurementsApiParams)) *MonitoringAndLogsApi_ListMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListMeasurementsApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurementsWithParams_Call) Return(_a0 admin.ListMeasurementsApiRequest) *MonitoringAndLogsApi_ListMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListMeasurementsApiParams) admin.ListMeasurementsApiRequest) *MonitoringAndLogsApi_ListMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessDisks provides a mock function with given fields: ctx, groupId, processId
func (_m *MonitoringAndLogsApi) ListProcessDisks(ctx context.Context, groupId string, processId string) admin.ListProcessDisksApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessDisks")
	}

	var r0 admin.ListProcessDisksApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListProcessDisksApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListProcessDisksApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListProcessDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessDisks'
type MonitoringAndLogsApi_ListProcessDisks_Call struct {
	*mock.Call
}

// ListProcessDisks is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *MonitoringAndLogsApi_Expecter) ListProcessDisks(ctx any, groupId any, processId any) *MonitoringAndLogsApi_ListProcessDisks_Call {
	return &MonitoringAndLogsApi_ListProcessDisks_Call{Call: _e.mock.On("ListProcessDisks", ctx, groupId, processId)}
}

func (_c *MonitoringAndLogsApi_ListProcessDisks_Call) Run(run func(ctx context.Context, groupId string, processId string)) *MonitoringAndLogsApi_ListProcessDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisks_Call) Return(_a0 admin.ListProcessDisksApiRequest) *MonitoringAndLogsApi_ListProcessDisks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisks_Call) RunAndReturn(run func(context.Context, string, string) admin.ListProcessDisksApiRequest) *MonitoringAndLogsApi_ListProcessDisks_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessDisksExecute provides a mock function with given fields: r
func (_m *MonitoringAndLogsApi) ListProcessDisksExecute(r admin.ListProcessDisksApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessDisksExecute")
	}

	var r0 *admin.PaginatedDiskPartition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProcessDisksApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProcessDisksApiRequest) *admin.PaginatedDiskPartition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedDiskPartition)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProcessDisksApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProcessDisksApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MonitoringAndLogsApi_ListProcessDisksExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessDisksExecute'
type MonitoringAndLogsApi_ListProcessDisksExecute_Call struct {
	*mock.Call
}

// ListProcessDisksExecute is a helper method to define mock.On call
//   - r admin.ListProcessDisksApiRequest
func (_e *MonitoringAndLogsApi_Expecter) ListProcessDisksExecute(r any) *MonitoringAndLogsApi_ListProcessDisksExecute_Call {
	return &MonitoringAndLogsApi_ListProcessDisksExecute_Call{Call: _e.mock.On("ListProcessDisksExecute", r)}
}

func (_c *MonitoringAndLogsApi_ListProcessDisksExecute_Call) Run(run func(r admin.ListProcessDisksApiRequest)) *MonitoringAndLogsApi_ListProcessDisksExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProcessDisksApiRequest))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisksExecute_Call) Return(_a0 *admin.PaginatedDiskPartition, _a1 *http.Response, _a2 error) *MonitoringAndLogsApi_ListProcessDisksExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisksExecute_Call) RunAndReturn(run func(admin.ListProcessDisksApiRequest) (*admin.PaginatedDiskPartition, *http.Response, error)) *MonitoringAndLogsApi_ListProcessDisksExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessDisksWithParams provides a mock function with given fields: ctx, args
func (_m *MonitoringAndLogsApi) ListProcessDisksWithParams(ctx context.Context, args *admin.ListProcessDisksApiParams) admin.ListProcessDisksApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessDisksWithParams")
	}

	var r0 admin.ListProcessDisksApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProcessDisksApiParams) admin.ListProcessDisksApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProcessDisksApiRequest)
	}

	return r0
}

// MonitoringAndLogsApi_ListProcessDisksWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessDisksWithParams'
type MonitoringAndLogsApi_ListProcessDisksWithParams_Call struct {
	*mock.Call
}

// ListProcessDisksWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProcessDisksApiParams
func (_e *MonitoringAndLogsApi_Expecter) ListProcessDisksWithParams(ctx any, args any) *MonitoringAndLogsApi_ListProcessDisksWithParams_Call {
	return &MonitoringAndLogsApi_ListProcessDisksWithParams_Call{Call: _e.mock.On("ListProcessDisksWithParams", ctx, args)}
}

func (_c *MonitoringAndLogsApi_ListProcessDisksWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProcessDisksApiParams)) *MonitoringAndLogsApi_ListProcessDisksWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProcessDisksApiParams))
	})
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisksWithParams_Call) Return(_a0 admin.ListProcessDisksApiRequest) *MonitoringAndLogsApi_ListProcessDisksWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringAndLogsApi_ListProcessDisksWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProcessDisksApiParams) admin.ListProcessDisksApiRequest) *MonitoringAndLogsApi_ListProcessDisksWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitoringAndLogsApi creates a new instance of MonitoringAndLogsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitoringAndLogsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitoringAndLogsApi {
	mock := &MonitoringAndLogsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
