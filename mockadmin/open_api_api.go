// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OpenAPIApi is an autogenerated mock type for the OpenAPIApi type
type OpenAPIApi struct {
	mock.Mock
}

type OpenAPIApi_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenAPIApi) EXPECT() *OpenAPIApi_Expecter {
	return &OpenAPIApi_Expecter{mock: &_m.Mock}
}

// GetOpenapiInfo provides a mock function with given fields: ctx
func (_m *OpenAPIApi) GetOpenapiInfo(ctx context.Context) admin.GetOpenapiInfoApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenapiInfo")
	}

	var r0 admin.GetOpenapiInfoApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.GetOpenapiInfoApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.GetOpenapiInfoApiRequest)
	}

	return r0
}

// OpenAPIApi_GetOpenapiInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenapiInfo'
type OpenAPIApi_GetOpenapiInfo_Call struct {
	*mock.Call
}

// GetOpenapiInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenAPIApi_Expecter) GetOpenapiInfo(ctx any) *OpenAPIApi_GetOpenapiInfo_Call {
	return &OpenAPIApi_GetOpenapiInfo_Call{Call: _e.mock.On("GetOpenapiInfo", ctx)}
}

func (_c *OpenAPIApi_GetOpenapiInfo_Call) Run(run func(ctx context.Context)) *OpenAPIApi_GetOpenapiInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfo_Call) Return(_a0 admin.GetOpenapiInfoApiRequest) *OpenAPIApi_GetOpenapiInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfo_Call) RunAndReturn(run func(context.Context) admin.GetOpenapiInfoApiRequest) *OpenAPIApi_GetOpenapiInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenapiInfoExecute provides a mock function with given fields: r
func (_m *OpenAPIApi) GetOpenapiInfoExecute(r admin.GetOpenapiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenapiInfoExecute")
	}

	var r0 *admin.OpenApiInfo
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOpenapiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOpenapiInfoApiRequest) *admin.OpenApiInfo); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OpenApiInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOpenapiInfoApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOpenapiInfoApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OpenAPIApi_GetOpenapiInfoExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenapiInfoExecute'
type OpenAPIApi_GetOpenapiInfoExecute_Call struct {
	*mock.Call
}

// GetOpenapiInfoExecute is a helper method to define mock.On call
//   - r admin.GetOpenapiInfoApiRequest
func (_e *OpenAPIApi_Expecter) GetOpenapiInfoExecute(r any) *OpenAPIApi_GetOpenapiInfoExecute_Call {
	return &OpenAPIApi_GetOpenapiInfoExecute_Call{Call: _e.mock.On("GetOpenapiInfoExecute", r)}
}

func (_c *OpenAPIApi_GetOpenapiInfoExecute_Call) Run(run func(r admin.GetOpenapiInfoApiRequest)) *OpenAPIApi_GetOpenapiInfoExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOpenapiInfoApiRequest))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfoExecute_Call) Return(_a0 *admin.OpenApiInfo, _a1 *http.Response, _a2 error) *OpenAPIApi_GetOpenapiInfoExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfoExecute_Call) RunAndReturn(run func(admin.GetOpenapiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error)) *OpenAPIApi_GetOpenapiInfoExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenapiInfoWithParams provides a mock function with given fields: ctx, args
func (_m *OpenAPIApi) GetOpenapiInfoWithParams(ctx context.Context, args *admin.GetOpenapiInfoApiParams) admin.GetOpenapiInfoApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenapiInfoWithParams")
	}

	var r0 admin.GetOpenapiInfoApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOpenapiInfoApiParams) admin.GetOpenapiInfoApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOpenapiInfoApiRequest)
	}

	return r0
}

// OpenAPIApi_GetOpenapiInfoWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenapiInfoWithParams'
type OpenAPIApi_GetOpenapiInfoWithParams_Call struct {
	*mock.Call
}

// GetOpenapiInfoWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOpenapiInfoApiParams
func (_e *OpenAPIApi_Expecter) GetOpenapiInfoWithParams(ctx any, args any) *OpenAPIApi_GetOpenapiInfoWithParams_Call {
	return &OpenAPIApi_GetOpenapiInfoWithParams_Call{Call: _e.mock.On("GetOpenapiInfoWithParams", ctx, args)}
}

func (_c *OpenAPIApi_GetOpenapiInfoWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOpenapiInfoApiParams)) *OpenAPIApi_GetOpenapiInfoWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOpenapiInfoApiParams))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfoWithParams_Call) Return(_a0 admin.GetOpenapiInfoApiRequest) *OpenAPIApi_GetOpenapiInfoWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetOpenapiInfoWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOpenapiInfoApiParams) admin.GetOpenapiInfoApiRequest) *OpenAPIApi_GetOpenapiInfoWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenapiVersions provides a mock function with given fields: ctx
func (_m *OpenAPIApi) ListOpenapiVersions(ctx context.Context) admin.ListOpenapiVersionsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenapiVersions")
	}

	var r0 admin.ListOpenapiVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListOpenapiVersionsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListOpenapiVersionsApiRequest)
	}

	return r0
}

// OpenAPIApi_ListOpenapiVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenapiVersions'
type OpenAPIApi_ListOpenapiVersions_Call struct {
	*mock.Call
}

// ListOpenapiVersions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenAPIApi_Expecter) ListOpenapiVersions(ctx any) *OpenAPIApi_ListOpenapiVersions_Call {
	return &OpenAPIApi_ListOpenapiVersions_Call{Call: _e.mock.On("ListOpenapiVersions", ctx)}
}

func (_c *OpenAPIApi_ListOpenapiVersions_Call) Run(run func(ctx context.Context)) *OpenAPIApi_ListOpenapiVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersions_Call) Return(_a0 admin.ListOpenapiVersionsApiRequest) *OpenAPIApi_ListOpenapiVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersions_Call) RunAndReturn(run func(context.Context) admin.ListOpenapiVersionsApiRequest) *OpenAPIApi_ListOpenapiVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenapiVersionsExecute provides a mock function with given fields: r
func (_m *OpenAPIApi) ListOpenapiVersionsExecute(r admin.ListOpenapiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenapiVersionsExecute")
	}

	var r0 *admin.PaginatedApiVersions
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOpenapiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOpenapiVersionsApiRequest) *admin.PaginatedApiVersions); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiVersions)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOpenapiVersionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOpenapiVersionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OpenAPIApi_ListOpenapiVersionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenapiVersionsExecute'
type OpenAPIApi_ListOpenapiVersionsExecute_Call struct {
	*mock.Call
}

// ListOpenapiVersionsExecute is a helper method to define mock.On call
//   - r admin.ListOpenapiVersionsApiRequest
func (_e *OpenAPIApi_Expecter) ListOpenapiVersionsExecute(r any) *OpenAPIApi_ListOpenapiVersionsExecute_Call {
	return &OpenAPIApi_ListOpenapiVersionsExecute_Call{Call: _e.mock.On("ListOpenapiVersionsExecute", r)}
}

func (_c *OpenAPIApi_ListOpenapiVersionsExecute_Call) Run(run func(r admin.ListOpenapiVersionsApiRequest)) *OpenAPIApi_ListOpenapiVersionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOpenapiVersionsApiRequest))
	})
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersionsExecute_Call) Return(_a0 *admin.PaginatedApiVersions, _a1 *http.Response, _a2 error) *OpenAPIApi_ListOpenapiVersionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersionsExecute_Call) RunAndReturn(run func(admin.ListOpenapiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error)) *OpenAPIApi_ListOpenapiVersionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenapiVersionsWithParams provides a mock function with given fields: ctx, args
func (_m *OpenAPIApi) ListOpenapiVersionsWithParams(ctx context.Context, args *admin.ListOpenapiVersionsApiParams) admin.ListOpenapiVersionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenapiVersionsWithParams")
	}

	var r0 admin.ListOpenapiVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOpenapiVersionsApiParams) admin.ListOpenapiVersionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOpenapiVersionsApiRequest)
	}

	return r0
}

// OpenAPIApi_ListOpenapiVersionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenapiVersionsWithParams'
type OpenAPIApi_ListOpenapiVersionsWithParams_Call struct {
	*mock.Call
}

// ListOpenapiVersionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOpenapiVersionsApiParams
func (_e *OpenAPIApi_Expecter) ListOpenapiVersionsWithParams(ctx any, args any) *OpenAPIApi_ListOpenapiVersionsWithParams_Call {
	return &OpenAPIApi_ListOpenapiVersionsWithParams_Call{Call: _e.mock.On("ListOpenapiVersionsWithParams", ctx, args)}
}

func (_c *OpenAPIApi_ListOpenapiVersionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOpenapiVersionsApiParams)) *OpenAPIApi_ListOpenapiVersionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOpenapiVersionsApiParams))
	})
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersionsWithParams_Call) Return(_a0 admin.ListOpenapiVersionsApiRequest) *OpenAPIApi_ListOpenapiVersionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_ListOpenapiVersionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOpenapiVersionsApiParams) admin.ListOpenapiVersionsApiRequest) *OpenAPIApi_ListOpenapiVersionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenAPIApi creates a new instance of OpenAPIApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAPIApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAPIApi {
	mock := &OpenAPIApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
