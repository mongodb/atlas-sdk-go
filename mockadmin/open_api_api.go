// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OpenAPIApi is an autogenerated mock type for the OpenAPIApi type
type OpenAPIApi struct {
	mock.Mock
}

type OpenAPIApi_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenAPIApi) EXPECT() *OpenAPIApi_Expecter {
	return &OpenAPIApi_Expecter{mock: &_m.Mock}
}

// GetApiVersions provides a mock function with given fields: ctx
func (_m *OpenAPIApi) GetApiVersions(ctx context.Context) admin.GetApiVersionsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetApiVersions")
	}

	var r0 admin.GetApiVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.GetApiVersionsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.GetApiVersionsApiRequest)
	}

	return r0
}

// OpenAPIApi_GetApiVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiVersions'
type OpenAPIApi_GetApiVersions_Call struct {
	*mock.Call
}

// GetApiVersions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenAPIApi_Expecter) GetApiVersions(ctx any) *OpenAPIApi_GetApiVersions_Call {
	return &OpenAPIApi_GetApiVersions_Call{Call: _e.mock.On("GetApiVersions", ctx)}
}

func (_c *OpenAPIApi_GetApiVersions_Call) Run(run func(ctx context.Context)) *OpenAPIApi_GetApiVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenAPIApi_GetApiVersions_Call) Return(_a0 admin.GetApiVersionsApiRequest) *OpenAPIApi_GetApiVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetApiVersions_Call) RunAndReturn(run func(context.Context) admin.GetApiVersionsApiRequest) *OpenAPIApi_GetApiVersions_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiVersionsExecute provides a mock function with given fields: r
func (_m *OpenAPIApi) GetApiVersionsExecute(r admin.GetApiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetApiVersionsExecute")
	}

	var r0 *admin.PaginatedApiVersions
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetApiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetApiVersionsApiRequest) *admin.PaginatedApiVersions); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiVersions)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetApiVersionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetApiVersionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OpenAPIApi_GetApiVersionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiVersionsExecute'
type OpenAPIApi_GetApiVersionsExecute_Call struct {
	*mock.Call
}

// GetApiVersionsExecute is a helper method to define mock.On call
//   - r admin.GetApiVersionsApiRequest
func (_e *OpenAPIApi_Expecter) GetApiVersionsExecute(r any) *OpenAPIApi_GetApiVersionsExecute_Call {
	return &OpenAPIApi_GetApiVersionsExecute_Call{Call: _e.mock.On("GetApiVersionsExecute", r)}
}

func (_c *OpenAPIApi_GetApiVersionsExecute_Call) Run(run func(r admin.GetApiVersionsApiRequest)) *OpenAPIApi_GetApiVersionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetApiVersionsApiRequest))
	})
	return _c
}

func (_c *OpenAPIApi_GetApiVersionsExecute_Call) Return(_a0 *admin.PaginatedApiVersions, _a1 *http.Response, _a2 error) *OpenAPIApi_GetApiVersionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OpenAPIApi_GetApiVersionsExecute_Call) RunAndReturn(run func(admin.GetApiVersionsApiRequest) (*admin.PaginatedApiVersions, *http.Response, error)) *OpenAPIApi_GetApiVersionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiVersionsWithParams provides a mock function with given fields: ctx, args
func (_m *OpenAPIApi) GetApiVersionsWithParams(ctx context.Context, args *admin.GetApiVersionsApiParams) admin.GetApiVersionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetApiVersionsWithParams")
	}

	var r0 admin.GetApiVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetApiVersionsApiParams) admin.GetApiVersionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetApiVersionsApiRequest)
	}

	return r0
}

// OpenAPIApi_GetApiVersionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiVersionsWithParams'
type OpenAPIApi_GetApiVersionsWithParams_Call struct {
	*mock.Call
}

// GetApiVersionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetApiVersionsApiParams
func (_e *OpenAPIApi_Expecter) GetApiVersionsWithParams(ctx any, args any) *OpenAPIApi_GetApiVersionsWithParams_Call {
	return &OpenAPIApi_GetApiVersionsWithParams_Call{Call: _e.mock.On("GetApiVersionsWithParams", ctx, args)}
}

func (_c *OpenAPIApi_GetApiVersionsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetApiVersionsApiParams)) *OpenAPIApi_GetApiVersionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetApiVersionsApiParams))
	})
	return _c
}

func (_c *OpenAPIApi_GetApiVersionsWithParams_Call) Return(_a0 admin.GetApiVersionsApiRequest) *OpenAPIApi_GetApiVersionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetApiVersionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetApiVersionsApiParams) admin.GetApiVersionsApiRequest) *OpenAPIApi_GetApiVersionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenApiInfo provides a mock function with given fields: ctx
func (_m *OpenAPIApi) GetOpenApiInfo(ctx context.Context) admin.GetOpenApiInfoApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenApiInfo")
	}

	var r0 admin.GetOpenApiInfoApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.GetOpenApiInfoApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.GetOpenApiInfoApiRequest)
	}

	return r0
}

// OpenAPIApi_GetOpenApiInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenApiInfo'
type OpenAPIApi_GetOpenApiInfo_Call struct {
	*mock.Call
}

// GetOpenApiInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenAPIApi_Expecter) GetOpenApiInfo(ctx any) *OpenAPIApi_GetOpenApiInfo_Call {
	return &OpenAPIApi_GetOpenApiInfo_Call{Call: _e.mock.On("GetOpenApiInfo", ctx)}
}

func (_c *OpenAPIApi_GetOpenApiInfo_Call) Run(run func(ctx context.Context)) *OpenAPIApi_GetOpenApiInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfo_Call) Return(_a0 admin.GetOpenApiInfoApiRequest) *OpenAPIApi_GetOpenApiInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfo_Call) RunAndReturn(run func(context.Context) admin.GetOpenApiInfoApiRequest) *OpenAPIApi_GetOpenApiInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenApiInfoExecute provides a mock function with given fields: r
func (_m *OpenAPIApi) GetOpenApiInfoExecute(r admin.GetOpenApiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenApiInfoExecute")
	}

	var r0 *admin.OpenApiInfo
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOpenApiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOpenApiInfoApiRequest) *admin.OpenApiInfo); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OpenApiInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOpenApiInfoApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOpenApiInfoApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OpenAPIApi_GetOpenApiInfoExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenApiInfoExecute'
type OpenAPIApi_GetOpenApiInfoExecute_Call struct {
	*mock.Call
}

// GetOpenApiInfoExecute is a helper method to define mock.On call
//   - r admin.GetOpenApiInfoApiRequest
func (_e *OpenAPIApi_Expecter) GetOpenApiInfoExecute(r any) *OpenAPIApi_GetOpenApiInfoExecute_Call {
	return &OpenAPIApi_GetOpenApiInfoExecute_Call{Call: _e.mock.On("GetOpenApiInfoExecute", r)}
}

func (_c *OpenAPIApi_GetOpenApiInfoExecute_Call) Run(run func(r admin.GetOpenApiInfoApiRequest)) *OpenAPIApi_GetOpenApiInfoExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOpenApiInfoApiRequest))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfoExecute_Call) Return(_a0 *admin.OpenApiInfo, _a1 *http.Response, _a2 error) *OpenAPIApi_GetOpenApiInfoExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfoExecute_Call) RunAndReturn(run func(admin.GetOpenApiInfoApiRequest) (*admin.OpenApiInfo, *http.Response, error)) *OpenAPIApi_GetOpenApiInfoExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenApiInfoWithParams provides a mock function with given fields: ctx, args
func (_m *OpenAPIApi) GetOpenApiInfoWithParams(ctx context.Context, args *admin.GetOpenApiInfoApiParams) admin.GetOpenApiInfoApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenApiInfoWithParams")
	}

	var r0 admin.GetOpenApiInfoApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOpenApiInfoApiParams) admin.GetOpenApiInfoApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOpenApiInfoApiRequest)
	}

	return r0
}

// OpenAPIApi_GetOpenApiInfoWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenApiInfoWithParams'
type OpenAPIApi_GetOpenApiInfoWithParams_Call struct {
	*mock.Call
}

// GetOpenApiInfoWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOpenApiInfoApiParams
func (_e *OpenAPIApi_Expecter) GetOpenApiInfoWithParams(ctx any, args any) *OpenAPIApi_GetOpenApiInfoWithParams_Call {
	return &OpenAPIApi_GetOpenApiInfoWithParams_Call{Call: _e.mock.On("GetOpenApiInfoWithParams", ctx, args)}
}

func (_c *OpenAPIApi_GetOpenApiInfoWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOpenApiInfoApiParams)) *OpenAPIApi_GetOpenApiInfoWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOpenApiInfoApiParams))
	})
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfoWithParams_Call) Return(_a0 admin.GetOpenApiInfoApiRequest) *OpenAPIApi_GetOpenApiInfoWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenAPIApi_GetOpenApiInfoWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOpenApiInfoApiParams) admin.GetOpenApiInfoApiRequest) *OpenAPIApi_GetOpenApiInfoWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenAPIApi creates a new instance of OpenAPIApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAPIApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAPIApi {
	mock := &OpenAPIApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
