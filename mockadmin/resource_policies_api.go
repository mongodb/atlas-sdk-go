// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ResourcePoliciesApi is an autogenerated mock type for the ResourcePoliciesApi type
type ResourcePoliciesApi struct {
	mock.Mock
}

type ResourcePoliciesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourcePoliciesApi) EXPECT() *ResourcePoliciesApi_Expecter {
	return &ResourcePoliciesApi_Expecter{mock: &_m.Mock}
}

// CreateAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, apiAtlasResourcePolicyCreate
func (_m *ResourcePoliciesApi) CreateAtlasResourcePolicy(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate) admin.CreateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, apiAtlasResourcePolicyCreate)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasResourcePolicy")
	}

	var r0 admin.CreateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.CreateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, apiAtlasResourcePolicyCreate)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_CreateAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasResourcePolicy'
type ResourcePoliciesApi_CreateAtlasResourcePolicy_Call struct {
	*mock.Call
}

// CreateAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate
func (_e *ResourcePoliciesApi_Expecter) CreateAtlasResourcePolicy(ctx any, orgId any, apiAtlasResourcePolicyCreate any) *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_CreateAtlasResourcePolicy_Call{Call: _e.mock.On("CreateAtlasResourcePolicy", ctx, orgId, apiAtlasResourcePolicyCreate)}
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate)) *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ApiAtlasResourcePolicyCreate))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call) Return(_a0 admin.CreateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.CreateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_CreateAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) CreateAtlasResourcePolicyExecute(r admin.CreateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAtlasResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAtlasResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasResourcePolicyExecute'
type ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// CreateAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.CreateAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) CreateAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call{Call: _e.mock.On("CreateAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call) Run(run func(r admin.CreateAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.CreateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_CreateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) CreateAtlasResourcePolicyWithParams(ctx context.Context, args *admin.CreateAtlasResourcePolicyApiParams) admin.CreateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasResourcePolicyWithParams")
	}

	var r0 admin.CreateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAtlasResourcePolicyApiParams) admin.CreateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// CreateAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) CreateAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("CreateAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call) Return(_a0 admin.CreateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAtlasResourcePolicyApiParams) admin.CreateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_CreateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId
func (_m *ResourcePoliciesApi) DeleteAtlasResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string) admin.DeleteAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasResourcePolicy")
	}

	var r0 admin.DeleteAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasResourcePolicy'
type ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call struct {
	*mock.Call
}

// DeleteAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
func (_e *ResourcePoliciesApi_Expecter) DeleteAtlasResourcePolicy(ctx any, orgId any, resourcePolicyId any) *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call{Call: _e.mock.On("DeleteAtlasResourcePolicy", ctx, orgId, resourcePolicyId)}
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string)) *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call) Return(_a0 admin.DeleteAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) DeleteAtlasResourcePolicyExecute(r admin.DeleteAtlasResourcePolicyApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasResourcePolicyExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasResourcePolicyApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasResourcePolicyApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAtlasResourcePolicyApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasResourcePolicyExecute'
type ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// DeleteAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.DeleteAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) DeleteAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call{Call: _e.mock.On("DeleteAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call) Run(run func(r admin.DeleteAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call) Return(_a0 *http.Response, _a1 error) *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.DeleteAtlasResourcePolicyApiRequest) (*http.Response, error)) *ResourcePoliciesApi_DeleteAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) DeleteAtlasResourcePolicyWithParams(ctx context.Context, args *admin.DeleteAtlasResourcePolicyApiParams) admin.DeleteAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasResourcePolicyWithParams")
	}

	var r0 admin.DeleteAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAtlasResourcePolicyApiParams) admin.DeleteAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// DeleteAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) DeleteAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("DeleteAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call) Return(_a0 admin.DeleteAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAtlasResourcePolicyApiParams) admin.DeleteAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePolicies provides a mock function with given fields: ctx, orgId
func (_m *ResourcePoliciesApi) GetAtlasResourcePolicies(ctx context.Context, orgId string) admin.GetAtlasResourcePoliciesApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePolicies")
	}

	var r0 admin.GetAtlasResourcePoliciesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetAtlasResourcePoliciesApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasResourcePoliciesApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetAtlasResourcePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePolicies'
type ResourcePoliciesApi_GetAtlasResourcePolicies_Call struct {
	*mock.Call
}

// GetAtlasResourcePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePolicies(ctx any, orgId any) *ResourcePoliciesApi_GetAtlasResourcePolicies_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePolicies_Call{Call: _e.mock.On("GetAtlasResourcePolicies", ctx, orgId)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicies_Call) Run(run func(ctx context.Context, orgId string)) *ResourcePoliciesApi_GetAtlasResourcePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicies_Call) Return(_a0 admin.GetAtlasResourcePoliciesApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicies_Call) RunAndReturn(run func(context.Context, string) admin.GetAtlasResourcePoliciesApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePoliciesExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) GetAtlasResourcePoliciesExecute(r admin.GetAtlasResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePoliciesExecute")
	}

	var r0 []admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAtlasResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAtlasResourcePoliciesApiRequest) []admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAtlasResourcePoliciesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAtlasResourcePoliciesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePoliciesExecute'
type ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call struct {
	*mock.Call
}

// GetAtlasResourcePoliciesExecute is a helper method to define mock.On call
//   - r admin.GetAtlasResourcePoliciesApiRequest
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePoliciesExecute(r any) *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call{Call: _e.mock.On("GetAtlasResourcePoliciesExecute", r)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call) Run(run func(r admin.GetAtlasResourcePoliciesApiRequest)) *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAtlasResourcePoliciesApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call) Return(_a0 []admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call) RunAndReturn(run func(admin.GetAtlasResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_GetAtlasResourcePoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePoliciesWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) GetAtlasResourcePoliciesWithParams(ctx context.Context, args *admin.GetAtlasResourcePoliciesApiParams) admin.GetAtlasResourcePoliciesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePoliciesWithParams")
	}

	var r0 admin.GetAtlasResourcePoliciesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAtlasResourcePoliciesApiParams) admin.GetAtlasResourcePoliciesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasResourcePoliciesApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePoliciesWithParams'
type ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call struct {
	*mock.Call
}

// GetAtlasResourcePoliciesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAtlasResourcePoliciesApiParams
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePoliciesWithParams(ctx any, args any) *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call{Call: _e.mock.On("GetAtlasResourcePoliciesWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAtlasResourcePoliciesApiParams)) *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAtlasResourcePoliciesApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call) Return(_a0 admin.GetAtlasResourcePoliciesApiRequest) *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAtlasResourcePoliciesApiParams) admin.GetAtlasResourcePoliciesApiRequest) *ResourcePoliciesApi_GetAtlasResourcePoliciesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId
func (_m *ResourcePoliciesApi) GetAtlasResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string) admin.GetAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePolicy")
	}

	var r0 admin.GetAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePolicy'
type ResourcePoliciesApi_GetAtlasResourcePolicy_Call struct {
	*mock.Call
}

// GetAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePolicy(ctx any, orgId any, resourcePolicyId any) *ResourcePoliciesApi_GetAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePolicy_Call{Call: _e.mock.On("GetAtlasResourcePolicy", ctx, orgId, resourcePolicyId)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string)) *ResourcePoliciesApi_GetAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicy_Call) Return(_a0 admin.GetAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) GetAtlasResourcePolicyExecute(r admin.GetAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAtlasResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAtlasResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAtlasResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePolicyExecute'
type ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// GetAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.GetAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call{Call: _e.mock.On("GetAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call) Run(run func(r admin.GetAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.GetAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_GetAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) GetAtlasResourcePolicyWithParams(ctx context.Context, args *admin.GetAtlasResourcePolicyApiParams) admin.GetAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasResourcePolicyWithParams")
	}

	var r0 admin.GetAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAtlasResourcePolicyApiParams) admin.GetAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// GetAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) GetAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("GetAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call) Return(_a0 admin.GetAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAtlasResourcePolicyApiParams) admin.GetAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_GetAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliant provides a mock function with given fields: ctx, orgId
func (_m *ResourcePoliciesApi) GetResourcesNonCompliant(ctx context.Context, orgId string) admin.GetResourcesNonCompliantApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliant")
	}

	var r0 admin.GetResourcesNonCompliantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetResourcesNonCompliantApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetResourcesNonCompliantApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetResourcesNonCompliant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliant'
type ResourcePoliciesApi_GetResourcesNonCompliant_Call struct {
	*mock.Call
}

// GetResourcesNonCompliant is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliant(ctx any, orgId any) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliant_Call{Call: _e.mock.On("GetResourcesNonCompliant", ctx, orgId)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) Run(run func(ctx context.Context, orgId string)) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) Return(_a0 admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) RunAndReturn(run func(context.Context, string) admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliantExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) GetResourcesNonCompliantExecute(r admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliantExecute")
	}

	var r0 []admin.ApiAtlasNonCompliantResource
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetResourcesNonCompliantApiRequest) []admin.ApiAtlasNonCompliantResource); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ApiAtlasNonCompliantResource)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetResourcesNonCompliantApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetResourcesNonCompliantApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliantExecute'
type ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call struct {
	*mock.Call
}

// GetResourcesNonCompliantExecute is a helper method to define mock.On call
//   - r admin.GetResourcesNonCompliantApiRequest
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliantExecute(r any) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call{Call: _e.mock.On("GetResourcesNonCompliantExecute", r)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) Run(run func(r admin.GetResourcesNonCompliantApiRequest)) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetResourcesNonCompliantApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) Return(_a0 []admin.ApiAtlasNonCompliantResource, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) RunAndReturn(run func(admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error)) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliantWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) GetResourcesNonCompliantWithParams(ctx context.Context, args *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliantWithParams")
	}

	var r0 admin.GetResourcesNonCompliantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetResourcesNonCompliantApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliantWithParams'
type ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call struct {
	*mock.Call
}

// GetResourcesNonCompliantWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetResourcesNonCompliantApiParams
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliantWithParams(ctx any, args any) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call{Call: _e.mock.On("GetResourcesNonCompliantWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) Run(run func(ctx context.Context, args *admin.GetResourcesNonCompliantApiParams)) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetResourcesNonCompliantApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) Return(_a0 admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit
func (_m *ResourcePoliciesApi) UpdateAtlasResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string, apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit) admin.UpdateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasResourcePolicy")
	}

	var r0 admin.UpdateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiAtlasResourcePolicyEdit) admin.UpdateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasResourcePolicy'
type ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call struct {
	*mock.Call
}

// UpdateAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
//   - apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit
func (_e *ResourcePoliciesApi_Expecter) UpdateAtlasResourcePolicy(ctx any, orgId any, resourcePolicyId any, apiAtlasResourcePolicyEdit any) *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call{Call: _e.mock.On("UpdateAtlasResourcePolicy", ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)}
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string, apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit)) *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiAtlasResourcePolicyEdit))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call) Return(_a0 admin.UpdateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiAtlasResourcePolicyEdit) admin.UpdateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) UpdateAtlasResourcePolicyExecute(r admin.UpdateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAtlasResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAtlasResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasResourcePolicyExecute'
type ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// UpdateAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.UpdateAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) UpdateAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call{Call: _e.mock.On("UpdateAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call) Run(run func(r admin.UpdateAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.UpdateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_UpdateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) UpdateAtlasResourcePolicyWithParams(ctx context.Context, args *admin.UpdateAtlasResourcePolicyApiParams) admin.UpdateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasResourcePolicyWithParams")
	}

	var r0 admin.UpdateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAtlasResourcePolicyApiParams) admin.UpdateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// UpdateAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) UpdateAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("UpdateAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call) Return(_a0 admin.UpdateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAtlasResourcePolicyApiParams) admin.UpdateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, apiAtlasResourcePolicyCreate
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicy(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, apiAtlasResourcePolicyCreate)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicy")
	}

	var r0 admin.ValidateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, apiAtlasResourcePolicyCreate)
	} else {
		r0 = ret.Get(0).(admin.ValidateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicy'
type ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicy(ctx any, orgId any, apiAtlasResourcePolicyCreate any) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call{Call: _e.mock.On("ValidateAtlasResourcePolicy", ctx, orgId, apiAtlasResourcePolicyCreate)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate)) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ApiAtlasResourcePolicyCreate))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) Return(_a0 admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicyExecute(r admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ValidateAtlasResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ValidateAtlasResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ValidateAtlasResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicyExecute'
type ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.ValidateAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call{Call: _e.mock.On("ValidateAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) Run(run func(r admin.ValidateAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ValidateAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicyWithParams(ctx context.Context, args *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicyWithParams")
	}

	var r0 admin.ValidateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ValidateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ValidateAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("ValidateAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.ValidateAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ValidateAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) Return(_a0 admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourcePoliciesApi creates a new instance of ResourcePoliciesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourcePoliciesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourcePoliciesApi {
	mock := &ResourcePoliciesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
