// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ResourcePoliciesApi is an autogenerated mock type for the ResourcePoliciesApi type
type ResourcePoliciesApi struct {
	mock.Mock
}

type ResourcePoliciesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourcePoliciesApi) EXPECT() *ResourcePoliciesApi_Expecter {
	return &ResourcePoliciesApi_Expecter{mock: &_m.Mock}
}

// CreateOrgResourcePolicy provides a mock function with given fields: ctx, orgId, apiAtlasResourcePolicyCreate
func (_m *ResourcePoliciesApi) CreateOrgResourcePolicy(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate) admin.CreateOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, apiAtlasResourcePolicyCreate)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgResourcePolicy")
	}

	var r0 admin.CreateOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.CreateOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, apiAtlasResourcePolicyCreate)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_CreateOrgResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgResourcePolicy'
type ResourcePoliciesApi_CreateOrgResourcePolicy_Call struct {
	*mock.Call
}

// CreateOrgResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate
func (_e *ResourcePoliciesApi_Expecter) CreateOrgResourcePolicy(ctx any, orgId any, apiAtlasResourcePolicyCreate any) *ResourcePoliciesApi_CreateOrgResourcePolicy_Call {
	return &ResourcePoliciesApi_CreateOrgResourcePolicy_Call{Call: _e.mock.On("CreateOrgResourcePolicy", ctx, orgId, apiAtlasResourcePolicyCreate)}
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate)) *ResourcePoliciesApi_CreateOrgResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ApiAtlasResourcePolicyCreate))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicy_Call) Return(_a0 admin.CreateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_CreateOrgResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicy_Call) RunAndReturn(run func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.CreateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_CreateOrgResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) CreateOrgResourcePolicyExecute(r admin.CreateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgResourcePolicyExecute'
type ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call struct {
	*mock.Call
}

// CreateOrgResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.CreateOrgResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) CreateOrgResourcePolicyExecute(r any) *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call{Call: _e.mock.On("CreateOrgResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call) Run(run func(r admin.CreateOrgResourcePolicyApiRequest)) *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call) RunAndReturn(run func(admin.CreateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_CreateOrgResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) CreateOrgResourcePolicyWithParams(ctx context.Context, args *admin.CreateOrgResourcePolicyApiParams) admin.CreateOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgResourcePolicyWithParams")
	}

	var r0 admin.CreateOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgResourcePolicyApiParams) admin.CreateOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgResourcePolicyWithParams'
type ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call struct {
	*mock.Call
}

// CreateOrgResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) CreateOrgResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call{Call: _e.mock.On("CreateOrgResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgResourcePolicyApiParams)) *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call) Return(_a0 admin.CreateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgResourcePolicyApiParams) admin.CreateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_CreateOrgResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId
func (_m *ResourcePoliciesApi) DeleteOrgResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string) admin.DeleteOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgResourcePolicy")
	}

	var r0 admin.DeleteOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_DeleteOrgResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgResourcePolicy'
type ResourcePoliciesApi_DeleteOrgResourcePolicy_Call struct {
	*mock.Call
}

// DeleteOrgResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
func (_e *ResourcePoliciesApi_Expecter) DeleteOrgResourcePolicy(ctx any, orgId any, resourcePolicyId any) *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call {
	return &ResourcePoliciesApi_DeleteOrgResourcePolicy_Call{Call: _e.mock.On("DeleteOrgResourcePolicy", ctx, orgId, resourcePolicyId)}
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string)) *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call) Return(_a0 admin.DeleteOrgResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteOrgResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteOrgResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) DeleteOrgResourcePolicyExecute(r admin.DeleteOrgResourcePolicyApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgResourcePolicyExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgResourcePolicyApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgResourcePolicyApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgResourcePolicyApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgResourcePolicyExecute'
type ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call struct {
	*mock.Call
}

// DeleteOrgResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) DeleteOrgResourcePolicyExecute(r any) *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call{Call: _e.mock.On("DeleteOrgResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call) Run(run func(r admin.DeleteOrgResourcePolicyApiRequest)) *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call) Return(_a0 *http.Response, _a1 error) *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call) RunAndReturn(run func(admin.DeleteOrgResourcePolicyApiRequest) (*http.Response, error)) *ResourcePoliciesApi_DeleteOrgResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) DeleteOrgResourcePolicyWithParams(ctx context.Context, args *admin.DeleteOrgResourcePolicyApiParams) admin.DeleteOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgResourcePolicyWithParams")
	}

	var r0 admin.DeleteOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgResourcePolicyApiParams) admin.DeleteOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgResourcePolicyWithParams'
type ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call struct {
	*mock.Call
}

// DeleteOrgResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) DeleteOrgResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call{Call: _e.mock.On("DeleteOrgResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgResourcePolicyApiParams)) *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call) Return(_a0 admin.DeleteOrgResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgResourcePolicyApiParams) admin.DeleteOrgResourcePolicyApiRequest) *ResourcePoliciesApi_DeleteOrgResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId
func (_m *ResourcePoliciesApi) GetOrgResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string) admin.GetOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgResourcePolicy")
	}

	var r0 admin.GetOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetOrgResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgResourcePolicy'
type ResourcePoliciesApi_GetOrgResourcePolicy_Call struct {
	*mock.Call
}

// GetOrgResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
func (_e *ResourcePoliciesApi_Expecter) GetOrgResourcePolicy(ctx any, orgId any, resourcePolicyId any) *ResourcePoliciesApi_GetOrgResourcePolicy_Call {
	return &ResourcePoliciesApi_GetOrgResourcePolicy_Call{Call: _e.mock.On("GetOrgResourcePolicy", ctx, orgId, resourcePolicyId)}
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string)) *ResourcePoliciesApi_GetOrgResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicy_Call) Return(_a0 admin.GetOrgResourcePolicyApiRequest) *ResourcePoliciesApi_GetOrgResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgResourcePolicyApiRequest) *ResourcePoliciesApi_GetOrgResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) GetOrgResourcePolicyExecute(r admin.GetOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgResourcePolicyExecute'
type ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call struct {
	*mock.Call
}

// GetOrgResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.GetOrgResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) GetOrgResourcePolicyExecute(r any) *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call{Call: _e.mock.On("GetOrgResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call) Run(run func(r admin.GetOrgResourcePolicyApiRequest)) *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call) RunAndReturn(run func(admin.GetOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_GetOrgResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) GetOrgResourcePolicyWithParams(ctx context.Context, args *admin.GetOrgResourcePolicyApiParams) admin.GetOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgResourcePolicyWithParams")
	}

	var r0 admin.GetOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgResourcePolicyApiParams) admin.GetOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgResourcePolicyWithParams'
type ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call struct {
	*mock.Call
}

// GetOrgResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) GetOrgResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call{Call: _e.mock.On("GetOrgResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgResourcePolicyApiParams)) *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call) Return(_a0 admin.GetOrgResourcePolicyApiRequest) *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgResourcePolicyApiParams) admin.GetOrgResourcePolicyApiRequest) *ResourcePoliciesApi_GetOrgResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliant provides a mock function with given fields: ctx, orgId
func (_m *ResourcePoliciesApi) GetResourcesNonCompliant(ctx context.Context, orgId string) admin.GetResourcesNonCompliantApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliant")
	}

	var r0 admin.GetResourcesNonCompliantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetResourcesNonCompliantApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetResourcesNonCompliantApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetResourcesNonCompliant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliant'
type ResourcePoliciesApi_GetResourcesNonCompliant_Call struct {
	*mock.Call
}

// GetResourcesNonCompliant is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliant(ctx any, orgId any) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliant_Call{Call: _e.mock.On("GetResourcesNonCompliant", ctx, orgId)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) Run(run func(ctx context.Context, orgId string)) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) Return(_a0 admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliant_Call) RunAndReturn(run func(context.Context, string) admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliant_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliantExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) GetResourcesNonCompliantExecute(r admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliantExecute")
	}

	var r0 []admin.ApiAtlasNonCompliantResource
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetResourcesNonCompliantApiRequest) []admin.ApiAtlasNonCompliantResource); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ApiAtlasNonCompliantResource)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetResourcesNonCompliantApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetResourcesNonCompliantApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliantExecute'
type ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call struct {
	*mock.Call
}

// GetResourcesNonCompliantExecute is a helper method to define mock.On call
//   - r admin.GetResourcesNonCompliantApiRequest
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliantExecute(r any) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call{Call: _e.mock.On("GetResourcesNonCompliantExecute", r)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) Run(run func(r admin.GetResourcesNonCompliantApiRequest)) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetResourcesNonCompliantApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) Return(_a0 []admin.ApiAtlasNonCompliantResource, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call) RunAndReturn(run func(admin.GetResourcesNonCompliantApiRequest) ([]admin.ApiAtlasNonCompliantResource, *http.Response, error)) *ResourcePoliciesApi_GetResourcesNonCompliantExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesNonCompliantWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) GetResourcesNonCompliantWithParams(ctx context.Context, args *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesNonCompliantWithParams")
	}

	var r0 admin.GetResourcesNonCompliantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetResourcesNonCompliantApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesNonCompliantWithParams'
type ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call struct {
	*mock.Call
}

// GetResourcesNonCompliantWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetResourcesNonCompliantApiParams
func (_e *ResourcePoliciesApi_Expecter) GetResourcesNonCompliantWithParams(ctx any, args any) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	return &ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call{Call: _e.mock.On("GetResourcesNonCompliantWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) Run(run func(ctx context.Context, args *admin.GetResourcesNonCompliantApiParams)) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetResourcesNonCompliantApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) Return(_a0 admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetResourcesNonCompliantApiParams) admin.GetResourcesNonCompliantApiRequest) *ResourcePoliciesApi_GetResourcesNonCompliantWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgResourcePolicies provides a mock function with given fields: ctx, orgId
func (_m *ResourcePoliciesApi) ListOrgResourcePolicies(ctx context.Context, orgId string) admin.ListOrgResourcePoliciesApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgResourcePolicies")
	}

	var r0 admin.ListOrgResourcePoliciesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgResourcePoliciesApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgResourcePoliciesApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ListOrgResourcePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgResourcePolicies'
type ResourcePoliciesApi_ListOrgResourcePolicies_Call struct {
	*mock.Call
}

// ListOrgResourcePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ResourcePoliciesApi_Expecter) ListOrgResourcePolicies(ctx any, orgId any) *ResourcePoliciesApi_ListOrgResourcePolicies_Call {
	return &ResourcePoliciesApi_ListOrgResourcePolicies_Call{Call: _e.mock.On("ListOrgResourcePolicies", ctx, orgId)}
}

func (_c *ResourcePoliciesApi_ListOrgResourcePolicies_Call) Run(run func(ctx context.Context, orgId string)) *ResourcePoliciesApi_ListOrgResourcePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePolicies_Call) Return(_a0 admin.ListOrgResourcePoliciesApiRequest) *ResourcePoliciesApi_ListOrgResourcePolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePolicies_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgResourcePoliciesApiRequest) *ResourcePoliciesApi_ListOrgResourcePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgResourcePoliciesExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) ListOrgResourcePoliciesExecute(r admin.ListOrgResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgResourcePoliciesExecute")
	}

	var r0 []admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgResourcePoliciesApiRequest) []admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgResourcePoliciesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgResourcePoliciesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgResourcePoliciesExecute'
type ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call struct {
	*mock.Call
}

// ListOrgResourcePoliciesExecute is a helper method to define mock.On call
//   - r admin.ListOrgResourcePoliciesApiRequest
func (_e *ResourcePoliciesApi_Expecter) ListOrgResourcePoliciesExecute(r any) *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call {
	return &ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call{Call: _e.mock.On("ListOrgResourcePoliciesExecute", r)}
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call) Run(run func(r admin.ListOrgResourcePoliciesApiRequest)) *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgResourcePoliciesApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call) Return(_a0 []admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call) RunAndReturn(run func(admin.ListOrgResourcePoliciesApiRequest) ([]admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_ListOrgResourcePoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgResourcePoliciesWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) ListOrgResourcePoliciesWithParams(ctx context.Context, args *admin.ListOrgResourcePoliciesApiParams) admin.ListOrgResourcePoliciesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgResourcePoliciesWithParams")
	}

	var r0 admin.ListOrgResourcePoliciesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgResourcePoliciesApiParams) admin.ListOrgResourcePoliciesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgResourcePoliciesApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgResourcePoliciesWithParams'
type ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call struct {
	*mock.Call
}

// ListOrgResourcePoliciesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgResourcePoliciesApiParams
func (_e *ResourcePoliciesApi_Expecter) ListOrgResourcePoliciesWithParams(ctx any, args any) *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call {
	return &ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call{Call: _e.mock.On("ListOrgResourcePoliciesWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgResourcePoliciesApiParams)) *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgResourcePoliciesApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call) Return(_a0 admin.ListOrgResourcePoliciesApiRequest) *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgResourcePoliciesApiParams) admin.ListOrgResourcePoliciesApiRequest) *ResourcePoliciesApi_ListOrgResourcePoliciesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgResourcePolicy provides a mock function with given fields: ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit
func (_m *ResourcePoliciesApi) UpdateOrgResourcePolicy(ctx context.Context, orgId string, resourcePolicyId string, apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit) admin.UpdateOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgResourcePolicy")
	}

	var r0 admin.UpdateOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiAtlasResourcePolicyEdit) admin.UpdateOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_UpdateOrgResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgResourcePolicy'
type ResourcePoliciesApi_UpdateOrgResourcePolicy_Call struct {
	*mock.Call
}

// UpdateOrgResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - resourcePolicyId string
//   - apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit
func (_e *ResourcePoliciesApi_Expecter) UpdateOrgResourcePolicy(ctx any, orgId any, resourcePolicyId any, apiAtlasResourcePolicyEdit any) *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call {
	return &ResourcePoliciesApi_UpdateOrgResourcePolicy_Call{Call: _e.mock.On("UpdateOrgResourcePolicy", ctx, orgId, resourcePolicyId, apiAtlasResourcePolicyEdit)}
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, resourcePolicyId string, apiAtlasResourcePolicyEdit *admin.ApiAtlasResourcePolicyEdit)) *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiAtlasResourcePolicyEdit))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call) Return(_a0 admin.UpdateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiAtlasResourcePolicyEdit) admin.UpdateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateOrgResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) UpdateOrgResourcePolicyExecute(r admin.UpdateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgResourcePolicyExecute'
type ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call struct {
	*mock.Call
}

// UpdateOrgResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) UpdateOrgResourcePolicyExecute(r any) *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call{Call: _e.mock.On("UpdateOrgResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call) Run(run func(r admin.UpdateOrgResourcePolicyApiRequest)) *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call) RunAndReturn(run func(admin.UpdateOrgResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_UpdateOrgResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) UpdateOrgResourcePolicyWithParams(ctx context.Context, args *admin.UpdateOrgResourcePolicyApiParams) admin.UpdateOrgResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgResourcePolicyWithParams")
	}

	var r0 admin.UpdateOrgResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgResourcePolicyApiParams) admin.UpdateOrgResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgResourcePolicyWithParams'
type ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call struct {
	*mock.Call
}

// UpdateOrgResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) UpdateOrgResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call{Call: _e.mock.On("UpdateOrgResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgResourcePolicyApiParams)) *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call) Return(_a0 admin.UpdateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgResourcePolicyApiParams) admin.UpdateOrgResourcePolicyApiRequest) *ResourcePoliciesApi_UpdateOrgResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicy provides a mock function with given fields: ctx, orgId, apiAtlasResourcePolicyCreate
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicy(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, orgId, apiAtlasResourcePolicyCreate)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicy")
	}

	var r0 admin.ValidateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, orgId, apiAtlasResourcePolicyCreate)
	} else {
		r0 = ret.Get(0).(admin.ValidateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicy'
type ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicy(ctx any, orgId any, apiAtlasResourcePolicyCreate any) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call{Call: _e.mock.On("ValidateAtlasResourcePolicy", ctx, orgId, apiAtlasResourcePolicyCreate)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) Run(run func(ctx context.Context, orgId string, apiAtlasResourcePolicyCreate *admin.ApiAtlasResourcePolicyCreate)) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ApiAtlasResourcePolicyCreate))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) Return(_a0 admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call) RunAndReturn(run func(context.Context, string, *admin.ApiAtlasResourcePolicyCreate) admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicyExecute provides a mock function with given fields: r
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicyExecute(r admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicyExecute")
	}

	var r0 *admin.ApiAtlasResourcePolicy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ValidateAtlasResourcePolicyApiRequest) *admin.ApiAtlasResourcePolicy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ValidateAtlasResourcePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ValidateAtlasResourcePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicyExecute'
type ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicyExecute is a helper method to define mock.On call
//   - r admin.ValidateAtlasResourcePolicyApiRequest
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicyExecute(r any) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call{Call: _e.mock.On("ValidateAtlasResourcePolicyExecute", r)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) Run(run func(r admin.ValidateAtlasResourcePolicyApiRequest)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ValidateAtlasResourcePolicyApiRequest))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) Return(_a0 *admin.ApiAtlasResourcePolicy, _a1 *http.Response, _a2 error) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call) RunAndReturn(run func(admin.ValidateAtlasResourcePolicyApiRequest) (*admin.ApiAtlasResourcePolicy, *http.Response, error)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAtlasResourcePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *ResourcePoliciesApi) ValidateAtlasResourcePolicyWithParams(ctx context.Context, args *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAtlasResourcePolicyWithParams")
	}

	var r0 admin.ValidateAtlasResourcePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ValidateAtlasResourcePolicyApiRequest)
	}

	return r0
}

// ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAtlasResourcePolicyWithParams'
type ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call struct {
	*mock.Call
}

// ValidateAtlasResourcePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ValidateAtlasResourcePolicyApiParams
func (_e *ResourcePoliciesApi_Expecter) ValidateAtlasResourcePolicyWithParams(ctx any, args any) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	return &ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call{Call: _e.mock.On("ValidateAtlasResourcePolicyWithParams", ctx, args)}
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.ValidateAtlasResourcePolicyApiParams)) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ValidateAtlasResourcePolicyApiParams))
	})
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) Return(_a0 admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.ValidateAtlasResourcePolicyApiParams) admin.ValidateAtlasResourcePolicyApiRequest) *ResourcePoliciesApi_ValidateAtlasResourcePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourcePoliciesApi creates a new instance of ResourcePoliciesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourcePoliciesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourcePoliciesApi {
	mock := &ResourcePoliciesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
