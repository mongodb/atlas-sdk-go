// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240530004/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CollectionLevelMetricsApi is an autogenerated mock type for the CollectionLevelMetricsApi type
type CollectionLevelMetricsApi struct {
	mock.Mock
}

type CollectionLevelMetricsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionLevelMetricsApi) EXPECT() *CollectionLevelMetricsApi_Expecter {
	return &CollectionLevelMetricsApi_Expecter{mock: &_m.Mock}
}

// GetCollStatsLatencyNamespaceClusterMeasurements provides a mock function with given fields: ctx, groupId, clusterName, clusterView, databaseName, collectionName
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceClusterMeasurements(ctx context.Context, groupId string, clusterName string, clusterView string, databaseName string, collectionName string) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterView, databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceClusterMeasurements")
	}

	var r0 admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterView, databaseName, collectionName)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceClusterMeasurements'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceClusterMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterView string
//   - databaseName string
//   - collectionName string
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceClusterMeasurements(ctx interface{}, groupId interface{}, clusterName interface{}, clusterView interface{}, databaseName interface{}, collectionName interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceClusterMeasurements", ctx, groupId, clusterName, clusterView, databaseName, collectionName)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterView string, databaseName string, collectionName string)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceClusterMeasurementsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceClusterMeasurementsExecute(r admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceClusterMeasurementsExecute")
	}

	var r0 *admin.MeasurementsCollStatsLatencyCluster
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *admin.MeasurementsCollStatsLatencyCluster); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsCollStatsLatencyCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceClusterMeasurementsExecute'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceClusterMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceClusterMeasurementsExecute(r interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceClusterMeasurementsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call) Run(run func(r admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsCollStatsLatencyCluster, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call) RunAndReturn(run func(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceClusterMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceClusterMeasurementsWithParams(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceClusterMeasurementsWithParams")
	}

	var r0 admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceClusterMeasurementsWithParams'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceClusterMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceClusterMeasurementsWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceClusterMeasurementsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceClusterMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceClusterMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceHostMeasurements provides a mock function with given fields: ctx, groupId, processId, databaseName, collectionName
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceHostMeasurements(ctx context.Context, groupId string, processId string, databaseName string, collectionName string) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, processId, databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceHostMeasurements")
	}

	var r0 admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, processId, databaseName, collectionName)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceHostMeasurements'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceHostMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
//   - databaseName string
//   - collectionName string
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceHostMeasurements(ctx interface{}, groupId interface{}, processId interface{}, databaseName interface{}, collectionName interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceHostMeasurements", ctx, groupId, processId, databaseName, collectionName)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call) Run(run func(ctx context.Context, groupId string, processId string, databaseName string, collectionName string)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceHostMeasurementsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceHostMeasurementsExecute(r admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceHostMeasurementsExecute")
	}

	var r0 *admin.MeasurementsCollStatsLatencyHost
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *admin.MeasurementsCollStatsLatencyHost); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsCollStatsLatencyHost)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceHostMeasurementsExecute'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceHostMeasurementsExecute is a helper method to define mock.On call
//   - r admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceHostMeasurementsExecute(r interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceHostMeasurementsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call) Run(run func(r admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsCollStatsLatencyHost, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call) RunAndReturn(run func(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceHostMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceHostMeasurementsWithParams(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceHostMeasurementsWithParams")
	}

	var r0 admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceHostMeasurementsWithParams'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceHostMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceHostMeasurementsWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceHostMeasurementsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCollStatsLatencyNamespaceHostMeasurementsApiParams) admin.GetCollStatsLatencyNamespaceHostMeasurementsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceHostMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceMetrics provides a mock function with given fields: ctx, groupId
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceMetrics(ctx context.Context, groupId string) admin.GetCollStatsLatencyNamespaceMetricsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceMetrics")
	}

	var r0 admin.GetCollStatsLatencyNamespaceMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetCollStatsLatencyNamespaceMetricsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceMetricsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceMetrics'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceMetrics(ctx interface{}, groupId interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceMetrics", ctx, groupId)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call) Run(run func(ctx context.Context, groupId string)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceMetricsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call) RunAndReturn(run func(context.Context, string) admin.GetCollStatsLatencyNamespaceMetricsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceMetricsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceMetricsExecute(r admin.GetCollStatsLatencyNamespaceMetricsApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceMetricsExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceMetricsApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespaceMetricsApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCollStatsLatencyNamespaceMetricsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCollStatsLatencyNamespaceMetricsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceMetricsExecute'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceMetricsExecute is a helper method to define mock.On call
//   - r admin.GetCollStatsLatencyNamespaceMetricsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceMetricsExecute(r interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceMetricsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call) Run(run func(r admin.GetCollStatsLatencyNamespaceMetricsApiRequest)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCollStatsLatencyNamespaceMetricsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call) RunAndReturn(run func(admin.GetCollStatsLatencyNamespaceMetricsApiRequest) (interface{}, *http.Response, error)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespaceMetricsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespaceMetricsWithParams(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceMetricsApiParams) admin.GetCollStatsLatencyNamespaceMetricsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespaceMetricsWithParams")
	}

	var r0 admin.GetCollStatsLatencyNamespaceMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCollStatsLatencyNamespaceMetricsApiParams) admin.GetCollStatsLatencyNamespaceMetricsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespaceMetricsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespaceMetricsWithParams'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespaceMetricsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCollStatsLatencyNamespaceMetricsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespaceMetricsWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call{Call: _e.mock.On("GetCollStatsLatencyNamespaceMetricsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCollStatsLatencyNamespaceMetricsApiParams)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCollStatsLatencyNamespaceMetricsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call) Return(_a0 admin.GetCollStatsLatencyNamespaceMetricsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCollStatsLatencyNamespaceMetricsApiParams) admin.GetCollStatsLatencyNamespaceMetricsApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespaceMetricsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForCluster provides a mock function with given fields: ctx, groupId, clusterName, clusterView
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForCluster(ctx context.Context, groupId string, clusterName string, clusterView string) admin.GetCollStatsLatencyNamespacesForClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterView)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForCluster")
	}

	var r0 admin.GetCollStatsLatencyNamespacesForClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetCollStatsLatencyNamespacesForClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterView)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespacesForClusterApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForCluster'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterView string
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForCluster(ctx interface{}, groupId interface{}, clusterName interface{}, clusterView interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForCluster", ctx, groupId, clusterName, clusterView)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterView string)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call) Return(_a0 admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForClusterExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForClusterExecute(r admin.GetCollStatsLatencyNamespacesForClusterApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForClusterExecute")
	}

	var r0 *admin.CollStatsRankedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespacesForClusterApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *admin.CollStatsRankedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CollStatsRankedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCollStatsLatencyNamespacesForClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForClusterExecute'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForClusterExecute is a helper method to define mock.On call
//   - r admin.GetCollStatsLatencyNamespacesForClusterApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForClusterExecute(r interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForClusterExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call) Run(run func(r admin.GetCollStatsLatencyNamespacesForClusterApiRequest)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCollStatsLatencyNamespacesForClusterApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call) Return(_a0 *admin.CollStatsRankedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call) RunAndReturn(run func(admin.GetCollStatsLatencyNamespacesForClusterApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForClusterWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForClusterWithParams(ctx context.Context, args *admin.GetCollStatsLatencyNamespacesForClusterApiParams) admin.GetCollStatsLatencyNamespacesForClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForClusterWithParams")
	}

	var r0 admin.GetCollStatsLatencyNamespacesForClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCollStatsLatencyNamespacesForClusterApiParams) admin.GetCollStatsLatencyNamespacesForClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespacesForClusterApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForClusterWithParams'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCollStatsLatencyNamespacesForClusterApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForClusterWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForClusterWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCollStatsLatencyNamespacesForClusterApiParams)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCollStatsLatencyNamespacesForClusterApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call) Return(_a0 admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCollStatsLatencyNamespacesForClusterApiParams) admin.GetCollStatsLatencyNamespacesForClusterApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForHost provides a mock function with given fields: ctx, groupId, processId
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForHost(ctx context.Context, groupId string, processId string) admin.GetCollStatsLatencyNamespacesForHostApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForHost")
	}

	var r0 admin.GetCollStatsLatencyNamespacesForHostApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetCollStatsLatencyNamespacesForHostApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespacesForHostApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForHost'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForHost is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForHost(ctx interface{}, groupId interface{}, processId interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForHost", ctx, groupId, processId)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call) Run(run func(ctx context.Context, groupId string, processId string)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call) Return(_a0 admin.GetCollStatsLatencyNamespacesForHostApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call) RunAndReturn(run func(context.Context, string, string) admin.GetCollStatsLatencyNamespacesForHostApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForHostExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForHostExecute(r admin.GetCollStatsLatencyNamespacesForHostApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForHostExecute")
	}

	var r0 *admin.CollStatsRankedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespacesForHostApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCollStatsLatencyNamespacesForHostApiRequest) *admin.CollStatsRankedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CollStatsRankedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCollStatsLatencyNamespacesForHostApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCollStatsLatencyNamespacesForHostApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForHostExecute'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForHostExecute is a helper method to define mock.On call
//   - r admin.GetCollStatsLatencyNamespacesForHostApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForHostExecute(r interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForHostExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call) Run(run func(r admin.GetCollStatsLatencyNamespacesForHostApiRequest)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCollStatsLatencyNamespacesForHostApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call) Return(_a0 *admin.CollStatsRankedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call) RunAndReturn(run func(admin.GetCollStatsLatencyNamespacesForHostApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollStatsLatencyNamespacesForHostWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetCollStatsLatencyNamespacesForHostWithParams(ctx context.Context, args *admin.GetCollStatsLatencyNamespacesForHostApiParams) admin.GetCollStatsLatencyNamespacesForHostApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCollStatsLatencyNamespacesForHostWithParams")
	}

	var r0 admin.GetCollStatsLatencyNamespacesForHostApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCollStatsLatencyNamespacesForHostApiParams) admin.GetCollStatsLatencyNamespacesForHostApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCollStatsLatencyNamespacesForHostApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollStatsLatencyNamespacesForHostWithParams'
type CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call struct {
	*mock.Call
}

// GetCollStatsLatencyNamespacesForHostWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCollStatsLatencyNamespacesForHostApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetCollStatsLatencyNamespacesForHostWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call {
	return &CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call{Call: _e.mock.On("GetCollStatsLatencyNamespacesForHostWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCollStatsLatencyNamespacesForHostApiParams)) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCollStatsLatencyNamespacesForHostApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call) Return(_a0 admin.GetCollStatsLatencyNamespacesForHostApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCollStatsLatencyNamespacesForHostApiParams) admin.GetCollStatsLatencyNamespacesForHostApiRequest) *CollectionLevelMetricsApi_GetCollStatsLatencyNamespacesForHostWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPinnedNamespaces provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CollectionLevelMetricsApi) GetPinnedNamespaces(ctx context.Context, groupId string, clusterName string) admin.GetPinnedNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetPinnedNamespaces")
	}

	var r0 admin.GetPinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetPinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetPinnedNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPinnedNamespaces'
type CollectionLevelMetricsApi_GetPinnedNamespaces_Call struct {
	*mock.Call
}

// GetPinnedNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CollectionLevelMetricsApi_Expecter) GetPinnedNamespaces(ctx interface{}, groupId interface{}, clusterName interface{}) *CollectionLevelMetricsApi_GetPinnedNamespaces_Call {
	return &CollectionLevelMetricsApi_GetPinnedNamespaces_Call{Call: _e.mock.On("GetPinnedNamespaces", ctx, groupId, clusterName)}
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CollectionLevelMetricsApi_GetPinnedNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespaces_Call) Return(_a0 admin.GetPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_GetPinnedNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespaces_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_GetPinnedNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetPinnedNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetPinnedNamespacesExecute(r admin.GetPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPinnedNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPinnedNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPinnedNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPinnedNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPinnedNamespacesExecute'
type CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call struct {
	*mock.Call
}

// GetPinnedNamespacesExecute is a helper method to define mock.On call
//   - r admin.GetPinnedNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetPinnedNamespacesExecute(r interface{}) *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call{Call: _e.mock.On("GetPinnedNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call) Run(run func(r admin.GetPinnedNamespacesApiRequest)) *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPinnedNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call) RunAndReturn(run func(admin.GetPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_GetPinnedNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPinnedNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetPinnedNamespacesWithParams(ctx context.Context, args *admin.GetPinnedNamespacesApiParams) admin.GetPinnedNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPinnedNamespacesWithParams")
	}

	var r0 admin.GetPinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPinnedNamespacesApiParams) admin.GetPinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPinnedNamespacesWithParams'
type CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call struct {
	*mock.Call
}

// GetPinnedNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPinnedNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetPinnedNamespacesWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call{Call: _e.mock.On("GetPinnedNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPinnedNamespacesApiParams)) *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPinnedNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call) Return(_a0 admin.GetPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPinnedNamespacesApiParams) admin.GetPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_GetPinnedNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPatch provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) PinNamespacesPatch(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.PinNamespacesPatchApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPatch")
	}

	var r0 admin.PinNamespacesPatchApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesPatchApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesPatchApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespacesPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPatch'
type CollectionLevelMetricsApi_PinNamespacesPatch_Call struct {
	*mock.Call
}

// PinNamespacesPatch is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPatch(ctx interface{}, groupId interface{}, clusterName interface{}, namespacesRequest interface{}) *CollectionLevelMetricsApi_PinNamespacesPatch_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPatch_Call{Call: _e.mock.On("PinNamespacesPatch", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatch_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_PinNamespacesPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatch_Call) Return(_a0 admin.PinNamespacesPatchApiRequest) *CollectionLevelMetricsApi_PinNamespacesPatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatch_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesPatchApiRequest) *CollectionLevelMetricsApi_PinNamespacesPatch_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPatchExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) PinNamespacesPatchExecute(r admin.PinNamespacesPatchApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPatchExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesPatchApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesPatchApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PinNamespacesPatchApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.PinNamespacesPatchApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPatchExecute'
type CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call struct {
	*mock.Call
}

// PinNamespacesPatchExecute is a helper method to define mock.On call
//   - r admin.PinNamespacesPatchApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPatchExecute(r interface{}) *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call{Call: _e.mock.On("PinNamespacesPatchExecute", r)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call) Run(run func(r admin.PinNamespacesPatchApiRequest)) *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PinNamespacesPatchApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call) RunAndReturn(run func(admin.PinNamespacesPatchApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_PinNamespacesPatchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPatchWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) PinNamespacesPatchWithParams(ctx context.Context, args *admin.PinNamespacesPatchApiParams) admin.PinNamespacesPatchApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPatchWithParams")
	}

	var r0 admin.PinNamespacesPatchApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PinNamespacesPatchApiParams) admin.PinNamespacesPatchApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesPatchApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPatchWithParams'
type CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call struct {
	*mock.Call
}

// PinNamespacesPatchWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PinNamespacesPatchApiParams
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPatchWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call{Call: _e.mock.On("PinNamespacesPatchWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call) Run(run func(ctx context.Context, args *admin.PinNamespacesPatchApiParams)) *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PinNamespacesPatchApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call) Return(_a0 admin.PinNamespacesPatchApiRequest) *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call) RunAndReturn(run func(context.Context, *admin.PinNamespacesPatchApiParams) admin.PinNamespacesPatchApiRequest) *CollectionLevelMetricsApi_PinNamespacesPatchWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPut provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) PinNamespacesPut(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.PinNamespacesPutApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPut")
	}

	var r0 admin.PinNamespacesPutApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesPutApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesPutApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespacesPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPut'
type CollectionLevelMetricsApi_PinNamespacesPut_Call struct {
	*mock.Call
}

// PinNamespacesPut is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPut(ctx interface{}, groupId interface{}, clusterName interface{}, namespacesRequest interface{}) *CollectionLevelMetricsApi_PinNamespacesPut_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPut_Call{Call: _e.mock.On("PinNamespacesPut", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPut_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_PinNamespacesPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPut_Call) Return(_a0 admin.PinNamespacesPutApiRequest) *CollectionLevelMetricsApi_PinNamespacesPut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPut_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesPutApiRequest) *CollectionLevelMetricsApi_PinNamespacesPut_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPutExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) PinNamespacesPutExecute(r admin.PinNamespacesPutApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPutExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesPutApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesPutApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PinNamespacesPutApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.PinNamespacesPutApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_PinNamespacesPutExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPutExecute'
type CollectionLevelMetricsApi_PinNamespacesPutExecute_Call struct {
	*mock.Call
}

// PinNamespacesPutExecute is a helper method to define mock.On call
//   - r admin.PinNamespacesPutApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPutExecute(r interface{}) *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPutExecute_Call{Call: _e.mock.On("PinNamespacesPutExecute", r)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call) Run(run func(r admin.PinNamespacesPutApiRequest)) *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PinNamespacesPutApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call) RunAndReturn(run func(admin.PinNamespacesPutApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_PinNamespacesPutExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesPutWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) PinNamespacesPutWithParams(ctx context.Context, args *admin.PinNamespacesPutApiParams) admin.PinNamespacesPutApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesPutWithParams")
	}

	var r0 admin.PinNamespacesPutApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PinNamespacesPutApiParams) admin.PinNamespacesPutApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesPutApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesPutWithParams'
type CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call struct {
	*mock.Call
}

// PinNamespacesPutWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PinNamespacesPutApiParams
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesPutWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call {
	return &CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call{Call: _e.mock.On("PinNamespacesPutWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call) Run(run func(ctx context.Context, args *admin.PinNamespacesPutApiParams)) *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PinNamespacesPutApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call) Return(_a0 admin.PinNamespacesPutApiRequest) *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call) RunAndReturn(run func(context.Context, *admin.PinNamespacesPutApiParams) admin.PinNamespacesPutApiRequest) *CollectionLevelMetricsApi_PinNamespacesPutWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespaces provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) UnpinNamespaces(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespaces")
	}

	var r0 admin.UnpinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.UnpinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UnpinNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespaces'
type CollectionLevelMetricsApi_UnpinNamespaces_Call struct {
	*mock.Call
}

// UnpinNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespaces(ctx interface{}, groupId interface{}, clusterName interface{}, namespacesRequest interface{}) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	return &CollectionLevelMetricsApi_UnpinNamespaces_Call{Call: _e.mock.On("UnpinNamespaces", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) Return(_a0 admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) UnpinNamespacesExecute(r admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UnpinNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UnpinNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UnpinNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_UnpinNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespacesExecute'
type CollectionLevelMetricsApi_UnpinNamespacesExecute_Call struct {
	*mock.Call
}

// UnpinNamespacesExecute is a helper method to define mock.On call
//   - r admin.UnpinNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespacesExecute(r interface{}) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_UnpinNamespacesExecute_Call{Call: _e.mock.On("UnpinNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) Run(run func(r admin.UnpinNamespacesApiRequest)) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UnpinNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) RunAndReturn(run func(admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) UnpinNamespacesWithParams(ctx context.Context, args *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespacesWithParams")
	}

	var r0 admin.UnpinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UnpinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespacesWithParams'
type CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call struct {
	*mock.Call
}

// UnpinNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UnpinNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespacesWithParams(ctx interface{}, args interface{}) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call{Call: _e.mock.On("UnpinNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.UnpinNamespacesApiParams)) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UnpinNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) Return(_a0 admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionLevelMetricsApi creates a new instance of CollectionLevelMetricsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionLevelMetricsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionLevelMetricsApi {
	mock := &CollectionLevelMetricsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
