// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CollectionLevelMetricsApi is an autogenerated mock type for the CollectionLevelMetricsApi type
type CollectionLevelMetricsApi struct {
	mock.Mock
}

type CollectionLevelMetricsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionLevelMetricsApi) EXPECT() *CollectionLevelMetricsApi_Expecter {
	return &CollectionLevelMetricsApi_Expecter{mock: &_m.Mock}
}

// GetClusterNamespaces provides a mock function with given fields: ctx, groupId, clusterName, clusterView
func (_m *CollectionLevelMetricsApi) GetClusterNamespaces(ctx context.Context, groupId string, clusterName string, clusterView string) admin.GetClusterNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterView)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterNamespaces")
	}

	var r0 admin.GetClusterNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterView)
	} else {
		r0 = ret.Get(0).(admin.GetClusterNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetClusterNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterNamespaces'
type CollectionLevelMetricsApi_GetClusterNamespaces_Call struct {
	*mock.Call
}

// GetClusterNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterView string
func (_e *CollectionLevelMetricsApi_Expecter) GetClusterNamespaces(ctx any, groupId any, clusterName any, clusterView any) *CollectionLevelMetricsApi_GetClusterNamespaces_Call {
	return &CollectionLevelMetricsApi_GetClusterNamespaces_Call{Call: _e.mock.On("GetClusterNamespaces", ctx, groupId, clusterName, clusterView)}
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterView string)) *CollectionLevelMetricsApi_GetClusterNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespaces_Call) Return(_a0 admin.GetClusterNamespacesApiRequest) *CollectionLevelMetricsApi_GetClusterNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespaces_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterNamespacesApiRequest) *CollectionLevelMetricsApi_GetClusterNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetClusterNamespacesExecute(r admin.GetClusterNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterNamespacesExecute")
	}

	var r0 *admin.CollStatsRankedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterNamespacesApiRequest) *admin.CollStatsRankedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CollStatsRankedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterNamespacesExecute'
type CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call struct {
	*mock.Call
}

// GetClusterNamespacesExecute is a helper method to define mock.On call
//   - r admin.GetClusterNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetClusterNamespacesExecute(r any) *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call{Call: _e.mock.On("GetClusterNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call) Run(run func(r admin.GetClusterNamespacesApiRequest)) *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call) Return(_a0 *admin.CollStatsRankedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call) RunAndReturn(run func(admin.GetClusterNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_GetClusterNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetClusterNamespacesWithParams(ctx context.Context, args *admin.GetClusterNamespacesApiParams) admin.GetClusterNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterNamespacesWithParams")
	}

	var r0 admin.GetClusterNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterNamespacesApiParams) admin.GetClusterNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterNamespacesWithParams'
type CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call struct {
	*mock.Call
}

// GetClusterNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetClusterNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call{Call: _e.mock.On("GetClusterNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterNamespacesApiParams)) *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call) Return(_a0 admin.GetClusterNamespacesApiRequest) *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterNamespacesApiParams) admin.GetClusterNamespacesApiRequest) *CollectionLevelMetricsApi_GetClusterNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessNamespaces provides a mock function with given fields: ctx, groupId, processId
func (_m *CollectionLevelMetricsApi) GetProcessNamespaces(ctx context.Context, groupId string, processId string) admin.GetProcessNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessNamespaces")
	}

	var r0 admin.GetProcessNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProcessNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.GetProcessNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetProcessNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessNamespaces'
type CollectionLevelMetricsApi_GetProcessNamespaces_Call struct {
	*mock.Call
}

// GetProcessNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *CollectionLevelMetricsApi_Expecter) GetProcessNamespaces(ctx any, groupId any, processId any) *CollectionLevelMetricsApi_GetProcessNamespaces_Call {
	return &CollectionLevelMetricsApi_GetProcessNamespaces_Call{Call: _e.mock.On("GetProcessNamespaces", ctx, groupId, processId)}
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespaces_Call) Run(run func(ctx context.Context, groupId string, processId string)) *CollectionLevelMetricsApi_GetProcessNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespaces_Call) Return(_a0 admin.GetProcessNamespacesApiRequest) *CollectionLevelMetricsApi_GetProcessNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespaces_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProcessNamespacesApiRequest) *CollectionLevelMetricsApi_GetProcessNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) GetProcessNamespacesExecute(r admin.GetProcessNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessNamespacesExecute")
	}

	var r0 *admin.CollStatsRankedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProcessNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProcessNamespacesApiRequest) *admin.CollStatsRankedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CollStatsRankedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProcessNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProcessNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessNamespacesExecute'
type CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call struct {
	*mock.Call
}

// GetProcessNamespacesExecute is a helper method to define mock.On call
//   - r admin.GetProcessNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) GetProcessNamespacesExecute(r any) *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call{Call: _e.mock.On("GetProcessNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call) Run(run func(r admin.GetProcessNamespacesApiRequest)) *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProcessNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call) Return(_a0 *admin.CollStatsRankedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call) RunAndReturn(run func(admin.GetProcessNamespacesApiRequest) (*admin.CollStatsRankedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_GetProcessNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) GetProcessNamespacesWithParams(ctx context.Context, args *admin.GetProcessNamespacesApiParams) admin.GetProcessNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessNamespacesWithParams")
	}

	var r0 admin.GetProcessNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProcessNamespacesApiParams) admin.GetProcessNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProcessNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessNamespacesWithParams'
type CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call struct {
	*mock.Call
}

// GetProcessNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProcessNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) GetProcessNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call{Call: _e.mock.On("GetProcessNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProcessNamespacesApiParams)) *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProcessNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call) Return(_a0 admin.GetProcessNamespacesApiRequest) *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProcessNamespacesApiParams) admin.GetProcessNamespacesApiRequest) *CollectionLevelMetricsApi_GetProcessNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMeasurements provides a mock function with given fields: ctx, groupId, clusterName, clusterView, databaseName, collectionName
func (_m *CollectionLevelMetricsApi) ListCollStatMeasurements(ctx context.Context, groupId string, clusterName string, clusterView string, databaseName string, collectionName string) admin.ListCollStatMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterView, databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMeasurements")
	}

	var r0 admin.ListCollStatMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.ListCollStatMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterView, databaseName, collectionName)
	} else {
		r0 = ret.Get(0).(admin.ListCollStatMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListCollStatMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMeasurements'
type CollectionLevelMetricsApi_ListCollStatMeasurements_Call struct {
	*mock.Call
}

// ListCollStatMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterView string
//   - databaseName string
//   - collectionName string
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMeasurements(ctx any, groupId any, clusterName any, clusterView any, databaseName any, collectionName any) *CollectionLevelMetricsApi_ListCollStatMeasurements_Call {
	return &CollectionLevelMetricsApi_ListCollStatMeasurements_Call{Call: _e.mock.On("ListCollStatMeasurements", ctx, groupId, clusterName, clusterView, databaseName, collectionName)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurements_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterView string, databaseName string, collectionName string)) *CollectionLevelMetricsApi_ListCollStatMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurements_Call) Return(_a0 admin.ListCollStatMeasurementsApiRequest) *CollectionLevelMetricsApi_ListCollStatMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.ListCollStatMeasurementsApiRequest) *CollectionLevelMetricsApi_ListCollStatMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMeasurementsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) ListCollStatMeasurementsExecute(r admin.ListCollStatMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMeasurementsExecute")
	}

	var r0 *admin.MeasurementsCollStatsLatencyCluster
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListCollStatMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListCollStatMeasurementsApiRequest) *admin.MeasurementsCollStatsLatencyCluster); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsCollStatsLatencyCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListCollStatMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListCollStatMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMeasurementsExecute'
type CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call struct {
	*mock.Call
}

// ListCollStatMeasurementsExecute is a helper method to define mock.On call
//   - r admin.ListCollStatMeasurementsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMeasurementsExecute(r any) *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call {
	return &CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call{Call: _e.mock.On("ListCollStatMeasurementsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call) Run(run func(r admin.ListCollStatMeasurementsApiRequest)) *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListCollStatMeasurementsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsCollStatsLatencyCluster, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call) RunAndReturn(run func(admin.ListCollStatMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyCluster, *http.Response, error)) *CollectionLevelMetricsApi_ListCollStatMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) ListCollStatMeasurementsWithParams(ctx context.Context, args *admin.ListCollStatMeasurementsApiParams) admin.ListCollStatMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMeasurementsWithParams")
	}

	var r0 admin.ListCollStatMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListCollStatMeasurementsApiParams) admin.ListCollStatMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListCollStatMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMeasurementsWithParams'
type CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call struct {
	*mock.Call
}

// ListCollStatMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListCollStatMeasurementsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMeasurementsWithParams(ctx any, args any) *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call {
	return &CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call{Call: _e.mock.On("ListCollStatMeasurementsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListCollStatMeasurementsApiParams)) *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListCollStatMeasurementsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call) Return(_a0 admin.ListCollStatMeasurementsApiRequest) *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListCollStatMeasurementsApiParams) admin.ListCollStatMeasurementsApiRequest) *CollectionLevelMetricsApi_ListCollStatMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMetrics provides a mock function with given fields: ctx, groupId
func (_m *CollectionLevelMetricsApi) ListCollStatMetrics(ctx context.Context, groupId string) admin.ListCollStatMetricsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMetrics")
	}

	var r0 admin.ListCollStatMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListCollStatMetricsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListCollStatMetricsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListCollStatMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMetrics'
type CollectionLevelMetricsApi_ListCollStatMetrics_Call struct {
	*mock.Call
}

// ListCollStatMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMetrics(ctx any, groupId any) *CollectionLevelMetricsApi_ListCollStatMetrics_Call {
	return &CollectionLevelMetricsApi_ListCollStatMetrics_Call{Call: _e.mock.On("ListCollStatMetrics", ctx, groupId)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetrics_Call) Run(run func(ctx context.Context, groupId string)) *CollectionLevelMetricsApi_ListCollStatMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetrics_Call) Return(_a0 admin.ListCollStatMetricsApiRequest) *CollectionLevelMetricsApi_ListCollStatMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetrics_Call) RunAndReturn(run func(context.Context, string) admin.ListCollStatMetricsApiRequest) *CollectionLevelMetricsApi_ListCollStatMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMetricsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) ListCollStatMetricsExecute(r admin.ListCollStatMetricsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.ListCollStatMetricsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListCollStatMetricsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListCollStatMetricsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMetricsExecute'
type CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call struct {
	*mock.Call
}

// ListCollStatMetricsExecute is a helper method to define mock.On call
//   - r admin.ListCollStatMetricsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMetricsExecute(r any) *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call {
	return &CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call{Call: _e.mock.On("ListCollStatMetricsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call) Run(run func(r admin.ListCollStatMetricsApiRequest)) *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListCollStatMetricsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call) Return(_a0 *http.Response, _a1 error) *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call) RunAndReturn(run func(admin.ListCollStatMetricsApiRequest) (*http.Response, error)) *CollectionLevelMetricsApi_ListCollStatMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollStatMetricsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) ListCollStatMetricsWithParams(ctx context.Context, args *admin.ListCollStatMetricsApiParams) admin.ListCollStatMetricsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListCollStatMetricsWithParams")
	}

	var r0 admin.ListCollStatMetricsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListCollStatMetricsApiParams) admin.ListCollStatMetricsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListCollStatMetricsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollStatMetricsWithParams'
type CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call struct {
	*mock.Call
}

// ListCollStatMetricsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListCollStatMetricsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) ListCollStatMetricsWithParams(ctx any, args any) *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call {
	return &CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call{Call: _e.mock.On("ListCollStatMetricsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListCollStatMetricsApiParams)) *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListCollStatMetricsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call) Return(_a0 admin.ListCollStatMetricsApiRequest) *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListCollStatMetricsApiParams) admin.ListCollStatMetricsApiRequest) *CollectionLevelMetricsApi_ListCollStatMetricsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPinnedNamespaces provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CollectionLevelMetricsApi) ListPinnedNamespaces(ctx context.Context, groupId string, clusterName string) admin.ListPinnedNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListPinnedNamespaces")
	}

	var r0 admin.ListPinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListPinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListPinnedNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPinnedNamespaces'
type CollectionLevelMetricsApi_ListPinnedNamespaces_Call struct {
	*mock.Call
}

// ListPinnedNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CollectionLevelMetricsApi_Expecter) ListPinnedNamespaces(ctx any, groupId any, clusterName any) *CollectionLevelMetricsApi_ListPinnedNamespaces_Call {
	return &CollectionLevelMetricsApi_ListPinnedNamespaces_Call{Call: _e.mock.On("ListPinnedNamespaces", ctx, groupId, clusterName)}
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CollectionLevelMetricsApi_ListPinnedNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespaces_Call) Return(_a0 admin.ListPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_ListPinnedNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespaces_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_ListPinnedNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListPinnedNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) ListPinnedNamespacesExecute(r admin.ListPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPinnedNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPinnedNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPinnedNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPinnedNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPinnedNamespacesExecute'
type CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call struct {
	*mock.Call
}

// ListPinnedNamespacesExecute is a helper method to define mock.On call
//   - r admin.ListPinnedNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) ListPinnedNamespacesExecute(r any) *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call{Call: _e.mock.On("ListPinnedNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call) Run(run func(r admin.ListPinnedNamespacesApiRequest)) *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPinnedNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call) RunAndReturn(run func(admin.ListPinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_ListPinnedNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPinnedNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) ListPinnedNamespacesWithParams(ctx context.Context, args *admin.ListPinnedNamespacesApiParams) admin.ListPinnedNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPinnedNamespacesWithParams")
	}

	var r0 admin.ListPinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPinnedNamespacesApiParams) admin.ListPinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPinnedNamespacesWithParams'
type CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call struct {
	*mock.Call
}

// ListPinnedNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPinnedNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) ListPinnedNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call{Call: _e.mock.On("ListPinnedNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPinnedNamespacesApiParams)) *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPinnedNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call) Return(_a0 admin.ListPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPinnedNamespacesApiParams) admin.ListPinnedNamespacesApiRequest) *CollectionLevelMetricsApi_ListPinnedNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessMeasurements provides a mock function with given fields: ctx, groupId, processId, databaseName, collectionName
func (_m *CollectionLevelMetricsApi) ListProcessMeasurements(ctx context.Context, groupId string, processId string, databaseName string, collectionName string) admin.ListProcessMeasurementsApiRequest {
	ret := _m.Called(ctx, groupId, processId, databaseName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessMeasurements")
	}

	var r0 admin.ListProcessMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListProcessMeasurementsApiRequest); ok {
		r0 = rf(ctx, groupId, processId, databaseName, collectionName)
	} else {
		r0 = ret.Get(0).(admin.ListProcessMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListProcessMeasurements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessMeasurements'
type CollectionLevelMetricsApi_ListProcessMeasurements_Call struct {
	*mock.Call
}

// ListProcessMeasurements is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
//   - databaseName string
//   - collectionName string
func (_e *CollectionLevelMetricsApi_Expecter) ListProcessMeasurements(ctx any, groupId any, processId any, databaseName any, collectionName any) *CollectionLevelMetricsApi_ListProcessMeasurements_Call {
	return &CollectionLevelMetricsApi_ListProcessMeasurements_Call{Call: _e.mock.On("ListProcessMeasurements", ctx, groupId, processId, databaseName, collectionName)}
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurements_Call) Run(run func(ctx context.Context, groupId string, processId string, databaseName string, collectionName string)) *CollectionLevelMetricsApi_ListProcessMeasurements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurements_Call) Return(_a0 admin.ListProcessMeasurementsApiRequest) *CollectionLevelMetricsApi_ListProcessMeasurements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurements_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListProcessMeasurementsApiRequest) *CollectionLevelMetricsApi_ListProcessMeasurements_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessMeasurementsExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) ListProcessMeasurementsExecute(r admin.ListProcessMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessMeasurementsExecute")
	}

	var r0 *admin.MeasurementsCollStatsLatencyHost
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProcessMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProcessMeasurementsApiRequest) *admin.MeasurementsCollStatsLatencyHost); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MeasurementsCollStatsLatencyHost)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProcessMeasurementsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProcessMeasurementsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessMeasurementsExecute'
type CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call struct {
	*mock.Call
}

// ListProcessMeasurementsExecute is a helper method to define mock.On call
//   - r admin.ListProcessMeasurementsApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) ListProcessMeasurementsExecute(r any) *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call {
	return &CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call{Call: _e.mock.On("ListProcessMeasurementsExecute", r)}
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call) Run(run func(r admin.ListProcessMeasurementsApiRequest)) *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProcessMeasurementsApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call) Return(_a0 *admin.MeasurementsCollStatsLatencyHost, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call) RunAndReturn(run func(admin.ListProcessMeasurementsApiRequest) (*admin.MeasurementsCollStatsLatencyHost, *http.Response, error)) *CollectionLevelMetricsApi_ListProcessMeasurementsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessMeasurementsWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) ListProcessMeasurementsWithParams(ctx context.Context, args *admin.ListProcessMeasurementsApiParams) admin.ListProcessMeasurementsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessMeasurementsWithParams")
	}

	var r0 admin.ListProcessMeasurementsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProcessMeasurementsApiParams) admin.ListProcessMeasurementsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProcessMeasurementsApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessMeasurementsWithParams'
type CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call struct {
	*mock.Call
}

// ListProcessMeasurementsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProcessMeasurementsApiParams
func (_e *CollectionLevelMetricsApi_Expecter) ListProcessMeasurementsWithParams(ctx any, args any) *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call {
	return &CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call{Call: _e.mock.On("ListProcessMeasurementsWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProcessMeasurementsApiParams)) *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProcessMeasurementsApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call) Return(_a0 admin.ListProcessMeasurementsApiRequest) *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProcessMeasurementsApiParams) admin.ListProcessMeasurementsApiRequest) *CollectionLevelMetricsApi_ListProcessMeasurementsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespaces provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) PinNamespaces(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.PinNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespaces")
	}

	var r0 admin.PinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespaces'
type CollectionLevelMetricsApi_PinNamespaces_Call struct {
	*mock.Call
}

// PinNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespaces(ctx any, groupId any, clusterName any, namespacesRequest any) *CollectionLevelMetricsApi_PinNamespaces_Call {
	return &CollectionLevelMetricsApi_PinNamespaces_Call{Call: _e.mock.On("PinNamespaces", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_PinNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_PinNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespaces_Call) Return(_a0 admin.PinNamespacesApiRequest) *CollectionLevelMetricsApi_PinNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespaces_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.PinNamespacesApiRequest) *CollectionLevelMetricsApi_PinNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) PinNamespacesExecute(r admin.PinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PinNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PinNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.PinNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_PinNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesExecute'
type CollectionLevelMetricsApi_PinNamespacesExecute_Call struct {
	*mock.Call
}

// PinNamespacesExecute is a helper method to define mock.On call
//   - r admin.PinNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesExecute(r any) *CollectionLevelMetricsApi_PinNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_PinNamespacesExecute_Call{Call: _e.mock.On("PinNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesExecute_Call) Run(run func(r admin.PinNamespacesApiRequest)) *CollectionLevelMetricsApi_PinNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PinNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_PinNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesExecute_Call) RunAndReturn(run func(admin.PinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_PinNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PinNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) PinNamespacesWithParams(ctx context.Context, args *admin.PinNamespacesApiParams) admin.PinNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PinNamespacesWithParams")
	}

	var r0 admin.PinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PinNamespacesApiParams) admin.PinNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_PinNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinNamespacesWithParams'
type CollectionLevelMetricsApi_PinNamespacesWithParams_Call struct {
	*mock.Call
}

// PinNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PinNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) PinNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_PinNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_PinNamespacesWithParams_Call{Call: _e.mock.On("PinNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_PinNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.PinNamespacesApiParams)) *CollectionLevelMetricsApi_PinNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PinNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesWithParams_Call) Return(_a0 admin.PinNamespacesApiRequest) *CollectionLevelMetricsApi_PinNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_PinNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.PinNamespacesApiParams) admin.PinNamespacesApiRequest) *CollectionLevelMetricsApi_PinNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespaces provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) UnpinNamespaces(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespaces")
	}

	var r0 admin.UnpinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.UnpinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UnpinNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespaces'
type CollectionLevelMetricsApi_UnpinNamespaces_Call struct {
	*mock.Call
}

// UnpinNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespaces(ctx any, groupId any, clusterName any, namespacesRequest any) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	return &CollectionLevelMetricsApi_UnpinNamespaces_Call{Call: _e.mock.On("UnpinNamespaces", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) Return(_a0 admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespaces_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) UnpinNamespacesExecute(r admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UnpinNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UnpinNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UnpinNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_UnpinNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespacesExecute'
type CollectionLevelMetricsApi_UnpinNamespacesExecute_Call struct {
	*mock.Call
}

// UnpinNamespacesExecute is a helper method to define mock.On call
//   - r admin.UnpinNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespacesExecute(r any) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_UnpinNamespacesExecute_Call{Call: _e.mock.On("UnpinNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) Run(run func(r admin.UnpinNamespacesApiRequest)) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UnpinNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call) RunAndReturn(run func(admin.UnpinNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_UnpinNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) UnpinNamespacesWithParams(ctx context.Context, args *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UnpinNamespacesWithParams")
	}

	var r0 admin.UnpinNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UnpinNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinNamespacesWithParams'
type CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call struct {
	*mock.Call
}

// UnpinNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UnpinNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) UnpinNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call{Call: _e.mock.On("UnpinNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.UnpinNamespacesApiParams)) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UnpinNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) Return(_a0 admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UnpinNamespacesApiParams) admin.UnpinNamespacesApiRequest) *CollectionLevelMetricsApi_UnpinNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePinnedNamespaces provides a mock function with given fields: ctx, groupId, clusterName, namespacesRequest
func (_m *CollectionLevelMetricsApi) UpdatePinnedNamespaces(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest) admin.UpdatePinnedNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, namespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePinnedNamespaces")
	}

	var r0 admin.UpdatePinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.NamespacesRequest) admin.UpdatePinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, namespacesRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdatePinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePinnedNamespaces'
type CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call struct {
	*mock.Call
}

// UpdatePinnedNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - namespacesRequest *admin.NamespacesRequest
func (_e *CollectionLevelMetricsApi_Expecter) UpdatePinnedNamespaces(ctx any, groupId any, clusterName any, namespacesRequest any) *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call {
	return &CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call{Call: _e.mock.On("UpdatePinnedNamespaces", ctx, groupId, clusterName, namespacesRequest)}
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call) Run(run func(ctx context.Context, groupId string, clusterName string, namespacesRequest *admin.NamespacesRequest)) *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.NamespacesRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call) Return(_a0 admin.UpdatePinnedNamespacesApiRequest) *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call) RunAndReturn(run func(context.Context, string, string, *admin.NamespacesRequest) admin.UpdatePinnedNamespacesApiRequest) *CollectionLevelMetricsApi_UpdatePinnedNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePinnedNamespacesExecute provides a mock function with given fields: r
func (_m *CollectionLevelMetricsApi) UpdatePinnedNamespacesExecute(r admin.UpdatePinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePinnedNamespacesExecute")
	}

	var r0 *admin.PinnedNamespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdatePinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdatePinnedNamespacesApiRequest) *admin.PinnedNamespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PinnedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdatePinnedNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdatePinnedNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePinnedNamespacesExecute'
type CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call struct {
	*mock.Call
}

// UpdatePinnedNamespacesExecute is a helper method to define mock.On call
//   - r admin.UpdatePinnedNamespacesApiRequest
func (_e *CollectionLevelMetricsApi_Expecter) UpdatePinnedNamespacesExecute(r any) *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call {
	return &CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call{Call: _e.mock.On("UpdatePinnedNamespacesExecute", r)}
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call) Run(run func(r admin.UpdatePinnedNamespacesApiRequest)) *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdatePinnedNamespacesApiRequest))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call) Return(_a0 *admin.PinnedNamespaces, _a1 *http.Response, _a2 error) *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call) RunAndReturn(run func(admin.UpdatePinnedNamespacesApiRequest) (*admin.PinnedNamespaces, *http.Response, error)) *CollectionLevelMetricsApi_UpdatePinnedNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePinnedNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *CollectionLevelMetricsApi) UpdatePinnedNamespacesWithParams(ctx context.Context, args *admin.UpdatePinnedNamespacesApiParams) admin.UpdatePinnedNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePinnedNamespacesWithParams")
	}

	var r0 admin.UpdatePinnedNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePinnedNamespacesApiParams) admin.UpdatePinnedNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdatePinnedNamespacesApiRequest)
	}

	return r0
}

// CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePinnedNamespacesWithParams'
type CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call struct {
	*mock.Call
}

// UpdatePinnedNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdatePinnedNamespacesApiParams
func (_e *CollectionLevelMetricsApi_Expecter) UpdatePinnedNamespacesWithParams(ctx any, args any) *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call {
	return &CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call{Call: _e.mock.On("UpdatePinnedNamespacesWithParams", ctx, args)}
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdatePinnedNamespacesApiParams)) *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdatePinnedNamespacesApiParams))
	})
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call) Return(_a0 admin.UpdatePinnedNamespacesApiRequest) *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdatePinnedNamespacesApiParams) admin.UpdatePinnedNamespacesApiRequest) *CollectionLevelMetricsApi_UpdatePinnedNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionLevelMetricsApi creates a new instance of CollectionLevelMetricsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionLevelMetricsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionLevelMetricsApi {
	mock := &CollectionLevelMetricsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
