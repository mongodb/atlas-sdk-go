// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CustomDatabaseRolesApi is an autogenerated mock type for the CustomDatabaseRolesApi type
type CustomDatabaseRolesApi struct {
	mock.Mock
}

type CustomDatabaseRolesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomDatabaseRolesApi) EXPECT() *CustomDatabaseRolesApi_Expecter {
	return &CustomDatabaseRolesApi_Expecter{mock: &_m.Mock}
}

// CreateCustomDbRole provides a mock function with given fields: ctx, groupId, userCustomDBRole
func (_m *CustomDatabaseRolesApi) CreateCustomDbRole(ctx context.Context, groupId string, userCustomDBRole *admin.UserCustomDBRole) admin.CreateCustomDbRoleApiRequest {
	ret := _m.Called(ctx, groupId, userCustomDBRole)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDbRole")
	}

	var r0 admin.CreateCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.UserCustomDBRole) admin.CreateCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, groupId, userCustomDBRole)
	} else {
		r0 = ret.Get(0).(admin.CreateCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_CreateCustomDbRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomDbRole'
type CustomDatabaseRolesApi_CreateCustomDbRole_Call struct {
	*mock.Call
}

// CreateCustomDbRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userCustomDBRole *admin.UserCustomDBRole
func (_e *CustomDatabaseRolesApi_Expecter) CreateCustomDbRole(ctx any, groupId any, userCustomDBRole any) *CustomDatabaseRolesApi_CreateCustomDbRole_Call {
	return &CustomDatabaseRolesApi_CreateCustomDbRole_Call{Call: _e.mock.On("CreateCustomDbRole", ctx, groupId, userCustomDBRole)}
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRole_Call) Run(run func(ctx context.Context, groupId string, userCustomDBRole *admin.UserCustomDBRole)) *CustomDatabaseRolesApi_CreateCustomDbRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.UserCustomDBRole))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRole_Call) Return(_a0 admin.CreateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_CreateCustomDbRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRole_Call) RunAndReturn(run func(context.Context, string, *admin.UserCustomDBRole) admin.CreateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_CreateCustomDbRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomDbRoleExecute provides a mock function with given fields: r
func (_m *CustomDatabaseRolesApi) CreateCustomDbRoleExecute(r admin.CreateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDbRoleExecute")
	}

	var r0 *admin.UserCustomDBRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateCustomDbRoleApiRequest) *admin.UserCustomDBRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserCustomDBRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateCustomDbRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateCustomDbRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomDbRoleExecute'
type CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call struct {
	*mock.Call
}

// CreateCustomDbRoleExecute is a helper method to define mock.On call
//   - r admin.CreateCustomDbRoleApiRequest
func (_e *CustomDatabaseRolesApi_Expecter) CreateCustomDbRoleExecute(r any) *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call {
	return &CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call{Call: _e.mock.On("CreateCustomDbRoleExecute", r)}
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call) Run(run func(r admin.CreateCustomDbRoleApiRequest)) *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateCustomDbRoleApiRequest))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call) Return(_a0 *admin.UserCustomDBRole, _a1 *http.Response, _a2 error) *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call) RunAndReturn(run func(admin.CreateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)) *CustomDatabaseRolesApi_CreateCustomDbRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomDbRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CustomDatabaseRolesApi) CreateCustomDbRoleWithParams(ctx context.Context, args *admin.CreateCustomDbRoleApiParams) admin.CreateCustomDbRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDbRoleWithParams")
	}

	var r0 admin.CreateCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateCustomDbRoleApiParams) admin.CreateCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomDbRoleWithParams'
type CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call struct {
	*mock.Call
}

// CreateCustomDbRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateCustomDbRoleApiParams
func (_e *CustomDatabaseRolesApi_Expecter) CreateCustomDbRoleWithParams(ctx any, args any) *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call {
	return &CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call{Call: _e.mock.On("CreateCustomDbRoleWithParams", ctx, args)}
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateCustomDbRoleApiParams)) *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateCustomDbRoleApiParams))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call) Return(_a0 admin.CreateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateCustomDbRoleApiParams) admin.CreateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_CreateCustomDbRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomDbRole provides a mock function with given fields: ctx, groupId, roleName
func (_m *CustomDatabaseRolesApi) DeleteCustomDbRole(ctx context.Context, groupId string, roleName string) admin.DeleteCustomDbRoleApiRequest {
	ret := _m.Called(ctx, groupId, roleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDbRole")
	}

	var r0 admin.DeleteCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, groupId, roleName)
	} else {
		r0 = ret.Get(0).(admin.DeleteCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_DeleteCustomDbRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomDbRole'
type CustomDatabaseRolesApi_DeleteCustomDbRole_Call struct {
	*mock.Call
}

// DeleteCustomDbRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - roleName string
func (_e *CustomDatabaseRolesApi_Expecter) DeleteCustomDbRole(ctx any, groupId any, roleName any) *CustomDatabaseRolesApi_DeleteCustomDbRole_Call {
	return &CustomDatabaseRolesApi_DeleteCustomDbRole_Call{Call: _e.mock.On("DeleteCustomDbRole", ctx, groupId, roleName)}
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRole_Call) Run(run func(ctx context.Context, groupId string, roleName string)) *CustomDatabaseRolesApi_DeleteCustomDbRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRole_Call) Return(_a0 admin.DeleteCustomDbRoleApiRequest) *CustomDatabaseRolesApi_DeleteCustomDbRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRole_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteCustomDbRoleApiRequest) *CustomDatabaseRolesApi_DeleteCustomDbRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomDbRoleExecute provides a mock function with given fields: r
func (_m *CustomDatabaseRolesApi) DeleteCustomDbRoleExecute(r admin.DeleteCustomDbRoleApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDbRoleExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteCustomDbRoleApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteCustomDbRoleApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteCustomDbRoleApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomDbRoleExecute'
type CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call struct {
	*mock.Call
}

// DeleteCustomDbRoleExecute is a helper method to define mock.On call
//   - r admin.DeleteCustomDbRoleApiRequest
func (_e *CustomDatabaseRolesApi_Expecter) DeleteCustomDbRoleExecute(r any) *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call {
	return &CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call{Call: _e.mock.On("DeleteCustomDbRoleExecute", r)}
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call) Run(run func(r admin.DeleteCustomDbRoleApiRequest)) *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteCustomDbRoleApiRequest))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call) Return(_a0 *http.Response, _a1 error) *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call) RunAndReturn(run func(admin.DeleteCustomDbRoleApiRequest) (*http.Response, error)) *CustomDatabaseRolesApi_DeleteCustomDbRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomDbRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CustomDatabaseRolesApi) DeleteCustomDbRoleWithParams(ctx context.Context, args *admin.DeleteCustomDbRoleApiParams) admin.DeleteCustomDbRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDbRoleWithParams")
	}

	var r0 admin.DeleteCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteCustomDbRoleApiParams) admin.DeleteCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomDbRoleWithParams'
type CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call struct {
	*mock.Call
}

// DeleteCustomDbRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteCustomDbRoleApiParams
func (_e *CustomDatabaseRolesApi_Expecter) DeleteCustomDbRoleWithParams(ctx any, args any) *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call {
	return &CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call{Call: _e.mock.On("DeleteCustomDbRoleWithParams", ctx, args)}
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteCustomDbRoleApiParams)) *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteCustomDbRoleApiParams))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call) Return(_a0 admin.DeleteCustomDbRoleApiRequest) *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteCustomDbRoleApiParams) admin.DeleteCustomDbRoleApiRequest) *CustomDatabaseRolesApi_DeleteCustomDbRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDbRole provides a mock function with given fields: ctx, groupId, roleName
func (_m *CustomDatabaseRolesApi) GetCustomDbRole(ctx context.Context, groupId string, roleName string) admin.GetCustomDbRoleApiRequest {
	ret := _m.Called(ctx, groupId, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDbRole")
	}

	var r0 admin.GetCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, groupId, roleName)
	} else {
		r0 = ret.Get(0).(admin.GetCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_GetCustomDbRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDbRole'
type CustomDatabaseRolesApi_GetCustomDbRole_Call struct {
	*mock.Call
}

// GetCustomDbRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - roleName string
func (_e *CustomDatabaseRolesApi_Expecter) GetCustomDbRole(ctx any, groupId any, roleName any) *CustomDatabaseRolesApi_GetCustomDbRole_Call {
	return &CustomDatabaseRolesApi_GetCustomDbRole_Call{Call: _e.mock.On("GetCustomDbRole", ctx, groupId, roleName)}
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRole_Call) Run(run func(ctx context.Context, groupId string, roleName string)) *CustomDatabaseRolesApi_GetCustomDbRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRole_Call) Return(_a0 admin.GetCustomDbRoleApiRequest) *CustomDatabaseRolesApi_GetCustomDbRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRole_Call) RunAndReturn(run func(context.Context, string, string) admin.GetCustomDbRoleApiRequest) *CustomDatabaseRolesApi_GetCustomDbRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDbRoleExecute provides a mock function with given fields: r
func (_m *CustomDatabaseRolesApi) GetCustomDbRoleExecute(r admin.GetCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDbRoleExecute")
	}

	var r0 *admin.UserCustomDBRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCustomDbRoleApiRequest) *admin.UserCustomDBRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserCustomDBRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCustomDbRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCustomDbRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDbRoleExecute'
type CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call struct {
	*mock.Call
}

// GetCustomDbRoleExecute is a helper method to define mock.On call
//   - r admin.GetCustomDbRoleApiRequest
func (_e *CustomDatabaseRolesApi_Expecter) GetCustomDbRoleExecute(r any) *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call {
	return &CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call{Call: _e.mock.On("GetCustomDbRoleExecute", r)}
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call) Run(run func(r admin.GetCustomDbRoleApiRequest)) *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCustomDbRoleApiRequest))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call) Return(_a0 *admin.UserCustomDBRole, _a1 *http.Response, _a2 error) *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call) RunAndReturn(run func(admin.GetCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)) *CustomDatabaseRolesApi_GetCustomDbRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomDbRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CustomDatabaseRolesApi) GetCustomDbRoleWithParams(ctx context.Context, args *admin.GetCustomDbRoleApiParams) admin.GetCustomDbRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDbRoleWithParams")
	}

	var r0 admin.GetCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCustomDbRoleApiParams) admin.GetCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomDbRoleWithParams'
type CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call struct {
	*mock.Call
}

// GetCustomDbRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCustomDbRoleApiParams
func (_e *CustomDatabaseRolesApi_Expecter) GetCustomDbRoleWithParams(ctx any, args any) *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call {
	return &CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call{Call: _e.mock.On("GetCustomDbRoleWithParams", ctx, args)}
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCustomDbRoleApiParams)) *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCustomDbRoleApiParams))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call) Return(_a0 admin.GetCustomDbRoleApiRequest) *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCustomDbRoleApiParams) admin.GetCustomDbRoleApiRequest) *CustomDatabaseRolesApi_GetCustomDbRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomDbRoles provides a mock function with given fields: ctx, groupId
func (_m *CustomDatabaseRolesApi) ListCustomDbRoles(ctx context.Context, groupId string) admin.ListCustomDbRolesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomDbRoles")
	}

	var r0 admin.ListCustomDbRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListCustomDbRolesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListCustomDbRolesApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_ListCustomDbRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomDbRoles'
type CustomDatabaseRolesApi_ListCustomDbRoles_Call struct {
	*mock.Call
}

// ListCustomDbRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CustomDatabaseRolesApi_Expecter) ListCustomDbRoles(ctx any, groupId any) *CustomDatabaseRolesApi_ListCustomDbRoles_Call {
	return &CustomDatabaseRolesApi_ListCustomDbRoles_Call{Call: _e.mock.On("ListCustomDbRoles", ctx, groupId)}
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRoles_Call) Run(run func(ctx context.Context, groupId string)) *CustomDatabaseRolesApi_ListCustomDbRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRoles_Call) Return(_a0 admin.ListCustomDbRolesApiRequest) *CustomDatabaseRolesApi_ListCustomDbRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRoles_Call) RunAndReturn(run func(context.Context, string) admin.ListCustomDbRolesApiRequest) *CustomDatabaseRolesApi_ListCustomDbRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomDbRolesExecute provides a mock function with given fields: r
func (_m *CustomDatabaseRolesApi) ListCustomDbRolesExecute(r admin.ListCustomDbRolesApiRequest) ([]admin.UserCustomDBRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomDbRolesExecute")
	}

	var r0 []admin.UserCustomDBRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListCustomDbRolesApiRequest) ([]admin.UserCustomDBRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListCustomDbRolesApiRequest) []admin.UserCustomDBRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.UserCustomDBRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListCustomDbRolesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListCustomDbRolesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomDbRolesExecute'
type CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call struct {
	*mock.Call
}

// ListCustomDbRolesExecute is a helper method to define mock.On call
//   - r admin.ListCustomDbRolesApiRequest
func (_e *CustomDatabaseRolesApi_Expecter) ListCustomDbRolesExecute(r any) *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call {
	return &CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call{Call: _e.mock.On("ListCustomDbRolesExecute", r)}
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call) Run(run func(r admin.ListCustomDbRolesApiRequest)) *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListCustomDbRolesApiRequest))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call) Return(_a0 []admin.UserCustomDBRole, _a1 *http.Response, _a2 error) *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call) RunAndReturn(run func(admin.ListCustomDbRolesApiRequest) ([]admin.UserCustomDBRole, *http.Response, error)) *CustomDatabaseRolesApi_ListCustomDbRolesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomDbRolesWithParams provides a mock function with given fields: ctx, args
func (_m *CustomDatabaseRolesApi) ListCustomDbRolesWithParams(ctx context.Context, args *admin.ListCustomDbRolesApiParams) admin.ListCustomDbRolesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomDbRolesWithParams")
	}

	var r0 admin.ListCustomDbRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListCustomDbRolesApiParams) admin.ListCustomDbRolesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListCustomDbRolesApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomDbRolesWithParams'
type CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call struct {
	*mock.Call
}

// ListCustomDbRolesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListCustomDbRolesApiParams
func (_e *CustomDatabaseRolesApi_Expecter) ListCustomDbRolesWithParams(ctx any, args any) *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call {
	return &CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call{Call: _e.mock.On("ListCustomDbRolesWithParams", ctx, args)}
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListCustomDbRolesApiParams)) *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListCustomDbRolesApiParams))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call) Return(_a0 admin.ListCustomDbRolesApiRequest) *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListCustomDbRolesApiParams) admin.ListCustomDbRolesApiRequest) *CustomDatabaseRolesApi_ListCustomDbRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomDbRole provides a mock function with given fields: ctx, groupId, roleName, updateCustomDBRole
func (_m *CustomDatabaseRolesApi) UpdateCustomDbRole(ctx context.Context, groupId string, roleName string, updateCustomDBRole *admin.UpdateCustomDBRole) admin.UpdateCustomDbRoleApiRequest {
	ret := _m.Called(ctx, groupId, roleName, updateCustomDBRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomDbRole")
	}

	var r0 admin.UpdateCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UpdateCustomDBRole) admin.UpdateCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, groupId, roleName, updateCustomDBRole)
	} else {
		r0 = ret.Get(0).(admin.UpdateCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_UpdateCustomDbRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomDbRole'
type CustomDatabaseRolesApi_UpdateCustomDbRole_Call struct {
	*mock.Call
}

// UpdateCustomDbRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - roleName string
//   - updateCustomDBRole *admin.UpdateCustomDBRole
func (_e *CustomDatabaseRolesApi_Expecter) UpdateCustomDbRole(ctx any, groupId any, roleName any, updateCustomDBRole any) *CustomDatabaseRolesApi_UpdateCustomDbRole_Call {
	return &CustomDatabaseRolesApi_UpdateCustomDbRole_Call{Call: _e.mock.On("UpdateCustomDbRole", ctx, groupId, roleName, updateCustomDBRole)}
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRole_Call) Run(run func(ctx context.Context, groupId string, roleName string, updateCustomDBRole *admin.UpdateCustomDBRole)) *CustomDatabaseRolesApi_UpdateCustomDbRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UpdateCustomDBRole))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRole_Call) Return(_a0 admin.UpdateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_UpdateCustomDbRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.UpdateCustomDBRole) admin.UpdateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_UpdateCustomDbRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomDbRoleExecute provides a mock function with given fields: r
func (_m *CustomDatabaseRolesApi) UpdateCustomDbRoleExecute(r admin.UpdateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomDbRoleExecute")
	}

	var r0 *admin.UserCustomDBRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateCustomDbRoleApiRequest) *admin.UserCustomDBRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserCustomDBRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateCustomDbRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateCustomDbRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomDbRoleExecute'
type CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call struct {
	*mock.Call
}

// UpdateCustomDbRoleExecute is a helper method to define mock.On call
//   - r admin.UpdateCustomDbRoleApiRequest
func (_e *CustomDatabaseRolesApi_Expecter) UpdateCustomDbRoleExecute(r any) *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call {
	return &CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call{Call: _e.mock.On("UpdateCustomDbRoleExecute", r)}
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call) Run(run func(r admin.UpdateCustomDbRoleApiRequest)) *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateCustomDbRoleApiRequest))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call) Return(_a0 *admin.UserCustomDBRole, _a1 *http.Response, _a2 error) *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call) RunAndReturn(run func(admin.UpdateCustomDbRoleApiRequest) (*admin.UserCustomDBRole, *http.Response, error)) *CustomDatabaseRolesApi_UpdateCustomDbRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomDbRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CustomDatabaseRolesApi) UpdateCustomDbRoleWithParams(ctx context.Context, args *admin.UpdateCustomDbRoleApiParams) admin.UpdateCustomDbRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomDbRoleWithParams")
	}

	var r0 admin.UpdateCustomDbRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateCustomDbRoleApiParams) admin.UpdateCustomDbRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateCustomDbRoleApiRequest)
	}

	return r0
}

// CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomDbRoleWithParams'
type CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call struct {
	*mock.Call
}

// UpdateCustomDbRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateCustomDbRoleApiParams
func (_e *CustomDatabaseRolesApi_Expecter) UpdateCustomDbRoleWithParams(ctx any, args any) *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call {
	return &CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call{Call: _e.mock.On("UpdateCustomDbRoleWithParams", ctx, args)}
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateCustomDbRoleApiParams)) *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateCustomDbRoleApiParams))
	})
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call) Return(_a0 admin.UpdateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateCustomDbRoleApiParams) admin.UpdateCustomDbRoleApiRequest) *CustomDatabaseRolesApi_UpdateCustomDbRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomDatabaseRolesApi creates a new instance of CustomDatabaseRolesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomDatabaseRolesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomDatabaseRolesApi {
	mock := &CustomDatabaseRolesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
