// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240530001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OrganizationsApi is an autogenerated mock type for the OrganizationsApi type
type OrganizationsApi struct {
	mock.Mock
}

type OrganizationsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationsApi) EXPECT() *OrganizationsApi_Expecter {
	return &OrganizationsApi_Expecter{mock: &_m.Mock}
}

// CreateOrganization provides a mock function with given fields: ctx, createOrganizationRequest
func (_m *OrganizationsApi) CreateOrganization(ctx context.Context, createOrganizationRequest *admin.CreateOrganizationRequest) admin.CreateOrganizationApiRequest {
	ret := _m.Called(ctx, createOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 admin.CreateOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrganizationRequest) admin.CreateOrganizationApiRequest); ok {
		r0 = rf(ctx, createOrganizationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type OrganizationsApi_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - createOrganizationRequest *admin.CreateOrganizationRequest
func (_e *OrganizationsApi_Expecter) CreateOrganization(ctx interface{}, createOrganizationRequest interface{}) *OrganizationsApi_CreateOrganization_Call {
	return &OrganizationsApi_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, createOrganizationRequest)}
}

func (_c *OrganizationsApi_CreateOrganization_Call) Run(run func(ctx context.Context, createOrganizationRequest *admin.CreateOrganizationRequest)) *OrganizationsApi_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrganizationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganization_Call) Return(_a0 admin.CreateOrganizationApiRequest) *OrganizationsApi_CreateOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrganization_Call) RunAndReturn(run func(context.Context, *admin.CreateOrganizationRequest) admin.CreateOrganizationApiRequest) *OrganizationsApi_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateOrganizationExecute(r admin.CreateOrganizationApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationExecute")
	}

	var r0 *admin.CreateOrganizationResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationApiRequest) *admin.CreateOrganizationResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrganizationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrganizationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateOrganizationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationExecute'
type OrganizationsApi_CreateOrganizationExecute_Call struct {
	*mock.Call
}

// CreateOrganizationExecute is a helper method to define mock.On call
//   - r admin.CreateOrganizationApiRequest
func (_e *OrganizationsApi_Expecter) CreateOrganizationExecute(r interface{}) *OrganizationsApi_CreateOrganizationExecute_Call {
	return &OrganizationsApi_CreateOrganizationExecute_Call{Call: _e.mock.On("CreateOrganizationExecute", r)}
}

func (_c *OrganizationsApi_CreateOrganizationExecute_Call) Run(run func(r admin.CreateOrganizationApiRequest)) *OrganizationsApi_CreateOrganizationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrganizationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationExecute_Call) Return(_a0 *admin.CreateOrganizationResponse, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateOrganizationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationExecute_Call) RunAndReturn(run func(admin.CreateOrganizationApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error)) *OrganizationsApi_CreateOrganizationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitation provides a mock function with given fields: ctx, orgId, organizationInvitationRequest
func (_m *OrganizationsApi) CreateOrganizationInvitation(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest) admin.CreateOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, orgId, organizationInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitation")
	}

	var r0 admin.CreateOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationInvitationRequest) admin.CreateOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, orgId, organizationInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitation'
type OrganizationsApi_CreateOrganizationInvitation_Call struct {
	*mock.Call
}

// CreateOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationInvitationRequest *admin.OrganizationInvitationRequest
func (_e *OrganizationsApi_Expecter) CreateOrganizationInvitation(ctx interface{}, orgId interface{}, organizationInvitationRequest interface{}) *OrganizationsApi_CreateOrganizationInvitation_Call {
	return &OrganizationsApi_CreateOrganizationInvitation_Call{Call: _e.mock.On("CreateOrganizationInvitation", ctx, orgId, organizationInvitationRequest)}
}

func (_c *OrganizationsApi_CreateOrganizationInvitation_Call) Run(run func(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest)) *OrganizationsApi_CreateOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationInvitationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitation_Call) Return(_a0 admin.CreateOrganizationInvitationApiRequest) *OrganizationsApi_CreateOrganizationInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitation_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationInvitationRequest) admin.CreateOrganizationInvitationApiRequest) *OrganizationsApi_CreateOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateOrganizationInvitationExecute(r admin.CreateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitationExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationInvitationApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrganizationInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrganizationInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateOrganizationInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitationExecute'
type OrganizationsApi_CreateOrganizationInvitationExecute_Call struct {
	*mock.Call
}

// CreateOrganizationInvitationExecute is a helper method to define mock.On call
//   - r admin.CreateOrganizationInvitationApiRequest
func (_e *OrganizationsApi_Expecter) CreateOrganizationInvitationExecute(r interface{}) *OrganizationsApi_CreateOrganizationInvitationExecute_Call {
	return &OrganizationsApi_CreateOrganizationInvitationExecute_Call{Call: _e.mock.On("CreateOrganizationInvitationExecute", r)}
}

func (_c *OrganizationsApi_CreateOrganizationInvitationExecute_Call) Run(run func(r admin.CreateOrganizationInvitationApiRequest)) *OrganizationsApi_CreateOrganizationInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrganizationInvitationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitationExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateOrganizationInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitationExecute_Call) RunAndReturn(run func(admin.CreateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_CreateOrganizationInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateOrganizationInvitationWithParams(ctx context.Context, args *admin.CreateOrganizationInvitationApiParams) admin.CreateOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitationWithParams")
	}

	var r0 admin.CreateOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrganizationInvitationApiParams) admin.CreateOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrganizationInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitationWithParams'
type OrganizationsApi_CreateOrganizationInvitationWithParams_Call struct {
	*mock.Call
}

// CreateOrganizationInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrganizationInvitationApiParams
func (_e *OrganizationsApi_Expecter) CreateOrganizationInvitationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_CreateOrganizationInvitationWithParams_Call {
	return &OrganizationsApi_CreateOrganizationInvitationWithParams_Call{Call: _e.mock.On("CreateOrganizationInvitationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateOrganizationInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrganizationInvitationApiParams)) *OrganizationsApi_CreateOrganizationInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrganizationInvitationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitationWithParams_Call) Return(_a0 admin.CreateOrganizationInvitationApiRequest) *OrganizationsApi_CreateOrganizationInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrganizationInvitationApiParams) admin.CreateOrganizationInvitationApiRequest) *OrganizationsApi_CreateOrganizationInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateOrganizationWithParams(ctx context.Context, args *admin.CreateOrganizationApiParams) admin.CreateOrganizationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationWithParams")
	}

	var r0 admin.CreateOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrganizationApiParams) admin.CreateOrganizationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrganizationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationWithParams'
type OrganizationsApi_CreateOrganizationWithParams_Call struct {
	*mock.Call
}

// CreateOrganizationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrganizationApiParams
func (_e *OrganizationsApi_Expecter) CreateOrganizationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_CreateOrganizationWithParams_Call {
	return &OrganizationsApi_CreateOrganizationWithParams_Call{Call: _e.mock.On("CreateOrganizationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateOrganizationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrganizationApiParams)) *OrganizationsApi_CreateOrganizationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrganizationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationWithParams_Call) Return(_a0 admin.CreateOrganizationApiRequest) *OrganizationsApi_CreateOrganizationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrganizationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrganizationApiParams) admin.CreateOrganizationApiRequest) *OrganizationsApi_CreateOrganizationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, orgId, orgServiceAccountRequest
func (_m *OrganizationsApi) CreateServiceAccount(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, orgServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 admin.CreateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, orgServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type OrganizationsApi_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - orgServiceAccountRequest *admin.OrgServiceAccountRequest
func (_e *OrganizationsApi_Expecter) CreateServiceAccount(ctx interface{}, orgId interface{}, orgServiceAccountRequest interface{}) *OrganizationsApi_CreateServiceAccount_Call {
	return &OrganizationsApi_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, orgId, orgServiceAccountRequest)}
}

func (_c *OrganizationsApi_CreateServiceAccount_Call) Run(run func(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest)) *OrganizationsApi_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrgServiceAccountRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccount_Call) Return(_a0 admin.CreateServiceAccountApiRequest) *OrganizationsApi_CreateServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest) *OrganizationsApi_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateServiceAccountExecute(r admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountExecute'
type OrganizationsApi_CreateServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateServiceAccountApiRequest
func (_e *OrganizationsApi_Expecter) CreateServiceAccountExecute(r interface{}) *OrganizationsApi_CreateServiceAccountExecute_Call {
	return &OrganizationsApi_CreateServiceAccountExecute_Call{Call: _e.mock.On("CreateServiceAccountExecute", r)}
}

func (_c *OrganizationsApi_CreateServiceAccountExecute_Call) Run(run func(r admin.CreateServiceAccountApiRequest)) *OrganizationsApi_CreateServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateServiceAccountApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *OrganizationsApi_CreateServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecret provides a mock function with given fields: ctx, orgId, serviceAccountId, serviceAccountSecretRequest
func (_m *OrganizationsApi) CreateServiceAccountSecret(ctx context.Context, orgId string, serviceAccountId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, orgId, serviceAccountId, serviceAccountSecretRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecret")
	}

	var r0 admin.CreateServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, orgId, serviceAccountId, serviceAccountSecretRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountSecretApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateServiceAccountSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecret'
type OrganizationsApi_CreateServiceAccountSecret_Call struct {
	*mock.Call
}

// CreateServiceAccountSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - serviceAccountId string
//   - serviceAccountSecretRequest *admin.ServiceAccountSecretRequest
func (_e *OrganizationsApi_Expecter) CreateServiceAccountSecret(ctx interface{}, orgId interface{}, serviceAccountId interface{}, serviceAccountSecretRequest interface{}) *OrganizationsApi_CreateServiceAccountSecret_Call {
	return &OrganizationsApi_CreateServiceAccountSecret_Call{Call: _e.mock.On("CreateServiceAccountSecret", ctx, orgId, serviceAccountId, serviceAccountSecretRequest)}
}

func (_c *OrganizationsApi_CreateServiceAccountSecret_Call) Run(run func(ctx context.Context, orgId string, serviceAccountId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest)) *OrganizationsApi_CreateServiceAccountSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ServiceAccountSecretRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecret_Call) Return(_a0 admin.CreateServiceAccountSecretApiRequest) *OrganizationsApi_CreateServiceAccountSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecret_Call) RunAndReturn(run func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest) *OrganizationsApi_CreateServiceAccountSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecretExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateServiceAccountSecretExecute(r admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecretExecute")
	}

	var r0 *admin.ServiceAccountSecret
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountSecretApiRequest) *admin.ServiceAccountSecret); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccountSecret)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateServiceAccountSecretApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateServiceAccountSecretApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateServiceAccountSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecretExecute'
type OrganizationsApi_CreateServiceAccountSecretExecute_Call struct {
	*mock.Call
}

// CreateServiceAccountSecretExecute is a helper method to define mock.On call
//   - r admin.CreateServiceAccountSecretApiRequest
func (_e *OrganizationsApi_Expecter) CreateServiceAccountSecretExecute(r interface{}) *OrganizationsApi_CreateServiceAccountSecretExecute_Call {
	return &OrganizationsApi_CreateServiceAccountSecretExecute_Call{Call: _e.mock.On("CreateServiceAccountSecretExecute", r)}
}

func (_c *OrganizationsApi_CreateServiceAccountSecretExecute_Call) Run(run func(r admin.CreateServiceAccountSecretApiRequest)) *OrganizationsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateServiceAccountSecretApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecretExecute_Call) Return(_a0 *admin.ServiceAccountSecret, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecretExecute_Call) RunAndReturn(run func(admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)) *OrganizationsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecretWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateServiceAccountSecretWithParams(ctx context.Context, args *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecretWithParams")
	}

	var r0 admin.CreateServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountSecretApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateServiceAccountSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecretWithParams'
type OrganizationsApi_CreateServiceAccountSecretWithParams_Call struct {
	*mock.Call
}

// CreateServiceAccountSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateServiceAccountSecretApiParams
func (_e *OrganizationsApi_Expecter) CreateServiceAccountSecretWithParams(ctx interface{}, args interface{}) *OrganizationsApi_CreateServiceAccountSecretWithParams_Call {
	return &OrganizationsApi_CreateServiceAccountSecretWithParams_Call{Call: _e.mock.On("CreateServiceAccountSecretWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateServiceAccountSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateServiceAccountSecretApiParams)) *OrganizationsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateServiceAccountSecretApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecretWithParams_Call) Return(_a0 admin.CreateServiceAccountSecretApiRequest) *OrganizationsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest) *OrganizationsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateServiceAccountWithParams(ctx context.Context, args *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountWithParams")
	}

	var r0 admin.CreateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountWithParams'
type OrganizationsApi_CreateServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateServiceAccountApiParams
func (_e *OrganizationsApi_Expecter) CreateServiceAccountWithParams(ctx interface{}, args interface{}) *OrganizationsApi_CreateServiceAccountWithParams_Call {
	return &OrganizationsApi_CreateServiceAccountWithParams_Call{Call: _e.mock.On("CreateServiceAccountWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateServiceAccountApiParams)) *OrganizationsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateServiceAccountApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountWithParams_Call) Return(_a0 admin.CreateServiceAccountApiRequest) *OrganizationsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest) *OrganizationsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) DeleteOrganization(ctx context.Context, orgId string) admin.DeleteOrganizationApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 admin.DeleteOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteOrganizationApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type OrganizationsApi_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) DeleteOrganization(ctx interface{}, orgId interface{}) *OrganizationsApi_DeleteOrganization_Call {
	return &OrganizationsApi_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", ctx, orgId)}
}

func (_c *OrganizationsApi_DeleteOrganization_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganization_Call) Return(_a0 admin.DeleteOrganizationApiRequest) *OrganizationsApi_DeleteOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganization_Call) RunAndReturn(run func(context.Context, string) admin.DeleteOrganizationApiRequest) *OrganizationsApi_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteOrganizationExecute(r admin.DeleteOrganizationApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrganizationApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrganizationApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrganizationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteOrganizationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_DeleteOrganizationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationExecute'
type OrganizationsApi_DeleteOrganizationExecute_Call struct {
	*mock.Call
}

// DeleteOrganizationExecute is a helper method to define mock.On call
//   - r admin.DeleteOrganizationApiRequest
func (_e *OrganizationsApi_Expecter) DeleteOrganizationExecute(r interface{}) *OrganizationsApi_DeleteOrganizationExecute_Call {
	return &OrganizationsApi_DeleteOrganizationExecute_Call{Call: _e.mock.On("DeleteOrganizationExecute", r)}
}

func (_c *OrganizationsApi_DeleteOrganizationExecute_Call) Run(run func(r admin.DeleteOrganizationApiRequest)) *OrganizationsApi_DeleteOrganizationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrganizationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *OrganizationsApi_DeleteOrganizationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationExecute_Call) RunAndReturn(run func(admin.DeleteOrganizationApiRequest) (map[string]interface{}, *http.Response, error)) *OrganizationsApi_DeleteOrganizationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationInvitation provides a mock function with given fields: ctx, orgId, invitationId
func (_m *OrganizationsApi) DeleteOrganizationInvitation(ctx context.Context, orgId string, invitationId string) admin.DeleteOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, orgId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationInvitation")
	}

	var r0 admin.DeleteOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationInvitation'
type OrganizationsApi_DeleteOrganizationInvitation_Call struct {
	*mock.Call
}

// DeleteOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
func (_e *OrganizationsApi_Expecter) DeleteOrganizationInvitation(ctx interface{}, orgId interface{}, invitationId interface{}) *OrganizationsApi_DeleteOrganizationInvitation_Call {
	return &OrganizationsApi_DeleteOrganizationInvitation_Call{Call: _e.mock.On("DeleteOrganizationInvitation", ctx, orgId, invitationId)}
}

func (_c *OrganizationsApi_DeleteOrganizationInvitation_Call) Run(run func(ctx context.Context, orgId string, invitationId string)) *OrganizationsApi_DeleteOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitation_Call) Return(_a0 admin.DeleteOrganizationInvitationApiRequest) *OrganizationsApi_DeleteOrganizationInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitation_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteOrganizationInvitationApiRequest) *OrganizationsApi_DeleteOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationInvitationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteOrganizationInvitationExecute(r admin.DeleteOrganizationInvitationApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationInvitationExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrganizationInvitationApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrganizationInvitationApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrganizationInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteOrganizationInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_DeleteOrganizationInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationInvitationExecute'
type OrganizationsApi_DeleteOrganizationInvitationExecute_Call struct {
	*mock.Call
}

// DeleteOrganizationInvitationExecute is a helper method to define mock.On call
//   - r admin.DeleteOrganizationInvitationApiRequest
func (_e *OrganizationsApi_Expecter) DeleteOrganizationInvitationExecute(r interface{}) *OrganizationsApi_DeleteOrganizationInvitationExecute_Call {
	return &OrganizationsApi_DeleteOrganizationInvitationExecute_Call{Call: _e.mock.On("DeleteOrganizationInvitationExecute", r)}
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationExecute_Call) Run(run func(r admin.DeleteOrganizationInvitationApiRequest)) *OrganizationsApi_DeleteOrganizationInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrganizationInvitationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *OrganizationsApi_DeleteOrganizationInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationExecute_Call) RunAndReturn(run func(admin.DeleteOrganizationInvitationApiRequest) (map[string]interface{}, *http.Response, error)) *OrganizationsApi_DeleteOrganizationInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteOrganizationInvitationWithParams(ctx context.Context, args *admin.DeleteOrganizationInvitationApiParams) admin.DeleteOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationInvitationWithParams")
	}

	var r0 admin.DeleteOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrganizationInvitationApiParams) admin.DeleteOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrganizationInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationInvitationWithParams'
type OrganizationsApi_DeleteOrganizationInvitationWithParams_Call struct {
	*mock.Call
}

// DeleteOrganizationInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrganizationInvitationApiParams
func (_e *OrganizationsApi_Expecter) DeleteOrganizationInvitationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call {
	return &OrganizationsApi_DeleteOrganizationInvitationWithParams_Call{Call: _e.mock.On("DeleteOrganizationInvitationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrganizationInvitationApiParams)) *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrganizationInvitationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call) Return(_a0 admin.DeleteOrganizationInvitationApiRequest) *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrganizationInvitationApiParams) admin.DeleteOrganizationInvitationApiRequest) *OrganizationsApi_DeleteOrganizationInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteOrganizationWithParams(ctx context.Context, args *admin.DeleteOrganizationApiParams) admin.DeleteOrganizationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationWithParams")
	}

	var r0 admin.DeleteOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrganizationApiParams) admin.DeleteOrganizationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrganizationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationWithParams'
type OrganizationsApi_DeleteOrganizationWithParams_Call struct {
	*mock.Call
}

// DeleteOrganizationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrganizationApiParams
func (_e *OrganizationsApi_Expecter) DeleteOrganizationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_DeleteOrganizationWithParams_Call {
	return &OrganizationsApi_DeleteOrganizationWithParams_Call{Call: _e.mock.On("DeleteOrganizationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteOrganizationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrganizationApiParams)) *OrganizationsApi_DeleteOrganizationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrganizationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationWithParams_Call) Return(_a0 admin.DeleteOrganizationApiRequest) *OrganizationsApi_DeleteOrganizationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrganizationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrganizationApiParams) admin.DeleteOrganizationApiRequest) *OrganizationsApi_DeleteOrganizationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, serviceAccountId, orgId
func (_m *OrganizationsApi) DeleteServiceAccount(ctx context.Context, serviceAccountId string, orgId string) admin.DeleteServiceAccountApiRequest {
	ret := _m.Called(ctx, serviceAccountId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 admin.DeleteServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteServiceAccountApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type OrganizationsApi_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - orgId string
func (_e *OrganizationsApi_Expecter) DeleteServiceAccount(ctx interface{}, serviceAccountId interface{}, orgId interface{}) *OrganizationsApi_DeleteServiceAccount_Call {
	return &OrganizationsApi_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, serviceAccountId, orgId)}
}

func (_c *OrganizationsApi_DeleteServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountId string, orgId string)) *OrganizationsApi_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccount_Call) Return(_a0 admin.DeleteServiceAccountApiRequest) *OrganizationsApi_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteServiceAccountApiRequest) *OrganizationsApi_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteServiceAccountExecute(r admin.DeleteServiceAccountApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteServiceAccountApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationsApi_DeleteServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountExecute'
type OrganizationsApi_DeleteServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteServiceAccountApiRequest
func (_e *OrganizationsApi_Expecter) DeleteServiceAccountExecute(r interface{}) *OrganizationsApi_DeleteServiceAccountExecute_Call {
	return &OrganizationsApi_DeleteServiceAccountExecute_Call{Call: _e.mock.On("DeleteServiceAccountExecute", r)}
}

func (_c *OrganizationsApi_DeleteServiceAccountExecute_Call) Run(run func(r admin.DeleteServiceAccountApiRequest)) *OrganizationsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteServiceAccountApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountExecute_Call) Return(_a0 *http.Response, _a1 error) *OrganizationsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteServiceAccountApiRequest) (*http.Response, error)) *OrganizationsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecret provides a mock function with given fields: ctx, serviceAccountId, secretId, orgId
func (_m *OrganizationsApi) DeleteServiceAccountSecret(ctx context.Context, serviceAccountId string, secretId string, orgId string) admin.DeleteServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, serviceAccountId, secretId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecret")
	}

	var r0 admin.DeleteServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, secretId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountSecretApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteServiceAccountSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecret'
type OrganizationsApi_DeleteServiceAccountSecret_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - secretId string
//   - orgId string
func (_e *OrganizationsApi_Expecter) DeleteServiceAccountSecret(ctx interface{}, serviceAccountId interface{}, secretId interface{}, orgId interface{}) *OrganizationsApi_DeleteServiceAccountSecret_Call {
	return &OrganizationsApi_DeleteServiceAccountSecret_Call{Call: _e.mock.On("DeleteServiceAccountSecret", ctx, serviceAccountId, secretId, orgId)}
}

func (_c *OrganizationsApi_DeleteServiceAccountSecret_Call) Run(run func(ctx context.Context, serviceAccountId string, secretId string, orgId string)) *OrganizationsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecret_Call) Return(_a0 admin.DeleteServiceAccountSecretApiRequest) *OrganizationsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecret_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteServiceAccountSecretApiRequest) *OrganizationsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecretExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteServiceAccountSecretExecute(r admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecretExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountSecretApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteServiceAccountSecretApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationsApi_DeleteServiceAccountSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecretExecute'
type OrganizationsApi_DeleteServiceAccountSecretExecute_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecretExecute is a helper method to define mock.On call
//   - r admin.DeleteServiceAccountSecretApiRequest
func (_e *OrganizationsApi_Expecter) DeleteServiceAccountSecretExecute(r interface{}) *OrganizationsApi_DeleteServiceAccountSecretExecute_Call {
	return &OrganizationsApi_DeleteServiceAccountSecretExecute_Call{Call: _e.mock.On("DeleteServiceAccountSecretExecute", r)}
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretExecute_Call) Run(run func(r admin.DeleteServiceAccountSecretApiRequest)) *OrganizationsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteServiceAccountSecretApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretExecute_Call) Return(_a0 *http.Response, _a1 error) *OrganizationsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretExecute_Call) RunAndReturn(run func(admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error)) *OrganizationsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecretWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteServiceAccountSecretWithParams(ctx context.Context, args *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecretWithParams")
	}

	var r0 admin.DeleteServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountSecretApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteServiceAccountSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecretWithParams'
type OrganizationsApi_DeleteServiceAccountSecretWithParams_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteServiceAccountSecretApiParams
func (_e *OrganizationsApi_Expecter) DeleteServiceAccountSecretWithParams(ctx interface{}, args interface{}) *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call {
	return &OrganizationsApi_DeleteServiceAccountSecretWithParams_Call{Call: _e.mock.On("DeleteServiceAccountSecretWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteServiceAccountSecretApiParams)) *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteServiceAccountSecretApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call) Return(_a0 admin.DeleteServiceAccountSecretApiRequest) *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest) *OrganizationsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteServiceAccountWithParams(ctx context.Context, args *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountWithParams")
	}

	var r0 admin.DeleteServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountWithParams'
type OrganizationsApi_DeleteServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteServiceAccountApiParams
func (_e *OrganizationsApi_Expecter) DeleteServiceAccountWithParams(ctx interface{}, args interface{}) *OrganizationsApi_DeleteServiceAccountWithParams_Call {
	return &OrganizationsApi_DeleteServiceAccountWithParams_Call{Call: _e.mock.On("DeleteServiceAccountWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteServiceAccountApiParams)) *OrganizationsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteServiceAccountApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountWithParams_Call) Return(_a0 admin.DeleteServiceAccountApiRequest) *OrganizationsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest) *OrganizationsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganization provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) GetOrganization(ctx context.Context, orgId string) admin.GetOrganizationApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 admin.GetOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetOrganizationApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganization'
type OrganizationsApi_GetOrganization_Call struct {
	*mock.Call
}

// GetOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) GetOrganization(ctx interface{}, orgId interface{}) *OrganizationsApi_GetOrganization_Call {
	return &OrganizationsApi_GetOrganization_Call{Call: _e.mock.On("GetOrganization", ctx, orgId)}
}

func (_c *OrganizationsApi_GetOrganization_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_GetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganization_Call) Return(_a0 admin.GetOrganizationApiRequest) *OrganizationsApi_GetOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganization_Call) RunAndReturn(run func(context.Context, string) admin.GetOrganizationApiRequest) *OrganizationsApi_GetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrganizationExecute(r admin.GetOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationExecute")
	}

	var r0 *admin.AtlasOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationApiRequest) *admin.AtlasOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AtlasOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrganizationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrganizationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrganizationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationExecute'
type OrganizationsApi_GetOrganizationExecute_Call struct {
	*mock.Call
}

// GetOrganizationExecute is a helper method to define mock.On call
//   - r admin.GetOrganizationApiRequest
func (_e *OrganizationsApi_Expecter) GetOrganizationExecute(r interface{}) *OrganizationsApi_GetOrganizationExecute_Call {
	return &OrganizationsApi_GetOrganizationExecute_Call{Call: _e.mock.On("GetOrganizationExecute", r)}
}

func (_c *OrganizationsApi_GetOrganizationExecute_Call) Run(run func(r admin.GetOrganizationApiRequest)) *OrganizationsApi_GetOrganizationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrganizationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationExecute_Call) Return(_a0 *admin.AtlasOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrganizationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationExecute_Call) RunAndReturn(run func(admin.GetOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error)) *OrganizationsApi_GetOrganizationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitation provides a mock function with given fields: ctx, orgId, invitationId
func (_m *OrganizationsApi) GetOrganizationInvitation(ctx context.Context, orgId string, invitationId string) admin.GetOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, orgId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitation")
	}

	var r0 admin.GetOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitation'
type OrganizationsApi_GetOrganizationInvitation_Call struct {
	*mock.Call
}

// GetOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
func (_e *OrganizationsApi_Expecter) GetOrganizationInvitation(ctx interface{}, orgId interface{}, invitationId interface{}) *OrganizationsApi_GetOrganizationInvitation_Call {
	return &OrganizationsApi_GetOrganizationInvitation_Call{Call: _e.mock.On("GetOrganizationInvitation", ctx, orgId, invitationId)}
}

func (_c *OrganizationsApi_GetOrganizationInvitation_Call) Run(run func(ctx context.Context, orgId string, invitationId string)) *OrganizationsApi_GetOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitation_Call) Return(_a0 admin.GetOrganizationInvitationApiRequest) *OrganizationsApi_GetOrganizationInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitation_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrganizationInvitationApiRequest) *OrganizationsApi_GetOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrganizationInvitationExecute(r admin.GetOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationInvitationApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrganizationInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrganizationInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrganizationInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationExecute'
type OrganizationsApi_GetOrganizationInvitationExecute_Call struct {
	*mock.Call
}

// GetOrganizationInvitationExecute is a helper method to define mock.On call
//   - r admin.GetOrganizationInvitationApiRequest
func (_e *OrganizationsApi_Expecter) GetOrganizationInvitationExecute(r interface{}) *OrganizationsApi_GetOrganizationInvitationExecute_Call {
	return &OrganizationsApi_GetOrganizationInvitationExecute_Call{Call: _e.mock.On("GetOrganizationInvitationExecute", r)}
}

func (_c *OrganizationsApi_GetOrganizationInvitationExecute_Call) Run(run func(r admin.GetOrganizationInvitationApiRequest)) *OrganizationsApi_GetOrganizationInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrganizationInvitationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitationExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrganizationInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitationExecute_Call) RunAndReturn(run func(admin.GetOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_GetOrganizationInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrganizationInvitationWithParams(ctx context.Context, args *admin.GetOrganizationInvitationApiParams) admin.GetOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationWithParams")
	}

	var r0 admin.GetOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrganizationInvitationApiParams) admin.GetOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganizationInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationWithParams'
type OrganizationsApi_GetOrganizationInvitationWithParams_Call struct {
	*mock.Call
}

// GetOrganizationInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrganizationInvitationApiParams
func (_e *OrganizationsApi_Expecter) GetOrganizationInvitationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_GetOrganizationInvitationWithParams_Call {
	return &OrganizationsApi_GetOrganizationInvitationWithParams_Call{Call: _e.mock.On("GetOrganizationInvitationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrganizationInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrganizationInvitationApiParams)) *OrganizationsApi_GetOrganizationInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrganizationInvitationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitationWithParams_Call) Return(_a0 admin.GetOrganizationInvitationApiRequest) *OrganizationsApi_GetOrganizationInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrganizationInvitationApiParams) admin.GetOrganizationInvitationApiRequest) *OrganizationsApi_GetOrganizationInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettings provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) GetOrganizationSettings(ctx context.Context, orgId string) admin.GetOrganizationSettingsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettings")
	}

	var r0 admin.GetOrganizationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetOrganizationSettingsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettings'
type OrganizationsApi_GetOrganizationSettings_Call struct {
	*mock.Call
}

// GetOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) GetOrganizationSettings(ctx interface{}, orgId interface{}) *OrganizationsApi_GetOrganizationSettings_Call {
	return &OrganizationsApi_GetOrganizationSettings_Call{Call: _e.mock.On("GetOrganizationSettings", ctx, orgId)}
}

func (_c *OrganizationsApi_GetOrganizationSettings_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_GetOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettings_Call) Return(_a0 admin.GetOrganizationSettingsApiRequest) *OrganizationsApi_GetOrganizationSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettings_Call) RunAndReturn(run func(context.Context, string) admin.GetOrganizationSettingsApiRequest) *OrganizationsApi_GetOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettingsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrganizationSettingsExecute(r admin.GetOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettingsExecute")
	}

	var r0 *admin.OrganizationSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationSettingsApiRequest) *admin.OrganizationSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrganizationSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrganizationSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrganizationSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettingsExecute'
type OrganizationsApi_GetOrganizationSettingsExecute_Call struct {
	*mock.Call
}

// GetOrganizationSettingsExecute is a helper method to define mock.On call
//   - r admin.GetOrganizationSettingsApiRequest
func (_e *OrganizationsApi_Expecter) GetOrganizationSettingsExecute(r interface{}) *OrganizationsApi_GetOrganizationSettingsExecute_Call {
	return &OrganizationsApi_GetOrganizationSettingsExecute_Call{Call: _e.mock.On("GetOrganizationSettingsExecute", r)}
}

func (_c *OrganizationsApi_GetOrganizationSettingsExecute_Call) Run(run func(r admin.GetOrganizationSettingsApiRequest)) *OrganizationsApi_GetOrganizationSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrganizationSettingsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettingsExecute_Call) Return(_a0 *admin.OrganizationSettings, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrganizationSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettingsExecute_Call) RunAndReturn(run func(admin.GetOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)) *OrganizationsApi_GetOrganizationSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrganizationSettingsWithParams(ctx context.Context, args *admin.GetOrganizationSettingsApiParams) admin.GetOrganizationSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettingsWithParams")
	}

	var r0 admin.GetOrganizationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrganizationSettingsApiParams) admin.GetOrganizationSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganizationSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettingsWithParams'
type OrganizationsApi_GetOrganizationSettingsWithParams_Call struct {
	*mock.Call
}

// GetOrganizationSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrganizationSettingsApiParams
func (_e *OrganizationsApi_Expecter) GetOrganizationSettingsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_GetOrganizationSettingsWithParams_Call {
	return &OrganizationsApi_GetOrganizationSettingsWithParams_Call{Call: _e.mock.On("GetOrganizationSettingsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrganizationSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrganizationSettingsApiParams)) *OrganizationsApi_GetOrganizationSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrganizationSettingsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettingsWithParams_Call) Return(_a0 admin.GetOrganizationSettingsApiRequest) *OrganizationsApi_GetOrganizationSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrganizationSettingsApiParams) admin.GetOrganizationSettingsApiRequest) *OrganizationsApi_GetOrganizationSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrganizationWithParams(ctx context.Context, args *admin.GetOrganizationApiParams) admin.GetOrganizationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationWithParams")
	}

	var r0 admin.GetOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrganizationApiParams) admin.GetOrganizationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrganizationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationWithParams'
type OrganizationsApi_GetOrganizationWithParams_Call struct {
	*mock.Call
}

// GetOrganizationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrganizationApiParams
func (_e *OrganizationsApi_Expecter) GetOrganizationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_GetOrganizationWithParams_Call {
	return &OrganizationsApi_GetOrganizationWithParams_Call{Call: _e.mock.On("GetOrganizationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrganizationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrganizationApiParams)) *OrganizationsApi_GetOrganizationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrganizationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrganizationWithParams_Call) Return(_a0 admin.GetOrganizationApiRequest) *OrganizationsApi_GetOrganizationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrganizationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrganizationApiParams) admin.GetOrganizationApiRequest) *OrganizationsApi_GetOrganizationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccount provides a mock function with given fields: ctx, orgId, serviceAccountId
func (_m *OrganizationsApi) GetServiceAccount(ctx context.Context, orgId string, serviceAccountId string) admin.GetServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, serviceAccountId)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccount")
	}

	var r0 admin.GetServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, serviceAccountId)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_GetServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccount'
type OrganizationsApi_GetServiceAccount_Call struct {
	*mock.Call
}

// GetServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - serviceAccountId string
func (_e *OrganizationsApi_Expecter) GetServiceAccount(ctx interface{}, orgId interface{}, serviceAccountId interface{}) *OrganizationsApi_GetServiceAccount_Call {
	return &OrganizationsApi_GetServiceAccount_Call{Call: _e.mock.On("GetServiceAccount", ctx, orgId, serviceAccountId)}
}

func (_c *OrganizationsApi_GetServiceAccount_Call) Run(run func(ctx context.Context, orgId string, serviceAccountId string)) *OrganizationsApi_GetServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetServiceAccount_Call) Return(_a0 admin.GetServiceAccountApiRequest) *OrganizationsApi_GetServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetServiceAccountApiRequest) *OrganizationsApi_GetServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetServiceAccountExecute(r admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountExecute'
type OrganizationsApi_GetServiceAccountExecute_Call struct {
	*mock.Call
}

// GetServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetServiceAccountApiRequest
func (_e *OrganizationsApi_Expecter) GetServiceAccountExecute(r interface{}) *OrganizationsApi_GetServiceAccountExecute_Call {
	return &OrganizationsApi_GetServiceAccountExecute_Call{Call: _e.mock.On("GetServiceAccountExecute", r)}
}

func (_c *OrganizationsApi_GetServiceAccountExecute_Call) Run(run func(r admin.GetServiceAccountApiRequest)) *OrganizationsApi_GetServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServiceAccountApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *OrganizationsApi_GetServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetServiceAccountExecute_Call) RunAndReturn(run func(admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *OrganizationsApi_GetServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetServiceAccountWithParams(ctx context.Context, args *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountWithParams")
	}

	var r0 admin.GetServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_GetServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountWithParams'
type OrganizationsApi_GetServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServiceAccountApiParams
func (_e *OrganizationsApi_Expecter) GetServiceAccountWithParams(ctx interface{}, args interface{}) *OrganizationsApi_GetServiceAccountWithParams_Call {
	return &OrganizationsApi_GetServiceAccountWithParams_Call{Call: _e.mock.On("GetServiceAccountWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServiceAccountApiParams)) *OrganizationsApi_GetServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServiceAccountApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetServiceAccountWithParams_Call) Return(_a0 admin.GetServiceAccountApiRequest) *OrganizationsApi_GetServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest) *OrganizationsApi_GetServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationInvitations provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) ListOrganizationInvitations(ctx context.Context, orgId string) admin.ListOrganizationInvitationsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInvitations")
	}

	var r0 admin.ListOrganizationInvitationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrganizationInvitationsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationInvitationsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationInvitations'
type OrganizationsApi_ListOrganizationInvitations_Call struct {
	*mock.Call
}

// ListOrganizationInvitations is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) ListOrganizationInvitations(ctx interface{}, orgId interface{}) *OrganizationsApi_ListOrganizationInvitations_Call {
	return &OrganizationsApi_ListOrganizationInvitations_Call{Call: _e.mock.On("ListOrganizationInvitations", ctx, orgId)}
}

func (_c *OrganizationsApi_ListOrganizationInvitations_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_ListOrganizationInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitations_Call) Return(_a0 admin.ListOrganizationInvitationsApiRequest) *OrganizationsApi_ListOrganizationInvitations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitations_Call) RunAndReturn(run func(context.Context, string) admin.ListOrganizationInvitationsApiRequest) *OrganizationsApi_ListOrganizationInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationInvitationsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrganizationInvitationsExecute(r admin.ListOrganizationInvitationsApiRequest) ([]admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInvitationsExecute")
	}

	var r0 []admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationInvitationsApiRequest) ([]admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationInvitationsApiRequest) []admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrganizationInvitationsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrganizationInvitationsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrganizationInvitationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationInvitationsExecute'
type OrganizationsApi_ListOrganizationInvitationsExecute_Call struct {
	*mock.Call
}

// ListOrganizationInvitationsExecute is a helper method to define mock.On call
//   - r admin.ListOrganizationInvitationsApiRequest
func (_e *OrganizationsApi_Expecter) ListOrganizationInvitationsExecute(r interface{}) *OrganizationsApi_ListOrganizationInvitationsExecute_Call {
	return &OrganizationsApi_ListOrganizationInvitationsExecute_Call{Call: _e.mock.On("ListOrganizationInvitationsExecute", r)}
}

func (_c *OrganizationsApi_ListOrganizationInvitationsExecute_Call) Run(run func(r admin.ListOrganizationInvitationsApiRequest)) *OrganizationsApi_ListOrganizationInvitationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrganizationInvitationsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitationsExecute_Call) Return(_a0 []admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrganizationInvitationsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitationsExecute_Call) RunAndReturn(run func(admin.ListOrganizationInvitationsApiRequest) ([]admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_ListOrganizationInvitationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationInvitationsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrganizationInvitationsWithParams(ctx context.Context, args *admin.ListOrganizationInvitationsApiParams) admin.ListOrganizationInvitationsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInvitationsWithParams")
	}

	var r0 admin.ListOrganizationInvitationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrganizationInvitationsApiParams) admin.ListOrganizationInvitationsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationInvitationsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationInvitationsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationInvitationsWithParams'
type OrganizationsApi_ListOrganizationInvitationsWithParams_Call struct {
	*mock.Call
}

// ListOrganizationInvitationsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrganizationInvitationsApiParams
func (_e *OrganizationsApi_Expecter) ListOrganizationInvitationsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListOrganizationInvitationsWithParams_Call {
	return &OrganizationsApi_ListOrganizationInvitationsWithParams_Call{Call: _e.mock.On("ListOrganizationInvitationsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrganizationInvitationsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrganizationInvitationsApiParams)) *OrganizationsApi_ListOrganizationInvitationsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrganizationInvitationsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitationsWithParams_Call) Return(_a0 admin.ListOrganizationInvitationsApiRequest) *OrganizationsApi_ListOrganizationInvitationsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationInvitationsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrganizationInvitationsApiParams) admin.ListOrganizationInvitationsApiRequest) *OrganizationsApi_ListOrganizationInvitationsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationProjects provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) ListOrganizationProjects(ctx context.Context, orgId string) admin.ListOrganizationProjectsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationProjects")
	}

	var r0 admin.ListOrganizationProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrganizationProjectsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationProjectsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationProjects'
type OrganizationsApi_ListOrganizationProjects_Call struct {
	*mock.Call
}

// ListOrganizationProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) ListOrganizationProjects(ctx interface{}, orgId interface{}) *OrganizationsApi_ListOrganizationProjects_Call {
	return &OrganizationsApi_ListOrganizationProjects_Call{Call: _e.mock.On("ListOrganizationProjects", ctx, orgId)}
}

func (_c *OrganizationsApi_ListOrganizationProjects_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_ListOrganizationProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjects_Call) Return(_a0 admin.ListOrganizationProjectsApiRequest) *OrganizationsApi_ListOrganizationProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjects_Call) RunAndReturn(run func(context.Context, string) admin.ListOrganizationProjectsApiRequest) *OrganizationsApi_ListOrganizationProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationProjectsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrganizationProjectsExecute(r admin.ListOrganizationProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationProjectsExecute")
	}

	var r0 *admin.PaginatedAtlasGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationProjectsApiRequest) *admin.PaginatedAtlasGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAtlasGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrganizationProjectsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrganizationProjectsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrganizationProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationProjectsExecute'
type OrganizationsApi_ListOrganizationProjectsExecute_Call struct {
	*mock.Call
}

// ListOrganizationProjectsExecute is a helper method to define mock.On call
//   - r admin.ListOrganizationProjectsApiRequest
func (_e *OrganizationsApi_Expecter) ListOrganizationProjectsExecute(r interface{}) *OrganizationsApi_ListOrganizationProjectsExecute_Call {
	return &OrganizationsApi_ListOrganizationProjectsExecute_Call{Call: _e.mock.On("ListOrganizationProjectsExecute", r)}
}

func (_c *OrganizationsApi_ListOrganizationProjectsExecute_Call) Run(run func(r admin.ListOrganizationProjectsApiRequest)) *OrganizationsApi_ListOrganizationProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrganizationProjectsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjectsExecute_Call) Return(_a0 *admin.PaginatedAtlasGroup, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrganizationProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjectsExecute_Call) RunAndReturn(run func(admin.ListOrganizationProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)) *OrganizationsApi_ListOrganizationProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationProjectsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrganizationProjectsWithParams(ctx context.Context, args *admin.ListOrganizationProjectsApiParams) admin.ListOrganizationProjectsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationProjectsWithParams")
	}

	var r0 admin.ListOrganizationProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrganizationProjectsApiParams) admin.ListOrganizationProjectsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationProjectsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationProjectsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationProjectsWithParams'
type OrganizationsApi_ListOrganizationProjectsWithParams_Call struct {
	*mock.Call
}

// ListOrganizationProjectsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrganizationProjectsApiParams
func (_e *OrganizationsApi_Expecter) ListOrganizationProjectsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListOrganizationProjectsWithParams_Call {
	return &OrganizationsApi_ListOrganizationProjectsWithParams_Call{Call: _e.mock.On("ListOrganizationProjectsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrganizationProjectsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrganizationProjectsApiParams)) *OrganizationsApi_ListOrganizationProjectsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrganizationProjectsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjectsWithParams_Call) Return(_a0 admin.ListOrganizationProjectsApiRequest) *OrganizationsApi_ListOrganizationProjectsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationProjectsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrganizationProjectsApiParams) admin.ListOrganizationProjectsApiRequest) *OrganizationsApi_ListOrganizationProjectsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationUsers provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) ListOrganizationUsers(ctx context.Context, orgId string) admin.ListOrganizationUsersApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationUsers")
	}

	var r0 admin.ListOrganizationUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrganizationUsersApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationUsersApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationUsers'
type OrganizationsApi_ListOrganizationUsers_Call struct {
	*mock.Call
}

// ListOrganizationUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) ListOrganizationUsers(ctx interface{}, orgId interface{}) *OrganizationsApi_ListOrganizationUsers_Call {
	return &OrganizationsApi_ListOrganizationUsers_Call{Call: _e.mock.On("ListOrganizationUsers", ctx, orgId)}
}

func (_c *OrganizationsApi_ListOrganizationUsers_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_ListOrganizationUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsers_Call) Return(_a0 admin.ListOrganizationUsersApiRequest) *OrganizationsApi_ListOrganizationUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsers_Call) RunAndReturn(run func(context.Context, string) admin.ListOrganizationUsersApiRequest) *OrganizationsApi_ListOrganizationUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationUsersExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrganizationUsersExecute(r admin.ListOrganizationUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationUsersExecute")
	}

	var r0 *admin.PaginatedAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationUsersApiRequest) *admin.PaginatedAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrganizationUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrganizationUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrganizationUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationUsersExecute'
type OrganizationsApi_ListOrganizationUsersExecute_Call struct {
	*mock.Call
}

// ListOrganizationUsersExecute is a helper method to define mock.On call
//   - r admin.ListOrganizationUsersApiRequest
func (_e *OrganizationsApi_Expecter) ListOrganizationUsersExecute(r interface{}) *OrganizationsApi_ListOrganizationUsersExecute_Call {
	return &OrganizationsApi_ListOrganizationUsersExecute_Call{Call: _e.mock.On("ListOrganizationUsersExecute", r)}
}

func (_c *OrganizationsApi_ListOrganizationUsersExecute_Call) Run(run func(r admin.ListOrganizationUsersApiRequest)) *OrganizationsApi_ListOrganizationUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrganizationUsersApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsersExecute_Call) Return(_a0 *admin.PaginatedAppUser, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrganizationUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsersExecute_Call) RunAndReturn(run func(admin.ListOrganizationUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error)) *OrganizationsApi_ListOrganizationUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationUsersWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrganizationUsersWithParams(ctx context.Context, args *admin.ListOrganizationUsersApiParams) admin.ListOrganizationUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationUsersWithParams")
	}

	var r0 admin.ListOrganizationUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrganizationUsersApiParams) admin.ListOrganizationUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationUsersApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationUsersWithParams'
type OrganizationsApi_ListOrganizationUsersWithParams_Call struct {
	*mock.Call
}

// ListOrganizationUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrganizationUsersApiParams
func (_e *OrganizationsApi_Expecter) ListOrganizationUsersWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListOrganizationUsersWithParams_Call {
	return &OrganizationsApi_ListOrganizationUsersWithParams_Call{Call: _e.mock.On("ListOrganizationUsersWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrganizationUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrganizationUsersApiParams)) *OrganizationsApi_ListOrganizationUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrganizationUsersApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsersWithParams_Call) Return(_a0 admin.ListOrganizationUsersApiRequest) *OrganizationsApi_ListOrganizationUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrganizationUsersApiParams) admin.ListOrganizationUsersApiRequest) *OrganizationsApi_ListOrganizationUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function with given fields: ctx
func (_m *OrganizationsApi) ListOrganizations(ctx context.Context) admin.ListOrganizationsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 admin.ListOrganizationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListOrganizationsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type OrganizationsApi_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrganizationsApi_Expecter) ListOrganizations(ctx interface{}) *OrganizationsApi_ListOrganizations_Call {
	return &OrganizationsApi_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations", ctx)}
}

func (_c *OrganizationsApi_ListOrganizations_Call) Run(run func(ctx context.Context)) *OrganizationsApi_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizations_Call) Return(_a0 admin.ListOrganizationsApiRequest) *OrganizationsApi_ListOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizations_Call) RunAndReturn(run func(context.Context) admin.ListOrganizationsApiRequest) *OrganizationsApi_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrganizationsExecute(r admin.ListOrganizationsApiRequest) (*admin.PaginatedOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationsExecute")
	}

	var r0 *admin.PaginatedOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationsApiRequest) (*admin.PaginatedOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrganizationsApiRequest) *admin.PaginatedOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrganizationsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrganizationsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrganizationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationsExecute'
type OrganizationsApi_ListOrganizationsExecute_Call struct {
	*mock.Call
}

// ListOrganizationsExecute is a helper method to define mock.On call
//   - r admin.ListOrganizationsApiRequest
func (_e *OrganizationsApi_Expecter) ListOrganizationsExecute(r interface{}) *OrganizationsApi_ListOrganizationsExecute_Call {
	return &OrganizationsApi_ListOrganizationsExecute_Call{Call: _e.mock.On("ListOrganizationsExecute", r)}
}

func (_c *OrganizationsApi_ListOrganizationsExecute_Call) Run(run func(r admin.ListOrganizationsApiRequest)) *OrganizationsApi_ListOrganizationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrganizationsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationsExecute_Call) Return(_a0 *admin.PaginatedOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrganizationsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationsExecute_Call) RunAndReturn(run func(admin.ListOrganizationsApiRequest) (*admin.PaginatedOrganization, *http.Response, error)) *OrganizationsApi_ListOrganizationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizationsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrganizationsWithParams(ctx context.Context, args *admin.ListOrganizationsApiParams) admin.ListOrganizationsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationsWithParams")
	}

	var r0 admin.ListOrganizationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrganizationsApiParams) admin.ListOrganizationsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrganizationsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrganizationsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizationsWithParams'
type OrganizationsApi_ListOrganizationsWithParams_Call struct {
	*mock.Call
}

// ListOrganizationsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrganizationsApiParams
func (_e *OrganizationsApi_Expecter) ListOrganizationsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListOrganizationsWithParams_Call {
	return &OrganizationsApi_ListOrganizationsWithParams_Call{Call: _e.mock.On("ListOrganizationsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrganizationsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrganizationsApiParams)) *OrganizationsApi_ListOrganizationsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrganizationsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrganizationsWithParams_Call) Return(_a0 admin.ListOrganizationsApiRequest) *OrganizationsApi_ListOrganizationsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrganizationsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrganizationsApiParams) admin.ListOrganizationsApiRequest) *OrganizationsApi_ListOrganizationsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjects provides a mock function with given fields: ctx, orgId, serviceAccountId
func (_m *OrganizationsApi) ListServiceAccountProjects(ctx context.Context, orgId string, serviceAccountId string) admin.ListServiceAccountProjectsApiRequest {
	ret := _m.Called(ctx, orgId, serviceAccountId)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjects")
	}

	var r0 admin.ListServiceAccountProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListServiceAccountProjectsApiRequest); ok {
		r0 = rf(ctx, orgId, serviceAccountId)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountProjectsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListServiceAccountProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjects'
type OrganizationsApi_ListServiceAccountProjects_Call struct {
	*mock.Call
}

// ListServiceAccountProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - serviceAccountId string
func (_e *OrganizationsApi_Expecter) ListServiceAccountProjects(ctx interface{}, orgId interface{}, serviceAccountId interface{}) *OrganizationsApi_ListServiceAccountProjects_Call {
	return &OrganizationsApi_ListServiceAccountProjects_Call{Call: _e.mock.On("ListServiceAccountProjects", ctx, orgId, serviceAccountId)}
}

func (_c *OrganizationsApi_ListServiceAccountProjects_Call) Run(run func(ctx context.Context, orgId string, serviceAccountId string)) *OrganizationsApi_ListServiceAccountProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjects_Call) Return(_a0 admin.ListServiceAccountProjectsApiRequest) *OrganizationsApi_ListServiceAccountProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjects_Call) RunAndReturn(run func(context.Context, string, string) admin.ListServiceAccountProjectsApiRequest) *OrganizationsApi_ListServiceAccountProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjectsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListServiceAccountProjectsExecute(r admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjectsExecute")
	}

	var r0 *admin.PaginatedServiceAccountGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountProjectsApiRequest) *admin.PaginatedServiceAccountGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServiceAccountProjectsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServiceAccountProjectsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListServiceAccountProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjectsExecute'
type OrganizationsApi_ListServiceAccountProjectsExecute_Call struct {
	*mock.Call
}

// ListServiceAccountProjectsExecute is a helper method to define mock.On call
//   - r admin.ListServiceAccountProjectsApiRequest
func (_e *OrganizationsApi_Expecter) ListServiceAccountProjectsExecute(r interface{}) *OrganizationsApi_ListServiceAccountProjectsExecute_Call {
	return &OrganizationsApi_ListServiceAccountProjectsExecute_Call{Call: _e.mock.On("ListServiceAccountProjectsExecute", r)}
}

func (_c *OrganizationsApi_ListServiceAccountProjectsExecute_Call) Run(run func(r admin.ListServiceAccountProjectsApiRequest)) *OrganizationsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServiceAccountProjectsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjectsExecute_Call) Return(_a0 *admin.PaginatedServiceAccountGroup, _a1 *http.Response, _a2 error) *OrganizationsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjectsExecute_Call) RunAndReturn(run func(admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)) *OrganizationsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjectsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListServiceAccountProjectsWithParams(ctx context.Context, args *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjectsWithParams")
	}

	var r0 admin.ListServiceAccountProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountProjectsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListServiceAccountProjectsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjectsWithParams'
type OrganizationsApi_ListServiceAccountProjectsWithParams_Call struct {
	*mock.Call
}

// ListServiceAccountProjectsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServiceAccountProjectsApiParams
func (_e *OrganizationsApi_Expecter) ListServiceAccountProjectsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListServiceAccountProjectsWithParams_Call {
	return &OrganizationsApi_ListServiceAccountProjectsWithParams_Call{Call: _e.mock.On("ListServiceAccountProjectsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListServiceAccountProjectsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServiceAccountProjectsApiParams)) *OrganizationsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServiceAccountProjectsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjectsWithParams_Call) Return(_a0 admin.ListServiceAccountProjectsApiRequest) *OrganizationsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountProjectsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest) *OrganizationsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccounts provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) ListServiceAccounts(ctx context.Context, orgId string) admin.ListServiceAccountsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccounts")
	}

	var r0 admin.ListServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListServiceAccountsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccounts'
type OrganizationsApi_ListServiceAccounts_Call struct {
	*mock.Call
}

// ListServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) ListServiceAccounts(ctx interface{}, orgId interface{}) *OrganizationsApi_ListServiceAccounts_Call {
	return &OrganizationsApi_ListServiceAccounts_Call{Call: _e.mock.On("ListServiceAccounts", ctx, orgId)}
}

func (_c *OrganizationsApi_ListServiceAccounts_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_ListServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccounts_Call) Return(_a0 admin.ListServiceAccountsApiRequest) *OrganizationsApi_ListServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListServiceAccountsApiRequest) *OrganizationsApi_ListServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListServiceAccountsExecute(r admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsExecute")
	}

	var r0 *admin.PaginatedOrgServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountsApiRequest) *admin.PaginatedOrgServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsExecute'
type OrganizationsApi_ListServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListServiceAccountsApiRequest
func (_e *OrganizationsApi_Expecter) ListServiceAccountsExecute(r interface{}) *OrganizationsApi_ListServiceAccountsExecute_Call {
	return &OrganizationsApi_ListServiceAccountsExecute_Call{Call: _e.mock.On("ListServiceAccountsExecute", r)}
}

func (_c *OrganizationsApi_ListServiceAccountsExecute_Call) Run(run func(r admin.ListServiceAccountsApiRequest)) *OrganizationsApi_ListServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServiceAccountsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedOrgServiceAccounts, _a1 *http.Response, _a2 error) *OrganizationsApi_ListServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)) *OrganizationsApi_ListServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListServiceAccountsWithParams(ctx context.Context, args *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsWithParams")
	}

	var r0 admin.ListServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsWithParams'
type OrganizationsApi_ListServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServiceAccountsApiParams
func (_e *OrganizationsApi_Expecter) ListServiceAccountsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_ListServiceAccountsWithParams_Call {
	return &OrganizationsApi_ListServiceAccountsWithParams_Call{Call: _e.mock.On("ListServiceAccountsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServiceAccountsApiParams)) *OrganizationsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServiceAccountsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountsWithParams_Call) Return(_a0 admin.ListServiceAccountsApiRequest) *OrganizationsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest) *OrganizationsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationUser provides a mock function with given fields: ctx, orgId, userId
func (_m *OrganizationsApi) RemoveOrganizationUser(ctx context.Context, orgId string, userId string) admin.RemoveOrganizationUserApiRequest {
	ret := _m.Called(ctx, orgId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationUser")
	}

	var r0 admin.RemoveOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveOrganizationUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrganizationUserApiRequest)
	}

	return r0
}

// OrganizationsApi_RemoveOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationUser'
type OrganizationsApi_RemoveOrganizationUser_Call struct {
	*mock.Call
}

// RemoveOrganizationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
func (_e *OrganizationsApi_Expecter) RemoveOrganizationUser(ctx interface{}, orgId interface{}, userId interface{}) *OrganizationsApi_RemoveOrganizationUser_Call {
	return &OrganizationsApi_RemoveOrganizationUser_Call{Call: _e.mock.On("RemoveOrganizationUser", ctx, orgId, userId)}
}

func (_c *OrganizationsApi_RemoveOrganizationUser_Call) Run(run func(ctx context.Context, orgId string, userId string)) *OrganizationsApi_RemoveOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUser_Call) Return(_a0 admin.RemoveOrganizationUserApiRequest) *OrganizationsApi_RemoveOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUser_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveOrganizationUserApiRequest) *OrganizationsApi_RemoveOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationUserExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) RemoveOrganizationUserExecute(r admin.RemoveOrganizationUserApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationUserExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveOrganizationUserApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveOrganizationUserApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveOrganizationUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveOrganizationUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_RemoveOrganizationUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationUserExecute'
type OrganizationsApi_RemoveOrganizationUserExecute_Call struct {
	*mock.Call
}

// RemoveOrganizationUserExecute is a helper method to define mock.On call
//   - r admin.RemoveOrganizationUserApiRequest
func (_e *OrganizationsApi_Expecter) RemoveOrganizationUserExecute(r interface{}) *OrganizationsApi_RemoveOrganizationUserExecute_Call {
	return &OrganizationsApi_RemoveOrganizationUserExecute_Call{Call: _e.mock.On("RemoveOrganizationUserExecute", r)}
}

func (_c *OrganizationsApi_RemoveOrganizationUserExecute_Call) Run(run func(r admin.RemoveOrganizationUserApiRequest)) *OrganizationsApi_RemoveOrganizationUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveOrganizationUserApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUserExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *OrganizationsApi_RemoveOrganizationUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUserExecute_Call) RunAndReturn(run func(admin.RemoveOrganizationUserApiRequest) (map[string]interface{}, *http.Response, error)) *OrganizationsApi_RemoveOrganizationUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationUserWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) RemoveOrganizationUserWithParams(ctx context.Context, args *admin.RemoveOrganizationUserApiParams) admin.RemoveOrganizationUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationUserWithParams")
	}

	var r0 admin.RemoveOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveOrganizationUserApiParams) admin.RemoveOrganizationUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrganizationUserApiRequest)
	}

	return r0
}

// OrganizationsApi_RemoveOrganizationUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationUserWithParams'
type OrganizationsApi_RemoveOrganizationUserWithParams_Call struct {
	*mock.Call
}

// RemoveOrganizationUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveOrganizationUserApiParams
func (_e *OrganizationsApi_Expecter) RemoveOrganizationUserWithParams(ctx interface{}, args interface{}) *OrganizationsApi_RemoveOrganizationUserWithParams_Call {
	return &OrganizationsApi_RemoveOrganizationUserWithParams_Call{Call: _e.mock.On("RemoveOrganizationUserWithParams", ctx, args)}
}

func (_c *OrganizationsApi_RemoveOrganizationUserWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveOrganizationUserApiParams)) *OrganizationsApi_RemoveOrganizationUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveOrganizationUserApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUserWithParams_Call) Return(_a0 admin.RemoveOrganizationUserApiRequest) *OrganizationsApi_RemoveOrganizationUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_RemoveOrganizationUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveOrganizationUserApiParams) admin.RemoveOrganizationUserApiRequest) *OrganizationsApi_RemoveOrganizationUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrganization provides a mock function with given fields: ctx, orgId, atlasOrganization
func (_m *OrganizationsApi) RenameOrganization(ctx context.Context, orgId string, atlasOrganization *admin.AtlasOrganization) admin.RenameOrganizationApiRequest {
	ret := _m.Called(ctx, orgId, atlasOrganization)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrganization")
	}

	var r0 admin.RenameOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.AtlasOrganization) admin.RenameOrganizationApiRequest); ok {
		r0 = rf(ctx, orgId, atlasOrganization)
	} else {
		r0 = ret.Get(0).(admin.RenameOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_RenameOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrganization'
type OrganizationsApi_RenameOrganization_Call struct {
	*mock.Call
}

// RenameOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - atlasOrganization *admin.AtlasOrganization
func (_e *OrganizationsApi_Expecter) RenameOrganization(ctx interface{}, orgId interface{}, atlasOrganization interface{}) *OrganizationsApi_RenameOrganization_Call {
	return &OrganizationsApi_RenameOrganization_Call{Call: _e.mock.On("RenameOrganization", ctx, orgId, atlasOrganization)}
}

func (_c *OrganizationsApi_RenameOrganization_Call) Run(run func(ctx context.Context, orgId string, atlasOrganization *admin.AtlasOrganization)) *OrganizationsApi_RenameOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.AtlasOrganization))
	})
	return _c
}

func (_c *OrganizationsApi_RenameOrganization_Call) Return(_a0 admin.RenameOrganizationApiRequest) *OrganizationsApi_RenameOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_RenameOrganization_Call) RunAndReturn(run func(context.Context, string, *admin.AtlasOrganization) admin.RenameOrganizationApiRequest) *OrganizationsApi_RenameOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrganizationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) RenameOrganizationExecute(r admin.RenameOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrganizationExecute")
	}

	var r0 *admin.AtlasOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RenameOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RenameOrganizationApiRequest) *admin.AtlasOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AtlasOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RenameOrganizationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RenameOrganizationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_RenameOrganizationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrganizationExecute'
type OrganizationsApi_RenameOrganizationExecute_Call struct {
	*mock.Call
}

// RenameOrganizationExecute is a helper method to define mock.On call
//   - r admin.RenameOrganizationApiRequest
func (_e *OrganizationsApi_Expecter) RenameOrganizationExecute(r interface{}) *OrganizationsApi_RenameOrganizationExecute_Call {
	return &OrganizationsApi_RenameOrganizationExecute_Call{Call: _e.mock.On("RenameOrganizationExecute", r)}
}

func (_c *OrganizationsApi_RenameOrganizationExecute_Call) Run(run func(r admin.RenameOrganizationApiRequest)) *OrganizationsApi_RenameOrganizationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RenameOrganizationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_RenameOrganizationExecute_Call) Return(_a0 *admin.AtlasOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_RenameOrganizationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_RenameOrganizationExecute_Call) RunAndReturn(run func(admin.RenameOrganizationApiRequest) (*admin.AtlasOrganization, *http.Response, error)) *OrganizationsApi_RenameOrganizationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrganizationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) RenameOrganizationWithParams(ctx context.Context, args *admin.RenameOrganizationApiParams) admin.RenameOrganizationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrganizationWithParams")
	}

	var r0 admin.RenameOrganizationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RenameOrganizationApiParams) admin.RenameOrganizationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RenameOrganizationApiRequest)
	}

	return r0
}

// OrganizationsApi_RenameOrganizationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrganizationWithParams'
type OrganizationsApi_RenameOrganizationWithParams_Call struct {
	*mock.Call
}

// RenameOrganizationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RenameOrganizationApiParams
func (_e *OrganizationsApi_Expecter) RenameOrganizationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_RenameOrganizationWithParams_Call {
	return &OrganizationsApi_RenameOrganizationWithParams_Call{Call: _e.mock.On("RenameOrganizationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_RenameOrganizationWithParams_Call) Run(run func(ctx context.Context, args *admin.RenameOrganizationApiParams)) *OrganizationsApi_RenameOrganizationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RenameOrganizationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_RenameOrganizationWithParams_Call) Return(_a0 admin.RenameOrganizationApiRequest) *OrganizationsApi_RenameOrganizationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_RenameOrganizationWithParams_Call) RunAndReturn(run func(context.Context, *admin.RenameOrganizationApiParams) admin.RenameOrganizationApiRequest) *OrganizationsApi_RenameOrganizationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitation provides a mock function with given fields: ctx, orgId, organizationInvitationRequest
func (_m *OrganizationsApi) UpdateOrganizationInvitation(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest) admin.UpdateOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, orgId, organizationInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitation")
	}

	var r0 admin.UpdateOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationInvitationRequest) admin.UpdateOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, orgId, organizationInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitation'
type OrganizationsApi_UpdateOrganizationInvitation_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationInvitationRequest *admin.OrganizationInvitationRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitation(ctx interface{}, orgId interface{}, organizationInvitationRequest interface{}) *OrganizationsApi_UpdateOrganizationInvitation_Call {
	return &OrganizationsApi_UpdateOrganizationInvitation_Call{Call: _e.mock.On("UpdateOrganizationInvitation", ctx, orgId, organizationInvitationRequest)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitation_Call) Run(run func(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest)) *OrganizationsApi_UpdateOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationInvitationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitation_Call) Return(_a0 admin.UpdateOrganizationInvitationApiRequest) *OrganizationsApi_UpdateOrganizationInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitation_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationInvitationRequest) admin.UpdateOrganizationInvitationApiRequest) *OrganizationsApi_UpdateOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationById provides a mock function with given fields: ctx, orgId, invitationId, organizationInvitationUpdateRequest
func (_m *OrganizationsApi) UpdateOrganizationInvitationById(ctx context.Context, orgId string, invitationId string, organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrganizationInvitationByIdApiRequest {
	ret := _m.Called(ctx, orgId, invitationId, organizationInvitationUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationById")
	}

	var r0 admin.UpdateOrganizationInvitationByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrganizationInvitationByIdApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId, organizationInvitationUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationInvitationByIdApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationInvitationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationById'
type OrganizationsApi_UpdateOrganizationInvitationById_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationById is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
//   - organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitationById(ctx interface{}, orgId interface{}, invitationId interface{}, organizationInvitationUpdateRequest interface{}) *OrganizationsApi_UpdateOrganizationInvitationById_Call {
	return &OrganizationsApi_UpdateOrganizationInvitationById_Call{Call: _e.mock.On("UpdateOrganizationInvitationById", ctx, orgId, invitationId, organizationInvitationUpdateRequest)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationById_Call) Run(run func(ctx context.Context, orgId string, invitationId string, organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest)) *OrganizationsApi_UpdateOrganizationInvitationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrganizationInvitationUpdateRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationById_Call) Return(_a0 admin.UpdateOrganizationInvitationByIdApiRequest) *OrganizationsApi_UpdateOrganizationInvitationById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationById_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrganizationInvitationByIdApiRequest) *OrganizationsApi_UpdateOrganizationInvitationById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationByIdExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrganizationInvitationByIdExecute(r admin.UpdateOrganizationInvitationByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationByIdExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationInvitationByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationInvitationByIdApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrganizationInvitationByIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrganizationInvitationByIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationByIdExecute'
type OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationByIdExecute is a helper method to define mock.On call
//   - r admin.UpdateOrganizationInvitationByIdApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitationByIdExecute(r interface{}) *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call {
	return &OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call{Call: _e.mock.On("UpdateOrganizationInvitationByIdExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call) Run(run func(r admin.UpdateOrganizationInvitationByIdApiRequest)) *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrganizationInvitationByIdApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call) RunAndReturn(run func(admin.UpdateOrganizationInvitationByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_UpdateOrganizationInvitationByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationByIdWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrganizationInvitationByIdWithParams(ctx context.Context, args *admin.UpdateOrganizationInvitationByIdApiParams) admin.UpdateOrganizationInvitationByIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationByIdWithParams")
	}

	var r0 admin.UpdateOrganizationInvitationByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrganizationInvitationByIdApiParams) admin.UpdateOrganizationInvitationByIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationInvitationByIdApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationByIdWithParams'
type OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationByIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrganizationInvitationByIdApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitationByIdWithParams(ctx interface{}, args interface{}) *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call {
	return &OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call{Call: _e.mock.On("UpdateOrganizationInvitationByIdWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrganizationInvitationByIdApiParams)) *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrganizationInvitationByIdApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call) Return(_a0 admin.UpdateOrganizationInvitationByIdApiRequest) *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrganizationInvitationByIdApiParams) admin.UpdateOrganizationInvitationByIdApiRequest) *OrganizationsApi_UpdateOrganizationInvitationByIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrganizationInvitationExecute(r admin.UpdateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationInvitationApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrganizationInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrganizationInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrganizationInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationExecute'
type OrganizationsApi_UpdateOrganizationInvitationExecute_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationExecute is a helper method to define mock.On call
//   - r admin.UpdateOrganizationInvitationApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitationExecute(r interface{}) *OrganizationsApi_UpdateOrganizationInvitationExecute_Call {
	return &OrganizationsApi_UpdateOrganizationInvitationExecute_Call{Call: _e.mock.On("UpdateOrganizationInvitationExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationExecute_Call) Run(run func(r admin.UpdateOrganizationInvitationApiRequest)) *OrganizationsApi_UpdateOrganizationInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrganizationInvitationApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrganizationInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationExecute_Call) RunAndReturn(run func(admin.UpdateOrganizationInvitationApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_UpdateOrganizationInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrganizationInvitationWithParams(ctx context.Context, args *admin.UpdateOrganizationInvitationApiParams) admin.UpdateOrganizationInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationWithParams")
	}

	var r0 admin.UpdateOrganizationInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrganizationInvitationApiParams) admin.UpdateOrganizationInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationInvitationApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationWithParams'
type OrganizationsApi_UpdateOrganizationInvitationWithParams_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrganizationInvitationApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrganizationInvitationWithParams(ctx interface{}, args interface{}) *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call {
	return &OrganizationsApi_UpdateOrganizationInvitationWithParams_Call{Call: _e.mock.On("UpdateOrganizationInvitationWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrganizationInvitationApiParams)) *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrganizationInvitationApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call) Return(_a0 admin.UpdateOrganizationInvitationApiRequest) *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrganizationInvitationApiParams) admin.UpdateOrganizationInvitationApiRequest) *OrganizationsApi_UpdateOrganizationInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationRoles provides a mock function with given fields: ctx, orgId, userId, updateOrgRolesForUser
func (_m *OrganizationsApi) UpdateOrganizationRoles(ctx context.Context, orgId string, userId string, updateOrgRolesForUser *admin.UpdateOrgRolesForUser) admin.UpdateOrganizationRolesApiRequest {
	ret := _m.Called(ctx, orgId, userId, updateOrgRolesForUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationRoles")
	}

	var r0 admin.UpdateOrganizationRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UpdateOrgRolesForUser) admin.UpdateOrganizationRolesApiRequest); ok {
		r0 = rf(ctx, orgId, userId, updateOrgRolesForUser)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationRolesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationRoles'
type OrganizationsApi_UpdateOrganizationRoles_Call struct {
	*mock.Call
}

// UpdateOrganizationRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - updateOrgRolesForUser *admin.UpdateOrgRolesForUser
func (_e *OrganizationsApi_Expecter) UpdateOrganizationRoles(ctx interface{}, orgId interface{}, userId interface{}, updateOrgRolesForUser interface{}) *OrganizationsApi_UpdateOrganizationRoles_Call {
	return &OrganizationsApi_UpdateOrganizationRoles_Call{Call: _e.mock.On("UpdateOrganizationRoles", ctx, orgId, userId, updateOrgRolesForUser)}
}

func (_c *OrganizationsApi_UpdateOrganizationRoles_Call) Run(run func(ctx context.Context, orgId string, userId string, updateOrgRolesForUser *admin.UpdateOrgRolesForUser)) *OrganizationsApi_UpdateOrganizationRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UpdateOrgRolesForUser))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRoles_Call) Return(_a0 admin.UpdateOrganizationRolesApiRequest) *OrganizationsApi_UpdateOrganizationRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRoles_Call) RunAndReturn(run func(context.Context, string, string, *admin.UpdateOrgRolesForUser) admin.UpdateOrganizationRolesApiRequest) *OrganizationsApi_UpdateOrganizationRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationRolesExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrganizationRolesExecute(r admin.UpdateOrganizationRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationRolesExecute")
	}

	var r0 *admin.UpdateOrgRolesForUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationRolesApiRequest) *admin.UpdateOrgRolesForUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UpdateOrgRolesForUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrganizationRolesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrganizationRolesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrganizationRolesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationRolesExecute'
type OrganizationsApi_UpdateOrganizationRolesExecute_Call struct {
	*mock.Call
}

// UpdateOrganizationRolesExecute is a helper method to define mock.On call
//   - r admin.UpdateOrganizationRolesApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationRolesExecute(r interface{}) *OrganizationsApi_UpdateOrganizationRolesExecute_Call {
	return &OrganizationsApi_UpdateOrganizationRolesExecute_Call{Call: _e.mock.On("UpdateOrganizationRolesExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrganizationRolesExecute_Call) Run(run func(r admin.UpdateOrganizationRolesApiRequest)) *OrganizationsApi_UpdateOrganizationRolesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrganizationRolesApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRolesExecute_Call) Return(_a0 *admin.UpdateOrgRolesForUser, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrganizationRolesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRolesExecute_Call) RunAndReturn(run func(admin.UpdateOrganizationRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error)) *OrganizationsApi_UpdateOrganizationRolesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationRolesWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrganizationRolesWithParams(ctx context.Context, args *admin.UpdateOrganizationRolesApiParams) admin.UpdateOrganizationRolesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationRolesWithParams")
	}

	var r0 admin.UpdateOrganizationRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrganizationRolesApiParams) admin.UpdateOrganizationRolesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationRolesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationRolesWithParams'
type OrganizationsApi_UpdateOrganizationRolesWithParams_Call struct {
	*mock.Call
}

// UpdateOrganizationRolesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrganizationRolesApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrganizationRolesWithParams(ctx interface{}, args interface{}) *OrganizationsApi_UpdateOrganizationRolesWithParams_Call {
	return &OrganizationsApi_UpdateOrganizationRolesWithParams_Call{Call: _e.mock.On("UpdateOrganizationRolesWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrganizationRolesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrganizationRolesApiParams)) *OrganizationsApi_UpdateOrganizationRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrganizationRolesApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRolesWithParams_Call) Return(_a0 admin.UpdateOrganizationRolesApiRequest) *OrganizationsApi_UpdateOrganizationRolesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationRolesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrganizationRolesApiParams) admin.UpdateOrganizationRolesApiRequest) *OrganizationsApi_UpdateOrganizationRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSettings provides a mock function with given fields: ctx, orgId, organizationSettings
func (_m *OrganizationsApi) UpdateOrganizationSettings(ctx context.Context, orgId string, organizationSettings *admin.OrganizationSettings) admin.UpdateOrganizationSettingsApiRequest {
	ret := _m.Called(ctx, orgId, organizationSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSettings")
	}

	var r0 admin.UpdateOrganizationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationSettings) admin.UpdateOrganizationSettingsApiRequest); ok {
		r0 = rf(ctx, orgId, organizationSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSettings'
type OrganizationsApi_UpdateOrganizationSettings_Call struct {
	*mock.Call
}

// UpdateOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationSettings *admin.OrganizationSettings
func (_e *OrganizationsApi_Expecter) UpdateOrganizationSettings(ctx interface{}, orgId interface{}, organizationSettings interface{}) *OrganizationsApi_UpdateOrganizationSettings_Call {
	return &OrganizationsApi_UpdateOrganizationSettings_Call{Call: _e.mock.On("UpdateOrganizationSettings", ctx, orgId, organizationSettings)}
}

func (_c *OrganizationsApi_UpdateOrganizationSettings_Call) Run(run func(ctx context.Context, orgId string, organizationSettings *admin.OrganizationSettings)) *OrganizationsApi_UpdateOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationSettings))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettings_Call) Return(_a0 admin.UpdateOrganizationSettingsApiRequest) *OrganizationsApi_UpdateOrganizationSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettings_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationSettings) admin.UpdateOrganizationSettingsApiRequest) *OrganizationsApi_UpdateOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSettingsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrganizationSettingsExecute(r admin.UpdateOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSettingsExecute")
	}

	var r0 *admin.OrganizationSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationSettingsApiRequest) *admin.OrganizationSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrganizationSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrganizationSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrganizationSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSettingsExecute'
type OrganizationsApi_UpdateOrganizationSettingsExecute_Call struct {
	*mock.Call
}

// UpdateOrganizationSettingsExecute is a helper method to define mock.On call
//   - r admin.UpdateOrganizationSettingsApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrganizationSettingsExecute(r interface{}) *OrganizationsApi_UpdateOrganizationSettingsExecute_Call {
	return &OrganizationsApi_UpdateOrganizationSettingsExecute_Call{Call: _e.mock.On("UpdateOrganizationSettingsExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsExecute_Call) Run(run func(r admin.UpdateOrganizationSettingsApiRequest)) *OrganizationsApi_UpdateOrganizationSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrganizationSettingsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsExecute_Call) Return(_a0 *admin.OrganizationSettings, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrganizationSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsExecute_Call) RunAndReturn(run func(admin.UpdateOrganizationSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)) *OrganizationsApi_UpdateOrganizationSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrganizationSettingsWithParams(ctx context.Context, args *admin.UpdateOrganizationSettingsApiParams) admin.UpdateOrganizationSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSettingsWithParams")
	}

	var r0 admin.UpdateOrganizationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrganizationSettingsApiParams) admin.UpdateOrganizationSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrganizationSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSettingsWithParams'
type OrganizationsApi_UpdateOrganizationSettingsWithParams_Call struct {
	*mock.Call
}

// UpdateOrganizationSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrganizationSettingsApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrganizationSettingsWithParams(ctx interface{}, args interface{}) *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call {
	return &OrganizationsApi_UpdateOrganizationSettingsWithParams_Call{Call: _e.mock.On("UpdateOrganizationSettingsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrganizationSettingsApiParams)) *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrganizationSettingsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call) Return(_a0 admin.UpdateOrganizationSettingsApiRequest) *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrganizationSettingsApiParams) admin.UpdateOrganizationSettingsApiRequest) *OrganizationsApi_UpdateOrganizationSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccount provides a mock function with given fields: ctx, serviceAccountId, orgId, orgServiceAccountUpdateRequest
func (_m *OrganizationsApi) UpdateServiceAccount(ctx context.Context, serviceAccountId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest {
	ret := _m.Called(ctx, serviceAccountId, orgId, orgServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccount")
	}

	var r0 admin.UpdateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, orgId, orgServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccount'
type OrganizationsApi_UpdateServiceAccount_Call struct {
	*mock.Call
}

// UpdateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - orgId string
//   - orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest
func (_e *OrganizationsApi_Expecter) UpdateServiceAccount(ctx interface{}, serviceAccountId interface{}, orgId interface{}, orgServiceAccountUpdateRequest interface{}) *OrganizationsApi_UpdateServiceAccount_Call {
	return &OrganizationsApi_UpdateServiceAccount_Call{Call: _e.mock.On("UpdateServiceAccount", ctx, serviceAccountId, orgId, orgServiceAccountUpdateRequest)}
}

func (_c *OrganizationsApi_UpdateServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest)) *OrganizationsApi_UpdateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrgServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccount_Call) Return(_a0 admin.UpdateServiceAccountApiRequest) *OrganizationsApi_UpdateServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest) *OrganizationsApi_UpdateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccountExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateServiceAccountExecute(r admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccountExecute'
type OrganizationsApi_UpdateServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateServiceAccountApiRequest
func (_e *OrganizationsApi_Expecter) UpdateServiceAccountExecute(r interface{}) *OrganizationsApi_UpdateServiceAccountExecute_Call {
	return &OrganizationsApi_UpdateServiceAccountExecute_Call{Call: _e.mock.On("UpdateServiceAccountExecute", r)}
}

func (_c *OrganizationsApi_UpdateServiceAccountExecute_Call) Run(run func(r admin.UpdateServiceAccountApiRequest)) *OrganizationsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateServiceAccountApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *OrganizationsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateServiceAccountWithParams(ctx context.Context, args *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccountWithParams")
	}

	var r0 admin.UpdateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateServiceAccountApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccountWithParams'
type OrganizationsApi_UpdateServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateServiceAccountApiParams
func (_e *OrganizationsApi_Expecter) UpdateServiceAccountWithParams(ctx interface{}, args interface{}) *OrganizationsApi_UpdateServiceAccountWithParams_Call {
	return &OrganizationsApi_UpdateServiceAccountWithParams_Call{Call: _e.mock.On("UpdateServiceAccountWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateServiceAccountApiParams)) *OrganizationsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateServiceAccountApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccountWithParams_Call) Return(_a0 admin.UpdateServiceAccountApiRequest) *OrganizationsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest) *OrganizationsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrganizationsApi creates a new instance of OrganizationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationsApi {
	mock := &OrganizationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
