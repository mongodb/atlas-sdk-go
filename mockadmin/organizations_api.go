// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OrganizationsApi is an autogenerated mock type for the OrganizationsApi type
type OrganizationsApi struct {
	mock.Mock
}

type OrganizationsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationsApi) EXPECT() *OrganizationsApi_Expecter {
	return &OrganizationsApi_Expecter{mock: &_m.Mock}
}

// CreateOrg provides a mock function with given fields: ctx, createOrganizationRequest
func (_m *OrganizationsApi) CreateOrg(ctx context.Context, createOrganizationRequest *admin.CreateOrganizationRequest) admin.CreateOrgApiRequest {
	ret := _m.Called(ctx, createOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrg")
	}

	var r0 admin.CreateOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrganizationRequest) admin.CreateOrgApiRequest); ok {
		r0 = rf(ctx, createOrganizationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrg'
type OrganizationsApi_CreateOrg_Call struct {
	*mock.Call
}

// CreateOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - createOrganizationRequest *admin.CreateOrganizationRequest
func (_e *OrganizationsApi_Expecter) CreateOrg(ctx any, createOrganizationRequest any) *OrganizationsApi_CreateOrg_Call {
	return &OrganizationsApi_CreateOrg_Call{Call: _e.mock.On("CreateOrg", ctx, createOrganizationRequest)}
}

func (_c *OrganizationsApi_CreateOrg_Call) Run(run func(ctx context.Context, createOrganizationRequest *admin.CreateOrganizationRequest)) *OrganizationsApi_CreateOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrganizationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrg_Call) Return(_a0 admin.CreateOrgApiRequest) *OrganizationsApi_CreateOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrg_Call) RunAndReturn(run func(context.Context, *admin.CreateOrganizationRequest) admin.CreateOrgApiRequest) *OrganizationsApi_CreateOrg_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateOrgExecute(r admin.CreateOrgApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgExecute")
	}

	var r0 *admin.CreateOrganizationResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgApiRequest) *admin.CreateOrganizationResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateOrgExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgExecute'
type OrganizationsApi_CreateOrgExecute_Call struct {
	*mock.Call
}

// CreateOrgExecute is a helper method to define mock.On call
//   - r admin.CreateOrgApiRequest
func (_e *OrganizationsApi_Expecter) CreateOrgExecute(r any) *OrganizationsApi_CreateOrgExecute_Call {
	return &OrganizationsApi_CreateOrgExecute_Call{Call: _e.mock.On("CreateOrgExecute", r)}
}

func (_c *OrganizationsApi_CreateOrgExecute_Call) Run(run func(r admin.CreateOrgApiRequest)) *OrganizationsApi_CreateOrgExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrgExecute_Call) Return(_a0 *admin.CreateOrganizationResponse, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateOrgExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateOrgExecute_Call) RunAndReturn(run func(admin.CreateOrgApiRequest) (*admin.CreateOrganizationResponse, *http.Response, error)) *OrganizationsApi_CreateOrgExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgInvite provides a mock function with given fields: ctx, orgId, organizationInvitationRequest
func (_m *OrganizationsApi) CreateOrgInvite(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest) admin.CreateOrgInviteApiRequest {
	ret := _m.Called(ctx, orgId, organizationInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgInvite")
	}

	var r0 admin.CreateOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationInvitationRequest) admin.CreateOrgInviteApiRequest); ok {
		r0 = rf(ctx, orgId, organizationInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrgInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgInvite'
type OrganizationsApi_CreateOrgInvite_Call struct {
	*mock.Call
}

// CreateOrgInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationInvitationRequest *admin.OrganizationInvitationRequest
func (_e *OrganizationsApi_Expecter) CreateOrgInvite(ctx any, orgId any, organizationInvitationRequest any) *OrganizationsApi_CreateOrgInvite_Call {
	return &OrganizationsApi_CreateOrgInvite_Call{Call: _e.mock.On("CreateOrgInvite", ctx, orgId, organizationInvitationRequest)}
}

func (_c *OrganizationsApi_CreateOrgInvite_Call) Run(run func(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest)) *OrganizationsApi_CreateOrgInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationInvitationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrgInvite_Call) Return(_a0 admin.CreateOrgInviteApiRequest) *OrganizationsApi_CreateOrgInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrgInvite_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationInvitationRequest) admin.CreateOrgInviteApiRequest) *OrganizationsApi_CreateOrgInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgInviteExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) CreateOrgInviteExecute(r admin.CreateOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgInviteExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgInviteApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgInviteApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgInviteApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_CreateOrgInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgInviteExecute'
type OrganizationsApi_CreateOrgInviteExecute_Call struct {
	*mock.Call
}

// CreateOrgInviteExecute is a helper method to define mock.On call
//   - r admin.CreateOrgInviteApiRequest
func (_e *OrganizationsApi_Expecter) CreateOrgInviteExecute(r any) *OrganizationsApi_CreateOrgInviteExecute_Call {
	return &OrganizationsApi_CreateOrgInviteExecute_Call{Call: _e.mock.On("CreateOrgInviteExecute", r)}
}

func (_c *OrganizationsApi_CreateOrgInviteExecute_Call) Run(run func(r admin.CreateOrgInviteApiRequest)) *OrganizationsApi_CreateOrgInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgInviteApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrgInviteExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_CreateOrgInviteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_CreateOrgInviteExecute_Call) RunAndReturn(run func(admin.CreateOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_CreateOrgInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgInviteWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateOrgInviteWithParams(ctx context.Context, args *admin.CreateOrgInviteApiParams) admin.CreateOrgInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgInviteWithParams")
	}

	var r0 admin.CreateOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgInviteApiParams) admin.CreateOrgInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrgInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgInviteWithParams'
type OrganizationsApi_CreateOrgInviteWithParams_Call struct {
	*mock.Call
}

// CreateOrgInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgInviteApiParams
func (_e *OrganizationsApi_Expecter) CreateOrgInviteWithParams(ctx any, args any) *OrganizationsApi_CreateOrgInviteWithParams_Call {
	return &OrganizationsApi_CreateOrgInviteWithParams_Call{Call: _e.mock.On("CreateOrgInviteWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateOrgInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgInviteApiParams)) *OrganizationsApi_CreateOrgInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgInviteApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrgInviteWithParams_Call) Return(_a0 admin.CreateOrgInviteApiRequest) *OrganizationsApi_CreateOrgInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrgInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgInviteApiParams) admin.CreateOrgInviteApiRequest) *OrganizationsApi_CreateOrgInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) CreateOrgWithParams(ctx context.Context, args *admin.CreateOrgApiParams) admin.CreateOrgApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgWithParams")
	}

	var r0 admin.CreateOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgApiParams) admin.CreateOrgApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_CreateOrgWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgWithParams'
type OrganizationsApi_CreateOrgWithParams_Call struct {
	*mock.Call
}

// CreateOrgWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgApiParams
func (_e *OrganizationsApi_Expecter) CreateOrgWithParams(ctx any, args any) *OrganizationsApi_CreateOrgWithParams_Call {
	return &OrganizationsApi_CreateOrgWithParams_Call{Call: _e.mock.On("CreateOrgWithParams", ctx, args)}
}

func (_c *OrganizationsApi_CreateOrgWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgApiParams)) *OrganizationsApi_CreateOrgWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_CreateOrgWithParams_Call) Return(_a0 admin.CreateOrgApiRequest) *OrganizationsApi_CreateOrgWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_CreateOrgWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgApiParams) admin.CreateOrgApiRequest) *OrganizationsApi_CreateOrgWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrg provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) DeleteOrg(ctx context.Context, orgId string) admin.DeleteOrgApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrg")
	}

	var r0 admin.DeleteOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteOrgApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrg'
type OrganizationsApi_DeleteOrg_Call struct {
	*mock.Call
}

// DeleteOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) DeleteOrg(ctx any, orgId any) *OrganizationsApi_DeleteOrg_Call {
	return &OrganizationsApi_DeleteOrg_Call{Call: _e.mock.On("DeleteOrg", ctx, orgId)}
}

func (_c *OrganizationsApi_DeleteOrg_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_DeleteOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrg_Call) Return(_a0 admin.DeleteOrgApiRequest) *OrganizationsApi_DeleteOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrg_Call) RunAndReturn(run func(context.Context, string) admin.DeleteOrgApiRequest) *OrganizationsApi_DeleteOrg_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteOrgExecute(r admin.DeleteOrgApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationsApi_DeleteOrgExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgExecute'
type OrganizationsApi_DeleteOrgExecute_Call struct {
	*mock.Call
}

// DeleteOrgExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgApiRequest
func (_e *OrganizationsApi_Expecter) DeleteOrgExecute(r any) *OrganizationsApi_DeleteOrgExecute_Call {
	return &OrganizationsApi_DeleteOrgExecute_Call{Call: _e.mock.On("DeleteOrgExecute", r)}
}

func (_c *OrganizationsApi_DeleteOrgExecute_Call) Run(run func(r admin.DeleteOrgApiRequest)) *OrganizationsApi_DeleteOrgExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrgExecute_Call) Return(_a0 *http.Response, _a1 error) *OrganizationsApi_DeleteOrgExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationsApi_DeleteOrgExecute_Call) RunAndReturn(run func(admin.DeleteOrgApiRequest) (*http.Response, error)) *OrganizationsApi_DeleteOrgExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgInvite provides a mock function with given fields: ctx, orgId, invitationId
func (_m *OrganizationsApi) DeleteOrgInvite(ctx context.Context, orgId string, invitationId string) admin.DeleteOrgInviteApiRequest {
	ret := _m.Called(ctx, orgId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgInvite")
	}

	var r0 admin.DeleteOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteOrgInviteApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrgInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgInvite'
type OrganizationsApi_DeleteOrgInvite_Call struct {
	*mock.Call
}

// DeleteOrgInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
func (_e *OrganizationsApi_Expecter) DeleteOrgInvite(ctx any, orgId any, invitationId any) *OrganizationsApi_DeleteOrgInvite_Call {
	return &OrganizationsApi_DeleteOrgInvite_Call{Call: _e.mock.On("DeleteOrgInvite", ctx, orgId, invitationId)}
}

func (_c *OrganizationsApi_DeleteOrgInvite_Call) Run(run func(ctx context.Context, orgId string, invitationId string)) *OrganizationsApi_DeleteOrgInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInvite_Call) Return(_a0 admin.DeleteOrgInviteApiRequest) *OrganizationsApi_DeleteOrgInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInvite_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteOrgInviteApiRequest) *OrganizationsApi_DeleteOrgInvite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgInviteExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) DeleteOrgInviteExecute(r admin.DeleteOrgInviteApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgInviteExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgInviteApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgInviteApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgInviteApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationsApi_DeleteOrgInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgInviteExecute'
type OrganizationsApi_DeleteOrgInviteExecute_Call struct {
	*mock.Call
}

// DeleteOrgInviteExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgInviteApiRequest
func (_e *OrganizationsApi_Expecter) DeleteOrgInviteExecute(r any) *OrganizationsApi_DeleteOrgInviteExecute_Call {
	return &OrganizationsApi_DeleteOrgInviteExecute_Call{Call: _e.mock.On("DeleteOrgInviteExecute", r)}
}

func (_c *OrganizationsApi_DeleteOrgInviteExecute_Call) Run(run func(r admin.DeleteOrgInviteApiRequest)) *OrganizationsApi_DeleteOrgInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgInviteApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInviteExecute_Call) Return(_a0 *http.Response, _a1 error) *OrganizationsApi_DeleteOrgInviteExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInviteExecute_Call) RunAndReturn(run func(admin.DeleteOrgInviteApiRequest) (*http.Response, error)) *OrganizationsApi_DeleteOrgInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgInviteWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteOrgInviteWithParams(ctx context.Context, args *admin.DeleteOrgInviteApiParams) admin.DeleteOrgInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgInviteWithParams")
	}

	var r0 admin.DeleteOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgInviteApiParams) admin.DeleteOrgInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrgInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgInviteWithParams'
type OrganizationsApi_DeleteOrgInviteWithParams_Call struct {
	*mock.Call
}

// DeleteOrgInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgInviteApiParams
func (_e *OrganizationsApi_Expecter) DeleteOrgInviteWithParams(ctx any, args any) *OrganizationsApi_DeleteOrgInviteWithParams_Call {
	return &OrganizationsApi_DeleteOrgInviteWithParams_Call{Call: _e.mock.On("DeleteOrgInviteWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteOrgInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgInviteApiParams)) *OrganizationsApi_DeleteOrgInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgInviteApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInviteWithParams_Call) Return(_a0 admin.DeleteOrgInviteApiRequest) *OrganizationsApi_DeleteOrgInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrgInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgInviteApiParams) admin.DeleteOrgInviteApiRequest) *OrganizationsApi_DeleteOrgInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) DeleteOrgWithParams(ctx context.Context, args *admin.DeleteOrgApiParams) admin.DeleteOrgApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgWithParams")
	}

	var r0 admin.DeleteOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgApiParams) admin.DeleteOrgApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_DeleteOrgWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgWithParams'
type OrganizationsApi_DeleteOrgWithParams_Call struct {
	*mock.Call
}

// DeleteOrgWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgApiParams
func (_e *OrganizationsApi_Expecter) DeleteOrgWithParams(ctx any, args any) *OrganizationsApi_DeleteOrgWithParams_Call {
	return &OrganizationsApi_DeleteOrgWithParams_Call{Call: _e.mock.On("DeleteOrgWithParams", ctx, args)}
}

func (_c *OrganizationsApi_DeleteOrgWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgApiParams)) *OrganizationsApi_DeleteOrgWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_DeleteOrgWithParams_Call) Return(_a0 admin.DeleteOrgApiRequest) *OrganizationsApi_DeleteOrgWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_DeleteOrgWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgApiParams) admin.DeleteOrgApiRequest) *OrganizationsApi_DeleteOrgWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrg provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) GetOrg(ctx context.Context, orgId string) admin.GetOrgApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrg")
	}

	var r0 admin.GetOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetOrgApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrg'
type OrganizationsApi_GetOrg_Call struct {
	*mock.Call
}

// GetOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) GetOrg(ctx any, orgId any) *OrganizationsApi_GetOrg_Call {
	return &OrganizationsApi_GetOrg_Call{Call: _e.mock.On("GetOrg", ctx, orgId)}
}

func (_c *OrganizationsApi_GetOrg_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_GetOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrg_Call) Return(_a0 admin.GetOrgApiRequest) *OrganizationsApi_GetOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrg_Call) RunAndReturn(run func(context.Context, string) admin.GetOrgApiRequest) *OrganizationsApi_GetOrg_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrgExecute(r admin.GetOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgExecute")
	}

	var r0 *admin.AtlasOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgApiRequest) *admin.AtlasOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AtlasOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrgExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgExecute'
type OrganizationsApi_GetOrgExecute_Call struct {
	*mock.Call
}

// GetOrgExecute is a helper method to define mock.On call
//   - r admin.GetOrgApiRequest
func (_e *OrganizationsApi_Expecter) GetOrgExecute(r any) *OrganizationsApi_GetOrgExecute_Call {
	return &OrganizationsApi_GetOrgExecute_Call{Call: _e.mock.On("GetOrgExecute", r)}
}

func (_c *OrganizationsApi_GetOrgExecute_Call) Run(run func(r admin.GetOrgApiRequest)) *OrganizationsApi_GetOrgExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgExecute_Call) Return(_a0 *admin.AtlasOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrgExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrgExecute_Call) RunAndReturn(run func(admin.GetOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error)) *OrganizationsApi_GetOrgExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgGroups provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) GetOrgGroups(ctx context.Context, orgId string) admin.GetOrgGroupsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgGroups")
	}

	var r0 admin.GetOrgGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetOrgGroupsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgGroupsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgGroups'
type OrganizationsApi_GetOrgGroups_Call struct {
	*mock.Call
}

// GetOrgGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) GetOrgGroups(ctx any, orgId any) *OrganizationsApi_GetOrgGroups_Call {
	return &OrganizationsApi_GetOrgGroups_Call{Call: _e.mock.On("GetOrgGroups", ctx, orgId)}
}

func (_c *OrganizationsApi_GetOrgGroups_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_GetOrgGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgGroups_Call) Return(_a0 admin.GetOrgGroupsApiRequest) *OrganizationsApi_GetOrgGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgGroups_Call) RunAndReturn(run func(context.Context, string) admin.GetOrgGroupsApiRequest) *OrganizationsApi_GetOrgGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgGroupsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrgGroupsExecute(r admin.GetOrgGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgGroupsExecute")
	}

	var r0 *admin.PaginatedAtlasGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgGroupsApiRequest) *admin.PaginatedAtlasGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAtlasGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgGroupsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgGroupsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrgGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgGroupsExecute'
type OrganizationsApi_GetOrgGroupsExecute_Call struct {
	*mock.Call
}

// GetOrgGroupsExecute is a helper method to define mock.On call
//   - r admin.GetOrgGroupsApiRequest
func (_e *OrganizationsApi_Expecter) GetOrgGroupsExecute(r any) *OrganizationsApi_GetOrgGroupsExecute_Call {
	return &OrganizationsApi_GetOrgGroupsExecute_Call{Call: _e.mock.On("GetOrgGroupsExecute", r)}
}

func (_c *OrganizationsApi_GetOrgGroupsExecute_Call) Run(run func(r admin.GetOrgGroupsApiRequest)) *OrganizationsApi_GetOrgGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgGroupsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgGroupsExecute_Call) Return(_a0 *admin.PaginatedAtlasGroup, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrgGroupsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrgGroupsExecute_Call) RunAndReturn(run func(admin.GetOrgGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)) *OrganizationsApi_GetOrgGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgGroupsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrgGroupsWithParams(ctx context.Context, args *admin.GetOrgGroupsApiParams) admin.GetOrgGroupsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgGroupsWithParams")
	}

	var r0 admin.GetOrgGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgGroupsApiParams) admin.GetOrgGroupsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgGroupsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgGroupsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgGroupsWithParams'
type OrganizationsApi_GetOrgGroupsWithParams_Call struct {
	*mock.Call
}

// GetOrgGroupsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgGroupsApiParams
func (_e *OrganizationsApi_Expecter) GetOrgGroupsWithParams(ctx any, args any) *OrganizationsApi_GetOrgGroupsWithParams_Call {
	return &OrganizationsApi_GetOrgGroupsWithParams_Call{Call: _e.mock.On("GetOrgGroupsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrgGroupsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgGroupsApiParams)) *OrganizationsApi_GetOrgGroupsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgGroupsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgGroupsWithParams_Call) Return(_a0 admin.GetOrgGroupsApiRequest) *OrganizationsApi_GetOrgGroupsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgGroupsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgGroupsApiParams) admin.GetOrgGroupsApiRequest) *OrganizationsApi_GetOrgGroupsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgInvite provides a mock function with given fields: ctx, orgId, invitationId
func (_m *OrganizationsApi) GetOrgInvite(ctx context.Context, orgId string, invitationId string) admin.GetOrgInviteApiRequest {
	ret := _m.Called(ctx, orgId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgInvite")
	}

	var r0 admin.GetOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgInviteApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgInvite'
type OrganizationsApi_GetOrgInvite_Call struct {
	*mock.Call
}

// GetOrgInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
func (_e *OrganizationsApi_Expecter) GetOrgInvite(ctx any, orgId any, invitationId any) *OrganizationsApi_GetOrgInvite_Call {
	return &OrganizationsApi_GetOrgInvite_Call{Call: _e.mock.On("GetOrgInvite", ctx, orgId, invitationId)}
}

func (_c *OrganizationsApi_GetOrgInvite_Call) Run(run func(ctx context.Context, orgId string, invitationId string)) *OrganizationsApi_GetOrgInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgInvite_Call) Return(_a0 admin.GetOrgInviteApiRequest) *OrganizationsApi_GetOrgInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgInvite_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgInviteApiRequest) *OrganizationsApi_GetOrgInvite_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgInviteExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrgInviteExecute(r admin.GetOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgInviteExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgInviteApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgInviteApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgInviteApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrgInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgInviteExecute'
type OrganizationsApi_GetOrgInviteExecute_Call struct {
	*mock.Call
}

// GetOrgInviteExecute is a helper method to define mock.On call
//   - r admin.GetOrgInviteApiRequest
func (_e *OrganizationsApi_Expecter) GetOrgInviteExecute(r any) *OrganizationsApi_GetOrgInviteExecute_Call {
	return &OrganizationsApi_GetOrgInviteExecute_Call{Call: _e.mock.On("GetOrgInviteExecute", r)}
}

func (_c *OrganizationsApi_GetOrgInviteExecute_Call) Run(run func(r admin.GetOrgInviteApiRequest)) *OrganizationsApi_GetOrgInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgInviteApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgInviteExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrgInviteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrgInviteExecute_Call) RunAndReturn(run func(admin.GetOrgInviteApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_GetOrgInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgInviteWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrgInviteWithParams(ctx context.Context, args *admin.GetOrgInviteApiParams) admin.GetOrgInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgInviteWithParams")
	}

	var r0 admin.GetOrgInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgInviteApiParams) admin.GetOrgInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgInviteApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgInviteWithParams'
type OrganizationsApi_GetOrgInviteWithParams_Call struct {
	*mock.Call
}

// GetOrgInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgInviteApiParams
func (_e *OrganizationsApi_Expecter) GetOrgInviteWithParams(ctx any, args any) *OrganizationsApi_GetOrgInviteWithParams_Call {
	return &OrganizationsApi_GetOrgInviteWithParams_Call{Call: _e.mock.On("GetOrgInviteWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrgInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgInviteApiParams)) *OrganizationsApi_GetOrgInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgInviteApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgInviteWithParams_Call) Return(_a0 admin.GetOrgInviteApiRequest) *OrganizationsApi_GetOrgInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgInviteApiParams) admin.GetOrgInviteApiRequest) *OrganizationsApi_GetOrgInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSettings provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) GetOrgSettings(ctx context.Context, orgId string) admin.GetOrgSettingsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSettings")
	}

	var r0 admin.GetOrgSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetOrgSettingsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSettings'
type OrganizationsApi_GetOrgSettings_Call struct {
	*mock.Call
}

// GetOrgSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) GetOrgSettings(ctx any, orgId any) *OrganizationsApi_GetOrgSettings_Call {
	return &OrganizationsApi_GetOrgSettings_Call{Call: _e.mock.On("GetOrgSettings", ctx, orgId)}
}

func (_c *OrganizationsApi_GetOrgSettings_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_GetOrgSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgSettings_Call) Return(_a0 admin.GetOrgSettingsApiRequest) *OrganizationsApi_GetOrgSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgSettings_Call) RunAndReturn(run func(context.Context, string) admin.GetOrgSettingsApiRequest) *OrganizationsApi_GetOrgSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSettingsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) GetOrgSettingsExecute(r admin.GetOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSettingsExecute")
	}

	var r0 *admin.OrganizationSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgSettingsApiRequest) *admin.OrganizationSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_GetOrgSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSettingsExecute'
type OrganizationsApi_GetOrgSettingsExecute_Call struct {
	*mock.Call
}

// GetOrgSettingsExecute is a helper method to define mock.On call
//   - r admin.GetOrgSettingsApiRequest
func (_e *OrganizationsApi_Expecter) GetOrgSettingsExecute(r any) *OrganizationsApi_GetOrgSettingsExecute_Call {
	return &OrganizationsApi_GetOrgSettingsExecute_Call{Call: _e.mock.On("GetOrgSettingsExecute", r)}
}

func (_c *OrganizationsApi_GetOrgSettingsExecute_Call) Run(run func(r admin.GetOrgSettingsApiRequest)) *OrganizationsApi_GetOrgSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgSettingsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgSettingsExecute_Call) Return(_a0 *admin.OrganizationSettings, _a1 *http.Response, _a2 error) *OrganizationsApi_GetOrgSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_GetOrgSettingsExecute_Call) RunAndReturn(run func(admin.GetOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)) *OrganizationsApi_GetOrgSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrgSettingsWithParams(ctx context.Context, args *admin.GetOrgSettingsApiParams) admin.GetOrgSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgSettingsWithParams")
	}

	var r0 admin.GetOrgSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgSettingsApiParams) admin.GetOrgSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgSettingsWithParams'
type OrganizationsApi_GetOrgSettingsWithParams_Call struct {
	*mock.Call
}

// GetOrgSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgSettingsApiParams
func (_e *OrganizationsApi_Expecter) GetOrgSettingsWithParams(ctx any, args any) *OrganizationsApi_GetOrgSettingsWithParams_Call {
	return &OrganizationsApi_GetOrgSettingsWithParams_Call{Call: _e.mock.On("GetOrgSettingsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrgSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgSettingsApiParams)) *OrganizationsApi_GetOrgSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgSettingsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgSettingsWithParams_Call) Return(_a0 admin.GetOrgSettingsApiRequest) *OrganizationsApi_GetOrgSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgSettingsApiParams) admin.GetOrgSettingsApiRequest) *OrganizationsApi_GetOrgSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) GetOrgWithParams(ctx context.Context, args *admin.GetOrgApiParams) admin.GetOrgApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgWithParams")
	}

	var r0 admin.GetOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgApiParams) admin.GetOrgApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_GetOrgWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgWithParams'
type OrganizationsApi_GetOrgWithParams_Call struct {
	*mock.Call
}

// GetOrgWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgApiParams
func (_e *OrganizationsApi_Expecter) GetOrgWithParams(ctx any, args any) *OrganizationsApi_GetOrgWithParams_Call {
	return &OrganizationsApi_GetOrgWithParams_Call{Call: _e.mock.On("GetOrgWithParams", ctx, args)}
}

func (_c *OrganizationsApi_GetOrgWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgApiParams)) *OrganizationsApi_GetOrgWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_GetOrgWithParams_Call) Return(_a0 admin.GetOrgApiRequest) *OrganizationsApi_GetOrgWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_GetOrgWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgApiParams) admin.GetOrgApiRequest) *OrganizationsApi_GetOrgWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgInvites provides a mock function with given fields: ctx, orgId
func (_m *OrganizationsApi) ListOrgInvites(ctx context.Context, orgId string) admin.ListOrgInvitesApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgInvites")
	}

	var r0 admin.ListOrgInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgInvitesApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgInvitesApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrgInvites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgInvites'
type OrganizationsApi_ListOrgInvites_Call struct {
	*mock.Call
}

// ListOrgInvites is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *OrganizationsApi_Expecter) ListOrgInvites(ctx any, orgId any) *OrganizationsApi_ListOrgInvites_Call {
	return &OrganizationsApi_ListOrgInvites_Call{Call: _e.mock.On("ListOrgInvites", ctx, orgId)}
}

func (_c *OrganizationsApi_ListOrgInvites_Call) Run(run func(ctx context.Context, orgId string)) *OrganizationsApi_ListOrgInvites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgInvites_Call) Return(_a0 admin.ListOrgInvitesApiRequest) *OrganizationsApi_ListOrgInvites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrgInvites_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgInvitesApiRequest) *OrganizationsApi_ListOrgInvites_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgInvitesExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrgInvitesExecute(r admin.ListOrgInvitesApiRequest) ([]admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgInvitesExecute")
	}

	var r0 []admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgInvitesApiRequest) ([]admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgInvitesApiRequest) []admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgInvitesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgInvitesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrgInvitesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgInvitesExecute'
type OrganizationsApi_ListOrgInvitesExecute_Call struct {
	*mock.Call
}

// ListOrgInvitesExecute is a helper method to define mock.On call
//   - r admin.ListOrgInvitesApiRequest
func (_e *OrganizationsApi_Expecter) ListOrgInvitesExecute(r any) *OrganizationsApi_ListOrgInvitesExecute_Call {
	return &OrganizationsApi_ListOrgInvitesExecute_Call{Call: _e.mock.On("ListOrgInvitesExecute", r)}
}

func (_c *OrganizationsApi_ListOrgInvitesExecute_Call) Run(run func(r admin.ListOrgInvitesApiRequest)) *OrganizationsApi_ListOrgInvitesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgInvitesApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgInvitesExecute_Call) Return(_a0 []admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrgInvitesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrgInvitesExecute_Call) RunAndReturn(run func(admin.ListOrgInvitesApiRequest) ([]admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_ListOrgInvitesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgInvitesWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrgInvitesWithParams(ctx context.Context, args *admin.ListOrgInvitesApiParams) admin.ListOrgInvitesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgInvitesWithParams")
	}

	var r0 admin.ListOrgInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgInvitesApiParams) admin.ListOrgInvitesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgInvitesApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrgInvitesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgInvitesWithParams'
type OrganizationsApi_ListOrgInvitesWithParams_Call struct {
	*mock.Call
}

// ListOrgInvitesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgInvitesApiParams
func (_e *OrganizationsApi_Expecter) ListOrgInvitesWithParams(ctx any, args any) *OrganizationsApi_ListOrgInvitesWithParams_Call {
	return &OrganizationsApi_ListOrgInvitesWithParams_Call{Call: _e.mock.On("ListOrgInvitesWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrgInvitesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgInvitesApiParams)) *OrganizationsApi_ListOrgInvitesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgInvitesApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgInvitesWithParams_Call) Return(_a0 admin.ListOrgInvitesApiRequest) *OrganizationsApi_ListOrgInvitesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrgInvitesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgInvitesApiParams) admin.ListOrgInvitesApiRequest) *OrganizationsApi_ListOrgInvitesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgs provides a mock function with given fields: ctx
func (_m *OrganizationsApi) ListOrgs(ctx context.Context) admin.ListOrgsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgs")
	}

	var r0 admin.ListOrgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListOrgsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListOrgsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgs'
type OrganizationsApi_ListOrgs_Call struct {
	*mock.Call
}

// ListOrgs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrganizationsApi_Expecter) ListOrgs(ctx any) *OrganizationsApi_ListOrgs_Call {
	return &OrganizationsApi_ListOrgs_Call{Call: _e.mock.On("ListOrgs", ctx)}
}

func (_c *OrganizationsApi_ListOrgs_Call) Run(run func(ctx context.Context)) *OrganizationsApi_ListOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgs_Call) Return(_a0 admin.ListOrgsApiRequest) *OrganizationsApi_ListOrgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrgs_Call) RunAndReturn(run func(context.Context) admin.ListOrgsApiRequest) *OrganizationsApi_ListOrgs_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) ListOrgsExecute(r admin.ListOrgsApiRequest) (*admin.PaginatedOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgsExecute")
	}

	var r0 *admin.PaginatedOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgsApiRequest) (*admin.PaginatedOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgsApiRequest) *admin.PaginatedOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_ListOrgsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgsExecute'
type OrganizationsApi_ListOrgsExecute_Call struct {
	*mock.Call
}

// ListOrgsExecute is a helper method to define mock.On call
//   - r admin.ListOrgsApiRequest
func (_e *OrganizationsApi_Expecter) ListOrgsExecute(r any) *OrganizationsApi_ListOrgsExecute_Call {
	return &OrganizationsApi_ListOrgsExecute_Call{Call: _e.mock.On("ListOrgsExecute", r)}
}

func (_c *OrganizationsApi_ListOrgsExecute_Call) Run(run func(r admin.ListOrgsApiRequest)) *OrganizationsApi_ListOrgsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgsExecute_Call) Return(_a0 *admin.PaginatedOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_ListOrgsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_ListOrgsExecute_Call) RunAndReturn(run func(admin.ListOrgsApiRequest) (*admin.PaginatedOrganization, *http.Response, error)) *OrganizationsApi_ListOrgsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) ListOrgsWithParams(ctx context.Context, args *admin.ListOrgsApiParams) admin.ListOrgsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgsWithParams")
	}

	var r0 admin.ListOrgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgsApiParams) admin.ListOrgsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgsApiRequest)
	}

	return r0
}

// OrganizationsApi_ListOrgsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgsWithParams'
type OrganizationsApi_ListOrgsWithParams_Call struct {
	*mock.Call
}

// ListOrgsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgsApiParams
func (_e *OrganizationsApi_Expecter) ListOrgsWithParams(ctx any, args any) *OrganizationsApi_ListOrgsWithParams_Call {
	return &OrganizationsApi_ListOrgsWithParams_Call{Call: _e.mock.On("ListOrgsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_ListOrgsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgsApiParams)) *OrganizationsApi_ListOrgsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_ListOrgsWithParams_Call) Return(_a0 admin.ListOrgsApiRequest) *OrganizationsApi_ListOrgsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_ListOrgsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgsApiParams) admin.ListOrgsApiRequest) *OrganizationsApi_ListOrgsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrg provides a mock function with given fields: ctx, orgId, atlasOrganization
func (_m *OrganizationsApi) UpdateOrg(ctx context.Context, orgId string, atlasOrganization *admin.AtlasOrganization) admin.UpdateOrgApiRequest {
	ret := _m.Called(ctx, orgId, atlasOrganization)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrg")
	}

	var r0 admin.UpdateOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.AtlasOrganization) admin.UpdateOrgApiRequest); ok {
		r0 = rf(ctx, orgId, atlasOrganization)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrg'
type OrganizationsApi_UpdateOrg_Call struct {
	*mock.Call
}

// UpdateOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - atlasOrganization *admin.AtlasOrganization
func (_e *OrganizationsApi_Expecter) UpdateOrg(ctx any, orgId any, atlasOrganization any) *OrganizationsApi_UpdateOrg_Call {
	return &OrganizationsApi_UpdateOrg_Call{Call: _e.mock.On("UpdateOrg", ctx, orgId, atlasOrganization)}
}

func (_c *OrganizationsApi_UpdateOrg_Call) Run(run func(ctx context.Context, orgId string, atlasOrganization *admin.AtlasOrganization)) *OrganizationsApi_UpdateOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.AtlasOrganization))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrg_Call) Return(_a0 admin.UpdateOrgApiRequest) *OrganizationsApi_UpdateOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrg_Call) RunAndReturn(run func(context.Context, string, *admin.AtlasOrganization) admin.UpdateOrgApiRequest) *OrganizationsApi_UpdateOrg_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrgExecute(r admin.UpdateOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgExecute")
	}

	var r0 *admin.AtlasOrganization
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgApiRequest) *admin.AtlasOrganization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AtlasOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrgExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgExecute'
type OrganizationsApi_UpdateOrgExecute_Call struct {
	*mock.Call
}

// UpdateOrgExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgExecute(r any) *OrganizationsApi_UpdateOrgExecute_Call {
	return &OrganizationsApi_UpdateOrgExecute_Call{Call: _e.mock.On("UpdateOrgExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrgExecute_Call) Run(run func(r admin.UpdateOrgApiRequest)) *OrganizationsApi_UpdateOrgExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgExecute_Call) Return(_a0 *admin.AtlasOrganization, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrgExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgExecute_Call) RunAndReturn(run func(admin.UpdateOrgApiRequest) (*admin.AtlasOrganization, *http.Response, error)) *OrganizationsApi_UpdateOrgExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInviteById provides a mock function with given fields: ctx, orgId, invitationId, organizationInvitationUpdateRequest
func (_m *OrganizationsApi) UpdateOrgInviteById(ctx context.Context, orgId string, invitationId string, organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrgInviteByIdApiRequest {
	ret := _m.Called(ctx, orgId, invitationId, organizationInvitationUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInviteById")
	}

	var r0 admin.UpdateOrgInviteByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrgInviteByIdApiRequest); ok {
		r0 = rf(ctx, orgId, invitationId, organizationInvitationUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgInviteByIdApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgInviteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInviteById'
type OrganizationsApi_UpdateOrgInviteById_Call struct {
	*mock.Call
}

// UpdateOrgInviteById is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invitationId string
//   - organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgInviteById(ctx any, orgId any, invitationId any, organizationInvitationUpdateRequest any) *OrganizationsApi_UpdateOrgInviteById_Call {
	return &OrganizationsApi_UpdateOrgInviteById_Call{Call: _e.mock.On("UpdateOrgInviteById", ctx, orgId, invitationId, organizationInvitationUpdateRequest)}
}

func (_c *OrganizationsApi_UpdateOrgInviteById_Call) Run(run func(ctx context.Context, orgId string, invitationId string, organizationInvitationUpdateRequest *admin.OrganizationInvitationUpdateRequest)) *OrganizationsApi_UpdateOrgInviteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrganizationInvitationUpdateRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteById_Call) Return(_a0 admin.UpdateOrgInviteByIdApiRequest) *OrganizationsApi_UpdateOrgInviteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteById_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrganizationInvitationUpdateRequest) admin.UpdateOrgInviteByIdApiRequest) *OrganizationsApi_UpdateOrgInviteById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInviteByIdExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrgInviteByIdExecute(r admin.UpdateOrgInviteByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInviteByIdExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgInviteByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgInviteByIdApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgInviteByIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgInviteByIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrgInviteByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInviteByIdExecute'
type OrganizationsApi_UpdateOrgInviteByIdExecute_Call struct {
	*mock.Call
}

// UpdateOrgInviteByIdExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgInviteByIdApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgInviteByIdExecute(r any) *OrganizationsApi_UpdateOrgInviteByIdExecute_Call {
	return &OrganizationsApi_UpdateOrgInviteByIdExecute_Call{Call: _e.mock.On("UpdateOrgInviteByIdExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdExecute_Call) Run(run func(r admin.UpdateOrgInviteByIdApiRequest)) *OrganizationsApi_UpdateOrgInviteByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgInviteByIdApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrgInviteByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdExecute_Call) RunAndReturn(run func(admin.UpdateOrgInviteByIdApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_UpdateOrgInviteByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInviteByIdWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrgInviteByIdWithParams(ctx context.Context, args *admin.UpdateOrgInviteByIdApiParams) admin.UpdateOrgInviteByIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInviteByIdWithParams")
	}

	var r0 admin.UpdateOrgInviteByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgInviteByIdApiParams) admin.UpdateOrgInviteByIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgInviteByIdApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgInviteByIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInviteByIdWithParams'
type OrganizationsApi_UpdateOrgInviteByIdWithParams_Call struct {
	*mock.Call
}

// UpdateOrgInviteByIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgInviteByIdApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrgInviteByIdWithParams(ctx any, args any) *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call {
	return &OrganizationsApi_UpdateOrgInviteByIdWithParams_Call{Call: _e.mock.On("UpdateOrgInviteByIdWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgInviteByIdApiParams)) *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgInviteByIdApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call) Return(_a0 admin.UpdateOrgInviteByIdApiRequest) *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgInviteByIdApiParams) admin.UpdateOrgInviteByIdApiRequest) *OrganizationsApi_UpdateOrgInviteByIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInvites provides a mock function with given fields: ctx, orgId, organizationInvitationRequest
func (_m *OrganizationsApi) UpdateOrgInvites(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest) admin.UpdateOrgInvitesApiRequest {
	ret := _m.Called(ctx, orgId, organizationInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInvites")
	}

	var r0 admin.UpdateOrgInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationInvitationRequest) admin.UpdateOrgInvitesApiRequest); ok {
		r0 = rf(ctx, orgId, organizationInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgInvitesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgInvites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInvites'
type OrganizationsApi_UpdateOrgInvites_Call struct {
	*mock.Call
}

// UpdateOrgInvites is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationInvitationRequest *admin.OrganizationInvitationRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgInvites(ctx any, orgId any, organizationInvitationRequest any) *OrganizationsApi_UpdateOrgInvites_Call {
	return &OrganizationsApi_UpdateOrgInvites_Call{Call: _e.mock.On("UpdateOrgInvites", ctx, orgId, organizationInvitationRequest)}
}

func (_c *OrganizationsApi_UpdateOrgInvites_Call) Run(run func(ctx context.Context, orgId string, organizationInvitationRequest *admin.OrganizationInvitationRequest)) *OrganizationsApi_UpdateOrgInvites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationInvitationRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvites_Call) Return(_a0 admin.UpdateOrgInvitesApiRequest) *OrganizationsApi_UpdateOrgInvites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvites_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationInvitationRequest) admin.UpdateOrgInvitesApiRequest) *OrganizationsApi_UpdateOrgInvites_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInvitesExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrgInvitesExecute(r admin.UpdateOrgInvitesApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInvitesExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgInvitesApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgInvitesApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgInvitesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgInvitesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrgInvitesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInvitesExecute'
type OrganizationsApi_UpdateOrgInvitesExecute_Call struct {
	*mock.Call
}

// UpdateOrgInvitesExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgInvitesApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgInvitesExecute(r any) *OrganizationsApi_UpdateOrgInvitesExecute_Call {
	return &OrganizationsApi_UpdateOrgInvitesExecute_Call{Call: _e.mock.On("UpdateOrgInvitesExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrgInvitesExecute_Call) Run(run func(r admin.UpdateOrgInvitesApiRequest)) *OrganizationsApi_UpdateOrgInvitesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgInvitesApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvitesExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrgInvitesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvitesExecute_Call) RunAndReturn(run func(admin.UpdateOrgInvitesApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *OrganizationsApi_UpdateOrgInvitesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgInvitesWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrgInvitesWithParams(ctx context.Context, args *admin.UpdateOrgInvitesApiParams) admin.UpdateOrgInvitesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgInvitesWithParams")
	}

	var r0 admin.UpdateOrgInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgInvitesApiParams) admin.UpdateOrgInvitesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgInvitesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgInvitesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgInvitesWithParams'
type OrganizationsApi_UpdateOrgInvitesWithParams_Call struct {
	*mock.Call
}

// UpdateOrgInvitesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgInvitesApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrgInvitesWithParams(ctx any, args any) *OrganizationsApi_UpdateOrgInvitesWithParams_Call {
	return &OrganizationsApi_UpdateOrgInvitesWithParams_Call{Call: _e.mock.On("UpdateOrgInvitesWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrgInvitesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgInvitesApiParams)) *OrganizationsApi_UpdateOrgInvitesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgInvitesApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvitesWithParams_Call) Return(_a0 admin.UpdateOrgInvitesApiRequest) *OrganizationsApi_UpdateOrgInvitesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgInvitesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgInvitesApiParams) admin.UpdateOrgInvitesApiRequest) *OrganizationsApi_UpdateOrgInvitesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgSettings provides a mock function with given fields: ctx, orgId, organizationSettings
func (_m *OrganizationsApi) UpdateOrgSettings(ctx context.Context, orgId string, organizationSettings *admin.OrganizationSettings) admin.UpdateOrgSettingsApiRequest {
	ret := _m.Called(ctx, orgId, organizationSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgSettings")
	}

	var r0 admin.UpdateOrgSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrganizationSettings) admin.UpdateOrgSettingsApiRequest); ok {
		r0 = rf(ctx, orgId, organizationSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgSettings'
type OrganizationsApi_UpdateOrgSettings_Call struct {
	*mock.Call
}

// UpdateOrgSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - organizationSettings *admin.OrganizationSettings
func (_e *OrganizationsApi_Expecter) UpdateOrgSettings(ctx any, orgId any, organizationSettings any) *OrganizationsApi_UpdateOrgSettings_Call {
	return &OrganizationsApi_UpdateOrgSettings_Call{Call: _e.mock.On("UpdateOrgSettings", ctx, orgId, organizationSettings)}
}

func (_c *OrganizationsApi_UpdateOrgSettings_Call) Run(run func(ctx context.Context, orgId string, organizationSettings *admin.OrganizationSettings)) *OrganizationsApi_UpdateOrgSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrganizationSettings))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettings_Call) Return(_a0 admin.UpdateOrgSettingsApiRequest) *OrganizationsApi_UpdateOrgSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettings_Call) RunAndReturn(run func(context.Context, string, *admin.OrganizationSettings) admin.UpdateOrgSettingsApiRequest) *OrganizationsApi_UpdateOrgSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgSettingsExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrgSettingsExecute(r admin.UpdateOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgSettingsExecute")
	}

	var r0 *admin.OrganizationSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgSettingsApiRequest) *admin.OrganizationSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrgSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgSettingsExecute'
type OrganizationsApi_UpdateOrgSettingsExecute_Call struct {
	*mock.Call
}

// UpdateOrgSettingsExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgSettingsApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgSettingsExecute(r any) *OrganizationsApi_UpdateOrgSettingsExecute_Call {
	return &OrganizationsApi_UpdateOrgSettingsExecute_Call{Call: _e.mock.On("UpdateOrgSettingsExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrgSettingsExecute_Call) Run(run func(r admin.UpdateOrgSettingsApiRequest)) *OrganizationsApi_UpdateOrgSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgSettingsApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettingsExecute_Call) Return(_a0 *admin.OrganizationSettings, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrgSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettingsExecute_Call) RunAndReturn(run func(admin.UpdateOrgSettingsApiRequest) (*admin.OrganizationSettings, *http.Response, error)) *OrganizationsApi_UpdateOrgSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrgSettingsWithParams(ctx context.Context, args *admin.UpdateOrgSettingsApiParams) admin.UpdateOrgSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgSettingsWithParams")
	}

	var r0 admin.UpdateOrgSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgSettingsApiParams) admin.UpdateOrgSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgSettingsApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgSettingsWithParams'
type OrganizationsApi_UpdateOrgSettingsWithParams_Call struct {
	*mock.Call
}

// UpdateOrgSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgSettingsApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrgSettingsWithParams(ctx any, args any) *OrganizationsApi_UpdateOrgSettingsWithParams_Call {
	return &OrganizationsApi_UpdateOrgSettingsWithParams_Call{Call: _e.mock.On("UpdateOrgSettingsWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrgSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgSettingsApiParams)) *OrganizationsApi_UpdateOrgSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgSettingsApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettingsWithParams_Call) Return(_a0 admin.UpdateOrgSettingsApiRequest) *OrganizationsApi_UpdateOrgSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgSettingsApiParams) admin.UpdateOrgSettingsApiRequest) *OrganizationsApi_UpdateOrgSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUserRoles provides a mock function with given fields: ctx, orgId, userId, updateOrgRolesForUser
func (_m *OrganizationsApi) UpdateOrgUserRoles(ctx context.Context, orgId string, userId string, updateOrgRolesForUser *admin.UpdateOrgRolesForUser) admin.UpdateOrgUserRolesApiRequest {
	ret := _m.Called(ctx, orgId, userId, updateOrgRolesForUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUserRoles")
	}

	var r0 admin.UpdateOrgUserRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UpdateOrgRolesForUser) admin.UpdateOrgUserRolesApiRequest); ok {
		r0 = rf(ctx, orgId, userId, updateOrgRolesForUser)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgUserRolesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUserRoles'
type OrganizationsApi_UpdateOrgUserRoles_Call struct {
	*mock.Call
}

// UpdateOrgUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - updateOrgRolesForUser *admin.UpdateOrgRolesForUser
func (_e *OrganizationsApi_Expecter) UpdateOrgUserRoles(ctx any, orgId any, userId any, updateOrgRolesForUser any) *OrganizationsApi_UpdateOrgUserRoles_Call {
	return &OrganizationsApi_UpdateOrgUserRoles_Call{Call: _e.mock.On("UpdateOrgUserRoles", ctx, orgId, userId, updateOrgRolesForUser)}
}

func (_c *OrganizationsApi_UpdateOrgUserRoles_Call) Run(run func(ctx context.Context, orgId string, userId string, updateOrgRolesForUser *admin.UpdateOrgRolesForUser)) *OrganizationsApi_UpdateOrgUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UpdateOrgRolesForUser))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRoles_Call) Return(_a0 admin.UpdateOrgUserRolesApiRequest) *OrganizationsApi_UpdateOrgUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRoles_Call) RunAndReturn(run func(context.Context, string, string, *admin.UpdateOrgRolesForUser) admin.UpdateOrgUserRolesApiRequest) *OrganizationsApi_UpdateOrgUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUserRolesExecute provides a mock function with given fields: r
func (_m *OrganizationsApi) UpdateOrgUserRolesExecute(r admin.UpdateOrgUserRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUserRolesExecute")
	}

	var r0 *admin.UpdateOrgRolesForUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgUserRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgUserRolesApiRequest) *admin.UpdateOrgRolesForUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UpdateOrgRolesForUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgUserRolesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgUserRolesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrganizationsApi_UpdateOrgUserRolesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUserRolesExecute'
type OrganizationsApi_UpdateOrgUserRolesExecute_Call struct {
	*mock.Call
}

// UpdateOrgUserRolesExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgUserRolesApiRequest
func (_e *OrganizationsApi_Expecter) UpdateOrgUserRolesExecute(r any) *OrganizationsApi_UpdateOrgUserRolesExecute_Call {
	return &OrganizationsApi_UpdateOrgUserRolesExecute_Call{Call: _e.mock.On("UpdateOrgUserRolesExecute", r)}
}

func (_c *OrganizationsApi_UpdateOrgUserRolesExecute_Call) Run(run func(r admin.UpdateOrgUserRolesApiRequest)) *OrganizationsApi_UpdateOrgUserRolesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgUserRolesApiRequest))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRolesExecute_Call) Return(_a0 *admin.UpdateOrgRolesForUser, _a1 *http.Response, _a2 error) *OrganizationsApi_UpdateOrgUserRolesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRolesExecute_Call) RunAndReturn(run func(admin.UpdateOrgUserRolesApiRequest) (*admin.UpdateOrgRolesForUser, *http.Response, error)) *OrganizationsApi_UpdateOrgUserRolesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUserRolesWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrgUserRolesWithParams(ctx context.Context, args *admin.UpdateOrgUserRolesApiParams) admin.UpdateOrgUserRolesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUserRolesWithParams")
	}

	var r0 admin.UpdateOrgUserRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgUserRolesApiParams) admin.UpdateOrgUserRolesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgUserRolesApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgUserRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUserRolesWithParams'
type OrganizationsApi_UpdateOrgUserRolesWithParams_Call struct {
	*mock.Call
}

// UpdateOrgUserRolesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgUserRolesApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrgUserRolesWithParams(ctx any, args any) *OrganizationsApi_UpdateOrgUserRolesWithParams_Call {
	return &OrganizationsApi_UpdateOrgUserRolesWithParams_Call{Call: _e.mock.On("UpdateOrgUserRolesWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrgUserRolesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgUserRolesApiParams)) *OrganizationsApi_UpdateOrgUserRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgUserRolesApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRolesWithParams_Call) Return(_a0 admin.UpdateOrgUserRolesApiRequest) *OrganizationsApi_UpdateOrgUserRolesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgUserRolesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgUserRolesApiParams) admin.UpdateOrgUserRolesApiRequest) *OrganizationsApi_UpdateOrgUserRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgWithParams provides a mock function with given fields: ctx, args
func (_m *OrganizationsApi) UpdateOrgWithParams(ctx context.Context, args *admin.UpdateOrgApiParams) admin.UpdateOrgApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgWithParams")
	}

	var r0 admin.UpdateOrgApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgApiParams) admin.UpdateOrgApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgApiRequest)
	}

	return r0
}

// OrganizationsApi_UpdateOrgWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgWithParams'
type OrganizationsApi_UpdateOrgWithParams_Call struct {
	*mock.Call
}

// UpdateOrgWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgApiParams
func (_e *OrganizationsApi_Expecter) UpdateOrgWithParams(ctx any, args any) *OrganizationsApi_UpdateOrgWithParams_Call {
	return &OrganizationsApi_UpdateOrgWithParams_Call{Call: _e.mock.On("UpdateOrgWithParams", ctx, args)}
}

func (_c *OrganizationsApi_UpdateOrgWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgApiParams)) *OrganizationsApi_UpdateOrgWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgApiParams))
	})
	return _c
}

func (_c *OrganizationsApi_UpdateOrgWithParams_Call) Return(_a0 admin.UpdateOrgApiRequest) *OrganizationsApi_UpdateOrgWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationsApi_UpdateOrgWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgApiParams) admin.UpdateOrgApiRequest) *OrganizationsApi_UpdateOrgWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrganizationsApi creates a new instance of OrganizationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationsApi {
	mock := &OrganizationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
