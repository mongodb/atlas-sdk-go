// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// InvoicesApi is an autogenerated mock type for the InvoicesApi type
type InvoicesApi struct {
	mock.Mock
}

type InvoicesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *InvoicesApi) EXPECT() *InvoicesApi_Expecter {
	return &InvoicesApi_Expecter{mock: &_m.Mock}
}

// CreateCostExplorerProcess provides a mock function with given fields: ctx, orgId, costExplorerFilterRequestBody
func (_m *InvoicesApi) CreateCostExplorerProcess(ctx context.Context, orgId string, costExplorerFilterRequestBody *admin.CostExplorerFilterRequestBody) admin.CreateCostExplorerProcessApiRequest {
	ret := _m.Called(ctx, orgId, costExplorerFilterRequestBody)

	if len(ret) == 0 {
		panic("no return value specified for CreateCostExplorerProcess")
	}

	var r0 admin.CreateCostExplorerProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.CostExplorerFilterRequestBody) admin.CreateCostExplorerProcessApiRequest); ok {
		r0 = rf(ctx, orgId, costExplorerFilterRequestBody)
	} else {
		r0 = ret.Get(0).(admin.CreateCostExplorerProcessApiRequest)
	}

	return r0
}

// InvoicesApi_CreateCostExplorerProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCostExplorerProcess'
type InvoicesApi_CreateCostExplorerProcess_Call struct {
	*mock.Call
}

// CreateCostExplorerProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - costExplorerFilterRequestBody *admin.CostExplorerFilterRequestBody
func (_e *InvoicesApi_Expecter) CreateCostExplorerProcess(ctx any, orgId any, costExplorerFilterRequestBody any) *InvoicesApi_CreateCostExplorerProcess_Call {
	return &InvoicesApi_CreateCostExplorerProcess_Call{Call: _e.mock.On("CreateCostExplorerProcess", ctx, orgId, costExplorerFilterRequestBody)}
}

func (_c *InvoicesApi_CreateCostExplorerProcess_Call) Run(run func(ctx context.Context, orgId string, costExplorerFilterRequestBody *admin.CostExplorerFilterRequestBody)) *InvoicesApi_CreateCostExplorerProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.CostExplorerFilterRequestBody))
	})
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcess_Call) Return(_a0 admin.CreateCostExplorerProcessApiRequest) *InvoicesApi_CreateCostExplorerProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcess_Call) RunAndReturn(run func(context.Context, string, *admin.CostExplorerFilterRequestBody) admin.CreateCostExplorerProcessApiRequest) *InvoicesApi_CreateCostExplorerProcess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCostExplorerProcessExecute provides a mock function with given fields: r
func (_m *InvoicesApi) CreateCostExplorerProcessExecute(r admin.CreateCostExplorerProcessApiRequest) (*admin.CostExplorerFilterResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateCostExplorerProcessExecute")
	}

	var r0 *admin.CostExplorerFilterResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateCostExplorerProcessApiRequest) (*admin.CostExplorerFilterResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateCostExplorerProcessApiRequest) *admin.CostExplorerFilterResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CostExplorerFilterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateCostExplorerProcessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateCostExplorerProcessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_CreateCostExplorerProcessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCostExplorerProcessExecute'
type InvoicesApi_CreateCostExplorerProcessExecute_Call struct {
	*mock.Call
}

// CreateCostExplorerProcessExecute is a helper method to define mock.On call
//   - r admin.CreateCostExplorerProcessApiRequest
func (_e *InvoicesApi_Expecter) CreateCostExplorerProcessExecute(r any) *InvoicesApi_CreateCostExplorerProcessExecute_Call {
	return &InvoicesApi_CreateCostExplorerProcessExecute_Call{Call: _e.mock.On("CreateCostExplorerProcessExecute", r)}
}

func (_c *InvoicesApi_CreateCostExplorerProcessExecute_Call) Run(run func(r admin.CreateCostExplorerProcessApiRequest)) *InvoicesApi_CreateCostExplorerProcessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateCostExplorerProcessApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcessExecute_Call) Return(_a0 *admin.CostExplorerFilterResponse, _a1 *http.Response, _a2 error) *InvoicesApi_CreateCostExplorerProcessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcessExecute_Call) RunAndReturn(run func(admin.CreateCostExplorerProcessApiRequest) (*admin.CostExplorerFilterResponse, *http.Response, error)) *InvoicesApi_CreateCostExplorerProcessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCostExplorerProcessWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) CreateCostExplorerProcessWithParams(ctx context.Context, args *admin.CreateCostExplorerProcessApiParams) admin.CreateCostExplorerProcessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateCostExplorerProcessWithParams")
	}

	var r0 admin.CreateCostExplorerProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateCostExplorerProcessApiParams) admin.CreateCostExplorerProcessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateCostExplorerProcessApiRequest)
	}

	return r0
}

// InvoicesApi_CreateCostExplorerProcessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCostExplorerProcessWithParams'
type InvoicesApi_CreateCostExplorerProcessWithParams_Call struct {
	*mock.Call
}

// CreateCostExplorerProcessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateCostExplorerProcessApiParams
func (_e *InvoicesApi_Expecter) CreateCostExplorerProcessWithParams(ctx any, args any) *InvoicesApi_CreateCostExplorerProcessWithParams_Call {
	return &InvoicesApi_CreateCostExplorerProcessWithParams_Call{Call: _e.mock.On("CreateCostExplorerProcessWithParams", ctx, args)}
}

func (_c *InvoicesApi_CreateCostExplorerProcessWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateCostExplorerProcessApiParams)) *InvoicesApi_CreateCostExplorerProcessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateCostExplorerProcessApiParams))
	})
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcessWithParams_Call) Return(_a0 admin.CreateCostExplorerProcessApiRequest) *InvoicesApi_CreateCostExplorerProcessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_CreateCostExplorerProcessWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateCostExplorerProcessApiParams) admin.CreateCostExplorerProcessApiRequest) *InvoicesApi_CreateCostExplorerProcessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCostExplorerUsage provides a mock function with given fields: ctx, orgId, token
func (_m *InvoicesApi) GetCostExplorerUsage(ctx context.Context, orgId string, token string) admin.GetCostExplorerUsageApiRequest {
	ret := _m.Called(ctx, orgId, token)

	if len(ret) == 0 {
		panic("no return value specified for GetCostExplorerUsage")
	}

	var r0 admin.GetCostExplorerUsageApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetCostExplorerUsageApiRequest); ok {
		r0 = rf(ctx, orgId, token)
	} else {
		r0 = ret.Get(0).(admin.GetCostExplorerUsageApiRequest)
	}

	return r0
}

// InvoicesApi_GetCostExplorerUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCostExplorerUsage'
type InvoicesApi_GetCostExplorerUsage_Call struct {
	*mock.Call
}

// GetCostExplorerUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - token string
func (_e *InvoicesApi_Expecter) GetCostExplorerUsage(ctx any, orgId any, token any) *InvoicesApi_GetCostExplorerUsage_Call {
	return &InvoicesApi_GetCostExplorerUsage_Call{Call: _e.mock.On("GetCostExplorerUsage", ctx, orgId, token)}
}

func (_c *InvoicesApi_GetCostExplorerUsage_Call) Run(run func(ctx context.Context, orgId string, token string)) *InvoicesApi_GetCostExplorerUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsage_Call) Return(_a0 admin.GetCostExplorerUsageApiRequest) *InvoicesApi_GetCostExplorerUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsage_Call) RunAndReturn(run func(context.Context, string, string) admin.GetCostExplorerUsageApiRequest) *InvoicesApi_GetCostExplorerUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCostExplorerUsageExecute provides a mock function with given fields: r
func (_m *InvoicesApi) GetCostExplorerUsageExecute(r admin.GetCostExplorerUsageApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCostExplorerUsageExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCostExplorerUsageApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCostExplorerUsageApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCostExplorerUsageApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCostExplorerUsageApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_GetCostExplorerUsageExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCostExplorerUsageExecute'
type InvoicesApi_GetCostExplorerUsageExecute_Call struct {
	*mock.Call
}

// GetCostExplorerUsageExecute is a helper method to define mock.On call
//   - r admin.GetCostExplorerUsageApiRequest
func (_e *InvoicesApi_Expecter) GetCostExplorerUsageExecute(r any) *InvoicesApi_GetCostExplorerUsageExecute_Call {
	return &InvoicesApi_GetCostExplorerUsageExecute_Call{Call: _e.mock.On("GetCostExplorerUsageExecute", r)}
}

func (_c *InvoicesApi_GetCostExplorerUsageExecute_Call) Run(run func(r admin.GetCostExplorerUsageApiRequest)) *InvoicesApi_GetCostExplorerUsageExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCostExplorerUsageApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsageExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *InvoicesApi_GetCostExplorerUsageExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsageExecute_Call) RunAndReturn(run func(admin.GetCostExplorerUsageApiRequest) (any, *http.Response, error)) *InvoicesApi_GetCostExplorerUsageExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCostExplorerUsageWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) GetCostExplorerUsageWithParams(ctx context.Context, args *admin.GetCostExplorerUsageApiParams) admin.GetCostExplorerUsageApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCostExplorerUsageWithParams")
	}

	var r0 admin.GetCostExplorerUsageApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCostExplorerUsageApiParams) admin.GetCostExplorerUsageApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCostExplorerUsageApiRequest)
	}

	return r0
}

// InvoicesApi_GetCostExplorerUsageWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCostExplorerUsageWithParams'
type InvoicesApi_GetCostExplorerUsageWithParams_Call struct {
	*mock.Call
}

// GetCostExplorerUsageWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCostExplorerUsageApiParams
func (_e *InvoicesApi_Expecter) GetCostExplorerUsageWithParams(ctx any, args any) *InvoicesApi_GetCostExplorerUsageWithParams_Call {
	return &InvoicesApi_GetCostExplorerUsageWithParams_Call{Call: _e.mock.On("GetCostExplorerUsageWithParams", ctx, args)}
}

func (_c *InvoicesApi_GetCostExplorerUsageWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCostExplorerUsageApiParams)) *InvoicesApi_GetCostExplorerUsageWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCostExplorerUsageApiParams))
	})
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsageWithParams_Call) Return(_a0 admin.GetCostExplorerUsageApiRequest) *InvoicesApi_GetCostExplorerUsageWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetCostExplorerUsageWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCostExplorerUsageApiParams) admin.GetCostExplorerUsageApiRequest) *InvoicesApi_GetCostExplorerUsageWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoice provides a mock function with given fields: ctx, orgId, invoiceId
func (_m *InvoicesApi) GetInvoice(ctx context.Context, orgId string, invoiceId string) admin.GetInvoiceApiRequest {
	ret := _m.Called(ctx, orgId, invoiceId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 admin.GetInvoiceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetInvoiceApiRequest); ok {
		r0 = rf(ctx, orgId, invoiceId)
	} else {
		r0 = ret.Get(0).(admin.GetInvoiceApiRequest)
	}

	return r0
}

// InvoicesApi_GetInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoice'
type InvoicesApi_GetInvoice_Call struct {
	*mock.Call
}

// GetInvoice is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invoiceId string
func (_e *InvoicesApi_Expecter) GetInvoice(ctx any, orgId any, invoiceId any) *InvoicesApi_GetInvoice_Call {
	return &InvoicesApi_GetInvoice_Call{Call: _e.mock.On("GetInvoice", ctx, orgId, invoiceId)}
}

func (_c *InvoicesApi_GetInvoice_Call) Run(run func(ctx context.Context, orgId string, invoiceId string)) *InvoicesApi_GetInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoice_Call) Return(_a0 admin.GetInvoiceApiRequest) *InvoicesApi_GetInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetInvoice_Call) RunAndReturn(run func(context.Context, string, string) admin.GetInvoiceApiRequest) *InvoicesApi_GetInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceCsv provides a mock function with given fields: ctx, orgId, invoiceId
func (_m *InvoicesApi) GetInvoiceCsv(ctx context.Context, orgId string, invoiceId string) admin.GetInvoiceCsvApiRequest {
	ret := _m.Called(ctx, orgId, invoiceId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceCsv")
	}

	var r0 admin.GetInvoiceCsvApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetInvoiceCsvApiRequest); ok {
		r0 = rf(ctx, orgId, invoiceId)
	} else {
		r0 = ret.Get(0).(admin.GetInvoiceCsvApiRequest)
	}

	return r0
}

// InvoicesApi_GetInvoiceCsv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceCsv'
type InvoicesApi_GetInvoiceCsv_Call struct {
	*mock.Call
}

// GetInvoiceCsv is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invoiceId string
func (_e *InvoicesApi_Expecter) GetInvoiceCsv(ctx any, orgId any, invoiceId any) *InvoicesApi_GetInvoiceCsv_Call {
	return &InvoicesApi_GetInvoiceCsv_Call{Call: _e.mock.On("GetInvoiceCsv", ctx, orgId, invoiceId)}
}

func (_c *InvoicesApi_GetInvoiceCsv_Call) Run(run func(ctx context.Context, orgId string, invoiceId string)) *InvoicesApi_GetInvoiceCsv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsv_Call) Return(_a0 admin.GetInvoiceCsvApiRequest) *InvoicesApi_GetInvoiceCsv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsv_Call) RunAndReturn(run func(context.Context, string, string) admin.GetInvoiceCsvApiRequest) *InvoicesApi_GetInvoiceCsv_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceCsvExecute provides a mock function with given fields: r
func (_m *InvoicesApi) GetInvoiceCsvExecute(r admin.GetInvoiceCsvApiRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceCsvExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetInvoiceCsvApiRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetInvoiceCsvApiRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(admin.GetInvoiceCsvApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetInvoiceCsvApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_GetInvoiceCsvExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceCsvExecute'
type InvoicesApi_GetInvoiceCsvExecute_Call struct {
	*mock.Call
}

// GetInvoiceCsvExecute is a helper method to define mock.On call
//   - r admin.GetInvoiceCsvApiRequest
func (_e *InvoicesApi_Expecter) GetInvoiceCsvExecute(r any) *InvoicesApi_GetInvoiceCsvExecute_Call {
	return &InvoicesApi_GetInvoiceCsvExecute_Call{Call: _e.mock.On("GetInvoiceCsvExecute", r)}
}

func (_c *InvoicesApi_GetInvoiceCsvExecute_Call) Run(run func(r admin.GetInvoiceCsvApiRequest)) *InvoicesApi_GetInvoiceCsvExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetInvoiceCsvApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsvExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *InvoicesApi_GetInvoiceCsvExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsvExecute_Call) RunAndReturn(run func(admin.GetInvoiceCsvApiRequest) (string, *http.Response, error)) *InvoicesApi_GetInvoiceCsvExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceCsvWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) GetInvoiceCsvWithParams(ctx context.Context, args *admin.GetInvoiceCsvApiParams) admin.GetInvoiceCsvApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceCsvWithParams")
	}

	var r0 admin.GetInvoiceCsvApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetInvoiceCsvApiParams) admin.GetInvoiceCsvApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetInvoiceCsvApiRequest)
	}

	return r0
}

// InvoicesApi_GetInvoiceCsvWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceCsvWithParams'
type InvoicesApi_GetInvoiceCsvWithParams_Call struct {
	*mock.Call
}

// GetInvoiceCsvWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetInvoiceCsvApiParams
func (_e *InvoicesApi_Expecter) GetInvoiceCsvWithParams(ctx any, args any) *InvoicesApi_GetInvoiceCsvWithParams_Call {
	return &InvoicesApi_GetInvoiceCsvWithParams_Call{Call: _e.mock.On("GetInvoiceCsvWithParams", ctx, args)}
}

func (_c *InvoicesApi_GetInvoiceCsvWithParams_Call) Run(run func(ctx context.Context, args *admin.GetInvoiceCsvApiParams)) *InvoicesApi_GetInvoiceCsvWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetInvoiceCsvApiParams))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsvWithParams_Call) Return(_a0 admin.GetInvoiceCsvApiRequest) *InvoicesApi_GetInvoiceCsvWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetInvoiceCsvWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetInvoiceCsvApiParams) admin.GetInvoiceCsvApiRequest) *InvoicesApi_GetInvoiceCsvWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceExecute provides a mock function with given fields: r
func (_m *InvoicesApi) GetInvoiceExecute(r admin.GetInvoiceApiRequest) (*admin.BillingInvoice, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceExecute")
	}

	var r0 *admin.BillingInvoice
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetInvoiceApiRequest) (*admin.BillingInvoice, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetInvoiceApiRequest) *admin.BillingInvoice); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BillingInvoice)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetInvoiceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetInvoiceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_GetInvoiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceExecute'
type InvoicesApi_GetInvoiceExecute_Call struct {
	*mock.Call
}

// GetInvoiceExecute is a helper method to define mock.On call
//   - r admin.GetInvoiceApiRequest
func (_e *InvoicesApi_Expecter) GetInvoiceExecute(r any) *InvoicesApi_GetInvoiceExecute_Call {
	return &InvoicesApi_GetInvoiceExecute_Call{Call: _e.mock.On("GetInvoiceExecute", r)}
}

func (_c *InvoicesApi_GetInvoiceExecute_Call) Run(run func(r admin.GetInvoiceApiRequest)) *InvoicesApi_GetInvoiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetInvoiceApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoiceExecute_Call) Return(_a0 *admin.BillingInvoice, _a1 *http.Response, _a2 error) *InvoicesApi_GetInvoiceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_GetInvoiceExecute_Call) RunAndReturn(run func(admin.GetInvoiceApiRequest) (*admin.BillingInvoice, *http.Response, error)) *InvoicesApi_GetInvoiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) GetInvoiceWithParams(ctx context.Context, args *admin.GetInvoiceApiParams) admin.GetInvoiceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceWithParams")
	}

	var r0 admin.GetInvoiceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetInvoiceApiParams) admin.GetInvoiceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetInvoiceApiRequest)
	}

	return r0
}

// InvoicesApi_GetInvoiceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceWithParams'
type InvoicesApi_GetInvoiceWithParams_Call struct {
	*mock.Call
}

// GetInvoiceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetInvoiceApiParams
func (_e *InvoicesApi_Expecter) GetInvoiceWithParams(ctx any, args any) *InvoicesApi_GetInvoiceWithParams_Call {
	return &InvoicesApi_GetInvoiceWithParams_Call{Call: _e.mock.On("GetInvoiceWithParams", ctx, args)}
}

func (_c *InvoicesApi_GetInvoiceWithParams_Call) Run(run func(ctx context.Context, args *admin.GetInvoiceApiParams)) *InvoicesApi_GetInvoiceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetInvoiceApiParams))
	})
	return _c
}

func (_c *InvoicesApi_GetInvoiceWithParams_Call) Return(_a0 admin.GetInvoiceApiRequest) *InvoicesApi_GetInvoiceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_GetInvoiceWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetInvoiceApiParams) admin.GetInvoiceApiRequest) *InvoicesApi_GetInvoiceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoicePending provides a mock function with given fields: ctx, orgId
func (_m *InvoicesApi) ListInvoicePending(ctx context.Context, orgId string) admin.ListInvoicePendingApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoicePending")
	}

	var r0 admin.ListInvoicePendingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListInvoicePendingApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListInvoicePendingApiRequest)
	}

	return r0
}

// InvoicesApi_ListInvoicePending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoicePending'
type InvoicesApi_ListInvoicePending_Call struct {
	*mock.Call
}

// ListInvoicePending is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *InvoicesApi_Expecter) ListInvoicePending(ctx any, orgId any) *InvoicesApi_ListInvoicePending_Call {
	return &InvoicesApi_ListInvoicePending_Call{Call: _e.mock.On("ListInvoicePending", ctx, orgId)}
}

func (_c *InvoicesApi_ListInvoicePending_Call) Run(run func(ctx context.Context, orgId string)) *InvoicesApi_ListInvoicePending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoicePending_Call) Return(_a0 admin.ListInvoicePendingApiRequest) *InvoicesApi_ListInvoicePending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_ListInvoicePending_Call) RunAndReturn(run func(context.Context, string) admin.ListInvoicePendingApiRequest) *InvoicesApi_ListInvoicePending_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoicePendingExecute provides a mock function with given fields: r
func (_m *InvoicesApi) ListInvoicePendingExecute(r admin.ListInvoicePendingApiRequest) (*admin.PaginatedApiInvoice, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoicePendingExecute")
	}

	var r0 *admin.PaginatedApiInvoice
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListInvoicePendingApiRequest) (*admin.PaginatedApiInvoice, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListInvoicePendingApiRequest) *admin.PaginatedApiInvoice); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiInvoice)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListInvoicePendingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListInvoicePendingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_ListInvoicePendingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoicePendingExecute'
type InvoicesApi_ListInvoicePendingExecute_Call struct {
	*mock.Call
}

// ListInvoicePendingExecute is a helper method to define mock.On call
//   - r admin.ListInvoicePendingApiRequest
func (_e *InvoicesApi_Expecter) ListInvoicePendingExecute(r any) *InvoicesApi_ListInvoicePendingExecute_Call {
	return &InvoicesApi_ListInvoicePendingExecute_Call{Call: _e.mock.On("ListInvoicePendingExecute", r)}
}

func (_c *InvoicesApi_ListInvoicePendingExecute_Call) Run(run func(r admin.ListInvoicePendingApiRequest)) *InvoicesApi_ListInvoicePendingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListInvoicePendingApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoicePendingExecute_Call) Return(_a0 *admin.PaginatedApiInvoice, _a1 *http.Response, _a2 error) *InvoicesApi_ListInvoicePendingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_ListInvoicePendingExecute_Call) RunAndReturn(run func(admin.ListInvoicePendingApiRequest) (*admin.PaginatedApiInvoice, *http.Response, error)) *InvoicesApi_ListInvoicePendingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoicePendingWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) ListInvoicePendingWithParams(ctx context.Context, args *admin.ListInvoicePendingApiParams) admin.ListInvoicePendingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoicePendingWithParams")
	}

	var r0 admin.ListInvoicePendingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListInvoicePendingApiParams) admin.ListInvoicePendingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListInvoicePendingApiRequest)
	}

	return r0
}

// InvoicesApi_ListInvoicePendingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoicePendingWithParams'
type InvoicesApi_ListInvoicePendingWithParams_Call struct {
	*mock.Call
}

// ListInvoicePendingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListInvoicePendingApiParams
func (_e *InvoicesApi_Expecter) ListInvoicePendingWithParams(ctx any, args any) *InvoicesApi_ListInvoicePendingWithParams_Call {
	return &InvoicesApi_ListInvoicePendingWithParams_Call{Call: _e.mock.On("ListInvoicePendingWithParams", ctx, args)}
}

func (_c *InvoicesApi_ListInvoicePendingWithParams_Call) Run(run func(ctx context.Context, args *admin.ListInvoicePendingApiParams)) *InvoicesApi_ListInvoicePendingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListInvoicePendingApiParams))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoicePendingWithParams_Call) Return(_a0 admin.ListInvoicePendingApiRequest) *InvoicesApi_ListInvoicePendingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_ListInvoicePendingWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListInvoicePendingApiParams) admin.ListInvoicePendingApiRequest) *InvoicesApi_ListInvoicePendingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoices provides a mock function with given fields: ctx, orgId
func (_m *InvoicesApi) ListInvoices(ctx context.Context, orgId string) admin.ListInvoicesApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoices")
	}

	var r0 admin.ListInvoicesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListInvoicesApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListInvoicesApiRequest)
	}

	return r0
}

// InvoicesApi_ListInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoices'
type InvoicesApi_ListInvoices_Call struct {
	*mock.Call
}

// ListInvoices is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *InvoicesApi_Expecter) ListInvoices(ctx any, orgId any) *InvoicesApi_ListInvoices_Call {
	return &InvoicesApi_ListInvoices_Call{Call: _e.mock.On("ListInvoices", ctx, orgId)}
}

func (_c *InvoicesApi_ListInvoices_Call) Run(run func(ctx context.Context, orgId string)) *InvoicesApi_ListInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoices_Call) Return(_a0 admin.ListInvoicesApiRequest) *InvoicesApi_ListInvoices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_ListInvoices_Call) RunAndReturn(run func(context.Context, string) admin.ListInvoicesApiRequest) *InvoicesApi_ListInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoicesExecute provides a mock function with given fields: r
func (_m *InvoicesApi) ListInvoicesExecute(r admin.ListInvoicesApiRequest) (*admin.PaginatedApiInvoiceMetadata, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoicesExecute")
	}

	var r0 *admin.PaginatedApiInvoiceMetadata
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListInvoicesApiRequest) (*admin.PaginatedApiInvoiceMetadata, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListInvoicesApiRequest) *admin.PaginatedApiInvoiceMetadata); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiInvoiceMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListInvoicesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListInvoicesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_ListInvoicesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoicesExecute'
type InvoicesApi_ListInvoicesExecute_Call struct {
	*mock.Call
}

// ListInvoicesExecute is a helper method to define mock.On call
//   - r admin.ListInvoicesApiRequest
func (_e *InvoicesApi_Expecter) ListInvoicesExecute(r any) *InvoicesApi_ListInvoicesExecute_Call {
	return &InvoicesApi_ListInvoicesExecute_Call{Call: _e.mock.On("ListInvoicesExecute", r)}
}

func (_c *InvoicesApi_ListInvoicesExecute_Call) Run(run func(r admin.ListInvoicesApiRequest)) *InvoicesApi_ListInvoicesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListInvoicesApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoicesExecute_Call) Return(_a0 *admin.PaginatedApiInvoiceMetadata, _a1 *http.Response, _a2 error) *InvoicesApi_ListInvoicesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_ListInvoicesExecute_Call) RunAndReturn(run func(admin.ListInvoicesApiRequest) (*admin.PaginatedApiInvoiceMetadata, *http.Response, error)) *InvoicesApi_ListInvoicesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoicesWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) ListInvoicesWithParams(ctx context.Context, args *admin.ListInvoicesApiParams) admin.ListInvoicesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoicesWithParams")
	}

	var r0 admin.ListInvoicesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListInvoicesApiParams) admin.ListInvoicesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListInvoicesApiRequest)
	}

	return r0
}

// InvoicesApi_ListInvoicesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoicesWithParams'
type InvoicesApi_ListInvoicesWithParams_Call struct {
	*mock.Call
}

// ListInvoicesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListInvoicesApiParams
func (_e *InvoicesApi_Expecter) ListInvoicesWithParams(ctx any, args any) *InvoicesApi_ListInvoicesWithParams_Call {
	return &InvoicesApi_ListInvoicesWithParams_Call{Call: _e.mock.On("ListInvoicesWithParams", ctx, args)}
}

func (_c *InvoicesApi_ListInvoicesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListInvoicesApiParams)) *InvoicesApi_ListInvoicesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListInvoicesApiParams))
	})
	return _c
}

func (_c *InvoicesApi_ListInvoicesWithParams_Call) Return(_a0 admin.ListInvoicesApiRequest) *InvoicesApi_ListInvoicesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_ListInvoicesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListInvoicesApiParams) admin.ListInvoicesApiRequest) *InvoicesApi_ListInvoicesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchInvoiceLineItems provides a mock function with given fields: ctx, orgId, invoiceId, apiPublicUsageDetailsQueryRequest
func (_m *InvoicesApi) SearchInvoiceLineItems(ctx context.Context, orgId string, invoiceId string, apiPublicUsageDetailsQueryRequest *admin.ApiPublicUsageDetailsQueryRequest) admin.SearchInvoiceLineItemsApiRequest {
	ret := _m.Called(ctx, orgId, invoiceId, apiPublicUsageDetailsQueryRequest)

	if len(ret) == 0 {
		panic("no return value specified for SearchInvoiceLineItems")
	}

	var r0 admin.SearchInvoiceLineItemsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiPublicUsageDetailsQueryRequest) admin.SearchInvoiceLineItemsApiRequest); ok {
		r0 = rf(ctx, orgId, invoiceId, apiPublicUsageDetailsQueryRequest)
	} else {
		r0 = ret.Get(0).(admin.SearchInvoiceLineItemsApiRequest)
	}

	return r0
}

// InvoicesApi_SearchInvoiceLineItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchInvoiceLineItems'
type InvoicesApi_SearchInvoiceLineItems_Call struct {
	*mock.Call
}

// SearchInvoiceLineItems is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - invoiceId string
//   - apiPublicUsageDetailsQueryRequest *admin.ApiPublicUsageDetailsQueryRequest
func (_e *InvoicesApi_Expecter) SearchInvoiceLineItems(ctx any, orgId any, invoiceId any, apiPublicUsageDetailsQueryRequest any) *InvoicesApi_SearchInvoiceLineItems_Call {
	return &InvoicesApi_SearchInvoiceLineItems_Call{Call: _e.mock.On("SearchInvoiceLineItems", ctx, orgId, invoiceId, apiPublicUsageDetailsQueryRequest)}
}

func (_c *InvoicesApi_SearchInvoiceLineItems_Call) Run(run func(ctx context.Context, orgId string, invoiceId string, apiPublicUsageDetailsQueryRequest *admin.ApiPublicUsageDetailsQueryRequest)) *InvoicesApi_SearchInvoiceLineItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiPublicUsageDetailsQueryRequest))
	})
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItems_Call) Return(_a0 admin.SearchInvoiceLineItemsApiRequest) *InvoicesApi_SearchInvoiceLineItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItems_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiPublicUsageDetailsQueryRequest) admin.SearchInvoiceLineItemsApiRequest) *InvoicesApi_SearchInvoiceLineItems_Call {
	_c.Call.Return(run)
	return _c
}

// SearchInvoiceLineItemsExecute provides a mock function with given fields: r
func (_m *InvoicesApi) SearchInvoiceLineItemsExecute(r admin.SearchInvoiceLineItemsApiRequest) (*admin.PaginatedPublicApiUsageDetailsLineItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SearchInvoiceLineItemsExecute")
	}

	var r0 *admin.PaginatedPublicApiUsageDetailsLineItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.SearchInvoiceLineItemsApiRequest) (*admin.PaginatedPublicApiUsageDetailsLineItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SearchInvoiceLineItemsApiRequest) *admin.PaginatedPublicApiUsageDetailsLineItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedPublicApiUsageDetailsLineItem)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SearchInvoiceLineItemsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.SearchInvoiceLineItemsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvoicesApi_SearchInvoiceLineItemsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchInvoiceLineItemsExecute'
type InvoicesApi_SearchInvoiceLineItemsExecute_Call struct {
	*mock.Call
}

// SearchInvoiceLineItemsExecute is a helper method to define mock.On call
//   - r admin.SearchInvoiceLineItemsApiRequest
func (_e *InvoicesApi_Expecter) SearchInvoiceLineItemsExecute(r any) *InvoicesApi_SearchInvoiceLineItemsExecute_Call {
	return &InvoicesApi_SearchInvoiceLineItemsExecute_Call{Call: _e.mock.On("SearchInvoiceLineItemsExecute", r)}
}

func (_c *InvoicesApi_SearchInvoiceLineItemsExecute_Call) Run(run func(r admin.SearchInvoiceLineItemsApiRequest)) *InvoicesApi_SearchInvoiceLineItemsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SearchInvoiceLineItemsApiRequest))
	})
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItemsExecute_Call) Return(_a0 *admin.PaginatedPublicApiUsageDetailsLineItem, _a1 *http.Response, _a2 error) *InvoicesApi_SearchInvoiceLineItemsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItemsExecute_Call) RunAndReturn(run func(admin.SearchInvoiceLineItemsApiRequest) (*admin.PaginatedPublicApiUsageDetailsLineItem, *http.Response, error)) *InvoicesApi_SearchInvoiceLineItemsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SearchInvoiceLineItemsWithParams provides a mock function with given fields: ctx, args
func (_m *InvoicesApi) SearchInvoiceLineItemsWithParams(ctx context.Context, args *admin.SearchInvoiceLineItemsApiParams) admin.SearchInvoiceLineItemsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SearchInvoiceLineItemsWithParams")
	}

	var r0 admin.SearchInvoiceLineItemsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SearchInvoiceLineItemsApiParams) admin.SearchInvoiceLineItemsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SearchInvoiceLineItemsApiRequest)
	}

	return r0
}

// InvoicesApi_SearchInvoiceLineItemsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchInvoiceLineItemsWithParams'
type InvoicesApi_SearchInvoiceLineItemsWithParams_Call struct {
	*mock.Call
}

// SearchInvoiceLineItemsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SearchInvoiceLineItemsApiParams
func (_e *InvoicesApi_Expecter) SearchInvoiceLineItemsWithParams(ctx any, args any) *InvoicesApi_SearchInvoiceLineItemsWithParams_Call {
	return &InvoicesApi_SearchInvoiceLineItemsWithParams_Call{Call: _e.mock.On("SearchInvoiceLineItemsWithParams", ctx, args)}
}

func (_c *InvoicesApi_SearchInvoiceLineItemsWithParams_Call) Run(run func(ctx context.Context, args *admin.SearchInvoiceLineItemsApiParams)) *InvoicesApi_SearchInvoiceLineItemsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SearchInvoiceLineItemsApiParams))
	})
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItemsWithParams_Call) Return(_a0 admin.SearchInvoiceLineItemsApiRequest) *InvoicesApi_SearchInvoiceLineItemsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoicesApi_SearchInvoiceLineItemsWithParams_Call) RunAndReturn(run func(context.Context, *admin.SearchInvoiceLineItemsApiParams) admin.SearchInvoiceLineItemsApiRequest) *InvoicesApi_SearchInvoiceLineItemsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvoicesApi creates a new instance of InvoicesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoicesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvoicesApi {
	mock := &InvoicesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
