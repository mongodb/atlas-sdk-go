// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CloudBackupsApi is an autogenerated mock type for the CloudBackupsApi type
type CloudBackupsApi struct {
	mock.Mock
}

type CloudBackupsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudBackupsApi) EXPECT() *CloudBackupsApi_Expecter {
	return &CloudBackupsApi_Expecter{mock: &_m.Mock}
}

// CancelBackupRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, restoreJobId
func (_m *CloudBackupsApi) CancelBackupRestoreJob(ctx context.Context, groupId string, clusterName string, restoreJobId string) admin.CancelBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, restoreJobId)

	if len(ret) == 0 {
		panic("no return value specified for CancelBackupRestoreJob")
	}

	var r0 admin.CancelBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.CancelBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, restoreJobId)
	} else {
		r0 = ret.Get(0).(admin.CancelBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CancelBackupRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBackupRestoreJob'
type CloudBackupsApi_CancelBackupRestoreJob_Call struct {
	*mock.Call
}

// CancelBackupRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - restoreJobId string
func (_e *CloudBackupsApi_Expecter) CancelBackupRestoreJob(ctx any, groupId any, clusterName any, restoreJobId any) *CloudBackupsApi_CancelBackupRestoreJob_Call {
	return &CloudBackupsApi_CancelBackupRestoreJob_Call{Call: _e.mock.On("CancelBackupRestoreJob", ctx, groupId, clusterName, restoreJobId)}
}

func (_c *CloudBackupsApi_CancelBackupRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, restoreJobId string)) *CloudBackupsApi_CancelBackupRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJob_Call) Return(_a0 admin.CancelBackupRestoreJobApiRequest) *CloudBackupsApi_CancelBackupRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, string) admin.CancelBackupRestoreJobApiRequest) *CloudBackupsApi_CancelBackupRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// CancelBackupRestoreJobExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) CancelBackupRestoreJobExecute(r admin.CancelBackupRestoreJobApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CancelBackupRestoreJobExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.CancelBackupRestoreJobApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CancelBackupRestoreJobApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CancelBackupRestoreJobApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudBackupsApi_CancelBackupRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBackupRestoreJobExecute'
type CloudBackupsApi_CancelBackupRestoreJobExecute_Call struct {
	*mock.Call
}

// CancelBackupRestoreJobExecute is a helper method to define mock.On call
//   - r admin.CancelBackupRestoreJobApiRequest
func (_e *CloudBackupsApi_Expecter) CancelBackupRestoreJobExecute(r any) *CloudBackupsApi_CancelBackupRestoreJobExecute_Call {
	return &CloudBackupsApi_CancelBackupRestoreJobExecute_Call{Call: _e.mock.On("CancelBackupRestoreJobExecute", r)}
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobExecute_Call) Run(run func(r admin.CancelBackupRestoreJobApiRequest)) *CloudBackupsApi_CancelBackupRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CancelBackupRestoreJobApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudBackupsApi_CancelBackupRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobExecute_Call) RunAndReturn(run func(admin.CancelBackupRestoreJobApiRequest) (*http.Response, error)) *CloudBackupsApi_CancelBackupRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CancelBackupRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) CancelBackupRestoreJobWithParams(ctx context.Context, args *admin.CancelBackupRestoreJobApiParams) admin.CancelBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CancelBackupRestoreJobWithParams")
	}

	var r0 admin.CancelBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CancelBackupRestoreJobApiParams) admin.CancelBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CancelBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CancelBackupRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBackupRestoreJobWithParams'
type CloudBackupsApi_CancelBackupRestoreJobWithParams_Call struct {
	*mock.Call
}

// CancelBackupRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CancelBackupRestoreJobApiParams
func (_e *CloudBackupsApi_Expecter) CancelBackupRestoreJobWithParams(ctx any, args any) *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call {
	return &CloudBackupsApi_CancelBackupRestoreJobWithParams_Call{Call: _e.mock.On("CancelBackupRestoreJobWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.CancelBackupRestoreJobApiParams)) *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CancelBackupRestoreJobApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call) Return(_a0 admin.CancelBackupRestoreJobApiRequest) *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.CancelBackupRestoreJobApiParams) admin.CancelBackupRestoreJobApiRequest) *CloudBackupsApi_CancelBackupRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupExport provides a mock function with given fields: ctx, groupId, clusterName, diskBackupExportJobRequest
func (_m *CloudBackupsApi) CreateBackupExport(ctx context.Context, groupId string, clusterName string, diskBackupExportJobRequest *admin.DiskBackupExportJobRequest) admin.CreateBackupExportApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, diskBackupExportJobRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupExport")
	}

	var r0 admin.CreateBackupExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DiskBackupExportJobRequest) admin.CreateBackupExportApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, diskBackupExportJobRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateBackupExportApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateBackupExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupExport'
type CloudBackupsApi_CreateBackupExport_Call struct {
	*mock.Call
}

// CreateBackupExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - diskBackupExportJobRequest *admin.DiskBackupExportJobRequest
func (_e *CloudBackupsApi_Expecter) CreateBackupExport(ctx any, groupId any, clusterName any, diskBackupExportJobRequest any) *CloudBackupsApi_CreateBackupExport_Call {
	return &CloudBackupsApi_CreateBackupExport_Call{Call: _e.mock.On("CreateBackupExport", ctx, groupId, clusterName, diskBackupExportJobRequest)}
}

func (_c *CloudBackupsApi_CreateBackupExport_Call) Run(run func(ctx context.Context, groupId string, clusterName string, diskBackupExportJobRequest *admin.DiskBackupExportJobRequest)) *CloudBackupsApi_CreateBackupExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DiskBackupExportJobRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExport_Call) Return(_a0 admin.CreateBackupExportApiRequest) *CloudBackupsApi_CreateBackupExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExport_Call) RunAndReturn(run func(context.Context, string, string, *admin.DiskBackupExportJobRequest) admin.CreateBackupExportApiRequest) *CloudBackupsApi_CreateBackupExport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupExportExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) CreateBackupExportExecute(r admin.CreateBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupExportExecute")
	}

	var r0 *admin.DiskBackupExportJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateBackupExportApiRequest) *admin.DiskBackupExportJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupExportJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateBackupExportApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateBackupExportApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_CreateBackupExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupExportExecute'
type CloudBackupsApi_CreateBackupExportExecute_Call struct {
	*mock.Call
}

// CreateBackupExportExecute is a helper method to define mock.On call
//   - r admin.CreateBackupExportApiRequest
func (_e *CloudBackupsApi_Expecter) CreateBackupExportExecute(r any) *CloudBackupsApi_CreateBackupExportExecute_Call {
	return &CloudBackupsApi_CreateBackupExportExecute_Call{Call: _e.mock.On("CreateBackupExportExecute", r)}
}

func (_c *CloudBackupsApi_CreateBackupExportExecute_Call) Run(run func(r admin.CreateBackupExportApiRequest)) *CloudBackupsApi_CreateBackupExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateBackupExportApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExportExecute_Call) Return(_a0 *admin.DiskBackupExportJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_CreateBackupExportExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExportExecute_Call) RunAndReturn(run func(admin.CreateBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error)) *CloudBackupsApi_CreateBackupExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupExportWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) CreateBackupExportWithParams(ctx context.Context, args *admin.CreateBackupExportApiParams) admin.CreateBackupExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupExportWithParams")
	}

	var r0 admin.CreateBackupExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateBackupExportApiParams) admin.CreateBackupExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateBackupExportApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateBackupExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupExportWithParams'
type CloudBackupsApi_CreateBackupExportWithParams_Call struct {
	*mock.Call
}

// CreateBackupExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateBackupExportApiParams
func (_e *CloudBackupsApi_Expecter) CreateBackupExportWithParams(ctx any, args any) *CloudBackupsApi_CreateBackupExportWithParams_Call {
	return &CloudBackupsApi_CreateBackupExportWithParams_Call{Call: _e.mock.On("CreateBackupExportWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_CreateBackupExportWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateBackupExportApiParams)) *CloudBackupsApi_CreateBackupExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateBackupExportApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExportWithParams_Call) Return(_a0 admin.CreateBackupExportApiRequest) *CloudBackupsApi_CreateBackupExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateBackupExportApiParams) admin.CreateBackupExportApiRequest) *CloudBackupsApi_CreateBackupExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, diskBackupSnapshotRestoreJob
func (_m *CloudBackupsApi) CreateBackupRestoreJob(ctx context.Context, groupId string, clusterName string, diskBackupSnapshotRestoreJob *admin.DiskBackupSnapshotRestoreJob) admin.CreateBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, diskBackupSnapshotRestoreJob)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupRestoreJob")
	}

	var r0 admin.CreateBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DiskBackupSnapshotRestoreJob) admin.CreateBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, diskBackupSnapshotRestoreJob)
	} else {
		r0 = ret.Get(0).(admin.CreateBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateBackupRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupRestoreJob'
type CloudBackupsApi_CreateBackupRestoreJob_Call struct {
	*mock.Call
}

// CreateBackupRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - diskBackupSnapshotRestoreJob *admin.DiskBackupSnapshotRestoreJob
func (_e *CloudBackupsApi_Expecter) CreateBackupRestoreJob(ctx any, groupId any, clusterName any, diskBackupSnapshotRestoreJob any) *CloudBackupsApi_CreateBackupRestoreJob_Call {
	return &CloudBackupsApi_CreateBackupRestoreJob_Call{Call: _e.mock.On("CreateBackupRestoreJob", ctx, groupId, clusterName, diskBackupSnapshotRestoreJob)}
}

func (_c *CloudBackupsApi_CreateBackupRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, diskBackupSnapshotRestoreJob *admin.DiskBackupSnapshotRestoreJob)) *CloudBackupsApi_CreateBackupRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DiskBackupSnapshotRestoreJob))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJob_Call) Return(_a0 admin.CreateBackupRestoreJobApiRequest) *CloudBackupsApi_CreateBackupRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, *admin.DiskBackupSnapshotRestoreJob) admin.CreateBackupRestoreJobApiRequest) *CloudBackupsApi_CreateBackupRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupRestoreJobExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) CreateBackupRestoreJobExecute(r admin.CreateBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupRestoreJobExecute")
	}

	var r0 *admin.DiskBackupSnapshotRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateBackupRestoreJobApiRequest) *admin.DiskBackupSnapshotRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateBackupRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateBackupRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_CreateBackupRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupRestoreJobExecute'
type CloudBackupsApi_CreateBackupRestoreJobExecute_Call struct {
	*mock.Call
}

// CreateBackupRestoreJobExecute is a helper method to define mock.On call
//   - r admin.CreateBackupRestoreJobApiRequest
func (_e *CloudBackupsApi_Expecter) CreateBackupRestoreJobExecute(r any) *CloudBackupsApi_CreateBackupRestoreJobExecute_Call {
	return &CloudBackupsApi_CreateBackupRestoreJobExecute_Call{Call: _e.mock.On("CreateBackupRestoreJobExecute", r)}
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobExecute_Call) Run(run func(r admin.CreateBackupRestoreJobApiRequest)) *CloudBackupsApi_CreateBackupRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateBackupRestoreJobApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobExecute_Call) Return(_a0 *admin.DiskBackupSnapshotRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_CreateBackupRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobExecute_Call) RunAndReturn(run func(admin.CreateBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error)) *CloudBackupsApi_CreateBackupRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) CreateBackupRestoreJobWithParams(ctx context.Context, args *admin.CreateBackupRestoreJobApiParams) admin.CreateBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupRestoreJobWithParams")
	}

	var r0 admin.CreateBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateBackupRestoreJobApiParams) admin.CreateBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateBackupRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupRestoreJobWithParams'
type CloudBackupsApi_CreateBackupRestoreJobWithParams_Call struct {
	*mock.Call
}

// CreateBackupRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateBackupRestoreJobApiParams
func (_e *CloudBackupsApi_Expecter) CreateBackupRestoreJobWithParams(ctx any, args any) *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call {
	return &CloudBackupsApi_CreateBackupRestoreJobWithParams_Call{Call: _e.mock.On("CreateBackupRestoreJobWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateBackupRestoreJobApiParams)) *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateBackupRestoreJobApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call) Return(_a0 admin.CreateBackupRestoreJobApiRequest) *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateBackupRestoreJobApiParams) admin.CreateBackupRestoreJobApiRequest) *CloudBackupsApi_CreateBackupRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportBucket provides a mock function with given fields: ctx, groupId, diskBackupSnapshotExportBucketRequest
func (_m *CloudBackupsApi) CreateExportBucket(ctx context.Context, groupId string, diskBackupSnapshotExportBucketRequest *admin.DiskBackupSnapshotExportBucketRequest) admin.CreateExportBucketApiRequest {
	ret := _m.Called(ctx, groupId, diskBackupSnapshotExportBucketRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateExportBucket")
	}

	var r0 admin.CreateExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.DiskBackupSnapshotExportBucketRequest) admin.CreateExportBucketApiRequest); ok {
		r0 = rf(ctx, groupId, diskBackupSnapshotExportBucketRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateExportBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportBucket'
type CloudBackupsApi_CreateExportBucket_Call struct {
	*mock.Call
}

// CreateExportBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - diskBackupSnapshotExportBucketRequest *admin.DiskBackupSnapshotExportBucketRequest
func (_e *CloudBackupsApi_Expecter) CreateExportBucket(ctx any, groupId any, diskBackupSnapshotExportBucketRequest any) *CloudBackupsApi_CreateExportBucket_Call {
	return &CloudBackupsApi_CreateExportBucket_Call{Call: _e.mock.On("CreateExportBucket", ctx, groupId, diskBackupSnapshotExportBucketRequest)}
}

func (_c *CloudBackupsApi_CreateExportBucket_Call) Run(run func(ctx context.Context, groupId string, diskBackupSnapshotExportBucketRequest *admin.DiskBackupSnapshotExportBucketRequest)) *CloudBackupsApi_CreateExportBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.DiskBackupSnapshotExportBucketRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucket_Call) Return(_a0 admin.CreateExportBucketApiRequest) *CloudBackupsApi_CreateExportBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucket_Call) RunAndReturn(run func(context.Context, string, *admin.DiskBackupSnapshotExportBucketRequest) admin.CreateExportBucketApiRequest) *CloudBackupsApi_CreateExportBucket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportBucketExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) CreateExportBucketExecute(r admin.CreateExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateExportBucketExecute")
	}

	var r0 *admin.DiskBackupSnapshotExportBucketResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateExportBucketApiRequest) *admin.DiskBackupSnapshotExportBucketResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotExportBucketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateExportBucketApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateExportBucketApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_CreateExportBucketExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportBucketExecute'
type CloudBackupsApi_CreateExportBucketExecute_Call struct {
	*mock.Call
}

// CreateExportBucketExecute is a helper method to define mock.On call
//   - r admin.CreateExportBucketApiRequest
func (_e *CloudBackupsApi_Expecter) CreateExportBucketExecute(r any) *CloudBackupsApi_CreateExportBucketExecute_Call {
	return &CloudBackupsApi_CreateExportBucketExecute_Call{Call: _e.mock.On("CreateExportBucketExecute", r)}
}

func (_c *CloudBackupsApi_CreateExportBucketExecute_Call) Run(run func(r admin.CreateExportBucketApiRequest)) *CloudBackupsApi_CreateExportBucketExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateExportBucketApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucketExecute_Call) Return(_a0 *admin.DiskBackupSnapshotExportBucketResponse, _a1 *http.Response, _a2 error) *CloudBackupsApi_CreateExportBucketExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucketExecute_Call) RunAndReturn(run func(admin.CreateExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error)) *CloudBackupsApi_CreateExportBucketExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportBucketWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) CreateExportBucketWithParams(ctx context.Context, args *admin.CreateExportBucketApiParams) admin.CreateExportBucketApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateExportBucketWithParams")
	}

	var r0 admin.CreateExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateExportBucketApiParams) admin.CreateExportBucketApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateExportBucketWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportBucketWithParams'
type CloudBackupsApi_CreateExportBucketWithParams_Call struct {
	*mock.Call
}

// CreateExportBucketWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateExportBucketApiParams
func (_e *CloudBackupsApi_Expecter) CreateExportBucketWithParams(ctx any, args any) *CloudBackupsApi_CreateExportBucketWithParams_Call {
	return &CloudBackupsApi_CreateExportBucketWithParams_Call{Call: _e.mock.On("CreateExportBucketWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_CreateExportBucketWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateExportBucketApiParams)) *CloudBackupsApi_CreateExportBucketWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateExportBucketApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucketWithParams_Call) Return(_a0 admin.CreateExportBucketApiRequest) *CloudBackupsApi_CreateExportBucketWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateExportBucketWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateExportBucketApiParams) admin.CreateExportBucketApiRequest) *CloudBackupsApi_CreateExportBucketWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServerlessRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, serverlessBackupRestoreJob
func (_m *CloudBackupsApi) CreateServerlessRestoreJob(ctx context.Context, groupId string, clusterName string, serverlessBackupRestoreJob *admin.ServerlessBackupRestoreJob) admin.CreateServerlessRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, serverlessBackupRestoreJob)

	if len(ret) == 0 {
		panic("no return value specified for CreateServerlessRestoreJob")
	}

	var r0 admin.CreateServerlessRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ServerlessBackupRestoreJob) admin.CreateServerlessRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, serverlessBackupRestoreJob)
	} else {
		r0 = ret.Get(0).(admin.CreateServerlessRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateServerlessRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServerlessRestoreJob'
type CloudBackupsApi_CreateServerlessRestoreJob_Call struct {
	*mock.Call
}

// CreateServerlessRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - serverlessBackupRestoreJob *admin.ServerlessBackupRestoreJob
func (_e *CloudBackupsApi_Expecter) CreateServerlessRestoreJob(ctx any, groupId any, clusterName any, serverlessBackupRestoreJob any) *CloudBackupsApi_CreateServerlessRestoreJob_Call {
	return &CloudBackupsApi_CreateServerlessRestoreJob_Call{Call: _e.mock.On("CreateServerlessRestoreJob", ctx, groupId, clusterName, serverlessBackupRestoreJob)}
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, serverlessBackupRestoreJob *admin.ServerlessBackupRestoreJob)) *CloudBackupsApi_CreateServerlessRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ServerlessBackupRestoreJob))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJob_Call) Return(_a0 admin.CreateServerlessRestoreJobApiRequest) *CloudBackupsApi_CreateServerlessRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, *admin.ServerlessBackupRestoreJob) admin.CreateServerlessRestoreJobApiRequest) *CloudBackupsApi_CreateServerlessRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServerlessRestoreJobExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) CreateServerlessRestoreJobExecute(r admin.CreateServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServerlessRestoreJobExecute")
	}

	var r0 *admin.ServerlessBackupRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateServerlessRestoreJobApiRequest) *admin.ServerlessBackupRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServerlessBackupRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateServerlessRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateServerlessRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_CreateServerlessRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServerlessRestoreJobExecute'
type CloudBackupsApi_CreateServerlessRestoreJobExecute_Call struct {
	*mock.Call
}

// CreateServerlessRestoreJobExecute is a helper method to define mock.On call
//   - r admin.CreateServerlessRestoreJobApiRequest
func (_e *CloudBackupsApi_Expecter) CreateServerlessRestoreJobExecute(r any) *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call {
	return &CloudBackupsApi_CreateServerlessRestoreJobExecute_Call{Call: _e.mock.On("CreateServerlessRestoreJobExecute", r)}
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call) Run(run func(r admin.CreateServerlessRestoreJobApiRequest)) *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateServerlessRestoreJobApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call) Return(_a0 *admin.ServerlessBackupRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call) RunAndReturn(run func(admin.CreateServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error)) *CloudBackupsApi_CreateServerlessRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServerlessRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) CreateServerlessRestoreJobWithParams(ctx context.Context, args *admin.CreateServerlessRestoreJobApiParams) admin.CreateServerlessRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateServerlessRestoreJobWithParams")
	}

	var r0 admin.CreateServerlessRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServerlessRestoreJobApiParams) admin.CreateServerlessRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateServerlessRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServerlessRestoreJobWithParams'
type CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call struct {
	*mock.Call
}

// CreateServerlessRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateServerlessRestoreJobApiParams
func (_e *CloudBackupsApi_Expecter) CreateServerlessRestoreJobWithParams(ctx any, args any) *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call {
	return &CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call{Call: _e.mock.On("CreateServerlessRestoreJobWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateServerlessRestoreJobApiParams)) *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateServerlessRestoreJobApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call) Return(_a0 admin.CreateServerlessRestoreJobApiRequest) *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateServerlessRestoreJobApiParams) admin.CreateServerlessRestoreJobApiRequest) *CloudBackupsApi_CreateServerlessRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackupShardedCluster provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *CloudBackupsApi) DeleteBackupShardedCluster(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.DeleteBackupShardedClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupShardedCluster")
	}

	var r0 admin.DeleteBackupShardedClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteBackupShardedClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.DeleteBackupShardedClusterApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteBackupShardedCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackupShardedCluster'
type CloudBackupsApi_DeleteBackupShardedCluster_Call struct {
	*mock.Call
}

// DeleteBackupShardedCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *CloudBackupsApi_Expecter) DeleteBackupShardedCluster(ctx any, groupId any, clusterName any, snapshotId any) *CloudBackupsApi_DeleteBackupShardedCluster_Call {
	return &CloudBackupsApi_DeleteBackupShardedCluster_Call{Call: _e.mock.On("DeleteBackupShardedCluster", ctx, groupId, clusterName, snapshotId)}
}

func (_c *CloudBackupsApi_DeleteBackupShardedCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *CloudBackupsApi_DeleteBackupShardedCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedCluster_Call) Return(_a0 admin.DeleteBackupShardedClusterApiRequest) *CloudBackupsApi_DeleteBackupShardedCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedCluster_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteBackupShardedClusterApiRequest) *CloudBackupsApi_DeleteBackupShardedCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackupShardedClusterExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) DeleteBackupShardedClusterExecute(r admin.DeleteBackupShardedClusterApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupShardedClusterExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteBackupShardedClusterApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteBackupShardedClusterApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteBackupShardedClusterApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudBackupsApi_DeleteBackupShardedClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackupShardedClusterExecute'
type CloudBackupsApi_DeleteBackupShardedClusterExecute_Call struct {
	*mock.Call
}

// DeleteBackupShardedClusterExecute is a helper method to define mock.On call
//   - r admin.DeleteBackupShardedClusterApiRequest
func (_e *CloudBackupsApi_Expecter) DeleteBackupShardedClusterExecute(r any) *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call {
	return &CloudBackupsApi_DeleteBackupShardedClusterExecute_Call{Call: _e.mock.On("DeleteBackupShardedClusterExecute", r)}
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call) Run(run func(r admin.DeleteBackupShardedClusterApiRequest)) *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteBackupShardedClusterApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call) RunAndReturn(run func(admin.DeleteBackupShardedClusterApiRequest) (*http.Response, error)) *CloudBackupsApi_DeleteBackupShardedClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackupShardedClusterWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) DeleteBackupShardedClusterWithParams(ctx context.Context, args *admin.DeleteBackupShardedClusterApiParams) admin.DeleteBackupShardedClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupShardedClusterWithParams")
	}

	var r0 admin.DeleteBackupShardedClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteBackupShardedClusterApiParams) admin.DeleteBackupShardedClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteBackupShardedClusterApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackupShardedClusterWithParams'
type CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call struct {
	*mock.Call
}

// DeleteBackupShardedClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteBackupShardedClusterApiParams
func (_e *CloudBackupsApi_Expecter) DeleteBackupShardedClusterWithParams(ctx any, args any) *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call {
	return &CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call{Call: _e.mock.On("DeleteBackupShardedClusterWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteBackupShardedClusterApiParams)) *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteBackupShardedClusterApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call) Return(_a0 admin.DeleteBackupShardedClusterApiRequest) *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteBackupShardedClusterApiParams) admin.DeleteBackupShardedClusterApiRequest) *CloudBackupsApi_DeleteBackupShardedClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupSchedule provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) DeleteClusterBackupSchedule(ctx context.Context, groupId string, clusterName string) admin.DeleteClusterBackupScheduleApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupSchedule")
	}

	var r0 admin.DeleteClusterBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteClusterBackupScheduleApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteClusterBackupSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupSchedule'
type CloudBackupsApi_DeleteClusterBackupSchedule_Call struct {
	*mock.Call
}

// DeleteClusterBackupSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupSchedule(ctx any, groupId any, clusterName any) *CloudBackupsApi_DeleteClusterBackupSchedule_Call {
	return &CloudBackupsApi_DeleteClusterBackupSchedule_Call{Call: _e.mock.On("DeleteClusterBackupSchedule", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupSchedule_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_DeleteClusterBackupSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSchedule_Call) Return(_a0 admin.DeleteClusterBackupScheduleApiRequest) *CloudBackupsApi_DeleteClusterBackupSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSchedule_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteClusterBackupScheduleApiRequest) *CloudBackupsApi_DeleteClusterBackupSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupScheduleExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) DeleteClusterBackupScheduleExecute(r admin.DeleteClusterBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupScheduleExecute")
	}

	var r0 *admin.DiskBackupSnapshotSchedule20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterBackupScheduleApiRequest) *admin.DiskBackupSnapshotSchedule20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotSchedule20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterBackupScheduleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteClusterBackupScheduleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupScheduleExecute'
type CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call struct {
	*mock.Call
}

// DeleteClusterBackupScheduleExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterBackupScheduleApiRequest
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupScheduleExecute(r any) *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call {
	return &CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call{Call: _e.mock.On("DeleteClusterBackupScheduleExecute", r)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call) Run(run func(r admin.DeleteClusterBackupScheduleApiRequest)) *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterBackupScheduleApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call) Return(_a0 *admin.DiskBackupSnapshotSchedule20240805, _a1 *http.Response, _a2 error) *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call) RunAndReturn(run func(admin.DeleteClusterBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)) *CloudBackupsApi_DeleteClusterBackupScheduleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupScheduleWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) DeleteClusterBackupScheduleWithParams(ctx context.Context, args *admin.DeleteClusterBackupScheduleApiParams) admin.DeleteClusterBackupScheduleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupScheduleWithParams")
	}

	var r0 admin.DeleteClusterBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterBackupScheduleApiParams) admin.DeleteClusterBackupScheduleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupScheduleWithParams'
type CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call struct {
	*mock.Call
}

// DeleteClusterBackupScheduleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterBackupScheduleApiParams
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupScheduleWithParams(ctx any, args any) *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call {
	return &CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call{Call: _e.mock.On("DeleteClusterBackupScheduleWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterBackupScheduleApiParams)) *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterBackupScheduleApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call) Return(_a0 admin.DeleteClusterBackupScheduleApiRequest) *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterBackupScheduleApiParams) admin.DeleteClusterBackupScheduleApiRequest) *CloudBackupsApi_DeleteClusterBackupScheduleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *CloudBackupsApi) DeleteClusterBackupSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.DeleteClusterBackupSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupSnapshot")
	}

	var r0 admin.DeleteClusterBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteClusterBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteClusterBackupSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupSnapshot'
type CloudBackupsApi_DeleteClusterBackupSnapshot_Call struct {
	*mock.Call
}

// DeleteClusterBackupSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *CloudBackupsApi_DeleteClusterBackupSnapshot_Call {
	return &CloudBackupsApi_DeleteClusterBackupSnapshot_Call{Call: _e.mock.On("DeleteClusterBackupSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *CloudBackupsApi_DeleteClusterBackupSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshot_Call) Return(_a0 admin.DeleteClusterBackupSnapshotApiRequest) *CloudBackupsApi_DeleteClusterBackupSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteClusterBackupSnapshotApiRequest) *CloudBackupsApi_DeleteClusterBackupSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupSnapshotExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) DeleteClusterBackupSnapshotExecute(r admin.DeleteClusterBackupSnapshotApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupSnapshotExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterBackupSnapshotApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterBackupSnapshotApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterBackupSnapshotApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupSnapshotExecute'
type CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call struct {
	*mock.Call
}

// DeleteClusterBackupSnapshotExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterBackupSnapshotApiRequest
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupSnapshotExecute(r any) *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call {
	return &CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call{Call: _e.mock.On("DeleteClusterBackupSnapshotExecute", r)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call) Run(run func(r admin.DeleteClusterBackupSnapshotApiRequest)) *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterBackupSnapshotApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call) RunAndReturn(run func(admin.DeleteClusterBackupSnapshotApiRequest) (*http.Response, error)) *CloudBackupsApi_DeleteClusterBackupSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterBackupSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) DeleteClusterBackupSnapshotWithParams(ctx context.Context, args *admin.DeleteClusterBackupSnapshotApiParams) admin.DeleteClusterBackupSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterBackupSnapshotWithParams")
	}

	var r0 admin.DeleteClusterBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterBackupSnapshotApiParams) admin.DeleteClusterBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterBackupSnapshotWithParams'
type CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call struct {
	*mock.Call
}

// DeleteClusterBackupSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterBackupSnapshotApiParams
func (_e *CloudBackupsApi_Expecter) DeleteClusterBackupSnapshotWithParams(ctx any, args any) *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call {
	return &CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call{Call: _e.mock.On("DeleteClusterBackupSnapshotWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterBackupSnapshotApiParams)) *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterBackupSnapshotApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call) Return(_a0 admin.DeleteClusterBackupSnapshotApiRequest) *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterBackupSnapshotApiParams) admin.DeleteClusterBackupSnapshotApiRequest) *CloudBackupsApi_DeleteClusterBackupSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExportBucket provides a mock function with given fields: ctx, groupId, exportBucketId
func (_m *CloudBackupsApi) DeleteExportBucket(ctx context.Context, groupId string, exportBucketId string) admin.DeleteExportBucketApiRequest {
	ret := _m.Called(ctx, groupId, exportBucketId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExportBucket")
	}

	var r0 admin.DeleteExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteExportBucketApiRequest); ok {
		r0 = rf(ctx, groupId, exportBucketId)
	} else {
		r0 = ret.Get(0).(admin.DeleteExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteExportBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExportBucket'
type CloudBackupsApi_DeleteExportBucket_Call struct {
	*mock.Call
}

// DeleteExportBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - exportBucketId string
func (_e *CloudBackupsApi_Expecter) DeleteExportBucket(ctx any, groupId any, exportBucketId any) *CloudBackupsApi_DeleteExportBucket_Call {
	return &CloudBackupsApi_DeleteExportBucket_Call{Call: _e.mock.On("DeleteExportBucket", ctx, groupId, exportBucketId)}
}

func (_c *CloudBackupsApi_DeleteExportBucket_Call) Run(run func(ctx context.Context, groupId string, exportBucketId string)) *CloudBackupsApi_DeleteExportBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucket_Call) Return(_a0 admin.DeleteExportBucketApiRequest) *CloudBackupsApi_DeleteExportBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucket_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteExportBucketApiRequest) *CloudBackupsApi_DeleteExportBucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExportBucketExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) DeleteExportBucketExecute(r admin.DeleteExportBucketApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExportBucketExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteExportBucketApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteExportBucketApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteExportBucketApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudBackupsApi_DeleteExportBucketExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExportBucketExecute'
type CloudBackupsApi_DeleteExportBucketExecute_Call struct {
	*mock.Call
}

// DeleteExportBucketExecute is a helper method to define mock.On call
//   - r admin.DeleteExportBucketApiRequest
func (_e *CloudBackupsApi_Expecter) DeleteExportBucketExecute(r any) *CloudBackupsApi_DeleteExportBucketExecute_Call {
	return &CloudBackupsApi_DeleteExportBucketExecute_Call{Call: _e.mock.On("DeleteExportBucketExecute", r)}
}

func (_c *CloudBackupsApi_DeleteExportBucketExecute_Call) Run(run func(r admin.DeleteExportBucketApiRequest)) *CloudBackupsApi_DeleteExportBucketExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteExportBucketApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucketExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudBackupsApi_DeleteExportBucketExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucketExecute_Call) RunAndReturn(run func(admin.DeleteExportBucketApiRequest) (*http.Response, error)) *CloudBackupsApi_DeleteExportBucketExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExportBucketWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) DeleteExportBucketWithParams(ctx context.Context, args *admin.DeleteExportBucketApiParams) admin.DeleteExportBucketApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExportBucketWithParams")
	}

	var r0 admin.DeleteExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteExportBucketApiParams) admin.DeleteExportBucketApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_DeleteExportBucketWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExportBucketWithParams'
type CloudBackupsApi_DeleteExportBucketWithParams_Call struct {
	*mock.Call
}

// DeleteExportBucketWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteExportBucketApiParams
func (_e *CloudBackupsApi_Expecter) DeleteExportBucketWithParams(ctx any, args any) *CloudBackupsApi_DeleteExportBucketWithParams_Call {
	return &CloudBackupsApi_DeleteExportBucketWithParams_Call{Call: _e.mock.On("DeleteExportBucketWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_DeleteExportBucketWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteExportBucketApiParams)) *CloudBackupsApi_DeleteExportBucketWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteExportBucketApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucketWithParams_Call) Return(_a0 admin.DeleteExportBucketApiRequest) *CloudBackupsApi_DeleteExportBucketWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DeleteExportBucketWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteExportBucketApiParams) admin.DeleteExportBucketApiRequest) *CloudBackupsApi_DeleteExportBucketWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCompliancePolicy provides a mock function with given fields: ctx, groupId
func (_m *CloudBackupsApi) DisableCompliancePolicy(ctx context.Context, groupId string) admin.DisableCompliancePolicyApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DisableCompliancePolicy")
	}

	var r0 admin.DisableCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DisableCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DisableCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_DisableCompliancePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCompliancePolicy'
type CloudBackupsApi_DisableCompliancePolicy_Call struct {
	*mock.Call
}

// DisableCompliancePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CloudBackupsApi_Expecter) DisableCompliancePolicy(ctx any, groupId any) *CloudBackupsApi_DisableCompliancePolicy_Call {
	return &CloudBackupsApi_DisableCompliancePolicy_Call{Call: _e.mock.On("DisableCompliancePolicy", ctx, groupId)}
}

func (_c *CloudBackupsApi_DisableCompliancePolicy_Call) Run(run func(ctx context.Context, groupId string)) *CloudBackupsApi_DisableCompliancePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicy_Call) Return(_a0 admin.DisableCompliancePolicyApiRequest) *CloudBackupsApi_DisableCompliancePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicy_Call) RunAndReturn(run func(context.Context, string) admin.DisableCompliancePolicyApiRequest) *CloudBackupsApi_DisableCompliancePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCompliancePolicyExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) DisableCompliancePolicyExecute(r admin.DisableCompliancePolicyApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DisableCompliancePolicyExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DisableCompliancePolicyApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DisableCompliancePolicyApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DisableCompliancePolicyApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudBackupsApi_DisableCompliancePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCompliancePolicyExecute'
type CloudBackupsApi_DisableCompliancePolicyExecute_Call struct {
	*mock.Call
}

// DisableCompliancePolicyExecute is a helper method to define mock.On call
//   - r admin.DisableCompliancePolicyApiRequest
func (_e *CloudBackupsApi_Expecter) DisableCompliancePolicyExecute(r any) *CloudBackupsApi_DisableCompliancePolicyExecute_Call {
	return &CloudBackupsApi_DisableCompliancePolicyExecute_Call{Call: _e.mock.On("DisableCompliancePolicyExecute", r)}
}

func (_c *CloudBackupsApi_DisableCompliancePolicyExecute_Call) Run(run func(r admin.DisableCompliancePolicyApiRequest)) *CloudBackupsApi_DisableCompliancePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DisableCompliancePolicyApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicyExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudBackupsApi_DisableCompliancePolicyExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicyExecute_Call) RunAndReturn(run func(admin.DisableCompliancePolicyApiRequest) (*http.Response, error)) *CloudBackupsApi_DisableCompliancePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCompliancePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) DisableCompliancePolicyWithParams(ctx context.Context, args *admin.DisableCompliancePolicyApiParams) admin.DisableCompliancePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DisableCompliancePolicyWithParams")
	}

	var r0 admin.DisableCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DisableCompliancePolicyApiParams) admin.DisableCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DisableCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_DisableCompliancePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCompliancePolicyWithParams'
type CloudBackupsApi_DisableCompliancePolicyWithParams_Call struct {
	*mock.Call
}

// DisableCompliancePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DisableCompliancePolicyApiParams
func (_e *CloudBackupsApi_Expecter) DisableCompliancePolicyWithParams(ctx any, args any) *CloudBackupsApi_DisableCompliancePolicyWithParams_Call {
	return &CloudBackupsApi_DisableCompliancePolicyWithParams_Call{Call: _e.mock.On("DisableCompliancePolicyWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_DisableCompliancePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.DisableCompliancePolicyApiParams)) *CloudBackupsApi_DisableCompliancePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DisableCompliancePolicyApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicyWithParams_Call) Return(_a0 admin.DisableCompliancePolicyApiRequest) *CloudBackupsApi_DisableCompliancePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_DisableCompliancePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.DisableCompliancePolicyApiParams) admin.DisableCompliancePolicyApiRequest) *CloudBackupsApi_DisableCompliancePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupExport provides a mock function with given fields: ctx, groupId, clusterName, exportId
func (_m *CloudBackupsApi) GetBackupExport(ctx context.Context, groupId string, clusterName string, exportId string) admin.GetBackupExportApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, exportId)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupExport")
	}

	var r0 admin.GetBackupExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetBackupExportApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, exportId)
	} else {
		r0 = ret.Get(0).(admin.GetBackupExportApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupExport'
type CloudBackupsApi_GetBackupExport_Call struct {
	*mock.Call
}

// GetBackupExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - exportId string
func (_e *CloudBackupsApi_Expecter) GetBackupExport(ctx any, groupId any, clusterName any, exportId any) *CloudBackupsApi_GetBackupExport_Call {
	return &CloudBackupsApi_GetBackupExport_Call{Call: _e.mock.On("GetBackupExport", ctx, groupId, clusterName, exportId)}
}

func (_c *CloudBackupsApi_GetBackupExport_Call) Run(run func(ctx context.Context, groupId string, clusterName string, exportId string)) *CloudBackupsApi_GetBackupExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupExport_Call) Return(_a0 admin.GetBackupExportApiRequest) *CloudBackupsApi_GetBackupExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupExport_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetBackupExportApiRequest) *CloudBackupsApi_GetBackupExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupExportExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetBackupExportExecute(r admin.GetBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupExportExecute")
	}

	var r0 *admin.DiskBackupExportJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetBackupExportApiRequest) *admin.DiskBackupExportJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupExportJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetBackupExportApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetBackupExportApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetBackupExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupExportExecute'
type CloudBackupsApi_GetBackupExportExecute_Call struct {
	*mock.Call
}

// GetBackupExportExecute is a helper method to define mock.On call
//   - r admin.GetBackupExportApiRequest
func (_e *CloudBackupsApi_Expecter) GetBackupExportExecute(r any) *CloudBackupsApi_GetBackupExportExecute_Call {
	return &CloudBackupsApi_GetBackupExportExecute_Call{Call: _e.mock.On("GetBackupExportExecute", r)}
}

func (_c *CloudBackupsApi_GetBackupExportExecute_Call) Run(run func(r admin.GetBackupExportApiRequest)) *CloudBackupsApi_GetBackupExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetBackupExportApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupExportExecute_Call) Return(_a0 *admin.DiskBackupExportJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetBackupExportExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetBackupExportExecute_Call) RunAndReturn(run func(admin.GetBackupExportApiRequest) (*admin.DiskBackupExportJob, *http.Response, error)) *CloudBackupsApi_GetBackupExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupExportWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetBackupExportWithParams(ctx context.Context, args *admin.GetBackupExportApiParams) admin.GetBackupExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupExportWithParams")
	}

	var r0 admin.GetBackupExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetBackupExportApiParams) admin.GetBackupExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetBackupExportApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupExportWithParams'
type CloudBackupsApi_GetBackupExportWithParams_Call struct {
	*mock.Call
}

// GetBackupExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetBackupExportApiParams
func (_e *CloudBackupsApi_Expecter) GetBackupExportWithParams(ctx any, args any) *CloudBackupsApi_GetBackupExportWithParams_Call {
	return &CloudBackupsApi_GetBackupExportWithParams_Call{Call: _e.mock.On("GetBackupExportWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetBackupExportWithParams_Call) Run(run func(ctx context.Context, args *admin.GetBackupExportApiParams)) *CloudBackupsApi_GetBackupExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetBackupExportApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupExportWithParams_Call) Return(_a0 admin.GetBackupExportApiRequest) *CloudBackupsApi_GetBackupExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetBackupExportApiParams) admin.GetBackupExportApiRequest) *CloudBackupsApi_GetBackupExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, restoreJobId
func (_m *CloudBackupsApi) GetBackupRestoreJob(ctx context.Context, groupId string, clusterName string, restoreJobId string) admin.GetBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, restoreJobId)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupRestoreJob")
	}

	var r0 admin.GetBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, restoreJobId)
	} else {
		r0 = ret.Get(0).(admin.GetBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupRestoreJob'
type CloudBackupsApi_GetBackupRestoreJob_Call struct {
	*mock.Call
}

// GetBackupRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - restoreJobId string
func (_e *CloudBackupsApi_Expecter) GetBackupRestoreJob(ctx any, groupId any, clusterName any, restoreJobId any) *CloudBackupsApi_GetBackupRestoreJob_Call {
	return &CloudBackupsApi_GetBackupRestoreJob_Call{Call: _e.mock.On("GetBackupRestoreJob", ctx, groupId, clusterName, restoreJobId)}
}

func (_c *CloudBackupsApi_GetBackupRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, restoreJobId string)) *CloudBackupsApi_GetBackupRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJob_Call) Return(_a0 admin.GetBackupRestoreJobApiRequest) *CloudBackupsApi_GetBackupRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetBackupRestoreJobApiRequest) *CloudBackupsApi_GetBackupRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupRestoreJobExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetBackupRestoreJobExecute(r admin.GetBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupRestoreJobExecute")
	}

	var r0 *admin.DiskBackupSnapshotRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetBackupRestoreJobApiRequest) *admin.DiskBackupSnapshotRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetBackupRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetBackupRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetBackupRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupRestoreJobExecute'
type CloudBackupsApi_GetBackupRestoreJobExecute_Call struct {
	*mock.Call
}

// GetBackupRestoreJobExecute is a helper method to define mock.On call
//   - r admin.GetBackupRestoreJobApiRequest
func (_e *CloudBackupsApi_Expecter) GetBackupRestoreJobExecute(r any) *CloudBackupsApi_GetBackupRestoreJobExecute_Call {
	return &CloudBackupsApi_GetBackupRestoreJobExecute_Call{Call: _e.mock.On("GetBackupRestoreJobExecute", r)}
}

func (_c *CloudBackupsApi_GetBackupRestoreJobExecute_Call) Run(run func(r admin.GetBackupRestoreJobApiRequest)) *CloudBackupsApi_GetBackupRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetBackupRestoreJobApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJobExecute_Call) Return(_a0 *admin.DiskBackupSnapshotRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetBackupRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJobExecute_Call) RunAndReturn(run func(admin.GetBackupRestoreJobApiRequest) (*admin.DiskBackupSnapshotRestoreJob, *http.Response, error)) *CloudBackupsApi_GetBackupRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetBackupRestoreJobWithParams(ctx context.Context, args *admin.GetBackupRestoreJobApiParams) admin.GetBackupRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupRestoreJobWithParams")
	}

	var r0 admin.GetBackupRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetBackupRestoreJobApiParams) admin.GetBackupRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetBackupRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupRestoreJobWithParams'
type CloudBackupsApi_GetBackupRestoreJobWithParams_Call struct {
	*mock.Call
}

// GetBackupRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetBackupRestoreJobApiParams
func (_e *CloudBackupsApi_Expecter) GetBackupRestoreJobWithParams(ctx any, args any) *CloudBackupsApi_GetBackupRestoreJobWithParams_Call {
	return &CloudBackupsApi_GetBackupRestoreJobWithParams_Call{Call: _e.mock.On("GetBackupRestoreJobWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetBackupRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.GetBackupRestoreJobApiParams)) *CloudBackupsApi_GetBackupRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetBackupRestoreJobApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJobWithParams_Call) Return(_a0 admin.GetBackupRestoreJobApiRequest) *CloudBackupsApi_GetBackupRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetBackupRestoreJobApiParams) admin.GetBackupRestoreJobApiRequest) *CloudBackupsApi_GetBackupRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupSchedule provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) GetBackupSchedule(ctx context.Context, groupId string, clusterName string) admin.GetBackupScheduleApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupSchedule")
	}

	var r0 admin.GetBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetBackupScheduleApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupSchedule'
type CloudBackupsApi_GetBackupSchedule_Call struct {
	*mock.Call
}

// GetBackupSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) GetBackupSchedule(ctx any, groupId any, clusterName any) *CloudBackupsApi_GetBackupSchedule_Call {
	return &CloudBackupsApi_GetBackupSchedule_Call{Call: _e.mock.On("GetBackupSchedule", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_GetBackupSchedule_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_GetBackupSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupSchedule_Call) Return(_a0 admin.GetBackupScheduleApiRequest) *CloudBackupsApi_GetBackupSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupSchedule_Call) RunAndReturn(run func(context.Context, string, string) admin.GetBackupScheduleApiRequest) *CloudBackupsApi_GetBackupSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupScheduleExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetBackupScheduleExecute(r admin.GetBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupScheduleExecute")
	}

	var r0 *admin.DiskBackupSnapshotSchedule20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetBackupScheduleApiRequest) *admin.DiskBackupSnapshotSchedule20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotSchedule20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetBackupScheduleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetBackupScheduleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetBackupScheduleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupScheduleExecute'
type CloudBackupsApi_GetBackupScheduleExecute_Call struct {
	*mock.Call
}

// GetBackupScheduleExecute is a helper method to define mock.On call
//   - r admin.GetBackupScheduleApiRequest
func (_e *CloudBackupsApi_Expecter) GetBackupScheduleExecute(r any) *CloudBackupsApi_GetBackupScheduleExecute_Call {
	return &CloudBackupsApi_GetBackupScheduleExecute_Call{Call: _e.mock.On("GetBackupScheduleExecute", r)}
}

func (_c *CloudBackupsApi_GetBackupScheduleExecute_Call) Run(run func(r admin.GetBackupScheduleApiRequest)) *CloudBackupsApi_GetBackupScheduleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetBackupScheduleApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupScheduleExecute_Call) Return(_a0 *admin.DiskBackupSnapshotSchedule20240805, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetBackupScheduleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetBackupScheduleExecute_Call) RunAndReturn(run func(admin.GetBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)) *CloudBackupsApi_GetBackupScheduleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupScheduleWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetBackupScheduleWithParams(ctx context.Context, args *admin.GetBackupScheduleApiParams) admin.GetBackupScheduleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupScheduleWithParams")
	}

	var r0 admin.GetBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetBackupScheduleApiParams) admin.GetBackupScheduleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupScheduleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupScheduleWithParams'
type CloudBackupsApi_GetBackupScheduleWithParams_Call struct {
	*mock.Call
}

// GetBackupScheduleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetBackupScheduleApiParams
func (_e *CloudBackupsApi_Expecter) GetBackupScheduleWithParams(ctx any, args any) *CloudBackupsApi_GetBackupScheduleWithParams_Call {
	return &CloudBackupsApi_GetBackupScheduleWithParams_Call{Call: _e.mock.On("GetBackupScheduleWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetBackupScheduleWithParams_Call) Run(run func(ctx context.Context, args *admin.GetBackupScheduleApiParams)) *CloudBackupsApi_GetBackupScheduleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetBackupScheduleApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupScheduleWithParams_Call) Return(_a0 admin.GetBackupScheduleApiRequest) *CloudBackupsApi_GetBackupScheduleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupScheduleWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetBackupScheduleApiParams) admin.GetBackupScheduleApiRequest) *CloudBackupsApi_GetBackupScheduleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupShardedCluster provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *CloudBackupsApi) GetBackupShardedCluster(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.GetBackupShardedClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupShardedCluster")
	}

	var r0 admin.GetBackupShardedClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetBackupShardedClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetBackupShardedClusterApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupShardedCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupShardedCluster'
type CloudBackupsApi_GetBackupShardedCluster_Call struct {
	*mock.Call
}

// GetBackupShardedCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *CloudBackupsApi_Expecter) GetBackupShardedCluster(ctx any, groupId any, clusterName any, snapshotId any) *CloudBackupsApi_GetBackupShardedCluster_Call {
	return &CloudBackupsApi_GetBackupShardedCluster_Call{Call: _e.mock.On("GetBackupShardedCluster", ctx, groupId, clusterName, snapshotId)}
}

func (_c *CloudBackupsApi_GetBackupShardedCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *CloudBackupsApi_GetBackupShardedCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedCluster_Call) Return(_a0 admin.GetBackupShardedClusterApiRequest) *CloudBackupsApi_GetBackupShardedCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedCluster_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetBackupShardedClusterApiRequest) *CloudBackupsApi_GetBackupShardedCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupShardedClusterExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetBackupShardedClusterExecute(r admin.GetBackupShardedClusterApiRequest) (*admin.DiskBackupShardedClusterSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupShardedClusterExecute")
	}

	var r0 *admin.DiskBackupShardedClusterSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetBackupShardedClusterApiRequest) (*admin.DiskBackupShardedClusterSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetBackupShardedClusterApiRequest) *admin.DiskBackupShardedClusterSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupShardedClusterSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetBackupShardedClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetBackupShardedClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetBackupShardedClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupShardedClusterExecute'
type CloudBackupsApi_GetBackupShardedClusterExecute_Call struct {
	*mock.Call
}

// GetBackupShardedClusterExecute is a helper method to define mock.On call
//   - r admin.GetBackupShardedClusterApiRequest
func (_e *CloudBackupsApi_Expecter) GetBackupShardedClusterExecute(r any) *CloudBackupsApi_GetBackupShardedClusterExecute_Call {
	return &CloudBackupsApi_GetBackupShardedClusterExecute_Call{Call: _e.mock.On("GetBackupShardedClusterExecute", r)}
}

func (_c *CloudBackupsApi_GetBackupShardedClusterExecute_Call) Run(run func(r admin.GetBackupShardedClusterApiRequest)) *CloudBackupsApi_GetBackupShardedClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetBackupShardedClusterApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedClusterExecute_Call) Return(_a0 *admin.DiskBackupShardedClusterSnapshot, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetBackupShardedClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedClusterExecute_Call) RunAndReturn(run func(admin.GetBackupShardedClusterApiRequest) (*admin.DiskBackupShardedClusterSnapshot, *http.Response, error)) *CloudBackupsApi_GetBackupShardedClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupShardedClusterWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetBackupShardedClusterWithParams(ctx context.Context, args *admin.GetBackupShardedClusterApiParams) admin.GetBackupShardedClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupShardedClusterWithParams")
	}

	var r0 admin.GetBackupShardedClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetBackupShardedClusterApiParams) admin.GetBackupShardedClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetBackupShardedClusterApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetBackupShardedClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupShardedClusterWithParams'
type CloudBackupsApi_GetBackupShardedClusterWithParams_Call struct {
	*mock.Call
}

// GetBackupShardedClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetBackupShardedClusterApiParams
func (_e *CloudBackupsApi_Expecter) GetBackupShardedClusterWithParams(ctx any, args any) *CloudBackupsApi_GetBackupShardedClusterWithParams_Call {
	return &CloudBackupsApi_GetBackupShardedClusterWithParams_Call{Call: _e.mock.On("GetBackupShardedClusterWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetBackupShardedClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.GetBackupShardedClusterApiParams)) *CloudBackupsApi_GetBackupShardedClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetBackupShardedClusterApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedClusterWithParams_Call) Return(_a0 admin.GetBackupShardedClusterApiRequest) *CloudBackupsApi_GetBackupShardedClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetBackupShardedClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetBackupShardedClusterApiParams) admin.GetBackupShardedClusterApiRequest) *CloudBackupsApi_GetBackupShardedClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *CloudBackupsApi) GetClusterBackupSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.GetClusterBackupSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupSnapshot")
	}

	var r0 admin.GetClusterBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetClusterBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetClusterBackupSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupSnapshot'
type CloudBackupsApi_GetClusterBackupSnapshot_Call struct {
	*mock.Call
}

// GetClusterBackupSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *CloudBackupsApi_Expecter) GetClusterBackupSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *CloudBackupsApi_GetClusterBackupSnapshot_Call {
	return &CloudBackupsApi_GetClusterBackupSnapshot_Call{Call: _e.mock.On("GetClusterBackupSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *CloudBackupsApi_GetClusterBackupSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshot_Call) Return(_a0 admin.GetClusterBackupSnapshotApiRequest) *CloudBackupsApi_GetClusterBackupSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterBackupSnapshotApiRequest) *CloudBackupsApi_GetClusterBackupSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupSnapshotExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetClusterBackupSnapshotExecute(r admin.GetClusterBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupSnapshotExecute")
	}

	var r0 *admin.DiskBackupReplicaSet
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterBackupSnapshotApiRequest) *admin.DiskBackupReplicaSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupReplicaSet)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterBackupSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterBackupSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetClusterBackupSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupSnapshotExecute'
type CloudBackupsApi_GetClusterBackupSnapshotExecute_Call struct {
	*mock.Call
}

// GetClusterBackupSnapshotExecute is a helper method to define mock.On call
//   - r admin.GetClusterBackupSnapshotApiRequest
func (_e *CloudBackupsApi_Expecter) GetClusterBackupSnapshotExecute(r any) *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call {
	return &CloudBackupsApi_GetClusterBackupSnapshotExecute_Call{Call: _e.mock.On("GetClusterBackupSnapshotExecute", r)}
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call) Run(run func(r admin.GetClusterBackupSnapshotApiRequest)) *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterBackupSnapshotApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call) Return(_a0 *admin.DiskBackupReplicaSet, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call) RunAndReturn(run func(admin.GetClusterBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error)) *CloudBackupsApi_GetClusterBackupSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetClusterBackupSnapshotWithParams(ctx context.Context, args *admin.GetClusterBackupSnapshotApiParams) admin.GetClusterBackupSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupSnapshotWithParams")
	}

	var r0 admin.GetClusterBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterBackupSnapshotApiParams) admin.GetClusterBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupSnapshotWithParams'
type CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call struct {
	*mock.Call
}

// GetClusterBackupSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterBackupSnapshotApiParams
func (_e *CloudBackupsApi_Expecter) GetClusterBackupSnapshotWithParams(ctx any, args any) *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call {
	return &CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call{Call: _e.mock.On("GetClusterBackupSnapshotWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterBackupSnapshotApiParams)) *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterBackupSnapshotApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call) Return(_a0 admin.GetClusterBackupSnapshotApiRequest) *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterBackupSnapshotApiParams) admin.GetClusterBackupSnapshotApiRequest) *CloudBackupsApi_GetClusterBackupSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompliancePolicy provides a mock function with given fields: ctx, groupId
func (_m *CloudBackupsApi) GetCompliancePolicy(ctx context.Context, groupId string) admin.GetCompliancePolicyApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetCompliancePolicy")
	}

	var r0 admin.GetCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetCompliancePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompliancePolicy'
type CloudBackupsApi_GetCompliancePolicy_Call struct {
	*mock.Call
}

// GetCompliancePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CloudBackupsApi_Expecter) GetCompliancePolicy(ctx any, groupId any) *CloudBackupsApi_GetCompliancePolicy_Call {
	return &CloudBackupsApi_GetCompliancePolicy_Call{Call: _e.mock.On("GetCompliancePolicy", ctx, groupId)}
}

func (_c *CloudBackupsApi_GetCompliancePolicy_Call) Run(run func(ctx context.Context, groupId string)) *CloudBackupsApi_GetCompliancePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicy_Call) Return(_a0 admin.GetCompliancePolicyApiRequest) *CloudBackupsApi_GetCompliancePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicy_Call) RunAndReturn(run func(context.Context, string) admin.GetCompliancePolicyApiRequest) *CloudBackupsApi_GetCompliancePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompliancePolicyExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetCompliancePolicyExecute(r admin.GetCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCompliancePolicyExecute")
	}

	var r0 *admin.DataProtectionSettings20231001
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCompliancePolicyApiRequest) *admin.DataProtectionSettings20231001); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataProtectionSettings20231001)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCompliancePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCompliancePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetCompliancePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompliancePolicyExecute'
type CloudBackupsApi_GetCompliancePolicyExecute_Call struct {
	*mock.Call
}

// GetCompliancePolicyExecute is a helper method to define mock.On call
//   - r admin.GetCompliancePolicyApiRequest
func (_e *CloudBackupsApi_Expecter) GetCompliancePolicyExecute(r any) *CloudBackupsApi_GetCompliancePolicyExecute_Call {
	return &CloudBackupsApi_GetCompliancePolicyExecute_Call{Call: _e.mock.On("GetCompliancePolicyExecute", r)}
}

func (_c *CloudBackupsApi_GetCompliancePolicyExecute_Call) Run(run func(r admin.GetCompliancePolicyApiRequest)) *CloudBackupsApi_GetCompliancePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCompliancePolicyApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicyExecute_Call) Return(_a0 *admin.DataProtectionSettings20231001, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetCompliancePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicyExecute_Call) RunAndReturn(run func(admin.GetCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error)) *CloudBackupsApi_GetCompliancePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompliancePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetCompliancePolicyWithParams(ctx context.Context, args *admin.GetCompliancePolicyApiParams) admin.GetCompliancePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCompliancePolicyWithParams")
	}

	var r0 admin.GetCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCompliancePolicyApiParams) admin.GetCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetCompliancePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompliancePolicyWithParams'
type CloudBackupsApi_GetCompliancePolicyWithParams_Call struct {
	*mock.Call
}

// GetCompliancePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCompliancePolicyApiParams
func (_e *CloudBackupsApi_Expecter) GetCompliancePolicyWithParams(ctx any, args any) *CloudBackupsApi_GetCompliancePolicyWithParams_Call {
	return &CloudBackupsApi_GetCompliancePolicyWithParams_Call{Call: _e.mock.On("GetCompliancePolicyWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetCompliancePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCompliancePolicyApiParams)) *CloudBackupsApi_GetCompliancePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCompliancePolicyApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicyWithParams_Call) Return(_a0 admin.GetCompliancePolicyApiRequest) *CloudBackupsApi_GetCompliancePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetCompliancePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCompliancePolicyApiParams) admin.GetCompliancePolicyApiRequest) *CloudBackupsApi_GetCompliancePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetExportBucket provides a mock function with given fields: ctx, groupId, exportBucketId
func (_m *CloudBackupsApi) GetExportBucket(ctx context.Context, groupId string, exportBucketId string) admin.GetExportBucketApiRequest {
	ret := _m.Called(ctx, groupId, exportBucketId)

	if len(ret) == 0 {
		panic("no return value specified for GetExportBucket")
	}

	var r0 admin.GetExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetExportBucketApiRequest); ok {
		r0 = rf(ctx, groupId, exportBucketId)
	} else {
		r0 = ret.Get(0).(admin.GetExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetExportBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExportBucket'
type CloudBackupsApi_GetExportBucket_Call struct {
	*mock.Call
}

// GetExportBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - exportBucketId string
func (_e *CloudBackupsApi_Expecter) GetExportBucket(ctx any, groupId any, exportBucketId any) *CloudBackupsApi_GetExportBucket_Call {
	return &CloudBackupsApi_GetExportBucket_Call{Call: _e.mock.On("GetExportBucket", ctx, groupId, exportBucketId)}
}

func (_c *CloudBackupsApi_GetExportBucket_Call) Run(run func(ctx context.Context, groupId string, exportBucketId string)) *CloudBackupsApi_GetExportBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetExportBucket_Call) Return(_a0 admin.GetExportBucketApiRequest) *CloudBackupsApi_GetExportBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetExportBucket_Call) RunAndReturn(run func(context.Context, string, string) admin.GetExportBucketApiRequest) *CloudBackupsApi_GetExportBucket_Call {
	_c.Call.Return(run)
	return _c
}

// GetExportBucketExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetExportBucketExecute(r admin.GetExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetExportBucketExecute")
	}

	var r0 *admin.DiskBackupSnapshotExportBucketResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetExportBucketApiRequest) *admin.DiskBackupSnapshotExportBucketResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotExportBucketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetExportBucketApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetExportBucketApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetExportBucketExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExportBucketExecute'
type CloudBackupsApi_GetExportBucketExecute_Call struct {
	*mock.Call
}

// GetExportBucketExecute is a helper method to define mock.On call
//   - r admin.GetExportBucketApiRequest
func (_e *CloudBackupsApi_Expecter) GetExportBucketExecute(r any) *CloudBackupsApi_GetExportBucketExecute_Call {
	return &CloudBackupsApi_GetExportBucketExecute_Call{Call: _e.mock.On("GetExportBucketExecute", r)}
}

func (_c *CloudBackupsApi_GetExportBucketExecute_Call) Run(run func(r admin.GetExportBucketApiRequest)) *CloudBackupsApi_GetExportBucketExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetExportBucketApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetExportBucketExecute_Call) Return(_a0 *admin.DiskBackupSnapshotExportBucketResponse, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetExportBucketExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetExportBucketExecute_Call) RunAndReturn(run func(admin.GetExportBucketApiRequest) (*admin.DiskBackupSnapshotExportBucketResponse, *http.Response, error)) *CloudBackupsApi_GetExportBucketExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetExportBucketWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetExportBucketWithParams(ctx context.Context, args *admin.GetExportBucketApiParams) admin.GetExportBucketApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetExportBucketWithParams")
	}

	var r0 admin.GetExportBucketApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetExportBucketApiParams) admin.GetExportBucketApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetExportBucketApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetExportBucketWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExportBucketWithParams'
type CloudBackupsApi_GetExportBucketWithParams_Call struct {
	*mock.Call
}

// GetExportBucketWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetExportBucketApiParams
func (_e *CloudBackupsApi_Expecter) GetExportBucketWithParams(ctx any, args any) *CloudBackupsApi_GetExportBucketWithParams_Call {
	return &CloudBackupsApi_GetExportBucketWithParams_Call{Call: _e.mock.On("GetExportBucketWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetExportBucketWithParams_Call) Run(run func(ctx context.Context, args *admin.GetExportBucketApiParams)) *CloudBackupsApi_GetExportBucketWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetExportBucketApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetExportBucketWithParams_Call) Return(_a0 admin.GetExportBucketApiRequest) *CloudBackupsApi_GetExportBucketWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetExportBucketWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetExportBucketApiParams) admin.GetExportBucketApiRequest) *CloudBackupsApi_GetExportBucketWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessBackupSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *CloudBackupsApi) GetServerlessBackupSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.GetServerlessBackupSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessBackupSnapshot")
	}

	var r0 admin.GetServerlessBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetServerlessBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetServerlessBackupSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessBackupSnapshot'
type CloudBackupsApi_GetServerlessBackupSnapshot_Call struct {
	*mock.Call
}

// GetServerlessBackupSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *CloudBackupsApi_Expecter) GetServerlessBackupSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *CloudBackupsApi_GetServerlessBackupSnapshot_Call {
	return &CloudBackupsApi_GetServerlessBackupSnapshot_Call{Call: _e.mock.On("GetServerlessBackupSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *CloudBackupsApi_GetServerlessBackupSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshot_Call) Return(_a0 admin.GetServerlessBackupSnapshotApiRequest) *CloudBackupsApi_GetServerlessBackupSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetServerlessBackupSnapshotApiRequest) *CloudBackupsApi_GetServerlessBackupSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessBackupSnapshotExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetServerlessBackupSnapshotExecute(r admin.GetServerlessBackupSnapshotApiRequest) (*admin.ServerlessBackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessBackupSnapshotExecute")
	}

	var r0 *admin.ServerlessBackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServerlessBackupSnapshotApiRequest) (*admin.ServerlessBackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServerlessBackupSnapshotApiRequest) *admin.ServerlessBackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServerlessBackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetServerlessBackupSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServerlessBackupSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessBackupSnapshotExecute'
type CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call struct {
	*mock.Call
}

// GetServerlessBackupSnapshotExecute is a helper method to define mock.On call
//   - r admin.GetServerlessBackupSnapshotApiRequest
func (_e *CloudBackupsApi_Expecter) GetServerlessBackupSnapshotExecute(r any) *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call {
	return &CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call{Call: _e.mock.On("GetServerlessBackupSnapshotExecute", r)}
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call) Run(run func(r admin.GetServerlessBackupSnapshotApiRequest)) *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServerlessBackupSnapshotApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call) Return(_a0 *admin.ServerlessBackupSnapshot, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call) RunAndReturn(run func(admin.GetServerlessBackupSnapshotApiRequest) (*admin.ServerlessBackupSnapshot, *http.Response, error)) *CloudBackupsApi_GetServerlessBackupSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessBackupSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetServerlessBackupSnapshotWithParams(ctx context.Context, args *admin.GetServerlessBackupSnapshotApiParams) admin.GetServerlessBackupSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessBackupSnapshotWithParams")
	}

	var r0 admin.GetServerlessBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServerlessBackupSnapshotApiParams) admin.GetServerlessBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessBackupSnapshotWithParams'
type CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call struct {
	*mock.Call
}

// GetServerlessBackupSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServerlessBackupSnapshotApiParams
func (_e *CloudBackupsApi_Expecter) GetServerlessBackupSnapshotWithParams(ctx any, args any) *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call {
	return &CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call{Call: _e.mock.On("GetServerlessBackupSnapshotWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServerlessBackupSnapshotApiParams)) *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServerlessBackupSnapshotApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call) Return(_a0 admin.GetServerlessBackupSnapshotApiRequest) *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServerlessBackupSnapshotApiParams) admin.GetServerlessBackupSnapshotApiRequest) *CloudBackupsApi_GetServerlessBackupSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, restoreJobId
func (_m *CloudBackupsApi) GetServerlessRestoreJob(ctx context.Context, groupId string, clusterName string, restoreJobId string) admin.GetServerlessRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, restoreJobId)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessRestoreJob")
	}

	var r0 admin.GetServerlessRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetServerlessRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, restoreJobId)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetServerlessRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessRestoreJob'
type CloudBackupsApi_GetServerlessRestoreJob_Call struct {
	*mock.Call
}

// GetServerlessRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - restoreJobId string
func (_e *CloudBackupsApi_Expecter) GetServerlessRestoreJob(ctx any, groupId any, clusterName any, restoreJobId any) *CloudBackupsApi_GetServerlessRestoreJob_Call {
	return &CloudBackupsApi_GetServerlessRestoreJob_Call{Call: _e.mock.On("GetServerlessRestoreJob", ctx, groupId, clusterName, restoreJobId)}
}

func (_c *CloudBackupsApi_GetServerlessRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, restoreJobId string)) *CloudBackupsApi_GetServerlessRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJob_Call) Return(_a0 admin.GetServerlessRestoreJobApiRequest) *CloudBackupsApi_GetServerlessRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetServerlessRestoreJobApiRequest) *CloudBackupsApi_GetServerlessRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessRestoreJobExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) GetServerlessRestoreJobExecute(r admin.GetServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessRestoreJobExecute")
	}

	var r0 *admin.ServerlessBackupRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServerlessRestoreJobApiRequest) *admin.ServerlessBackupRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServerlessBackupRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetServerlessRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServerlessRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_GetServerlessRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessRestoreJobExecute'
type CloudBackupsApi_GetServerlessRestoreJobExecute_Call struct {
	*mock.Call
}

// GetServerlessRestoreJobExecute is a helper method to define mock.On call
//   - r admin.GetServerlessRestoreJobApiRequest
func (_e *CloudBackupsApi_Expecter) GetServerlessRestoreJobExecute(r any) *CloudBackupsApi_GetServerlessRestoreJobExecute_Call {
	return &CloudBackupsApi_GetServerlessRestoreJobExecute_Call{Call: _e.mock.On("GetServerlessRestoreJobExecute", r)}
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobExecute_Call) Run(run func(r admin.GetServerlessRestoreJobApiRequest)) *CloudBackupsApi_GetServerlessRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServerlessRestoreJobApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobExecute_Call) Return(_a0 *admin.ServerlessBackupRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_GetServerlessRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobExecute_Call) RunAndReturn(run func(admin.GetServerlessRestoreJobApiRequest) (*admin.ServerlessBackupRestoreJob, *http.Response, error)) *CloudBackupsApi_GetServerlessRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) GetServerlessRestoreJobWithParams(ctx context.Context, args *admin.GetServerlessRestoreJobApiParams) admin.GetServerlessRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessRestoreJobWithParams")
	}

	var r0 admin.GetServerlessRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServerlessRestoreJobApiParams) admin.GetServerlessRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessRestoreJobApiRequest)
	}

	return r0
}

// CloudBackupsApi_GetServerlessRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessRestoreJobWithParams'
type CloudBackupsApi_GetServerlessRestoreJobWithParams_Call struct {
	*mock.Call
}

// GetServerlessRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServerlessRestoreJobApiParams
func (_e *CloudBackupsApi_Expecter) GetServerlessRestoreJobWithParams(ctx any, args any) *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call {
	return &CloudBackupsApi_GetServerlessRestoreJobWithParams_Call{Call: _e.mock.On("GetServerlessRestoreJobWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServerlessRestoreJobApiParams)) *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServerlessRestoreJobApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call) Return(_a0 admin.GetServerlessRestoreJobApiRequest) *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServerlessRestoreJobApiParams) admin.GetServerlessRestoreJobApiRequest) *CloudBackupsApi_GetServerlessRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupExports provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListBackupExports(ctx context.Context, groupId string, clusterName string) admin.ListBackupExportsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupExports")
	}

	var r0 admin.ListBackupExportsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListBackupExportsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListBackupExportsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupExports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupExports'
type CloudBackupsApi_ListBackupExports_Call struct {
	*mock.Call
}

// ListBackupExports is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListBackupExports(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListBackupExports_Call {
	return &CloudBackupsApi_ListBackupExports_Call{Call: _e.mock.On("ListBackupExports", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListBackupExports_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListBackupExports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupExports_Call) Return(_a0 admin.ListBackupExportsApiRequest) *CloudBackupsApi_ListBackupExports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupExports_Call) RunAndReturn(run func(context.Context, string, string) admin.ListBackupExportsApiRequest) *CloudBackupsApi_ListBackupExports_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupExportsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListBackupExportsExecute(r admin.ListBackupExportsApiRequest) (*admin.PaginatedApiAtlasDiskBackupExportJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupExportsExecute")
	}

	var r0 *admin.PaginatedApiAtlasDiskBackupExportJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListBackupExportsApiRequest) (*admin.PaginatedApiAtlasDiskBackupExportJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListBackupExportsApiRequest) *admin.PaginatedApiAtlasDiskBackupExportJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasDiskBackupExportJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListBackupExportsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListBackupExportsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListBackupExportsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupExportsExecute'
type CloudBackupsApi_ListBackupExportsExecute_Call struct {
	*mock.Call
}

// ListBackupExportsExecute is a helper method to define mock.On call
//   - r admin.ListBackupExportsApiRequest
func (_e *CloudBackupsApi_Expecter) ListBackupExportsExecute(r any) *CloudBackupsApi_ListBackupExportsExecute_Call {
	return &CloudBackupsApi_ListBackupExportsExecute_Call{Call: _e.mock.On("ListBackupExportsExecute", r)}
}

func (_c *CloudBackupsApi_ListBackupExportsExecute_Call) Run(run func(r admin.ListBackupExportsApiRequest)) *CloudBackupsApi_ListBackupExportsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListBackupExportsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupExportsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasDiskBackupExportJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListBackupExportsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListBackupExportsExecute_Call) RunAndReturn(run func(admin.ListBackupExportsApiRequest) (*admin.PaginatedApiAtlasDiskBackupExportJob, *http.Response, error)) *CloudBackupsApi_ListBackupExportsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupExportsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListBackupExportsWithParams(ctx context.Context, args *admin.ListBackupExportsApiParams) admin.ListBackupExportsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupExportsWithParams")
	}

	var r0 admin.ListBackupExportsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListBackupExportsApiParams) admin.ListBackupExportsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListBackupExportsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupExportsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupExportsWithParams'
type CloudBackupsApi_ListBackupExportsWithParams_Call struct {
	*mock.Call
}

// ListBackupExportsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListBackupExportsApiParams
func (_e *CloudBackupsApi_Expecter) ListBackupExportsWithParams(ctx any, args any) *CloudBackupsApi_ListBackupExportsWithParams_Call {
	return &CloudBackupsApi_ListBackupExportsWithParams_Call{Call: _e.mock.On("ListBackupExportsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListBackupExportsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListBackupExportsApiParams)) *CloudBackupsApi_ListBackupExportsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListBackupExportsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupExportsWithParams_Call) Return(_a0 admin.ListBackupExportsApiRequest) *CloudBackupsApi_ListBackupExportsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupExportsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListBackupExportsApiParams) admin.ListBackupExportsApiRequest) *CloudBackupsApi_ListBackupExportsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupRestoreJobs provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListBackupRestoreJobs(ctx context.Context, groupId string, clusterName string) admin.ListBackupRestoreJobsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupRestoreJobs")
	}

	var r0 admin.ListBackupRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListBackupRestoreJobsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListBackupRestoreJobsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupRestoreJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupRestoreJobs'
type CloudBackupsApi_ListBackupRestoreJobs_Call struct {
	*mock.Call
}

// ListBackupRestoreJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListBackupRestoreJobs(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListBackupRestoreJobs_Call {
	return &CloudBackupsApi_ListBackupRestoreJobs_Call{Call: _e.mock.On("ListBackupRestoreJobs", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListBackupRestoreJobs_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListBackupRestoreJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobs_Call) Return(_a0 admin.ListBackupRestoreJobsApiRequest) *CloudBackupsApi_ListBackupRestoreJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobs_Call) RunAndReturn(run func(context.Context, string, string) admin.ListBackupRestoreJobsApiRequest) *CloudBackupsApi_ListBackupRestoreJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupRestoreJobsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListBackupRestoreJobsExecute(r admin.ListBackupRestoreJobsApiRequest) (*admin.PaginatedCloudBackupRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupRestoreJobsExecute")
	}

	var r0 *admin.PaginatedCloudBackupRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListBackupRestoreJobsApiRequest) (*admin.PaginatedCloudBackupRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListBackupRestoreJobsApiRequest) *admin.PaginatedCloudBackupRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudBackupRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListBackupRestoreJobsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListBackupRestoreJobsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListBackupRestoreJobsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupRestoreJobsExecute'
type CloudBackupsApi_ListBackupRestoreJobsExecute_Call struct {
	*mock.Call
}

// ListBackupRestoreJobsExecute is a helper method to define mock.On call
//   - r admin.ListBackupRestoreJobsApiRequest
func (_e *CloudBackupsApi_Expecter) ListBackupRestoreJobsExecute(r any) *CloudBackupsApi_ListBackupRestoreJobsExecute_Call {
	return &CloudBackupsApi_ListBackupRestoreJobsExecute_Call{Call: _e.mock.On("ListBackupRestoreJobsExecute", r)}
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsExecute_Call) Run(run func(r admin.ListBackupRestoreJobsApiRequest)) *CloudBackupsApi_ListBackupRestoreJobsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListBackupRestoreJobsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsExecute_Call) Return(_a0 *admin.PaginatedCloudBackupRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListBackupRestoreJobsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsExecute_Call) RunAndReturn(run func(admin.ListBackupRestoreJobsApiRequest) (*admin.PaginatedCloudBackupRestoreJob, *http.Response, error)) *CloudBackupsApi_ListBackupRestoreJobsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupRestoreJobsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListBackupRestoreJobsWithParams(ctx context.Context, args *admin.ListBackupRestoreJobsApiParams) admin.ListBackupRestoreJobsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupRestoreJobsWithParams")
	}

	var r0 admin.ListBackupRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListBackupRestoreJobsApiParams) admin.ListBackupRestoreJobsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListBackupRestoreJobsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupRestoreJobsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupRestoreJobsWithParams'
type CloudBackupsApi_ListBackupRestoreJobsWithParams_Call struct {
	*mock.Call
}

// ListBackupRestoreJobsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListBackupRestoreJobsApiParams
func (_e *CloudBackupsApi_Expecter) ListBackupRestoreJobsWithParams(ctx any, args any) *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call {
	return &CloudBackupsApi_ListBackupRestoreJobsWithParams_Call{Call: _e.mock.On("ListBackupRestoreJobsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListBackupRestoreJobsApiParams)) *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListBackupRestoreJobsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call) Return(_a0 admin.ListBackupRestoreJobsApiRequest) *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListBackupRestoreJobsApiParams) admin.ListBackupRestoreJobsApiRequest) *CloudBackupsApi_ListBackupRestoreJobsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupShardedClusters provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListBackupShardedClusters(ctx context.Context, groupId string, clusterName string) admin.ListBackupShardedClustersApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupShardedClusters")
	}

	var r0 admin.ListBackupShardedClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListBackupShardedClustersApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListBackupShardedClustersApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupShardedClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupShardedClusters'
type CloudBackupsApi_ListBackupShardedClusters_Call struct {
	*mock.Call
}

// ListBackupShardedClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListBackupShardedClusters(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListBackupShardedClusters_Call {
	return &CloudBackupsApi_ListBackupShardedClusters_Call{Call: _e.mock.On("ListBackupShardedClusters", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListBackupShardedClusters_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListBackupShardedClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClusters_Call) Return(_a0 admin.ListBackupShardedClustersApiRequest) *CloudBackupsApi_ListBackupShardedClusters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClusters_Call) RunAndReturn(run func(context.Context, string, string) admin.ListBackupShardedClustersApiRequest) *CloudBackupsApi_ListBackupShardedClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupShardedClustersExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListBackupShardedClustersExecute(r admin.ListBackupShardedClustersApiRequest) (*admin.PaginatedCloudBackupShardedClusterSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupShardedClustersExecute")
	}

	var r0 *admin.PaginatedCloudBackupShardedClusterSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListBackupShardedClustersApiRequest) (*admin.PaginatedCloudBackupShardedClusterSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListBackupShardedClustersApiRequest) *admin.PaginatedCloudBackupShardedClusterSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudBackupShardedClusterSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListBackupShardedClustersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListBackupShardedClustersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListBackupShardedClustersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupShardedClustersExecute'
type CloudBackupsApi_ListBackupShardedClustersExecute_Call struct {
	*mock.Call
}

// ListBackupShardedClustersExecute is a helper method to define mock.On call
//   - r admin.ListBackupShardedClustersApiRequest
func (_e *CloudBackupsApi_Expecter) ListBackupShardedClustersExecute(r any) *CloudBackupsApi_ListBackupShardedClustersExecute_Call {
	return &CloudBackupsApi_ListBackupShardedClustersExecute_Call{Call: _e.mock.On("ListBackupShardedClustersExecute", r)}
}

func (_c *CloudBackupsApi_ListBackupShardedClustersExecute_Call) Run(run func(r admin.ListBackupShardedClustersApiRequest)) *CloudBackupsApi_ListBackupShardedClustersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListBackupShardedClustersApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClustersExecute_Call) Return(_a0 *admin.PaginatedCloudBackupShardedClusterSnapshot, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListBackupShardedClustersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClustersExecute_Call) RunAndReturn(run func(admin.ListBackupShardedClustersApiRequest) (*admin.PaginatedCloudBackupShardedClusterSnapshot, *http.Response, error)) *CloudBackupsApi_ListBackupShardedClustersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupShardedClustersWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListBackupShardedClustersWithParams(ctx context.Context, args *admin.ListBackupShardedClustersApiParams) admin.ListBackupShardedClustersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupShardedClustersWithParams")
	}

	var r0 admin.ListBackupShardedClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListBackupShardedClustersApiParams) admin.ListBackupShardedClustersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListBackupShardedClustersApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupShardedClustersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupShardedClustersWithParams'
type CloudBackupsApi_ListBackupShardedClustersWithParams_Call struct {
	*mock.Call
}

// ListBackupShardedClustersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListBackupShardedClustersApiParams
func (_e *CloudBackupsApi_Expecter) ListBackupShardedClustersWithParams(ctx any, args any) *CloudBackupsApi_ListBackupShardedClustersWithParams_Call {
	return &CloudBackupsApi_ListBackupShardedClustersWithParams_Call{Call: _e.mock.On("ListBackupShardedClustersWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListBackupShardedClustersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListBackupShardedClustersApiParams)) *CloudBackupsApi_ListBackupShardedClustersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListBackupShardedClustersApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClustersWithParams_Call) Return(_a0 admin.ListBackupShardedClustersApiRequest) *CloudBackupsApi_ListBackupShardedClustersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupShardedClustersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListBackupShardedClustersApiParams) admin.ListBackupShardedClustersApiRequest) *CloudBackupsApi_ListBackupShardedClustersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupSnapshots provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListBackupSnapshots(ctx context.Context, groupId string, clusterName string) admin.ListBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupSnapshots")
	}

	var r0 admin.ListBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListBackupSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupSnapshots'
type CloudBackupsApi_ListBackupSnapshots_Call struct {
	*mock.Call
}

// ListBackupSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListBackupSnapshots(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListBackupSnapshots_Call {
	return &CloudBackupsApi_ListBackupSnapshots_Call{Call: _e.mock.On("ListBackupSnapshots", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListBackupSnapshots_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListBackupSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshots_Call) Return(_a0 admin.ListBackupSnapshotsApiRequest) *CloudBackupsApi_ListBackupSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListBackupSnapshotsApiRequest) *CloudBackupsApi_ListBackupSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupSnapshotsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListBackupSnapshotsExecute(r admin.ListBackupSnapshotsApiRequest) (*admin.PaginatedCloudBackupReplicaSet, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupSnapshotsExecute")
	}

	var r0 *admin.PaginatedCloudBackupReplicaSet
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListBackupSnapshotsApiRequest) (*admin.PaginatedCloudBackupReplicaSet, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListBackupSnapshotsApiRequest) *admin.PaginatedCloudBackupReplicaSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudBackupReplicaSet)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListBackupSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListBackupSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListBackupSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupSnapshotsExecute'
type CloudBackupsApi_ListBackupSnapshotsExecute_Call struct {
	*mock.Call
}

// ListBackupSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListBackupSnapshotsApiRequest
func (_e *CloudBackupsApi_Expecter) ListBackupSnapshotsExecute(r any) *CloudBackupsApi_ListBackupSnapshotsExecute_Call {
	return &CloudBackupsApi_ListBackupSnapshotsExecute_Call{Call: _e.mock.On("ListBackupSnapshotsExecute", r)}
}

func (_c *CloudBackupsApi_ListBackupSnapshotsExecute_Call) Run(run func(r admin.ListBackupSnapshotsApiRequest)) *CloudBackupsApi_ListBackupSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListBackupSnapshotsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshotsExecute_Call) Return(_a0 *admin.PaginatedCloudBackupReplicaSet, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListBackupSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshotsExecute_Call) RunAndReturn(run func(admin.ListBackupSnapshotsApiRequest) (*admin.PaginatedCloudBackupReplicaSet, *http.Response, error)) *CloudBackupsApi_ListBackupSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListBackupSnapshotsWithParams(ctx context.Context, args *admin.ListBackupSnapshotsApiParams) admin.ListBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupSnapshotsWithParams")
	}

	var r0 admin.ListBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListBackupSnapshotsApiParams) admin.ListBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListBackupSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListBackupSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupSnapshotsWithParams'
type CloudBackupsApi_ListBackupSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListBackupSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListBackupSnapshotsApiParams
func (_e *CloudBackupsApi_Expecter) ListBackupSnapshotsWithParams(ctx any, args any) *CloudBackupsApi_ListBackupSnapshotsWithParams_Call {
	return &CloudBackupsApi_ListBackupSnapshotsWithParams_Call{Call: _e.mock.On("ListBackupSnapshotsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListBackupSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListBackupSnapshotsApiParams)) *CloudBackupsApi_ListBackupSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListBackupSnapshotsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshotsWithParams_Call) Return(_a0 admin.ListBackupSnapshotsApiRequest) *CloudBackupsApi_ListBackupSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListBackupSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListBackupSnapshotsApiParams) admin.ListBackupSnapshotsApiRequest) *CloudBackupsApi_ListBackupSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportBuckets provides a mock function with given fields: ctx, groupId
func (_m *CloudBackupsApi) ListExportBuckets(ctx context.Context, groupId string) admin.ListExportBucketsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListExportBuckets")
	}

	var r0 admin.ListExportBucketsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListExportBucketsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListExportBucketsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListExportBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportBuckets'
type CloudBackupsApi_ListExportBuckets_Call struct {
	*mock.Call
}

// ListExportBuckets is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CloudBackupsApi_Expecter) ListExportBuckets(ctx any, groupId any) *CloudBackupsApi_ListExportBuckets_Call {
	return &CloudBackupsApi_ListExportBuckets_Call{Call: _e.mock.On("ListExportBuckets", ctx, groupId)}
}

func (_c *CloudBackupsApi_ListExportBuckets_Call) Run(run func(ctx context.Context, groupId string)) *CloudBackupsApi_ListExportBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListExportBuckets_Call) Return(_a0 admin.ListExportBucketsApiRequest) *CloudBackupsApi_ListExportBuckets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListExportBuckets_Call) RunAndReturn(run func(context.Context, string) admin.ListExportBucketsApiRequest) *CloudBackupsApi_ListExportBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportBucketsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListExportBucketsExecute(r admin.ListExportBucketsApiRequest) (*admin.PaginatedBackupSnapshotExportBuckets, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListExportBucketsExecute")
	}

	var r0 *admin.PaginatedBackupSnapshotExportBuckets
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListExportBucketsApiRequest) (*admin.PaginatedBackupSnapshotExportBuckets, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListExportBucketsApiRequest) *admin.PaginatedBackupSnapshotExportBuckets); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedBackupSnapshotExportBuckets)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListExportBucketsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListExportBucketsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListExportBucketsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportBucketsExecute'
type CloudBackupsApi_ListExportBucketsExecute_Call struct {
	*mock.Call
}

// ListExportBucketsExecute is a helper method to define mock.On call
//   - r admin.ListExportBucketsApiRequest
func (_e *CloudBackupsApi_Expecter) ListExportBucketsExecute(r any) *CloudBackupsApi_ListExportBucketsExecute_Call {
	return &CloudBackupsApi_ListExportBucketsExecute_Call{Call: _e.mock.On("ListExportBucketsExecute", r)}
}

func (_c *CloudBackupsApi_ListExportBucketsExecute_Call) Run(run func(r admin.ListExportBucketsApiRequest)) *CloudBackupsApi_ListExportBucketsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListExportBucketsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListExportBucketsExecute_Call) Return(_a0 *admin.PaginatedBackupSnapshotExportBuckets, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListExportBucketsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListExportBucketsExecute_Call) RunAndReturn(run func(admin.ListExportBucketsApiRequest) (*admin.PaginatedBackupSnapshotExportBuckets, *http.Response, error)) *CloudBackupsApi_ListExportBucketsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportBucketsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListExportBucketsWithParams(ctx context.Context, args *admin.ListExportBucketsApiParams) admin.ListExportBucketsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListExportBucketsWithParams")
	}

	var r0 admin.ListExportBucketsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListExportBucketsApiParams) admin.ListExportBucketsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListExportBucketsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListExportBucketsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportBucketsWithParams'
type CloudBackupsApi_ListExportBucketsWithParams_Call struct {
	*mock.Call
}

// ListExportBucketsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListExportBucketsApiParams
func (_e *CloudBackupsApi_Expecter) ListExportBucketsWithParams(ctx any, args any) *CloudBackupsApi_ListExportBucketsWithParams_Call {
	return &CloudBackupsApi_ListExportBucketsWithParams_Call{Call: _e.mock.On("ListExportBucketsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListExportBucketsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListExportBucketsApiParams)) *CloudBackupsApi_ListExportBucketsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListExportBucketsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListExportBucketsWithParams_Call) Return(_a0 admin.ListExportBucketsApiRequest) *CloudBackupsApi_ListExportBucketsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListExportBucketsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListExportBucketsApiParams) admin.ListExportBucketsApiRequest) *CloudBackupsApi_ListExportBucketsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessBackupSnapshots provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListServerlessBackupSnapshots(ctx context.Context, groupId string, clusterName string) admin.ListServerlessBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessBackupSnapshots")
	}

	var r0 admin.ListServerlessBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListServerlessBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListServerlessBackupSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListServerlessBackupSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessBackupSnapshots'
type CloudBackupsApi_ListServerlessBackupSnapshots_Call struct {
	*mock.Call
}

// ListServerlessBackupSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListServerlessBackupSnapshots(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListServerlessBackupSnapshots_Call {
	return &CloudBackupsApi_ListServerlessBackupSnapshots_Call{Call: _e.mock.On("ListServerlessBackupSnapshots", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshots_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListServerlessBackupSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshots_Call) Return(_a0 admin.ListServerlessBackupSnapshotsApiRequest) *CloudBackupsApi_ListServerlessBackupSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListServerlessBackupSnapshotsApiRequest) *CloudBackupsApi_ListServerlessBackupSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessBackupSnapshotsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListServerlessBackupSnapshotsExecute(r admin.ListServerlessBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessBackupSnapshotsExecute")
	}

	var r0 *admin.PaginatedApiAtlasServerlessBackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServerlessBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServerlessBackupSnapshotsApiRequest) *admin.PaginatedApiAtlasServerlessBackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasServerlessBackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServerlessBackupSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServerlessBackupSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessBackupSnapshotsExecute'
type CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call struct {
	*mock.Call
}

// ListServerlessBackupSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListServerlessBackupSnapshotsApiRequest
func (_e *CloudBackupsApi_Expecter) ListServerlessBackupSnapshotsExecute(r any) *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call {
	return &CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call{Call: _e.mock.On("ListServerlessBackupSnapshotsExecute", r)}
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call) Run(run func(r admin.ListServerlessBackupSnapshotsApiRequest)) *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServerlessBackupSnapshotsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasServerlessBackupSnapshot, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call) RunAndReturn(run func(admin.ListServerlessBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, *http.Response, error)) *CloudBackupsApi_ListServerlessBackupSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessBackupSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListServerlessBackupSnapshotsWithParams(ctx context.Context, args *admin.ListServerlessBackupSnapshotsApiParams) admin.ListServerlessBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessBackupSnapshotsWithParams")
	}

	var r0 admin.ListServerlessBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServerlessBackupSnapshotsApiParams) admin.ListServerlessBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServerlessBackupSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessBackupSnapshotsWithParams'
type CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListServerlessBackupSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServerlessBackupSnapshotsApiParams
func (_e *CloudBackupsApi_Expecter) ListServerlessBackupSnapshotsWithParams(ctx any, args any) *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call {
	return &CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call{Call: _e.mock.On("ListServerlessBackupSnapshotsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServerlessBackupSnapshotsApiParams)) *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServerlessBackupSnapshotsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call) Return(_a0 admin.ListServerlessBackupSnapshotsApiRequest) *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServerlessBackupSnapshotsApiParams) admin.ListServerlessBackupSnapshotsApiRequest) *CloudBackupsApi_ListServerlessBackupSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessRestoreJobs provides a mock function with given fields: ctx, groupId, clusterName
func (_m *CloudBackupsApi) ListServerlessRestoreJobs(ctx context.Context, groupId string, clusterName string) admin.ListServerlessRestoreJobsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessRestoreJobs")
	}

	var r0 admin.ListServerlessRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListServerlessRestoreJobsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListServerlessRestoreJobsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListServerlessRestoreJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessRestoreJobs'
type CloudBackupsApi_ListServerlessRestoreJobs_Call struct {
	*mock.Call
}

// ListServerlessRestoreJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *CloudBackupsApi_Expecter) ListServerlessRestoreJobs(ctx any, groupId any, clusterName any) *CloudBackupsApi_ListServerlessRestoreJobs_Call {
	return &CloudBackupsApi_ListServerlessRestoreJobs_Call{Call: _e.mock.On("ListServerlessRestoreJobs", ctx, groupId, clusterName)}
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobs_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *CloudBackupsApi_ListServerlessRestoreJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobs_Call) Return(_a0 admin.ListServerlessRestoreJobsApiRequest) *CloudBackupsApi_ListServerlessRestoreJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobs_Call) RunAndReturn(run func(context.Context, string, string) admin.ListServerlessRestoreJobsApiRequest) *CloudBackupsApi_ListServerlessRestoreJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessRestoreJobsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) ListServerlessRestoreJobsExecute(r admin.ListServerlessRestoreJobsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessRestoreJobsExecute")
	}

	var r0 *admin.PaginatedApiAtlasServerlessBackupRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServerlessRestoreJobsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServerlessRestoreJobsApiRequest) *admin.PaginatedApiAtlasServerlessBackupRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasServerlessBackupRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServerlessRestoreJobsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServerlessRestoreJobsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_ListServerlessRestoreJobsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessRestoreJobsExecute'
type CloudBackupsApi_ListServerlessRestoreJobsExecute_Call struct {
	*mock.Call
}

// ListServerlessRestoreJobsExecute is a helper method to define mock.On call
//   - r admin.ListServerlessRestoreJobsApiRequest
func (_e *CloudBackupsApi_Expecter) ListServerlessRestoreJobsExecute(r any) *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call {
	return &CloudBackupsApi_ListServerlessRestoreJobsExecute_Call{Call: _e.mock.On("ListServerlessRestoreJobsExecute", r)}
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call) Run(run func(r admin.ListServerlessRestoreJobsApiRequest)) *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServerlessRestoreJobsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasServerlessBackupRestoreJob, _a1 *http.Response, _a2 error) *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call) RunAndReturn(run func(admin.ListServerlessRestoreJobsApiRequest) (*admin.PaginatedApiAtlasServerlessBackupRestoreJob, *http.Response, error)) *CloudBackupsApi_ListServerlessRestoreJobsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerlessRestoreJobsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) ListServerlessRestoreJobsWithParams(ctx context.Context, args *admin.ListServerlessRestoreJobsApiParams) admin.ListServerlessRestoreJobsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServerlessRestoreJobsWithParams")
	}

	var r0 admin.ListServerlessRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServerlessRestoreJobsApiParams) admin.ListServerlessRestoreJobsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServerlessRestoreJobsApiRequest)
	}

	return r0
}

// CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerlessRestoreJobsWithParams'
type CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call struct {
	*mock.Call
}

// ListServerlessRestoreJobsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServerlessRestoreJobsApiParams
func (_e *CloudBackupsApi_Expecter) ListServerlessRestoreJobsWithParams(ctx any, args any) *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call {
	return &CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call{Call: _e.mock.On("ListServerlessRestoreJobsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServerlessRestoreJobsApiParams)) *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServerlessRestoreJobsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call) Return(_a0 admin.ListServerlessRestoreJobsApiRequest) *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServerlessRestoreJobsApiParams) admin.ListServerlessRestoreJobsApiRequest) *CloudBackupsApi_ListServerlessRestoreJobsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// TakeSnapshots provides a mock function with given fields: ctx, groupId, clusterName, diskBackupOnDemandSnapshotRequest
func (_m *CloudBackupsApi) TakeSnapshots(ctx context.Context, groupId string, clusterName string, diskBackupOnDemandSnapshotRequest *admin.DiskBackupOnDemandSnapshotRequest) admin.TakeSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, diskBackupOnDemandSnapshotRequest)

	if len(ret) == 0 {
		panic("no return value specified for TakeSnapshots")
	}

	var r0 admin.TakeSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DiskBackupOnDemandSnapshotRequest) admin.TakeSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, diskBackupOnDemandSnapshotRequest)
	} else {
		r0 = ret.Get(0).(admin.TakeSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_TakeSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeSnapshots'
type CloudBackupsApi_TakeSnapshots_Call struct {
	*mock.Call
}

// TakeSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - diskBackupOnDemandSnapshotRequest *admin.DiskBackupOnDemandSnapshotRequest
func (_e *CloudBackupsApi_Expecter) TakeSnapshots(ctx any, groupId any, clusterName any, diskBackupOnDemandSnapshotRequest any) *CloudBackupsApi_TakeSnapshots_Call {
	return &CloudBackupsApi_TakeSnapshots_Call{Call: _e.mock.On("TakeSnapshots", ctx, groupId, clusterName, diskBackupOnDemandSnapshotRequest)}
}

func (_c *CloudBackupsApi_TakeSnapshots_Call) Run(run func(ctx context.Context, groupId string, clusterName string, diskBackupOnDemandSnapshotRequest *admin.DiskBackupOnDemandSnapshotRequest)) *CloudBackupsApi_TakeSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DiskBackupOnDemandSnapshotRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshots_Call) Return(_a0 admin.TakeSnapshotsApiRequest) *CloudBackupsApi_TakeSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshots_Call) RunAndReturn(run func(context.Context, string, string, *admin.DiskBackupOnDemandSnapshotRequest) admin.TakeSnapshotsApiRequest) *CloudBackupsApi_TakeSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// TakeSnapshotsExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) TakeSnapshotsExecute(r admin.TakeSnapshotsApiRequest) (*admin.DiskBackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TakeSnapshotsExecute")
	}

	var r0 *admin.DiskBackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.TakeSnapshotsApiRequest) (*admin.DiskBackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.TakeSnapshotsApiRequest) *admin.DiskBackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.TakeSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.TakeSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_TakeSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeSnapshotsExecute'
type CloudBackupsApi_TakeSnapshotsExecute_Call struct {
	*mock.Call
}

// TakeSnapshotsExecute is a helper method to define mock.On call
//   - r admin.TakeSnapshotsApiRequest
func (_e *CloudBackupsApi_Expecter) TakeSnapshotsExecute(r any) *CloudBackupsApi_TakeSnapshotsExecute_Call {
	return &CloudBackupsApi_TakeSnapshotsExecute_Call{Call: _e.mock.On("TakeSnapshotsExecute", r)}
}

func (_c *CloudBackupsApi_TakeSnapshotsExecute_Call) Run(run func(r admin.TakeSnapshotsApiRequest)) *CloudBackupsApi_TakeSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.TakeSnapshotsApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshotsExecute_Call) Return(_a0 *admin.DiskBackupSnapshot, _a1 *http.Response, _a2 error) *CloudBackupsApi_TakeSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshotsExecute_Call) RunAndReturn(run func(admin.TakeSnapshotsApiRequest) (*admin.DiskBackupSnapshot, *http.Response, error)) *CloudBackupsApi_TakeSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TakeSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) TakeSnapshotsWithParams(ctx context.Context, args *admin.TakeSnapshotsApiParams) admin.TakeSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for TakeSnapshotsWithParams")
	}

	var r0 admin.TakeSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TakeSnapshotsApiParams) admin.TakeSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.TakeSnapshotsApiRequest)
	}

	return r0
}

// CloudBackupsApi_TakeSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeSnapshotsWithParams'
type CloudBackupsApi_TakeSnapshotsWithParams_Call struct {
	*mock.Call
}

// TakeSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.TakeSnapshotsApiParams
func (_e *CloudBackupsApi_Expecter) TakeSnapshotsWithParams(ctx any, args any) *CloudBackupsApi_TakeSnapshotsWithParams_Call {
	return &CloudBackupsApi_TakeSnapshotsWithParams_Call{Call: _e.mock.On("TakeSnapshotsWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_TakeSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.TakeSnapshotsApiParams)) *CloudBackupsApi_TakeSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TakeSnapshotsApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshotsWithParams_Call) Return(_a0 admin.TakeSnapshotsApiRequest) *CloudBackupsApi_TakeSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_TakeSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.TakeSnapshotsApiParams) admin.TakeSnapshotsApiRequest) *CloudBackupsApi_TakeSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupSchedule provides a mock function with given fields: ctx, groupId, clusterName, diskBackupSnapshotSchedule20240805
func (_m *CloudBackupsApi) UpdateBackupSchedule(ctx context.Context, groupId string, clusterName string, diskBackupSnapshotSchedule20240805 *admin.DiskBackupSnapshotSchedule20240805) admin.UpdateBackupScheduleApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, diskBackupSnapshotSchedule20240805)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupSchedule")
	}

	var r0 admin.UpdateBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DiskBackupSnapshotSchedule20240805) admin.UpdateBackupScheduleApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, diskBackupSnapshotSchedule20240805)
	} else {
		r0 = ret.Get(0).(admin.UpdateBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateBackupSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupSchedule'
type CloudBackupsApi_UpdateBackupSchedule_Call struct {
	*mock.Call
}

// UpdateBackupSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - diskBackupSnapshotSchedule20240805 *admin.DiskBackupSnapshotSchedule20240805
func (_e *CloudBackupsApi_Expecter) UpdateBackupSchedule(ctx any, groupId any, clusterName any, diskBackupSnapshotSchedule20240805 any) *CloudBackupsApi_UpdateBackupSchedule_Call {
	return &CloudBackupsApi_UpdateBackupSchedule_Call{Call: _e.mock.On("UpdateBackupSchedule", ctx, groupId, clusterName, diskBackupSnapshotSchedule20240805)}
}

func (_c *CloudBackupsApi_UpdateBackupSchedule_Call) Run(run func(ctx context.Context, groupId string, clusterName string, diskBackupSnapshotSchedule20240805 *admin.DiskBackupSnapshotSchedule20240805)) *CloudBackupsApi_UpdateBackupSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DiskBackupSnapshotSchedule20240805))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSchedule_Call) Return(_a0 admin.UpdateBackupScheduleApiRequest) *CloudBackupsApi_UpdateBackupSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSchedule_Call) RunAndReturn(run func(context.Context, string, string, *admin.DiskBackupSnapshotSchedule20240805) admin.UpdateBackupScheduleApiRequest) *CloudBackupsApi_UpdateBackupSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupScheduleExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) UpdateBackupScheduleExecute(r admin.UpdateBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupScheduleExecute")
	}

	var r0 *admin.DiskBackupSnapshotSchedule20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateBackupScheduleApiRequest) *admin.DiskBackupSnapshotSchedule20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupSnapshotSchedule20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateBackupScheduleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateBackupScheduleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_UpdateBackupScheduleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupScheduleExecute'
type CloudBackupsApi_UpdateBackupScheduleExecute_Call struct {
	*mock.Call
}

// UpdateBackupScheduleExecute is a helper method to define mock.On call
//   - r admin.UpdateBackupScheduleApiRequest
func (_e *CloudBackupsApi_Expecter) UpdateBackupScheduleExecute(r any) *CloudBackupsApi_UpdateBackupScheduleExecute_Call {
	return &CloudBackupsApi_UpdateBackupScheduleExecute_Call{Call: _e.mock.On("UpdateBackupScheduleExecute", r)}
}

func (_c *CloudBackupsApi_UpdateBackupScheduleExecute_Call) Run(run func(r admin.UpdateBackupScheduleApiRequest)) *CloudBackupsApi_UpdateBackupScheduleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateBackupScheduleApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupScheduleExecute_Call) Return(_a0 *admin.DiskBackupSnapshotSchedule20240805, _a1 *http.Response, _a2 error) *CloudBackupsApi_UpdateBackupScheduleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupScheduleExecute_Call) RunAndReturn(run func(admin.UpdateBackupScheduleApiRequest) (*admin.DiskBackupSnapshotSchedule20240805, *http.Response, error)) *CloudBackupsApi_UpdateBackupScheduleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupScheduleWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) UpdateBackupScheduleWithParams(ctx context.Context, args *admin.UpdateBackupScheduleApiParams) admin.UpdateBackupScheduleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupScheduleWithParams")
	}

	var r0 admin.UpdateBackupScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateBackupScheduleApiParams) admin.UpdateBackupScheduleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateBackupScheduleApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateBackupScheduleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupScheduleWithParams'
type CloudBackupsApi_UpdateBackupScheduleWithParams_Call struct {
	*mock.Call
}

// UpdateBackupScheduleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateBackupScheduleApiParams
func (_e *CloudBackupsApi_Expecter) UpdateBackupScheduleWithParams(ctx any, args any) *CloudBackupsApi_UpdateBackupScheduleWithParams_Call {
	return &CloudBackupsApi_UpdateBackupScheduleWithParams_Call{Call: _e.mock.On("UpdateBackupScheduleWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_UpdateBackupScheduleWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateBackupScheduleApiParams)) *CloudBackupsApi_UpdateBackupScheduleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateBackupScheduleApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupScheduleWithParams_Call) Return(_a0 admin.UpdateBackupScheduleApiRequest) *CloudBackupsApi_UpdateBackupScheduleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupScheduleWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateBackupScheduleApiParams) admin.UpdateBackupScheduleApiRequest) *CloudBackupsApi_UpdateBackupScheduleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId, backupSnapshotRetention
func (_m *CloudBackupsApi) UpdateBackupSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string, backupSnapshotRetention *admin.BackupSnapshotRetention) admin.UpdateBackupSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId, backupSnapshotRetention)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupSnapshot")
	}

	var r0 admin.UpdateBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.BackupSnapshotRetention) admin.UpdateBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId, backupSnapshotRetention)
	} else {
		r0 = ret.Get(0).(admin.UpdateBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateBackupSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupSnapshot'
type CloudBackupsApi_UpdateBackupSnapshot_Call struct {
	*mock.Call
}

// UpdateBackupSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
//   - backupSnapshotRetention *admin.BackupSnapshotRetention
func (_e *CloudBackupsApi_Expecter) UpdateBackupSnapshot(ctx any, groupId any, clusterName any, snapshotId any, backupSnapshotRetention any) *CloudBackupsApi_UpdateBackupSnapshot_Call {
	return &CloudBackupsApi_UpdateBackupSnapshot_Call{Call: _e.mock.On("UpdateBackupSnapshot", ctx, groupId, clusterName, snapshotId, backupSnapshotRetention)}
}

func (_c *CloudBackupsApi_UpdateBackupSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string, backupSnapshotRetention *admin.BackupSnapshotRetention)) *CloudBackupsApi_UpdateBackupSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.BackupSnapshotRetention))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshot_Call) Return(_a0 admin.UpdateBackupSnapshotApiRequest) *CloudBackupsApi_UpdateBackupSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.BackupSnapshotRetention) admin.UpdateBackupSnapshotApiRequest) *CloudBackupsApi_UpdateBackupSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupSnapshotExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) UpdateBackupSnapshotExecute(r admin.UpdateBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupSnapshotExecute")
	}

	var r0 *admin.DiskBackupReplicaSet
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateBackupSnapshotApiRequest) *admin.DiskBackupReplicaSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DiskBackupReplicaSet)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateBackupSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateBackupSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_UpdateBackupSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupSnapshotExecute'
type CloudBackupsApi_UpdateBackupSnapshotExecute_Call struct {
	*mock.Call
}

// UpdateBackupSnapshotExecute is a helper method to define mock.On call
//   - r admin.UpdateBackupSnapshotApiRequest
func (_e *CloudBackupsApi_Expecter) UpdateBackupSnapshotExecute(r any) *CloudBackupsApi_UpdateBackupSnapshotExecute_Call {
	return &CloudBackupsApi_UpdateBackupSnapshotExecute_Call{Call: _e.mock.On("UpdateBackupSnapshotExecute", r)}
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotExecute_Call) Run(run func(r admin.UpdateBackupSnapshotApiRequest)) *CloudBackupsApi_UpdateBackupSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateBackupSnapshotApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotExecute_Call) Return(_a0 *admin.DiskBackupReplicaSet, _a1 *http.Response, _a2 error) *CloudBackupsApi_UpdateBackupSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotExecute_Call) RunAndReturn(run func(admin.UpdateBackupSnapshotApiRequest) (*admin.DiskBackupReplicaSet, *http.Response, error)) *CloudBackupsApi_UpdateBackupSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBackupSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) UpdateBackupSnapshotWithParams(ctx context.Context, args *admin.UpdateBackupSnapshotApiParams) admin.UpdateBackupSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupSnapshotWithParams")
	}

	var r0 admin.UpdateBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateBackupSnapshotApiParams) admin.UpdateBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateBackupSnapshotApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateBackupSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBackupSnapshotWithParams'
type CloudBackupsApi_UpdateBackupSnapshotWithParams_Call struct {
	*mock.Call
}

// UpdateBackupSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateBackupSnapshotApiParams
func (_e *CloudBackupsApi_Expecter) UpdateBackupSnapshotWithParams(ctx any, args any) *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call {
	return &CloudBackupsApi_UpdateBackupSnapshotWithParams_Call{Call: _e.mock.On("UpdateBackupSnapshotWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateBackupSnapshotApiParams)) *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateBackupSnapshotApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call) Return(_a0 admin.UpdateBackupSnapshotApiRequest) *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateBackupSnapshotApiParams) admin.UpdateBackupSnapshotApiRequest) *CloudBackupsApi_UpdateBackupSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCompliancePolicy provides a mock function with given fields: ctx, groupId, dataProtectionSettings20231001
func (_m *CloudBackupsApi) UpdateCompliancePolicy(ctx context.Context, groupId string, dataProtectionSettings20231001 *admin.DataProtectionSettings20231001) admin.UpdateCompliancePolicyApiRequest {
	ret := _m.Called(ctx, groupId, dataProtectionSettings20231001)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompliancePolicy")
	}

	var r0 admin.UpdateCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.DataProtectionSettings20231001) admin.UpdateCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, groupId, dataProtectionSettings20231001)
	} else {
		r0 = ret.Get(0).(admin.UpdateCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateCompliancePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompliancePolicy'
type CloudBackupsApi_UpdateCompliancePolicy_Call struct {
	*mock.Call
}

// UpdateCompliancePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - dataProtectionSettings20231001 *admin.DataProtectionSettings20231001
func (_e *CloudBackupsApi_Expecter) UpdateCompliancePolicy(ctx any, groupId any, dataProtectionSettings20231001 any) *CloudBackupsApi_UpdateCompliancePolicy_Call {
	return &CloudBackupsApi_UpdateCompliancePolicy_Call{Call: _e.mock.On("UpdateCompliancePolicy", ctx, groupId, dataProtectionSettings20231001)}
}

func (_c *CloudBackupsApi_UpdateCompliancePolicy_Call) Run(run func(ctx context.Context, groupId string, dataProtectionSettings20231001 *admin.DataProtectionSettings20231001)) *CloudBackupsApi_UpdateCompliancePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.DataProtectionSettings20231001))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicy_Call) Return(_a0 admin.UpdateCompliancePolicyApiRequest) *CloudBackupsApi_UpdateCompliancePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicy_Call) RunAndReturn(run func(context.Context, string, *admin.DataProtectionSettings20231001) admin.UpdateCompliancePolicyApiRequest) *CloudBackupsApi_UpdateCompliancePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCompliancePolicyExecute provides a mock function with given fields: r
func (_m *CloudBackupsApi) UpdateCompliancePolicyExecute(r admin.UpdateCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompliancePolicyExecute")
	}

	var r0 *admin.DataProtectionSettings20231001
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateCompliancePolicyApiRequest) *admin.DataProtectionSettings20231001); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataProtectionSettings20231001)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateCompliancePolicyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateCompliancePolicyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudBackupsApi_UpdateCompliancePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompliancePolicyExecute'
type CloudBackupsApi_UpdateCompliancePolicyExecute_Call struct {
	*mock.Call
}

// UpdateCompliancePolicyExecute is a helper method to define mock.On call
//   - r admin.UpdateCompliancePolicyApiRequest
func (_e *CloudBackupsApi_Expecter) UpdateCompliancePolicyExecute(r any) *CloudBackupsApi_UpdateCompliancePolicyExecute_Call {
	return &CloudBackupsApi_UpdateCompliancePolicyExecute_Call{Call: _e.mock.On("UpdateCompliancePolicyExecute", r)}
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyExecute_Call) Run(run func(r admin.UpdateCompliancePolicyApiRequest)) *CloudBackupsApi_UpdateCompliancePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateCompliancePolicyApiRequest))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyExecute_Call) Return(_a0 *admin.DataProtectionSettings20231001, _a1 *http.Response, _a2 error) *CloudBackupsApi_UpdateCompliancePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyExecute_Call) RunAndReturn(run func(admin.UpdateCompliancePolicyApiRequest) (*admin.DataProtectionSettings20231001, *http.Response, error)) *CloudBackupsApi_UpdateCompliancePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCompliancePolicyWithParams provides a mock function with given fields: ctx, args
func (_m *CloudBackupsApi) UpdateCompliancePolicyWithParams(ctx context.Context, args *admin.UpdateCompliancePolicyApiParams) admin.UpdateCompliancePolicyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompliancePolicyWithParams")
	}

	var r0 admin.UpdateCompliancePolicyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateCompliancePolicyApiParams) admin.UpdateCompliancePolicyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateCompliancePolicyApiRequest)
	}

	return r0
}

// CloudBackupsApi_UpdateCompliancePolicyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompliancePolicyWithParams'
type CloudBackupsApi_UpdateCompliancePolicyWithParams_Call struct {
	*mock.Call
}

// UpdateCompliancePolicyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateCompliancePolicyApiParams
func (_e *CloudBackupsApi_Expecter) UpdateCompliancePolicyWithParams(ctx any, args any) *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call {
	return &CloudBackupsApi_UpdateCompliancePolicyWithParams_Call{Call: _e.mock.On("UpdateCompliancePolicyWithParams", ctx, args)}
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateCompliancePolicyApiParams)) *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateCompliancePolicyApiParams))
	})
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call) Return(_a0 admin.UpdateCompliancePolicyApiRequest) *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateCompliancePolicyApiParams) admin.UpdateCompliancePolicyApiRequest) *CloudBackupsApi_UpdateCompliancePolicyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudBackupsApi creates a new instance of CloudBackupsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudBackupsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudBackupsApi {
	mock := &CloudBackupsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
