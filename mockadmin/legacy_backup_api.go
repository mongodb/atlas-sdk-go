// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// LegacyBackupApi is an autogenerated mock type for the LegacyBackupApi type
type LegacyBackupApi struct {
	mock.Mock
}

type LegacyBackupApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LegacyBackupApi) EXPECT() *LegacyBackupApi_Expecter {
	return &LegacyBackupApi_Expecter{mock: &_m.Mock}
}

// CreateClusterRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, backupRestoreJob
func (_m *LegacyBackupApi) CreateClusterRestoreJob(ctx context.Context, groupId string, clusterName string, backupRestoreJob *admin.BackupRestoreJob) admin.CreateClusterRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, backupRestoreJob)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterRestoreJob")
	}

	var r0 admin.CreateClusterRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.BackupRestoreJob) admin.CreateClusterRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, backupRestoreJob)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterRestoreJobApiRequest)
	}

	return r0
}

// LegacyBackupApi_CreateClusterRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterRestoreJob'
type LegacyBackupApi_CreateClusterRestoreJob_Call struct {
	*mock.Call
}

// CreateClusterRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - backupRestoreJob *admin.BackupRestoreJob
func (_e *LegacyBackupApi_Expecter) CreateClusterRestoreJob(ctx any, groupId any, clusterName any, backupRestoreJob any) *LegacyBackupApi_CreateClusterRestoreJob_Call {
	return &LegacyBackupApi_CreateClusterRestoreJob_Call{Call: _e.mock.On("CreateClusterRestoreJob", ctx, groupId, clusterName, backupRestoreJob)}
}

func (_c *LegacyBackupApi_CreateClusterRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, backupRestoreJob *admin.BackupRestoreJob)) *LegacyBackupApi_CreateClusterRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.BackupRestoreJob))
	})
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJob_Call) Return(_a0 admin.CreateClusterRestoreJobApiRequest) *LegacyBackupApi_CreateClusterRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, *admin.BackupRestoreJob) admin.CreateClusterRestoreJobApiRequest) *LegacyBackupApi_CreateClusterRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterRestoreJobExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) CreateClusterRestoreJobExecute(r admin.CreateClusterRestoreJobApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterRestoreJobExecute")
	}

	var r0 *admin.PaginatedRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateClusterRestoreJobApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateClusterRestoreJobApiRequest) *admin.PaginatedRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateClusterRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateClusterRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_CreateClusterRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterRestoreJobExecute'
type LegacyBackupApi_CreateClusterRestoreJobExecute_Call struct {
	*mock.Call
}

// CreateClusterRestoreJobExecute is a helper method to define mock.On call
//   - r admin.CreateClusterRestoreJobApiRequest
func (_e *LegacyBackupApi_Expecter) CreateClusterRestoreJobExecute(r any) *LegacyBackupApi_CreateClusterRestoreJobExecute_Call {
	return &LegacyBackupApi_CreateClusterRestoreJobExecute_Call{Call: _e.mock.On("CreateClusterRestoreJobExecute", r)}
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobExecute_Call) Run(run func(r admin.CreateClusterRestoreJobApiRequest)) *LegacyBackupApi_CreateClusterRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateClusterRestoreJobApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobExecute_Call) Return(_a0 *admin.PaginatedRestoreJob, _a1 *http.Response, _a2 error) *LegacyBackupApi_CreateClusterRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobExecute_Call) RunAndReturn(run func(admin.CreateClusterRestoreJobApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error)) *LegacyBackupApi_CreateClusterRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) CreateClusterRestoreJobWithParams(ctx context.Context, args *admin.CreateClusterRestoreJobApiParams) admin.CreateClusterRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterRestoreJobWithParams")
	}

	var r0 admin.CreateClusterRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateClusterRestoreJobApiParams) admin.CreateClusterRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterRestoreJobApiRequest)
	}

	return r0
}

// LegacyBackupApi_CreateClusterRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterRestoreJobWithParams'
type LegacyBackupApi_CreateClusterRestoreJobWithParams_Call struct {
	*mock.Call
}

// CreateClusterRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateClusterRestoreJobApiParams
func (_e *LegacyBackupApi_Expecter) CreateClusterRestoreJobWithParams(ctx any, args any) *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call {
	return &LegacyBackupApi_CreateClusterRestoreJobWithParams_Call{Call: _e.mock.On("CreateClusterRestoreJobWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateClusterRestoreJobApiParams)) *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateClusterRestoreJobApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call) Return(_a0 admin.CreateClusterRestoreJobApiRequest) *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateClusterRestoreJobApiParams) admin.CreateClusterRestoreJobApiRequest) *LegacyBackupApi_CreateClusterRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *LegacyBackupApi) DeleteClusterSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.DeleteClusterSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSnapshot")
	}

	var r0 admin.DeleteClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_DeleteClusterSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSnapshot'
type LegacyBackupApi_DeleteClusterSnapshot_Call struct {
	*mock.Call
}

// DeleteClusterSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *LegacyBackupApi_Expecter) DeleteClusterSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *LegacyBackupApi_DeleteClusterSnapshot_Call {
	return &LegacyBackupApi_DeleteClusterSnapshot_Call{Call: _e.mock.On("DeleteClusterSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *LegacyBackupApi_DeleteClusterSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *LegacyBackupApi_DeleteClusterSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshot_Call) Return(_a0 admin.DeleteClusterSnapshotApiRequest) *LegacyBackupApi_DeleteClusterSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteClusterSnapshotApiRequest) *LegacyBackupApi_DeleteClusterSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSnapshotExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) DeleteClusterSnapshotExecute(r admin.DeleteClusterSnapshotApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSnapshotExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSnapshotApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSnapshotApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterSnapshotApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LegacyBackupApi_DeleteClusterSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSnapshotExecute'
type LegacyBackupApi_DeleteClusterSnapshotExecute_Call struct {
	*mock.Call
}

// DeleteClusterSnapshotExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterSnapshotApiRequest
func (_e *LegacyBackupApi_Expecter) DeleteClusterSnapshotExecute(r any) *LegacyBackupApi_DeleteClusterSnapshotExecute_Call {
	return &LegacyBackupApi_DeleteClusterSnapshotExecute_Call{Call: _e.mock.On("DeleteClusterSnapshotExecute", r)}
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotExecute_Call) Run(run func(r admin.DeleteClusterSnapshotApiRequest)) *LegacyBackupApi_DeleteClusterSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterSnapshotApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotExecute_Call) Return(_a0 *http.Response, _a1 error) *LegacyBackupApi_DeleteClusterSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotExecute_Call) RunAndReturn(run func(admin.DeleteClusterSnapshotApiRequest) (*http.Response, error)) *LegacyBackupApi_DeleteClusterSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) DeleteClusterSnapshotWithParams(ctx context.Context, args *admin.DeleteClusterSnapshotApiParams) admin.DeleteClusterSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSnapshotWithParams")
	}

	var r0 admin.DeleteClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterSnapshotApiParams) admin.DeleteClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_DeleteClusterSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSnapshotWithParams'
type LegacyBackupApi_DeleteClusterSnapshotWithParams_Call struct {
	*mock.Call
}

// DeleteClusterSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterSnapshotApiParams
func (_e *LegacyBackupApi_Expecter) DeleteClusterSnapshotWithParams(ctx any, args any) *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call {
	return &LegacyBackupApi_DeleteClusterSnapshotWithParams_Call{Call: _e.mock.On("DeleteClusterSnapshotWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterSnapshotApiParams)) *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterSnapshotApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call) Return(_a0 admin.DeleteClusterSnapshotApiRequest) *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterSnapshotApiParams) admin.DeleteClusterSnapshotApiRequest) *LegacyBackupApi_DeleteClusterSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupCheckpoint provides a mock function with given fields: ctx, groupId, checkpointId, clusterName
func (_m *LegacyBackupApi) GetClusterBackupCheckpoint(ctx context.Context, groupId string, checkpointId string, clusterName string) admin.GetClusterBackupCheckpointApiRequest {
	ret := _m.Called(ctx, groupId, checkpointId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupCheckpoint")
	}

	var r0 admin.GetClusterBackupCheckpointApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterBackupCheckpointApiRequest); ok {
		r0 = rf(ctx, groupId, checkpointId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetClusterBackupCheckpointApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterBackupCheckpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupCheckpoint'
type LegacyBackupApi_GetClusterBackupCheckpoint_Call struct {
	*mock.Call
}

// GetClusterBackupCheckpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - checkpointId string
//   - clusterName string
func (_e *LegacyBackupApi_Expecter) GetClusterBackupCheckpoint(ctx any, groupId any, checkpointId any, clusterName any) *LegacyBackupApi_GetClusterBackupCheckpoint_Call {
	return &LegacyBackupApi_GetClusterBackupCheckpoint_Call{Call: _e.mock.On("GetClusterBackupCheckpoint", ctx, groupId, checkpointId, clusterName)}
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpoint_Call) Run(run func(ctx context.Context, groupId string, checkpointId string, clusterName string)) *LegacyBackupApi_GetClusterBackupCheckpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpoint_Call) Return(_a0 admin.GetClusterBackupCheckpointApiRequest) *LegacyBackupApi_GetClusterBackupCheckpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpoint_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterBackupCheckpointApiRequest) *LegacyBackupApi_GetClusterBackupCheckpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupCheckpointExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) GetClusterBackupCheckpointExecute(r admin.GetClusterBackupCheckpointApiRequest) (*admin.ApiAtlasCheckpoint, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupCheckpointExecute")
	}

	var r0 *admin.ApiAtlasCheckpoint
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterBackupCheckpointApiRequest) (*admin.ApiAtlasCheckpoint, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterBackupCheckpointApiRequest) *admin.ApiAtlasCheckpoint); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasCheckpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterBackupCheckpointApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterBackupCheckpointApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_GetClusterBackupCheckpointExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupCheckpointExecute'
type LegacyBackupApi_GetClusterBackupCheckpointExecute_Call struct {
	*mock.Call
}

// GetClusterBackupCheckpointExecute is a helper method to define mock.On call
//   - r admin.GetClusterBackupCheckpointApiRequest
func (_e *LegacyBackupApi_Expecter) GetClusterBackupCheckpointExecute(r any) *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call {
	return &LegacyBackupApi_GetClusterBackupCheckpointExecute_Call{Call: _e.mock.On("GetClusterBackupCheckpointExecute", r)}
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call) Run(run func(r admin.GetClusterBackupCheckpointApiRequest)) *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterBackupCheckpointApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call) Return(_a0 *admin.ApiAtlasCheckpoint, _a1 *http.Response, _a2 error) *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call) RunAndReturn(run func(admin.GetClusterBackupCheckpointApiRequest) (*admin.ApiAtlasCheckpoint, *http.Response, error)) *LegacyBackupApi_GetClusterBackupCheckpointExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackupCheckpointWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) GetClusterBackupCheckpointWithParams(ctx context.Context, args *admin.GetClusterBackupCheckpointApiParams) admin.GetClusterBackupCheckpointApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackupCheckpointWithParams")
	}

	var r0 admin.GetClusterBackupCheckpointApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterBackupCheckpointApiParams) admin.GetClusterBackupCheckpointApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterBackupCheckpointApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackupCheckpointWithParams'
type LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call struct {
	*mock.Call
}

// GetClusterBackupCheckpointWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterBackupCheckpointApiParams
func (_e *LegacyBackupApi_Expecter) GetClusterBackupCheckpointWithParams(ctx any, args any) *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call {
	return &LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call{Call: _e.mock.On("GetClusterBackupCheckpointWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterBackupCheckpointApiParams)) *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterBackupCheckpointApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call) Return(_a0 admin.GetClusterBackupCheckpointApiRequest) *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterBackupCheckpointApiParams) admin.GetClusterBackupCheckpointApiRequest) *LegacyBackupApi_GetClusterBackupCheckpointWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestoreJob provides a mock function with given fields: ctx, groupId, clusterName, jobId
func (_m *LegacyBackupApi) GetClusterRestoreJob(ctx context.Context, groupId string, clusterName string, jobId string) admin.GetClusterRestoreJobApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, jobId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestoreJob")
	}

	var r0 admin.GetClusterRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterRestoreJobApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, jobId)
	} else {
		r0 = ret.Get(0).(admin.GetClusterRestoreJobApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterRestoreJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestoreJob'
type LegacyBackupApi_GetClusterRestoreJob_Call struct {
	*mock.Call
}

// GetClusterRestoreJob is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - jobId string
func (_e *LegacyBackupApi_Expecter) GetClusterRestoreJob(ctx any, groupId any, clusterName any, jobId any) *LegacyBackupApi_GetClusterRestoreJob_Call {
	return &LegacyBackupApi_GetClusterRestoreJob_Call{Call: _e.mock.On("GetClusterRestoreJob", ctx, groupId, clusterName, jobId)}
}

func (_c *LegacyBackupApi_GetClusterRestoreJob_Call) Run(run func(ctx context.Context, groupId string, clusterName string, jobId string)) *LegacyBackupApi_GetClusterRestoreJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJob_Call) Return(_a0 admin.GetClusterRestoreJobApiRequest) *LegacyBackupApi_GetClusterRestoreJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJob_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterRestoreJobApiRequest) *LegacyBackupApi_GetClusterRestoreJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestoreJobExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) GetClusterRestoreJobExecute(r admin.GetClusterRestoreJobApiRequest) (*admin.BackupRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestoreJobExecute")
	}

	var r0 *admin.BackupRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterRestoreJobApiRequest) (*admin.BackupRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterRestoreJobApiRequest) *admin.BackupRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BackupRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterRestoreJobApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterRestoreJobApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_GetClusterRestoreJobExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestoreJobExecute'
type LegacyBackupApi_GetClusterRestoreJobExecute_Call struct {
	*mock.Call
}

// GetClusterRestoreJobExecute is a helper method to define mock.On call
//   - r admin.GetClusterRestoreJobApiRequest
func (_e *LegacyBackupApi_Expecter) GetClusterRestoreJobExecute(r any) *LegacyBackupApi_GetClusterRestoreJobExecute_Call {
	return &LegacyBackupApi_GetClusterRestoreJobExecute_Call{Call: _e.mock.On("GetClusterRestoreJobExecute", r)}
}

func (_c *LegacyBackupApi_GetClusterRestoreJobExecute_Call) Run(run func(r admin.GetClusterRestoreJobApiRequest)) *LegacyBackupApi_GetClusterRestoreJobExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterRestoreJobApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJobExecute_Call) Return(_a0 *admin.BackupRestoreJob, _a1 *http.Response, _a2 error) *LegacyBackupApi_GetClusterRestoreJobExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJobExecute_Call) RunAndReturn(run func(admin.GetClusterRestoreJobApiRequest) (*admin.BackupRestoreJob, *http.Response, error)) *LegacyBackupApi_GetClusterRestoreJobExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestoreJobWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) GetClusterRestoreJobWithParams(ctx context.Context, args *admin.GetClusterRestoreJobApiParams) admin.GetClusterRestoreJobApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestoreJobWithParams")
	}

	var r0 admin.GetClusterRestoreJobApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterRestoreJobApiParams) admin.GetClusterRestoreJobApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterRestoreJobApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterRestoreJobWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestoreJobWithParams'
type LegacyBackupApi_GetClusterRestoreJobWithParams_Call struct {
	*mock.Call
}

// GetClusterRestoreJobWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterRestoreJobApiParams
func (_e *LegacyBackupApi_Expecter) GetClusterRestoreJobWithParams(ctx any, args any) *LegacyBackupApi_GetClusterRestoreJobWithParams_Call {
	return &LegacyBackupApi_GetClusterRestoreJobWithParams_Call{Call: _e.mock.On("GetClusterRestoreJobWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_GetClusterRestoreJobWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterRestoreJobApiParams)) *LegacyBackupApi_GetClusterRestoreJobWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterRestoreJobApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJobWithParams_Call) Return(_a0 admin.GetClusterRestoreJobApiRequest) *LegacyBackupApi_GetClusterRestoreJobWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterRestoreJobWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterRestoreJobApiParams) admin.GetClusterRestoreJobApiRequest) *LegacyBackupApi_GetClusterRestoreJobWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *LegacyBackupApi) GetClusterSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.GetClusterSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshot")
	}

	var r0 admin.GetClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshot'
type LegacyBackupApi_GetClusterSnapshot_Call struct {
	*mock.Call
}

// GetClusterSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *LegacyBackupApi_GetClusterSnapshot_Call {
	return &LegacyBackupApi_GetClusterSnapshot_Call{Call: _e.mock.On("GetClusterSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *LegacyBackupApi_GetClusterSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *LegacyBackupApi_GetClusterSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshot_Call) Return(_a0 admin.GetClusterSnapshotApiRequest) *LegacyBackupApi_GetClusterSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterSnapshotApiRequest) *LegacyBackupApi_GetClusterSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshotExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) GetClusterSnapshotExecute(r admin.GetClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshotExecute")
	}

	var r0 *admin.BackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterSnapshotApiRequest) *admin.BackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_GetClusterSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshotExecute'
type LegacyBackupApi_GetClusterSnapshotExecute_Call struct {
	*mock.Call
}

// GetClusterSnapshotExecute is a helper method to define mock.On call
//   - r admin.GetClusterSnapshotApiRequest
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshotExecute(r any) *LegacyBackupApi_GetClusterSnapshotExecute_Call {
	return &LegacyBackupApi_GetClusterSnapshotExecute_Call{Call: _e.mock.On("GetClusterSnapshotExecute", r)}
}

func (_c *LegacyBackupApi_GetClusterSnapshotExecute_Call) Run(run func(r admin.GetClusterSnapshotApiRequest)) *LegacyBackupApi_GetClusterSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterSnapshotApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotExecute_Call) Return(_a0 *admin.BackupSnapshot, _a1 *http.Response, _a2 error) *LegacyBackupApi_GetClusterSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotExecute_Call) RunAndReturn(run func(admin.GetClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error)) *LegacyBackupApi_GetClusterSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshotSchedule provides a mock function with given fields: ctx, groupId, clusterName
func (_m *LegacyBackupApi) GetClusterSnapshotSchedule(ctx context.Context, groupId string, clusterName string) admin.GetClusterSnapshotScheduleApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshotSchedule")
	}

	var r0 admin.GetClusterSnapshotScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetClusterSnapshotScheduleApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSnapshotScheduleApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterSnapshotSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshotSchedule'
type LegacyBackupApi_GetClusterSnapshotSchedule_Call struct {
	*mock.Call
}

// GetClusterSnapshotSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshotSchedule(ctx any, groupId any, clusterName any) *LegacyBackupApi_GetClusterSnapshotSchedule_Call {
	return &LegacyBackupApi_GetClusterSnapshotSchedule_Call{Call: _e.mock.On("GetClusterSnapshotSchedule", ctx, groupId, clusterName)}
}

func (_c *LegacyBackupApi_GetClusterSnapshotSchedule_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *LegacyBackupApi_GetClusterSnapshotSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotSchedule_Call) Return(_a0 admin.GetClusterSnapshotScheduleApiRequest) *LegacyBackupApi_GetClusterSnapshotSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotSchedule_Call) RunAndReturn(run func(context.Context, string, string) admin.GetClusterSnapshotScheduleApiRequest) *LegacyBackupApi_GetClusterSnapshotSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshotScheduleExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) GetClusterSnapshotScheduleExecute(r admin.GetClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshotScheduleExecute")
	}

	var r0 *admin.ApiAtlasSnapshotSchedule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterSnapshotScheduleApiRequest) *admin.ApiAtlasSnapshotSchedule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasSnapshotSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterSnapshotScheduleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterSnapshotScheduleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshotScheduleExecute'
type LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call struct {
	*mock.Call
}

// GetClusterSnapshotScheduleExecute is a helper method to define mock.On call
//   - r admin.GetClusterSnapshotScheduleApiRequest
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshotScheduleExecute(r any) *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call {
	return &LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call{Call: _e.mock.On("GetClusterSnapshotScheduleExecute", r)}
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call) Run(run func(r admin.GetClusterSnapshotScheduleApiRequest)) *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterSnapshotScheduleApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call) Return(_a0 *admin.ApiAtlasSnapshotSchedule, _a1 *http.Response, _a2 error) *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call) RunAndReturn(run func(admin.GetClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error)) *LegacyBackupApi_GetClusterSnapshotScheduleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshotScheduleWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) GetClusterSnapshotScheduleWithParams(ctx context.Context, args *admin.GetClusterSnapshotScheduleApiParams) admin.GetClusterSnapshotScheduleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshotScheduleWithParams")
	}

	var r0 admin.GetClusterSnapshotScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterSnapshotScheduleApiParams) admin.GetClusterSnapshotScheduleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSnapshotScheduleApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshotScheduleWithParams'
type LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call struct {
	*mock.Call
}

// GetClusterSnapshotScheduleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterSnapshotScheduleApiParams
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshotScheduleWithParams(ctx any, args any) *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call {
	return &LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call{Call: _e.mock.On("GetClusterSnapshotScheduleWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterSnapshotScheduleApiParams)) *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterSnapshotScheduleApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call) Return(_a0 admin.GetClusterSnapshotScheduleApiRequest) *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterSnapshotScheduleApiParams) admin.GetClusterSnapshotScheduleApiRequest) *LegacyBackupApi_GetClusterSnapshotScheduleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) GetClusterSnapshotWithParams(ctx context.Context, args *admin.GetClusterSnapshotApiParams) admin.GetClusterSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSnapshotWithParams")
	}

	var r0 admin.GetClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterSnapshotApiParams) admin.GetClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_GetClusterSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSnapshotWithParams'
type LegacyBackupApi_GetClusterSnapshotWithParams_Call struct {
	*mock.Call
}

// GetClusterSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterSnapshotApiParams
func (_e *LegacyBackupApi_Expecter) GetClusterSnapshotWithParams(ctx any, args any) *LegacyBackupApi_GetClusterSnapshotWithParams_Call {
	return &LegacyBackupApi_GetClusterSnapshotWithParams_Call{Call: _e.mock.On("GetClusterSnapshotWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_GetClusterSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterSnapshotApiParams)) *LegacyBackupApi_GetClusterSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterSnapshotApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotWithParams_Call) Return(_a0 admin.GetClusterSnapshotApiRequest) *LegacyBackupApi_GetClusterSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_GetClusterSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterSnapshotApiParams) admin.GetClusterSnapshotApiRequest) *LegacyBackupApi_GetClusterSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupCheckpoints provides a mock function with given fields: ctx, groupId, clusterName
func (_m *LegacyBackupApi) ListClusterBackupCheckpoints(ctx context.Context, groupId string, clusterName string) admin.ListClusterBackupCheckpointsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupCheckpoints")
	}

	var r0 admin.ListClusterBackupCheckpointsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterBackupCheckpointsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterBackupCheckpointsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterBackupCheckpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupCheckpoints'
type LegacyBackupApi_ListClusterBackupCheckpoints_Call struct {
	*mock.Call
}

// ListClusterBackupCheckpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *LegacyBackupApi_Expecter) ListClusterBackupCheckpoints(ctx any, groupId any, clusterName any) *LegacyBackupApi_ListClusterBackupCheckpoints_Call {
	return &LegacyBackupApi_ListClusterBackupCheckpoints_Call{Call: _e.mock.On("ListClusterBackupCheckpoints", ctx, groupId, clusterName)}
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpoints_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *LegacyBackupApi_ListClusterBackupCheckpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpoints_Call) Return(_a0 admin.ListClusterBackupCheckpointsApiRequest) *LegacyBackupApi_ListClusterBackupCheckpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpoints_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterBackupCheckpointsApiRequest) *LegacyBackupApi_ListClusterBackupCheckpoints_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupCheckpointsExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) ListClusterBackupCheckpointsExecute(r admin.ListClusterBackupCheckpointsApiRequest) (*admin.PaginatedApiAtlasCheckpoint, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupCheckpointsExecute")
	}

	var r0 *admin.PaginatedApiAtlasCheckpoint
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterBackupCheckpointsApiRequest) (*admin.PaginatedApiAtlasCheckpoint, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterBackupCheckpointsApiRequest) *admin.PaginatedApiAtlasCheckpoint); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasCheckpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterBackupCheckpointsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterBackupCheckpointsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupCheckpointsExecute'
type LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call struct {
	*mock.Call
}

// ListClusterBackupCheckpointsExecute is a helper method to define mock.On call
//   - r admin.ListClusterBackupCheckpointsApiRequest
func (_e *LegacyBackupApi_Expecter) ListClusterBackupCheckpointsExecute(r any) *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call {
	return &LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call{Call: _e.mock.On("ListClusterBackupCheckpointsExecute", r)}
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call) Run(run func(r admin.ListClusterBackupCheckpointsApiRequest)) *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterBackupCheckpointsApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasCheckpoint, _a1 *http.Response, _a2 error) *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call) RunAndReturn(run func(admin.ListClusterBackupCheckpointsApiRequest) (*admin.PaginatedApiAtlasCheckpoint, *http.Response, error)) *LegacyBackupApi_ListClusterBackupCheckpointsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupCheckpointsWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) ListClusterBackupCheckpointsWithParams(ctx context.Context, args *admin.ListClusterBackupCheckpointsApiParams) admin.ListClusterBackupCheckpointsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupCheckpointsWithParams")
	}

	var r0 admin.ListClusterBackupCheckpointsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterBackupCheckpointsApiParams) admin.ListClusterBackupCheckpointsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterBackupCheckpointsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupCheckpointsWithParams'
type LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call struct {
	*mock.Call
}

// ListClusterBackupCheckpointsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterBackupCheckpointsApiParams
func (_e *LegacyBackupApi_Expecter) ListClusterBackupCheckpointsWithParams(ctx any, args any) *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call {
	return &LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call{Call: _e.mock.On("ListClusterBackupCheckpointsWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterBackupCheckpointsApiParams)) *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterBackupCheckpointsApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call) Return(_a0 admin.ListClusterBackupCheckpointsApiRequest) *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterBackupCheckpointsApiParams) admin.ListClusterBackupCheckpointsApiRequest) *LegacyBackupApi_ListClusterBackupCheckpointsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterRestoreJobs provides a mock function with given fields: ctx, groupId, clusterName
func (_m *LegacyBackupApi) ListClusterRestoreJobs(ctx context.Context, groupId string, clusterName string) admin.ListClusterRestoreJobsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterRestoreJobs")
	}

	var r0 admin.ListClusterRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterRestoreJobsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterRestoreJobsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterRestoreJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterRestoreJobs'
type LegacyBackupApi_ListClusterRestoreJobs_Call struct {
	*mock.Call
}

// ListClusterRestoreJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *LegacyBackupApi_Expecter) ListClusterRestoreJobs(ctx any, groupId any, clusterName any) *LegacyBackupApi_ListClusterRestoreJobs_Call {
	return &LegacyBackupApi_ListClusterRestoreJobs_Call{Call: _e.mock.On("ListClusterRestoreJobs", ctx, groupId, clusterName)}
}

func (_c *LegacyBackupApi_ListClusterRestoreJobs_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *LegacyBackupApi_ListClusterRestoreJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobs_Call) Return(_a0 admin.ListClusterRestoreJobsApiRequest) *LegacyBackupApi_ListClusterRestoreJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobs_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterRestoreJobsApiRequest) *LegacyBackupApi_ListClusterRestoreJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterRestoreJobsExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) ListClusterRestoreJobsExecute(r admin.ListClusterRestoreJobsApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterRestoreJobsExecute")
	}

	var r0 *admin.PaginatedRestoreJob
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterRestoreJobsApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterRestoreJobsApiRequest) *admin.PaginatedRestoreJob); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedRestoreJob)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterRestoreJobsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterRestoreJobsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_ListClusterRestoreJobsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterRestoreJobsExecute'
type LegacyBackupApi_ListClusterRestoreJobsExecute_Call struct {
	*mock.Call
}

// ListClusterRestoreJobsExecute is a helper method to define mock.On call
//   - r admin.ListClusterRestoreJobsApiRequest
func (_e *LegacyBackupApi_Expecter) ListClusterRestoreJobsExecute(r any) *LegacyBackupApi_ListClusterRestoreJobsExecute_Call {
	return &LegacyBackupApi_ListClusterRestoreJobsExecute_Call{Call: _e.mock.On("ListClusterRestoreJobsExecute", r)}
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsExecute_Call) Run(run func(r admin.ListClusterRestoreJobsApiRequest)) *LegacyBackupApi_ListClusterRestoreJobsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterRestoreJobsApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsExecute_Call) Return(_a0 *admin.PaginatedRestoreJob, _a1 *http.Response, _a2 error) *LegacyBackupApi_ListClusterRestoreJobsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsExecute_Call) RunAndReturn(run func(admin.ListClusterRestoreJobsApiRequest) (*admin.PaginatedRestoreJob, *http.Response, error)) *LegacyBackupApi_ListClusterRestoreJobsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterRestoreJobsWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) ListClusterRestoreJobsWithParams(ctx context.Context, args *admin.ListClusterRestoreJobsApiParams) admin.ListClusterRestoreJobsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterRestoreJobsWithParams")
	}

	var r0 admin.ListClusterRestoreJobsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterRestoreJobsApiParams) admin.ListClusterRestoreJobsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterRestoreJobsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterRestoreJobsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterRestoreJobsWithParams'
type LegacyBackupApi_ListClusterRestoreJobsWithParams_Call struct {
	*mock.Call
}

// ListClusterRestoreJobsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterRestoreJobsApiParams
func (_e *LegacyBackupApi_Expecter) ListClusterRestoreJobsWithParams(ctx any, args any) *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call {
	return &LegacyBackupApi_ListClusterRestoreJobsWithParams_Call{Call: _e.mock.On("ListClusterRestoreJobsWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterRestoreJobsApiParams)) *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterRestoreJobsApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call) Return(_a0 admin.ListClusterRestoreJobsApiRequest) *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterRestoreJobsApiParams) admin.ListClusterRestoreJobsApiRequest) *LegacyBackupApi_ListClusterRestoreJobsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSnapshots provides a mock function with given fields: ctx, groupId, clusterName
func (_m *LegacyBackupApi) ListClusterSnapshots(ctx context.Context, groupId string, clusterName string) admin.ListClusterSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSnapshots")
	}

	var r0 admin.ListClusterSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSnapshotsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSnapshots'
type LegacyBackupApi_ListClusterSnapshots_Call struct {
	*mock.Call
}

// ListClusterSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *LegacyBackupApi_Expecter) ListClusterSnapshots(ctx any, groupId any, clusterName any) *LegacyBackupApi_ListClusterSnapshots_Call {
	return &LegacyBackupApi_ListClusterSnapshots_Call{Call: _e.mock.On("ListClusterSnapshots", ctx, groupId, clusterName)}
}

func (_c *LegacyBackupApi_ListClusterSnapshots_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *LegacyBackupApi_ListClusterSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshots_Call) Return(_a0 admin.ListClusterSnapshotsApiRequest) *LegacyBackupApi_ListClusterSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterSnapshotsApiRequest) *LegacyBackupApi_ListClusterSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSnapshotsExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) ListClusterSnapshotsExecute(r admin.ListClusterSnapshotsApiRequest) (*admin.PaginatedSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSnapshotsExecute")
	}

	var r0 *admin.PaginatedSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterSnapshotsApiRequest) (*admin.PaginatedSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterSnapshotsApiRequest) *admin.PaginatedSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_ListClusterSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSnapshotsExecute'
type LegacyBackupApi_ListClusterSnapshotsExecute_Call struct {
	*mock.Call
}

// ListClusterSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListClusterSnapshotsApiRequest
func (_e *LegacyBackupApi_Expecter) ListClusterSnapshotsExecute(r any) *LegacyBackupApi_ListClusterSnapshotsExecute_Call {
	return &LegacyBackupApi_ListClusterSnapshotsExecute_Call{Call: _e.mock.On("ListClusterSnapshotsExecute", r)}
}

func (_c *LegacyBackupApi_ListClusterSnapshotsExecute_Call) Run(run func(r admin.ListClusterSnapshotsApiRequest)) *LegacyBackupApi_ListClusterSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterSnapshotsApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshotsExecute_Call) Return(_a0 *admin.PaginatedSnapshot, _a1 *http.Response, _a2 error) *LegacyBackupApi_ListClusterSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshotsExecute_Call) RunAndReturn(run func(admin.ListClusterSnapshotsApiRequest) (*admin.PaginatedSnapshot, *http.Response, error)) *LegacyBackupApi_ListClusterSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) ListClusterSnapshotsWithParams(ctx context.Context, args *admin.ListClusterSnapshotsApiParams) admin.ListClusterSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSnapshotsWithParams")
	}

	var r0 admin.ListClusterSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterSnapshotsApiParams) admin.ListClusterSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSnapshotsApiRequest)
	}

	return r0
}

// LegacyBackupApi_ListClusterSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSnapshotsWithParams'
type LegacyBackupApi_ListClusterSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListClusterSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterSnapshotsApiParams
func (_e *LegacyBackupApi_Expecter) ListClusterSnapshotsWithParams(ctx any, args any) *LegacyBackupApi_ListClusterSnapshotsWithParams_Call {
	return &LegacyBackupApi_ListClusterSnapshotsWithParams_Call{Call: _e.mock.On("ListClusterSnapshotsWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_ListClusterSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterSnapshotsApiParams)) *LegacyBackupApi_ListClusterSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterSnapshotsApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshotsWithParams_Call) Return(_a0 admin.ListClusterSnapshotsApiRequest) *LegacyBackupApi_ListClusterSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_ListClusterSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterSnapshotsApiParams) admin.ListClusterSnapshotsApiRequest) *LegacyBackupApi_ListClusterSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId, backupSnapshot
func (_m *LegacyBackupApi) UpdateClusterSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string, backupSnapshot *admin.BackupSnapshot) admin.UpdateClusterSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId, backupSnapshot)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshot")
	}

	var r0 admin.UpdateClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.BackupSnapshot) admin.UpdateClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId, backupSnapshot)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_UpdateClusterSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshot'
type LegacyBackupApi_UpdateClusterSnapshot_Call struct {
	*mock.Call
}

// UpdateClusterSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
//   - backupSnapshot *admin.BackupSnapshot
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshot(ctx any, groupId any, clusterName any, snapshotId any, backupSnapshot any) *LegacyBackupApi_UpdateClusterSnapshot_Call {
	return &LegacyBackupApi_UpdateClusterSnapshot_Call{Call: _e.mock.On("UpdateClusterSnapshot", ctx, groupId, clusterName, snapshotId, backupSnapshot)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string, backupSnapshot *admin.BackupSnapshot)) *LegacyBackupApi_UpdateClusterSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.BackupSnapshot))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshot_Call) Return(_a0 admin.UpdateClusterSnapshotApiRequest) *LegacyBackupApi_UpdateClusterSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.BackupSnapshot) admin.UpdateClusterSnapshotApiRequest) *LegacyBackupApi_UpdateClusterSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshotExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) UpdateClusterSnapshotExecute(r admin.UpdateClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshotExecute")
	}

	var r0 *admin.BackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSnapshotApiRequest) *admin.BackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_UpdateClusterSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshotExecute'
type LegacyBackupApi_UpdateClusterSnapshotExecute_Call struct {
	*mock.Call
}

// UpdateClusterSnapshotExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterSnapshotApiRequest
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshotExecute(r any) *LegacyBackupApi_UpdateClusterSnapshotExecute_Call {
	return &LegacyBackupApi_UpdateClusterSnapshotExecute_Call{Call: _e.mock.On("UpdateClusterSnapshotExecute", r)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotExecute_Call) Run(run func(r admin.UpdateClusterSnapshotApiRequest)) *LegacyBackupApi_UpdateClusterSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterSnapshotApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotExecute_Call) Return(_a0 *admin.BackupSnapshot, _a1 *http.Response, _a2 error) *LegacyBackupApi_UpdateClusterSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotExecute_Call) RunAndReturn(run func(admin.UpdateClusterSnapshotApiRequest) (*admin.BackupSnapshot, *http.Response, error)) *LegacyBackupApi_UpdateClusterSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshotSchedule provides a mock function with given fields: ctx, groupId, clusterName, apiAtlasSnapshotSchedule
func (_m *LegacyBackupApi) UpdateClusterSnapshotSchedule(ctx context.Context, groupId string, clusterName string, apiAtlasSnapshotSchedule *admin.ApiAtlasSnapshotSchedule) admin.UpdateClusterSnapshotScheduleApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, apiAtlasSnapshotSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshotSchedule")
	}

	var r0 admin.UpdateClusterSnapshotScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiAtlasSnapshotSchedule) admin.UpdateClusterSnapshotScheduleApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, apiAtlasSnapshotSchedule)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSnapshotScheduleApiRequest)
	}

	return r0
}

// LegacyBackupApi_UpdateClusterSnapshotSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshotSchedule'
type LegacyBackupApi_UpdateClusterSnapshotSchedule_Call struct {
	*mock.Call
}

// UpdateClusterSnapshotSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - apiAtlasSnapshotSchedule *admin.ApiAtlasSnapshotSchedule
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshotSchedule(ctx any, groupId any, clusterName any, apiAtlasSnapshotSchedule any) *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call {
	return &LegacyBackupApi_UpdateClusterSnapshotSchedule_Call{Call: _e.mock.On("UpdateClusterSnapshotSchedule", ctx, groupId, clusterName, apiAtlasSnapshotSchedule)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call) Run(run func(ctx context.Context, groupId string, clusterName string, apiAtlasSnapshotSchedule *admin.ApiAtlasSnapshotSchedule)) *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiAtlasSnapshotSchedule))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call) Return(_a0 admin.UpdateClusterSnapshotScheduleApiRequest) *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiAtlasSnapshotSchedule) admin.UpdateClusterSnapshotScheduleApiRequest) *LegacyBackupApi_UpdateClusterSnapshotSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshotScheduleExecute provides a mock function with given fields: r
func (_m *LegacyBackupApi) UpdateClusterSnapshotScheduleExecute(r admin.UpdateClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshotScheduleExecute")
	}

	var r0 *admin.ApiAtlasSnapshotSchedule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSnapshotScheduleApiRequest) *admin.ApiAtlasSnapshotSchedule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiAtlasSnapshotSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterSnapshotScheduleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterSnapshotScheduleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshotScheduleExecute'
type LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call struct {
	*mock.Call
}

// UpdateClusterSnapshotScheduleExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterSnapshotScheduleApiRequest
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshotScheduleExecute(r any) *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call {
	return &LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call{Call: _e.mock.On("UpdateClusterSnapshotScheduleExecute", r)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call) Run(run func(r admin.UpdateClusterSnapshotScheduleApiRequest)) *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterSnapshotScheduleApiRequest))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call) Return(_a0 *admin.ApiAtlasSnapshotSchedule, _a1 *http.Response, _a2 error) *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call) RunAndReturn(run func(admin.UpdateClusterSnapshotScheduleApiRequest) (*admin.ApiAtlasSnapshotSchedule, *http.Response, error)) *LegacyBackupApi_UpdateClusterSnapshotScheduleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshotScheduleWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) UpdateClusterSnapshotScheduleWithParams(ctx context.Context, args *admin.UpdateClusterSnapshotScheduleApiParams) admin.UpdateClusterSnapshotScheduleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshotScheduleWithParams")
	}

	var r0 admin.UpdateClusterSnapshotScheduleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterSnapshotScheduleApiParams) admin.UpdateClusterSnapshotScheduleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSnapshotScheduleApiRequest)
	}

	return r0
}

// LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshotScheduleWithParams'
type LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call struct {
	*mock.Call
}

// UpdateClusterSnapshotScheduleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterSnapshotScheduleApiParams
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshotScheduleWithParams(ctx any, args any) *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call {
	return &LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call{Call: _e.mock.On("UpdateClusterSnapshotScheduleWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterSnapshotScheduleApiParams)) *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterSnapshotScheduleApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call) Return(_a0 admin.UpdateClusterSnapshotScheduleApiRequest) *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterSnapshotScheduleApiParams) admin.UpdateClusterSnapshotScheduleApiRequest) *LegacyBackupApi_UpdateClusterSnapshotScheduleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *LegacyBackupApi) UpdateClusterSnapshotWithParams(ctx context.Context, args *admin.UpdateClusterSnapshotApiParams) admin.UpdateClusterSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSnapshotWithParams")
	}

	var r0 admin.UpdateClusterSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterSnapshotApiParams) admin.UpdateClusterSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSnapshotApiRequest)
	}

	return r0
}

// LegacyBackupApi_UpdateClusterSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSnapshotWithParams'
type LegacyBackupApi_UpdateClusterSnapshotWithParams_Call struct {
	*mock.Call
}

// UpdateClusterSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterSnapshotApiParams
func (_e *LegacyBackupApi_Expecter) UpdateClusterSnapshotWithParams(ctx any, args any) *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call {
	return &LegacyBackupApi_UpdateClusterSnapshotWithParams_Call{Call: _e.mock.On("UpdateClusterSnapshotWithParams", ctx, args)}
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterSnapshotApiParams)) *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterSnapshotApiParams))
	})
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call) Return(_a0 admin.UpdateClusterSnapshotApiRequest) *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterSnapshotApiParams) admin.UpdateClusterSnapshotApiRequest) *LegacyBackupApi_UpdateClusterSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewLegacyBackupApi creates a new instance of LegacyBackupApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLegacyBackupApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LegacyBackupApi {
	mock := &LegacyBackupApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
