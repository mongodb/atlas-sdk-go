// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// X509AuthenticationApi is an autogenerated mock type for the X509AuthenticationApi type
type X509AuthenticationApi struct {
	mock.Mock
}

type X509AuthenticationApi_Expecter struct {
	mock *mock.Mock
}

func (_m *X509AuthenticationApi) EXPECT() *X509AuthenticationApi_Expecter {
	return &X509AuthenticationApi_Expecter{mock: &_m.Mock}
}

// CreateDatabaseUserCert provides a mock function with given fields: ctx, groupId, username, userCert
func (_m *X509AuthenticationApi) CreateDatabaseUserCert(ctx context.Context, groupId string, username string, userCert *admin.UserCert) admin.CreateDatabaseUserCertApiRequest {
	ret := _m.Called(ctx, groupId, username, userCert)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseUserCert")
	}

	var r0 admin.CreateDatabaseUserCertApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UserCert) admin.CreateDatabaseUserCertApiRequest); ok {
		r0 = rf(ctx, groupId, username, userCert)
	} else {
		r0 = ret.Get(0).(admin.CreateDatabaseUserCertApiRequest)
	}

	return r0
}

// X509AuthenticationApi_CreateDatabaseUserCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseUserCert'
type X509AuthenticationApi_CreateDatabaseUserCert_Call struct {
	*mock.Call
}

// CreateDatabaseUserCert is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - username string
//   - userCert *admin.UserCert
func (_e *X509AuthenticationApi_Expecter) CreateDatabaseUserCert(ctx any, groupId any, username any, userCert any) *X509AuthenticationApi_CreateDatabaseUserCert_Call {
	return &X509AuthenticationApi_CreateDatabaseUserCert_Call{Call: _e.mock.On("CreateDatabaseUserCert", ctx, groupId, username, userCert)}
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCert_Call) Run(run func(ctx context.Context, groupId string, username string, userCert *admin.UserCert)) *X509AuthenticationApi_CreateDatabaseUserCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UserCert))
	})
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCert_Call) Return(_a0 admin.CreateDatabaseUserCertApiRequest) *X509AuthenticationApi_CreateDatabaseUserCert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCert_Call) RunAndReturn(run func(context.Context, string, string, *admin.UserCert) admin.CreateDatabaseUserCertApiRequest) *X509AuthenticationApi_CreateDatabaseUserCert_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseUserCertExecute provides a mock function with given fields: r
func (_m *X509AuthenticationApi) CreateDatabaseUserCertExecute(r admin.CreateDatabaseUserCertApiRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseUserCertExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateDatabaseUserCertApiRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateDatabaseUserCertApiRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(admin.CreateDatabaseUserCertApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateDatabaseUserCertApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// X509AuthenticationApi_CreateDatabaseUserCertExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseUserCertExecute'
type X509AuthenticationApi_CreateDatabaseUserCertExecute_Call struct {
	*mock.Call
}

// CreateDatabaseUserCertExecute is a helper method to define mock.On call
//   - r admin.CreateDatabaseUserCertApiRequest
func (_e *X509AuthenticationApi_Expecter) CreateDatabaseUserCertExecute(r any) *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call {
	return &X509AuthenticationApi_CreateDatabaseUserCertExecute_Call{Call: _e.mock.On("CreateDatabaseUserCertExecute", r)}
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call) Run(run func(r admin.CreateDatabaseUserCertApiRequest)) *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateDatabaseUserCertApiRequest))
	})
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call) RunAndReturn(run func(admin.CreateDatabaseUserCertApiRequest) (string, *http.Response, error)) *X509AuthenticationApi_CreateDatabaseUserCertExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseUserCertWithParams provides a mock function with given fields: ctx, args
func (_m *X509AuthenticationApi) CreateDatabaseUserCertWithParams(ctx context.Context, args *admin.CreateDatabaseUserCertApiParams) admin.CreateDatabaseUserCertApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseUserCertWithParams")
	}

	var r0 admin.CreateDatabaseUserCertApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateDatabaseUserCertApiParams) admin.CreateDatabaseUserCertApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateDatabaseUserCertApiRequest)
	}

	return r0
}

// X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseUserCertWithParams'
type X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call struct {
	*mock.Call
}

// CreateDatabaseUserCertWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateDatabaseUserCertApiParams
func (_e *X509AuthenticationApi_Expecter) CreateDatabaseUserCertWithParams(ctx any, args any) *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call {
	return &X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call{Call: _e.mock.On("CreateDatabaseUserCertWithParams", ctx, args)}
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateDatabaseUserCertApiParams)) *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateDatabaseUserCertApiParams))
	})
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call) Return(_a0 admin.CreateDatabaseUserCertApiRequest) *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateDatabaseUserCertApiParams) admin.CreateDatabaseUserCertApiRequest) *X509AuthenticationApi_CreateDatabaseUserCertWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DisableSecurityCustomerX509 provides a mock function with given fields: ctx, groupId
func (_m *X509AuthenticationApi) DisableSecurityCustomerX509(ctx context.Context, groupId string) admin.DisableSecurityCustomerX509ApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DisableSecurityCustomerX509")
	}

	var r0 admin.DisableSecurityCustomerX509ApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DisableSecurityCustomerX509ApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DisableSecurityCustomerX509ApiRequest)
	}

	return r0
}

// X509AuthenticationApi_DisableSecurityCustomerX509_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableSecurityCustomerX509'
type X509AuthenticationApi_DisableSecurityCustomerX509_Call struct {
	*mock.Call
}

// DisableSecurityCustomerX509 is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *X509AuthenticationApi_Expecter) DisableSecurityCustomerX509(ctx any, groupId any) *X509AuthenticationApi_DisableSecurityCustomerX509_Call {
	return &X509AuthenticationApi_DisableSecurityCustomerX509_Call{Call: _e.mock.On("DisableSecurityCustomerX509", ctx, groupId)}
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509_Call) Run(run func(ctx context.Context, groupId string)) *X509AuthenticationApi_DisableSecurityCustomerX509_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509_Call) Return(_a0 admin.DisableSecurityCustomerX509ApiRequest) *X509AuthenticationApi_DisableSecurityCustomerX509_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509_Call) RunAndReturn(run func(context.Context, string) admin.DisableSecurityCustomerX509ApiRequest) *X509AuthenticationApi_DisableSecurityCustomerX509_Call {
	_c.Call.Return(run)
	return _c
}

// DisableSecurityCustomerX509Execute provides a mock function with given fields: r
func (_m *X509AuthenticationApi) DisableSecurityCustomerX509Execute(r admin.DisableSecurityCustomerX509ApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DisableSecurityCustomerX509Execute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DisableSecurityCustomerX509ApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DisableSecurityCustomerX509ApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DisableSecurityCustomerX509ApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DisableSecurityCustomerX509ApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableSecurityCustomerX509Execute'
type X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call struct {
	*mock.Call
}

// DisableSecurityCustomerX509Execute is a helper method to define mock.On call
//   - r admin.DisableSecurityCustomerX509ApiRequest
func (_e *X509AuthenticationApi_Expecter) DisableSecurityCustomerX509Execute(r any) *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call {
	return &X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call{Call: _e.mock.On("DisableSecurityCustomerX509Execute", r)}
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call) Run(run func(r admin.DisableSecurityCustomerX509ApiRequest)) *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DisableSecurityCustomerX509ApiRequest))
	})
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call) RunAndReturn(run func(admin.DisableSecurityCustomerX509ApiRequest) (*admin.UserSecurity, *http.Response, error)) *X509AuthenticationApi_DisableSecurityCustomerX509Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DisableSecurityCustomerX509WithParams provides a mock function with given fields: ctx, args
func (_m *X509AuthenticationApi) DisableSecurityCustomerX509WithParams(ctx context.Context, args *admin.DisableSecurityCustomerX509ApiParams) admin.DisableSecurityCustomerX509ApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DisableSecurityCustomerX509WithParams")
	}

	var r0 admin.DisableSecurityCustomerX509ApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DisableSecurityCustomerX509ApiParams) admin.DisableSecurityCustomerX509ApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DisableSecurityCustomerX509ApiRequest)
	}

	return r0
}

// X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableSecurityCustomerX509WithParams'
type X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call struct {
	*mock.Call
}

// DisableSecurityCustomerX509WithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DisableSecurityCustomerX509ApiParams
func (_e *X509AuthenticationApi_Expecter) DisableSecurityCustomerX509WithParams(ctx any, args any) *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call {
	return &X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call{Call: _e.mock.On("DisableSecurityCustomerX509WithParams", ctx, args)}
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call) Run(run func(ctx context.Context, args *admin.DisableSecurityCustomerX509ApiParams)) *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DisableSecurityCustomerX509ApiParams))
	})
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call) Return(_a0 admin.DisableSecurityCustomerX509ApiRequest) *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call) RunAndReturn(run func(context.Context, *admin.DisableSecurityCustomerX509ApiParams) admin.DisableSecurityCustomerX509ApiRequest) *X509AuthenticationApi_DisableSecurityCustomerX509WithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseUserCerts provides a mock function with given fields: ctx, groupId, username
func (_m *X509AuthenticationApi) ListDatabaseUserCerts(ctx context.Context, groupId string, username string) admin.ListDatabaseUserCertsApiRequest {
	ret := _m.Called(ctx, groupId, username)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseUserCerts")
	}

	var r0 admin.ListDatabaseUserCertsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDatabaseUserCertsApiRequest); ok {
		r0 = rf(ctx, groupId, username)
	} else {
		r0 = ret.Get(0).(admin.ListDatabaseUserCertsApiRequest)
	}

	return r0
}

// X509AuthenticationApi_ListDatabaseUserCerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseUserCerts'
type X509AuthenticationApi_ListDatabaseUserCerts_Call struct {
	*mock.Call
}

// ListDatabaseUserCerts is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - username string
func (_e *X509AuthenticationApi_Expecter) ListDatabaseUserCerts(ctx any, groupId any, username any) *X509AuthenticationApi_ListDatabaseUserCerts_Call {
	return &X509AuthenticationApi_ListDatabaseUserCerts_Call{Call: _e.mock.On("ListDatabaseUserCerts", ctx, groupId, username)}
}

func (_c *X509AuthenticationApi_ListDatabaseUserCerts_Call) Run(run func(ctx context.Context, groupId string, username string)) *X509AuthenticationApi_ListDatabaseUserCerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCerts_Call) Return(_a0 admin.ListDatabaseUserCertsApiRequest) *X509AuthenticationApi_ListDatabaseUserCerts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCerts_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDatabaseUserCertsApiRequest) *X509AuthenticationApi_ListDatabaseUserCerts_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseUserCertsExecute provides a mock function with given fields: r
func (_m *X509AuthenticationApi) ListDatabaseUserCertsExecute(r admin.ListDatabaseUserCertsApiRequest) (*admin.PaginatedUserCert, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseUserCertsExecute")
	}

	var r0 *admin.PaginatedUserCert
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDatabaseUserCertsApiRequest) (*admin.PaginatedUserCert, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDatabaseUserCertsApiRequest) *admin.PaginatedUserCert); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedUserCert)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDatabaseUserCertsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDatabaseUserCertsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// X509AuthenticationApi_ListDatabaseUserCertsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseUserCertsExecute'
type X509AuthenticationApi_ListDatabaseUserCertsExecute_Call struct {
	*mock.Call
}

// ListDatabaseUserCertsExecute is a helper method to define mock.On call
//   - r admin.ListDatabaseUserCertsApiRequest
func (_e *X509AuthenticationApi_Expecter) ListDatabaseUserCertsExecute(r any) *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call {
	return &X509AuthenticationApi_ListDatabaseUserCertsExecute_Call{Call: _e.mock.On("ListDatabaseUserCertsExecute", r)}
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call) Run(run func(r admin.ListDatabaseUserCertsApiRequest)) *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDatabaseUserCertsApiRequest))
	})
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call) Return(_a0 *admin.PaginatedUserCert, _a1 *http.Response, _a2 error) *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call) RunAndReturn(run func(admin.ListDatabaseUserCertsApiRequest) (*admin.PaginatedUserCert, *http.Response, error)) *X509AuthenticationApi_ListDatabaseUserCertsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseUserCertsWithParams provides a mock function with given fields: ctx, args
func (_m *X509AuthenticationApi) ListDatabaseUserCertsWithParams(ctx context.Context, args *admin.ListDatabaseUserCertsApiParams) admin.ListDatabaseUserCertsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseUserCertsWithParams")
	}

	var r0 admin.ListDatabaseUserCertsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDatabaseUserCertsApiParams) admin.ListDatabaseUserCertsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDatabaseUserCertsApiRequest)
	}

	return r0
}

// X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseUserCertsWithParams'
type X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call struct {
	*mock.Call
}

// ListDatabaseUserCertsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDatabaseUserCertsApiParams
func (_e *X509AuthenticationApi_Expecter) ListDatabaseUserCertsWithParams(ctx any, args any) *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call {
	return &X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call{Call: _e.mock.On("ListDatabaseUserCertsWithParams", ctx, args)}
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDatabaseUserCertsApiParams)) *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDatabaseUserCertsApiParams))
	})
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call) Return(_a0 admin.ListDatabaseUserCertsApiRequest) *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDatabaseUserCertsApiParams) admin.ListDatabaseUserCertsApiRequest) *X509AuthenticationApi_ListDatabaseUserCertsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewX509AuthenticationApi creates a new instance of X509AuthenticationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewX509AuthenticationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *X509AuthenticationApi {
	mock := &X509AuthenticationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
