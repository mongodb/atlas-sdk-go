// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115012/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// GroupsApi is an autogenerated mock type for the GroupsApi type
type GroupsApi struct {
	mock.Mock
}

type GroupsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupsApi) EXPECT() *GroupsApi_Expecter {
	return &GroupsApi_Expecter{mock: &_m.Mock}
}

// AddProjectServiceAccount provides a mock function with given fields: ctx, serviceAccountId, groupId, groupServiceAccountRoleAssignment
func (_m *GroupsApi) AddProjectServiceAccount(ctx context.Context, serviceAccountId string, groupId string, groupServiceAccountRoleAssignment *[]admin.GroupServiceAccountRoleAssignment) admin.AddProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, serviceAccountId, groupId, groupServiceAccountRoleAssignment)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectServiceAccount")
	}

	var r0 admin.AddProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *[]admin.GroupServiceAccountRoleAssignment) admin.AddProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, groupId, groupServiceAccountRoleAssignment)
	} else {
		r0 = ret.Get(0).(admin.AddProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_AddProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectServiceAccount'
type GroupsApi_AddProjectServiceAccount_Call struct {
	*mock.Call
}

// AddProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - groupId string
//   - groupServiceAccountRoleAssignment *[]admin.GroupServiceAccountRoleAssignment
func (_e *GroupsApi_Expecter) AddProjectServiceAccount(ctx interface{}, serviceAccountId interface{}, groupId interface{}, groupServiceAccountRoleAssignment interface{}) *GroupsApi_AddProjectServiceAccount_Call {
	return &GroupsApi_AddProjectServiceAccount_Call{Call: _e.mock.On("AddProjectServiceAccount", ctx, serviceAccountId, groupId, groupServiceAccountRoleAssignment)}
}

func (_c *GroupsApi_AddProjectServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountId string, groupId string, groupServiceAccountRoleAssignment *[]admin.GroupServiceAccountRoleAssignment)) *GroupsApi_AddProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*[]admin.GroupServiceAccountRoleAssignment))
	})
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccount_Call) Return(_a0 admin.AddProjectServiceAccountApiRequest) *GroupsApi_AddProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *[]admin.GroupServiceAccountRoleAssignment) admin.AddProjectServiceAccountApiRequest) *GroupsApi_AddProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *GroupsApi) AddProjectServiceAccountExecute(r admin.AddProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectServiceAccountExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddProjectServiceAccountApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_AddProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectServiceAccountExecute'
type GroupsApi_AddProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// AddProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.AddProjectServiceAccountApiRequest
func (_e *GroupsApi_Expecter) AddProjectServiceAccountExecute(r interface{}) *GroupsApi_AddProjectServiceAccountExecute_Call {
	return &GroupsApi_AddProjectServiceAccountExecute_Call{Call: _e.mock.On("AddProjectServiceAccountExecute", r)}
}

func (_c *GroupsApi_AddProjectServiceAccountExecute_Call) Run(run func(r admin.AddProjectServiceAccountApiRequest)) *GroupsApi_AddProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccountExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *GroupsApi_AddProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.AddProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error)) *GroupsApi_AddProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) AddProjectServiceAccountWithParams(ctx context.Context, args *admin.AddProjectServiceAccountApiParams) admin.AddProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectServiceAccountWithParams")
	}

	var r0 admin.AddProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddProjectServiceAccountApiParams) admin.AddProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_AddProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectServiceAccountWithParams'
type GroupsApi_AddProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// AddProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddProjectServiceAccountApiParams
func (_e *GroupsApi_Expecter) AddProjectServiceAccountWithParams(ctx interface{}, args interface{}) *GroupsApi_AddProjectServiceAccountWithParams_Call {
	return &GroupsApi_AddProjectServiceAccountWithParams_Call{Call: _e.mock.On("AddProjectServiceAccountWithParams", ctx, args)}
}

func (_c *GroupsApi_AddProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.AddProjectServiceAccountApiParams)) *GroupsApi_AddProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccountWithParams_Call) Return(_a0 admin.AddProjectServiceAccountApiRequest) *GroupsApi_AddProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_AddProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddProjectServiceAccountApiParams) admin.AddProjectServiceAccountApiRequest) *GroupsApi_AddProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccount provides a mock function with given fields: ctx, groupId, groupServiceAccountRequest
func (_m *GroupsApi) CreateProjectServiceAccount(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, groupServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccount")
	}

	var r0 admin.CreateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, groupServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_CreateProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccount'
type GroupsApi_CreateProjectServiceAccount_Call struct {
	*mock.Call
}

// CreateProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupServiceAccountRequest *admin.GroupServiceAccountRequest
func (_e *GroupsApi_Expecter) CreateProjectServiceAccount(ctx interface{}, groupId interface{}, groupServiceAccountRequest interface{}) *GroupsApi_CreateProjectServiceAccount_Call {
	return &GroupsApi_CreateProjectServiceAccount_Call{Call: _e.mock.On("CreateProjectServiceAccount", ctx, groupId, groupServiceAccountRequest)}
}

func (_c *GroupsApi_CreateProjectServiceAccount_Call) Run(run func(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest)) *GroupsApi_CreateProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupServiceAccountRequest))
	})
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccount_Call) Return(_a0 admin.CreateProjectServiceAccountApiRequest) *GroupsApi_CreateProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest) *GroupsApi_CreateProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *GroupsApi) CreateProjectServiceAccountExecute(r admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_CreateProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountExecute'
type GroupsApi_CreateProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateProjectServiceAccountApiRequest
func (_e *GroupsApi_Expecter) CreateProjectServiceAccountExecute(r interface{}) *GroupsApi_CreateProjectServiceAccountExecute_Call {
	return &GroupsApi_CreateProjectServiceAccountExecute_Call{Call: _e.mock.On("CreateProjectServiceAccountExecute", r)}
}

func (_c *GroupsApi_CreateProjectServiceAccountExecute_Call) Run(run func(r admin.CreateProjectServiceAccountApiRequest)) *GroupsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *GroupsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *GroupsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) CreateProjectServiceAccountWithParams(ctx context.Context, args *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountWithParams")
	}

	var r0 admin.CreateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_CreateProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountWithParams'
type GroupsApi_CreateProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateProjectServiceAccountApiParams
func (_e *GroupsApi_Expecter) CreateProjectServiceAccountWithParams(ctx interface{}, args interface{}) *GroupsApi_CreateProjectServiceAccountWithParams_Call {
	return &GroupsApi_CreateProjectServiceAccountWithParams_Call{Call: _e.mock.On("CreateProjectServiceAccountWithParams", ctx, args)}
}

func (_c *GroupsApi_CreateProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateProjectServiceAccountApiParams)) *GroupsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccountWithParams_Call) Return(_a0 admin.CreateProjectServiceAccountApiRequest) *GroupsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_CreateProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest) *GroupsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccount provides a mock function with given fields: ctx, serviceAccountId, groupId
func (_m *GroupsApi) DeleteProjectServiceAccount(ctx context.Context, serviceAccountId string, groupId string) admin.DeleteProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, serviceAccountId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccount")
	}

	var r0 admin.DeleteProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_DeleteProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccount'
type GroupsApi_DeleteProjectServiceAccount_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - groupId string
func (_e *GroupsApi_Expecter) DeleteProjectServiceAccount(ctx interface{}, serviceAccountId interface{}, groupId interface{}) *GroupsApi_DeleteProjectServiceAccount_Call {
	return &GroupsApi_DeleteProjectServiceAccount_Call{Call: _e.mock.On("DeleteProjectServiceAccount", ctx, serviceAccountId, groupId)}
}

func (_c *GroupsApi_DeleteProjectServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountId string, groupId string)) *GroupsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccount_Call) Return(_a0 admin.DeleteProjectServiceAccountApiRequest) *GroupsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteProjectServiceAccountApiRequest) *GroupsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *GroupsApi) DeleteProjectServiceAccountExecute(r admin.DeleteProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_DeleteProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountExecute'
type GroupsApi_DeleteProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectServiceAccountApiRequest
func (_e *GroupsApi_Expecter) DeleteProjectServiceAccountExecute(r interface{}) *GroupsApi_DeleteProjectServiceAccountExecute_Call {
	return &GroupsApi_DeleteProjectServiceAccountExecute_Call{Call: _e.mock.On("DeleteProjectServiceAccountExecute", r)}
}

func (_c *GroupsApi_DeleteProjectServiceAccountExecute_Call) Run(run func(r admin.DeleteProjectServiceAccountApiRequest)) *GroupsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccountExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *GroupsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteProjectServiceAccountApiRequest) (map[string]interface{}, *http.Response, error)) *GroupsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) DeleteProjectServiceAccountWithParams(ctx context.Context, args *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountWithParams")
	}

	var r0 admin.DeleteProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_DeleteProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountWithParams'
type GroupsApi_DeleteProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectServiceAccountApiParams
func (_e *GroupsApi_Expecter) DeleteProjectServiceAccountWithParams(ctx interface{}, args interface{}) *GroupsApi_DeleteProjectServiceAccountWithParams_Call {
	return &GroupsApi_DeleteProjectServiceAccountWithParams_Call{Call: _e.mock.On("DeleteProjectServiceAccountWithParams", ctx, args)}
}

func (_c *GroupsApi_DeleteProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectServiceAccountApiParams)) *GroupsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccountWithParams_Call) Return(_a0 admin.DeleteProjectServiceAccountApiRequest) *GroupsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_DeleteProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest) *GroupsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccount provides a mock function with given fields: ctx, groupId, serviceAccountId
func (_m *GroupsApi) GetProjectServiceAccount(ctx context.Context, groupId string, serviceAccountId string) admin.GetProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, serviceAccountId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccount")
	}

	var r0 admin.GetProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, serviceAccountId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_GetProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccount'
type GroupsApi_GetProjectServiceAccount_Call struct {
	*mock.Call
}

// GetProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - serviceAccountId string
func (_e *GroupsApi_Expecter) GetProjectServiceAccount(ctx interface{}, groupId interface{}, serviceAccountId interface{}) *GroupsApi_GetProjectServiceAccount_Call {
	return &GroupsApi_GetProjectServiceAccount_Call{Call: _e.mock.On("GetProjectServiceAccount", ctx, groupId, serviceAccountId)}
}

func (_c *GroupsApi_GetProjectServiceAccount_Call) Run(run func(ctx context.Context, groupId string, serviceAccountId string)) *GroupsApi_GetProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccount_Call) Return(_a0 admin.GetProjectServiceAccountApiRequest) *GroupsApi_GetProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProjectServiceAccountApiRequest) *GroupsApi_GetProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *GroupsApi) GetProjectServiceAccountExecute(r admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccountDetails
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectServiceAccountApiRequest) *admin.GroupServiceAccountDetails); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccountDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_GetProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccountExecute'
type GroupsApi_GetProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// GetProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetProjectServiceAccountApiRequest
func (_e *GroupsApi_Expecter) GetProjectServiceAccountExecute(r interface{}) *GroupsApi_GetProjectServiceAccountExecute_Call {
	return &GroupsApi_GetProjectServiceAccountExecute_Call{Call: _e.mock.On("GetProjectServiceAccountExecute", r)}
}

func (_c *GroupsApi_GetProjectServiceAccountExecute_Call) Run(run func(r admin.GetProjectServiceAccountApiRequest)) *GroupsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccountDetails, _a1 *http.Response, _a2 error) *GroupsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error)) *GroupsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) GetProjectServiceAccountWithParams(ctx context.Context, args *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccountWithParams")
	}

	var r0 admin.GetProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_GetProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccountWithParams'
type GroupsApi_GetProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectServiceAccountApiParams
func (_e *GroupsApi_Expecter) GetProjectServiceAccountWithParams(ctx interface{}, args interface{}) *GroupsApi_GetProjectServiceAccountWithParams_Call {
	return &GroupsApi_GetProjectServiceAccountWithParams_Call{Call: _e.mock.On("GetProjectServiceAccountWithParams", ctx, args)}
}

func (_c *GroupsApi_GetProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectServiceAccountApiParams)) *GroupsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccountWithParams_Call) Return(_a0 admin.GetProjectServiceAccountApiRequest) *GroupsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_GetProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest) *GroupsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccounts provides a mock function with given fields: ctx, groupId
func (_m *GroupsApi) ListProjectServiceAccounts(ctx context.Context, groupId string) admin.ListProjectServiceAccountsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccounts")
	}

	var r0 admin.ListProjectServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListProjectServiceAccountsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountsApiRequest)
	}

	return r0
}

// GroupsApi_ListProjectServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccounts'
type GroupsApi_ListProjectServiceAccounts_Call struct {
	*mock.Call
}

// ListProjectServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *GroupsApi_Expecter) ListProjectServiceAccounts(ctx interface{}, groupId interface{}) *GroupsApi_ListProjectServiceAccounts_Call {
	return &GroupsApi_ListProjectServiceAccounts_Call{Call: _e.mock.On("ListProjectServiceAccounts", ctx, groupId)}
}

func (_c *GroupsApi_ListProjectServiceAccounts_Call) Run(run func(ctx context.Context, groupId string)) *GroupsApi_ListProjectServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccounts_Call) Return(_a0 admin.ListProjectServiceAccountsApiRequest) *GroupsApi_ListProjectServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListProjectServiceAccountsApiRequest) *GroupsApi_ListProjectServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountsExecute provides a mock function with given fields: r
func (_m *GroupsApi) ListProjectServiceAccountsExecute(r admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountsExecute")
	}

	var r0 *admin.PaginatedGroupServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountsApiRequest) *admin.PaginatedGroupServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedGroupServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_ListProjectServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountsExecute'
type GroupsApi_ListProjectServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListProjectServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListProjectServiceAccountsApiRequest
func (_e *GroupsApi_Expecter) ListProjectServiceAccountsExecute(r interface{}) *GroupsApi_ListProjectServiceAccountsExecute_Call {
	return &GroupsApi_ListProjectServiceAccountsExecute_Call{Call: _e.mock.On("ListProjectServiceAccountsExecute", r)}
}

func (_c *GroupsApi_ListProjectServiceAccountsExecute_Call) Run(run func(r admin.ListProjectServiceAccountsApiRequest)) *GroupsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectServiceAccountsApiRequest))
	})
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedGroupServiceAccounts, _a1 *http.Response, _a2 error) *GroupsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)) *GroupsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) ListProjectServiceAccountsWithParams(ctx context.Context, args *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountsWithParams")
	}

	var r0 admin.ListProjectServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountsApiRequest)
	}

	return r0
}

// GroupsApi_ListProjectServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountsWithParams'
type GroupsApi_ListProjectServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListProjectServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectServiceAccountsApiParams
func (_e *GroupsApi_Expecter) ListProjectServiceAccountsWithParams(ctx interface{}, args interface{}) *GroupsApi_ListProjectServiceAccountsWithParams_Call {
	return &GroupsApi_ListProjectServiceAccountsWithParams_Call{Call: _e.mock.On("ListProjectServiceAccountsWithParams", ctx, args)}
}

func (_c *GroupsApi_ListProjectServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectServiceAccountsApiParams)) *GroupsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectServiceAccountsApiParams))
	})
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccountsWithParams_Call) Return(_a0 admin.ListProjectServiceAccountsApiRequest) *GroupsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_ListProjectServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest) *GroupsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccount provides a mock function with given fields: ctx, serviceAccountId, groupId, groupServiceAccountUpdateRequest
func (_m *GroupsApi) UpdateProjectServiceAccount(ctx context.Context, serviceAccountId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, serviceAccountId, groupId, groupServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccount")
	}

	var r0 admin.UpdateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, serviceAccountId, groupId, groupServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_UpdateProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccount'
type GroupsApi_UpdateProjectServiceAccount_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountId string
//   - groupId string
//   - groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest
func (_e *GroupsApi_Expecter) UpdateProjectServiceAccount(ctx interface{}, serviceAccountId interface{}, groupId interface{}, groupServiceAccountUpdateRequest interface{}) *GroupsApi_UpdateProjectServiceAccount_Call {
	return &GroupsApi_UpdateProjectServiceAccount_Call{Call: _e.mock.On("UpdateProjectServiceAccount", ctx, serviceAccountId, groupId, groupServiceAccountUpdateRequest)}
}

func (_c *GroupsApi_UpdateProjectServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest)) *GroupsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccount_Call) Return(_a0 admin.UpdateProjectServiceAccountApiRequest) *GroupsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest) *GroupsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *GroupsApi) UpdateProjectServiceAccountExecute(r admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccountDetails
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectServiceAccountApiRequest) *admin.GroupServiceAccountDetails); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccountDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupsApi_UpdateProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccountExecute'
type GroupsApi_UpdateProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectServiceAccountApiRequest
func (_e *GroupsApi_Expecter) UpdateProjectServiceAccountExecute(r interface{}) *GroupsApi_UpdateProjectServiceAccountExecute_Call {
	return &GroupsApi_UpdateProjectServiceAccountExecute_Call{Call: _e.mock.On("UpdateProjectServiceAccountExecute", r)}
}

func (_c *GroupsApi_UpdateProjectServiceAccountExecute_Call) Run(run func(r admin.UpdateProjectServiceAccountApiRequest)) *GroupsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccountDetails, _a1 *http.Response, _a2 error) *GroupsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccountDetails, *http.Response, error)) *GroupsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *GroupsApi) UpdateProjectServiceAccountWithParams(ctx context.Context, args *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccountWithParams")
	}

	var r0 admin.UpdateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectServiceAccountApiRequest)
	}

	return r0
}

// GroupsApi_UpdateProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccountWithParams'
type GroupsApi_UpdateProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectServiceAccountApiParams
func (_e *GroupsApi_Expecter) UpdateProjectServiceAccountWithParams(ctx interface{}, args interface{}) *GroupsApi_UpdateProjectServiceAccountWithParams_Call {
	return &GroupsApi_UpdateProjectServiceAccountWithParams_Call{Call: _e.mock.On("UpdateProjectServiceAccountWithParams", ctx, args)}
}

func (_c *GroupsApi_UpdateProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectServiceAccountApiParams)) *GroupsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccountWithParams_Call) Return(_a0 admin.UpdateProjectServiceAccountApiRequest) *GroupsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupsApi_UpdateProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest) *GroupsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupsApi creates a new instance of GroupsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupsApi {
	mock := &GroupsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
