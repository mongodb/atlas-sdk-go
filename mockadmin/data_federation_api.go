// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// DataFederationApi is an autogenerated mock type for the DataFederationApi type
type DataFederationApi struct {
	mock.Mock
}

type DataFederationApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DataFederationApi) EXPECT() *DataFederationApi_Expecter {
	return &DataFederationApi_Expecter{mock: &_m.Mock}
}

// CreateDataFederation provides a mock function with given fields: ctx, groupId, dataLakeTenant
func (_m *DataFederationApi) CreateDataFederation(ctx context.Context, groupId string, dataLakeTenant *admin.DataLakeTenant) admin.CreateDataFederationApiRequest {
	ret := _m.Called(ctx, groupId, dataLakeTenant)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataFederation")
	}

	var r0 admin.CreateDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.DataLakeTenant) admin.CreateDataFederationApiRequest); ok {
		r0 = rf(ctx, groupId, dataLakeTenant)
	} else {
		r0 = ret.Get(0).(admin.CreateDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_CreateDataFederation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataFederation'
type DataFederationApi_CreateDataFederation_Call struct {
	*mock.Call
}

// CreateDataFederation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - dataLakeTenant *admin.DataLakeTenant
func (_e *DataFederationApi_Expecter) CreateDataFederation(ctx any, groupId any, dataLakeTenant any) *DataFederationApi_CreateDataFederation_Call {
	return &DataFederationApi_CreateDataFederation_Call{Call: _e.mock.On("CreateDataFederation", ctx, groupId, dataLakeTenant)}
}

func (_c *DataFederationApi_CreateDataFederation_Call) Run(run func(ctx context.Context, groupId string, dataLakeTenant *admin.DataLakeTenant)) *DataFederationApi_CreateDataFederation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.DataLakeTenant))
	})
	return _c
}

func (_c *DataFederationApi_CreateDataFederation_Call) Return(_a0 admin.CreateDataFederationApiRequest) *DataFederationApi_CreateDataFederation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_CreateDataFederation_Call) RunAndReturn(run func(context.Context, string, *admin.DataLakeTenant) admin.CreateDataFederationApiRequest) *DataFederationApi_CreateDataFederation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDataFederationExecute provides a mock function with given fields: r
func (_m *DataFederationApi) CreateDataFederationExecute(r admin.CreateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataFederationExecute")
	}

	var r0 *admin.DataLakeTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateDataFederationApiRequest) *admin.DataLakeTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateDataFederationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateDataFederationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_CreateDataFederationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataFederationExecute'
type DataFederationApi_CreateDataFederationExecute_Call struct {
	*mock.Call
}

// CreateDataFederationExecute is a helper method to define mock.On call
//   - r admin.CreateDataFederationApiRequest
func (_e *DataFederationApi_Expecter) CreateDataFederationExecute(r any) *DataFederationApi_CreateDataFederationExecute_Call {
	return &DataFederationApi_CreateDataFederationExecute_Call{Call: _e.mock.On("CreateDataFederationExecute", r)}
}

func (_c *DataFederationApi_CreateDataFederationExecute_Call) Run(run func(r admin.CreateDataFederationApiRequest)) *DataFederationApi_CreateDataFederationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateDataFederationApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_CreateDataFederationExecute_Call) Return(_a0 *admin.DataLakeTenant, _a1 *http.Response, _a2 error) *DataFederationApi_CreateDataFederationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_CreateDataFederationExecute_Call) RunAndReturn(run func(admin.CreateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)) *DataFederationApi_CreateDataFederationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDataFederationWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) CreateDataFederationWithParams(ctx context.Context, args *admin.CreateDataFederationApiParams) admin.CreateDataFederationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataFederationWithParams")
	}

	var r0 admin.CreateDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateDataFederationApiParams) admin.CreateDataFederationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_CreateDataFederationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataFederationWithParams'
type DataFederationApi_CreateDataFederationWithParams_Call struct {
	*mock.Call
}

// CreateDataFederationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateDataFederationApiParams
func (_e *DataFederationApi_Expecter) CreateDataFederationWithParams(ctx any, args any) *DataFederationApi_CreateDataFederationWithParams_Call {
	return &DataFederationApi_CreateDataFederationWithParams_Call{Call: _e.mock.On("CreateDataFederationWithParams", ctx, args)}
}

func (_c *DataFederationApi_CreateDataFederationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateDataFederationApiParams)) *DataFederationApi_CreateDataFederationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateDataFederationApiParams))
	})
	return _c
}

func (_c *DataFederationApi_CreateDataFederationWithParams_Call) Return(_a0 admin.CreateDataFederationApiRequest) *DataFederationApi_CreateDataFederationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_CreateDataFederationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateDataFederationApiParams) admin.CreateDataFederationApiRequest) *DataFederationApi_CreateDataFederationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateEndpointId provides a mock function with given fields: ctx, groupId, privateNetworkEndpointIdEntry
func (_m *DataFederationApi) CreatePrivateEndpointId(ctx context.Context, groupId string, privateNetworkEndpointIdEntry *admin.PrivateNetworkEndpointIdEntry) admin.CreatePrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, groupId, privateNetworkEndpointIdEntry)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateEndpointId")
	}

	var r0 admin.CreatePrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.PrivateNetworkEndpointIdEntry) admin.CreatePrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, groupId, privateNetworkEndpointIdEntry)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_CreatePrivateEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateEndpointId'
type DataFederationApi_CreatePrivateEndpointId_Call struct {
	*mock.Call
}

// CreatePrivateEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - privateNetworkEndpointIdEntry *admin.PrivateNetworkEndpointIdEntry
func (_e *DataFederationApi_Expecter) CreatePrivateEndpointId(ctx any, groupId any, privateNetworkEndpointIdEntry any) *DataFederationApi_CreatePrivateEndpointId_Call {
	return &DataFederationApi_CreatePrivateEndpointId_Call{Call: _e.mock.On("CreatePrivateEndpointId", ctx, groupId, privateNetworkEndpointIdEntry)}
}

func (_c *DataFederationApi_CreatePrivateEndpointId_Call) Run(run func(ctx context.Context, groupId string, privateNetworkEndpointIdEntry *admin.PrivateNetworkEndpointIdEntry)) *DataFederationApi_CreatePrivateEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.PrivateNetworkEndpointIdEntry))
	})
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointId_Call) Return(_a0 admin.CreatePrivateEndpointIdApiRequest) *DataFederationApi_CreatePrivateEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointId_Call) RunAndReturn(run func(context.Context, string, *admin.PrivateNetworkEndpointIdEntry) admin.CreatePrivateEndpointIdApiRequest) *DataFederationApi_CreatePrivateEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateEndpointIdExecute provides a mock function with given fields: r
func (_m *DataFederationApi) CreatePrivateEndpointIdExecute(r admin.CreatePrivateEndpointIdApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateEndpointIdExecute")
	}

	var r0 *admin.PaginatedPrivateNetworkEndpointIdEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateEndpointIdApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateEndpointIdApiRequest) *admin.PaginatedPrivateNetworkEndpointIdEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedPrivateNetworkEndpointIdEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePrivateEndpointIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePrivateEndpointIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_CreatePrivateEndpointIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateEndpointIdExecute'
type DataFederationApi_CreatePrivateEndpointIdExecute_Call struct {
	*mock.Call
}

// CreatePrivateEndpointIdExecute is a helper method to define mock.On call
//   - r admin.CreatePrivateEndpointIdApiRequest
func (_e *DataFederationApi_Expecter) CreatePrivateEndpointIdExecute(r any) *DataFederationApi_CreatePrivateEndpointIdExecute_Call {
	return &DataFederationApi_CreatePrivateEndpointIdExecute_Call{Call: _e.mock.On("CreatePrivateEndpointIdExecute", r)}
}

func (_c *DataFederationApi_CreatePrivateEndpointIdExecute_Call) Run(run func(r admin.CreatePrivateEndpointIdApiRequest)) *DataFederationApi_CreatePrivateEndpointIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePrivateEndpointIdApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointIdExecute_Call) Return(_a0 *admin.PaginatedPrivateNetworkEndpointIdEntry, _a1 *http.Response, _a2 error) *DataFederationApi_CreatePrivateEndpointIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointIdExecute_Call) RunAndReturn(run func(admin.CreatePrivateEndpointIdApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error)) *DataFederationApi_CreatePrivateEndpointIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateEndpointIdWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) CreatePrivateEndpointIdWithParams(ctx context.Context, args *admin.CreatePrivateEndpointIdApiParams) admin.CreatePrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateEndpointIdWithParams")
	}

	var r0 admin.CreatePrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePrivateEndpointIdApiParams) admin.CreatePrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_CreatePrivateEndpointIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateEndpointIdWithParams'
type DataFederationApi_CreatePrivateEndpointIdWithParams_Call struct {
	*mock.Call
}

// CreatePrivateEndpointIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePrivateEndpointIdApiParams
func (_e *DataFederationApi_Expecter) CreatePrivateEndpointIdWithParams(ctx any, args any) *DataFederationApi_CreatePrivateEndpointIdWithParams_Call {
	return &DataFederationApi_CreatePrivateEndpointIdWithParams_Call{Call: _e.mock.On("CreatePrivateEndpointIdWithParams", ctx, args)}
}

func (_c *DataFederationApi_CreatePrivateEndpointIdWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePrivateEndpointIdApiParams)) *DataFederationApi_CreatePrivateEndpointIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePrivateEndpointIdApiParams))
	})
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointIdWithParams_Call) Return(_a0 admin.CreatePrivateEndpointIdApiRequest) *DataFederationApi_CreatePrivateEndpointIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_CreatePrivateEndpointIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePrivateEndpointIdApiParams) admin.CreatePrivateEndpointIdApiRequest) *DataFederationApi_CreatePrivateEndpointIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederation provides a mock function with given fields: ctx, groupId, tenantName
func (_m *DataFederationApi) DeleteDataFederation(ctx context.Context, groupId string, tenantName string) admin.DeleteDataFederationApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederation")
	}

	var r0 admin.DeleteDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteDataFederationApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DeleteDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_DeleteDataFederation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederation'
type DataFederationApi_DeleteDataFederation_Call struct {
	*mock.Call
}

// DeleteDataFederation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *DataFederationApi_Expecter) DeleteDataFederation(ctx any, groupId any, tenantName any) *DataFederationApi_DeleteDataFederation_Call {
	return &DataFederationApi_DeleteDataFederation_Call{Call: _e.mock.On("DeleteDataFederation", ctx, groupId, tenantName)}
}

func (_c *DataFederationApi_DeleteDataFederation_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *DataFederationApi_DeleteDataFederation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederation_Call) Return(_a0 admin.DeleteDataFederationApiRequest) *DataFederationApi_DeleteDataFederation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederation_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteDataFederationApiRequest) *DataFederationApi_DeleteDataFederation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederationExecute provides a mock function with given fields: r
func (_m *DataFederationApi) DeleteDataFederationExecute(r admin.DeleteDataFederationApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederationExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteDataFederationApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteDataFederationApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteDataFederationApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataFederationApi_DeleteDataFederationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederationExecute'
type DataFederationApi_DeleteDataFederationExecute_Call struct {
	*mock.Call
}

// DeleteDataFederationExecute is a helper method to define mock.On call
//   - r admin.DeleteDataFederationApiRequest
func (_e *DataFederationApi_Expecter) DeleteDataFederationExecute(r any) *DataFederationApi_DeleteDataFederationExecute_Call {
	return &DataFederationApi_DeleteDataFederationExecute_Call{Call: _e.mock.On("DeleteDataFederationExecute", r)}
}

func (_c *DataFederationApi_DeleteDataFederationExecute_Call) Run(run func(r admin.DeleteDataFederationApiRequest)) *DataFederationApi_DeleteDataFederationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteDataFederationApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationExecute_Call) Return(_a0 *http.Response, _a1 error) *DataFederationApi_DeleteDataFederationExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationExecute_Call) RunAndReturn(run func(admin.DeleteDataFederationApiRequest) (*http.Response, error)) *DataFederationApi_DeleteDataFederationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederationLimit provides a mock function with given fields: ctx, groupId, tenantName, limitName
func (_m *DataFederationApi) DeleteDataFederationLimit(ctx context.Context, groupId string, tenantName string, limitName string) admin.DeleteDataFederationLimitApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, limitName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederationLimit")
	}

	var r0 admin.DeleteDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, limitName)
	} else {
		r0 = ret.Get(0).(admin.DeleteDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_DeleteDataFederationLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederationLimit'
type DataFederationApi_DeleteDataFederationLimit_Call struct {
	*mock.Call
}

// DeleteDataFederationLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - limitName string
func (_e *DataFederationApi_Expecter) DeleteDataFederationLimit(ctx any, groupId any, tenantName any, limitName any) *DataFederationApi_DeleteDataFederationLimit_Call {
	return &DataFederationApi_DeleteDataFederationLimit_Call{Call: _e.mock.On("DeleteDataFederationLimit", ctx, groupId, tenantName, limitName)}
}

func (_c *DataFederationApi_DeleteDataFederationLimit_Call) Run(run func(ctx context.Context, groupId string, tenantName string, limitName string)) *DataFederationApi_DeleteDataFederationLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimit_Call) Return(_a0 admin.DeleteDataFederationLimitApiRequest) *DataFederationApi_DeleteDataFederationLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimit_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteDataFederationLimitApiRequest) *DataFederationApi_DeleteDataFederationLimit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederationLimitExecute provides a mock function with given fields: r
func (_m *DataFederationApi) DeleteDataFederationLimitExecute(r admin.DeleteDataFederationLimitApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederationLimitExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteDataFederationLimitApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteDataFederationLimitApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteDataFederationLimitApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataFederationApi_DeleteDataFederationLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederationLimitExecute'
type DataFederationApi_DeleteDataFederationLimitExecute_Call struct {
	*mock.Call
}

// DeleteDataFederationLimitExecute is a helper method to define mock.On call
//   - r admin.DeleteDataFederationLimitApiRequest
func (_e *DataFederationApi_Expecter) DeleteDataFederationLimitExecute(r any) *DataFederationApi_DeleteDataFederationLimitExecute_Call {
	return &DataFederationApi_DeleteDataFederationLimitExecute_Call{Call: _e.mock.On("DeleteDataFederationLimitExecute", r)}
}

func (_c *DataFederationApi_DeleteDataFederationLimitExecute_Call) Run(run func(r admin.DeleteDataFederationLimitApiRequest)) *DataFederationApi_DeleteDataFederationLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteDataFederationLimitApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimitExecute_Call) Return(_a0 *http.Response, _a1 error) *DataFederationApi_DeleteDataFederationLimitExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimitExecute_Call) RunAndReturn(run func(admin.DeleteDataFederationLimitApiRequest) (*http.Response, error)) *DataFederationApi_DeleteDataFederationLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederationLimitWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) DeleteDataFederationLimitWithParams(ctx context.Context, args *admin.DeleteDataFederationLimitApiParams) admin.DeleteDataFederationLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederationLimitWithParams")
	}

	var r0 admin.DeleteDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteDataFederationLimitApiParams) admin.DeleteDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_DeleteDataFederationLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederationLimitWithParams'
type DataFederationApi_DeleteDataFederationLimitWithParams_Call struct {
	*mock.Call
}

// DeleteDataFederationLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteDataFederationLimitApiParams
func (_e *DataFederationApi_Expecter) DeleteDataFederationLimitWithParams(ctx any, args any) *DataFederationApi_DeleteDataFederationLimitWithParams_Call {
	return &DataFederationApi_DeleteDataFederationLimitWithParams_Call{Call: _e.mock.On("DeleteDataFederationLimitWithParams", ctx, args)}
}

func (_c *DataFederationApi_DeleteDataFederationLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteDataFederationLimitApiParams)) *DataFederationApi_DeleteDataFederationLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteDataFederationLimitApiParams))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimitWithParams_Call) Return(_a0 admin.DeleteDataFederationLimitApiRequest) *DataFederationApi_DeleteDataFederationLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteDataFederationLimitApiParams) admin.DeleteDataFederationLimitApiRequest) *DataFederationApi_DeleteDataFederationLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFederationWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) DeleteDataFederationWithParams(ctx context.Context, args *admin.DeleteDataFederationApiParams) admin.DeleteDataFederationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFederationWithParams")
	}

	var r0 admin.DeleteDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteDataFederationApiParams) admin.DeleteDataFederationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_DeleteDataFederationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFederationWithParams'
type DataFederationApi_DeleteDataFederationWithParams_Call struct {
	*mock.Call
}

// DeleteDataFederationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteDataFederationApiParams
func (_e *DataFederationApi_Expecter) DeleteDataFederationWithParams(ctx any, args any) *DataFederationApi_DeleteDataFederationWithParams_Call {
	return &DataFederationApi_DeleteDataFederationWithParams_Call{Call: _e.mock.On("DeleteDataFederationWithParams", ctx, args)}
}

func (_c *DataFederationApi_DeleteDataFederationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteDataFederationApiParams)) *DataFederationApi_DeleteDataFederationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteDataFederationApiParams))
	})
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationWithParams_Call) Return(_a0 admin.DeleteDataFederationApiRequest) *DataFederationApi_DeleteDataFederationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeleteDataFederationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteDataFederationApiParams) admin.DeleteDataFederationApiRequest) *DataFederationApi_DeleteDataFederationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateEndpointId provides a mock function with given fields: ctx, groupId, endpointId
func (_m *DataFederationApi) DeletePrivateEndpointId(ctx context.Context, groupId string, endpointId string) admin.DeletePrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, groupId, endpointId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateEndpointId")
	}

	var r0 admin.DeletePrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, groupId, endpointId)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_DeletePrivateEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateEndpointId'
type DataFederationApi_DeletePrivateEndpointId_Call struct {
	*mock.Call
}

// DeletePrivateEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - endpointId string
func (_e *DataFederationApi_Expecter) DeletePrivateEndpointId(ctx any, groupId any, endpointId any) *DataFederationApi_DeletePrivateEndpointId_Call {
	return &DataFederationApi_DeletePrivateEndpointId_Call{Call: _e.mock.On("DeletePrivateEndpointId", ctx, groupId, endpointId)}
}

func (_c *DataFederationApi_DeletePrivateEndpointId_Call) Run(run func(ctx context.Context, groupId string, endpointId string)) *DataFederationApi_DeletePrivateEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointId_Call) Return(_a0 admin.DeletePrivateEndpointIdApiRequest) *DataFederationApi_DeletePrivateEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointId_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePrivateEndpointIdApiRequest) *DataFederationApi_DeletePrivateEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateEndpointIdExecute provides a mock function with given fields: r
func (_m *DataFederationApi) DeletePrivateEndpointIdExecute(r admin.DeletePrivateEndpointIdApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateEndpointIdExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateEndpointIdApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateEndpointIdApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePrivateEndpointIdApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataFederationApi_DeletePrivateEndpointIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateEndpointIdExecute'
type DataFederationApi_DeletePrivateEndpointIdExecute_Call struct {
	*mock.Call
}

// DeletePrivateEndpointIdExecute is a helper method to define mock.On call
//   - r admin.DeletePrivateEndpointIdApiRequest
func (_e *DataFederationApi_Expecter) DeletePrivateEndpointIdExecute(r any) *DataFederationApi_DeletePrivateEndpointIdExecute_Call {
	return &DataFederationApi_DeletePrivateEndpointIdExecute_Call{Call: _e.mock.On("DeletePrivateEndpointIdExecute", r)}
}

func (_c *DataFederationApi_DeletePrivateEndpointIdExecute_Call) Run(run func(r admin.DeletePrivateEndpointIdApiRequest)) *DataFederationApi_DeletePrivateEndpointIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePrivateEndpointIdApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointIdExecute_Call) Return(_a0 *http.Response, _a1 error) *DataFederationApi_DeletePrivateEndpointIdExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointIdExecute_Call) RunAndReturn(run func(admin.DeletePrivateEndpointIdApiRequest) (*http.Response, error)) *DataFederationApi_DeletePrivateEndpointIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateEndpointIdWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) DeletePrivateEndpointIdWithParams(ctx context.Context, args *admin.DeletePrivateEndpointIdApiParams) admin.DeletePrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateEndpointIdWithParams")
	}

	var r0 admin.DeletePrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePrivateEndpointIdApiParams) admin.DeletePrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_DeletePrivateEndpointIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateEndpointIdWithParams'
type DataFederationApi_DeletePrivateEndpointIdWithParams_Call struct {
	*mock.Call
}

// DeletePrivateEndpointIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePrivateEndpointIdApiParams
func (_e *DataFederationApi_Expecter) DeletePrivateEndpointIdWithParams(ctx any, args any) *DataFederationApi_DeletePrivateEndpointIdWithParams_Call {
	return &DataFederationApi_DeletePrivateEndpointIdWithParams_Call{Call: _e.mock.On("DeletePrivateEndpointIdWithParams", ctx, args)}
}

func (_c *DataFederationApi_DeletePrivateEndpointIdWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePrivateEndpointIdApiParams)) *DataFederationApi_DeletePrivateEndpointIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePrivateEndpointIdApiParams))
	})
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointIdWithParams_Call) Return(_a0 admin.DeletePrivateEndpointIdApiRequest) *DataFederationApi_DeletePrivateEndpointIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DeletePrivateEndpointIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePrivateEndpointIdApiParams) admin.DeletePrivateEndpointIdApiRequest) *DataFederationApi_DeletePrivateEndpointIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFederationQueryLogs provides a mock function with given fields: ctx, groupId, tenantName
func (_m *DataFederationApi) DownloadFederationQueryLogs(ctx context.Context, groupId string, tenantName string) admin.DownloadFederationQueryLogsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFederationQueryLogs")
	}

	var r0 admin.DownloadFederationQueryLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DownloadFederationQueryLogsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DownloadFederationQueryLogsApiRequest)
	}

	return r0
}

// DataFederationApi_DownloadFederationQueryLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFederationQueryLogs'
type DataFederationApi_DownloadFederationQueryLogs_Call struct {
	*mock.Call
}

// DownloadFederationQueryLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *DataFederationApi_Expecter) DownloadFederationQueryLogs(ctx any, groupId any, tenantName any) *DataFederationApi_DownloadFederationQueryLogs_Call {
	return &DataFederationApi_DownloadFederationQueryLogs_Call{Call: _e.mock.On("DownloadFederationQueryLogs", ctx, groupId, tenantName)}
}

func (_c *DataFederationApi_DownloadFederationQueryLogs_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *DataFederationApi_DownloadFederationQueryLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogs_Call) Return(_a0 admin.DownloadFederationQueryLogsApiRequest) *DataFederationApi_DownloadFederationQueryLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogs_Call) RunAndReturn(run func(context.Context, string, string) admin.DownloadFederationQueryLogsApiRequest) *DataFederationApi_DownloadFederationQueryLogs_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFederationQueryLogsExecute provides a mock function with given fields: r
func (_m *DataFederationApi) DownloadFederationQueryLogsExecute(r admin.DownloadFederationQueryLogsApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFederationQueryLogsExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadFederationQueryLogsApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadFederationQueryLogsApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadFederationQueryLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadFederationQueryLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_DownloadFederationQueryLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFederationQueryLogsExecute'
type DataFederationApi_DownloadFederationQueryLogsExecute_Call struct {
	*mock.Call
}

// DownloadFederationQueryLogsExecute is a helper method to define mock.On call
//   - r admin.DownloadFederationQueryLogsApiRequest
func (_e *DataFederationApi_Expecter) DownloadFederationQueryLogsExecute(r any) *DataFederationApi_DownloadFederationQueryLogsExecute_Call {
	return &DataFederationApi_DownloadFederationQueryLogsExecute_Call{Call: _e.mock.On("DownloadFederationQueryLogsExecute", r)}
}

func (_c *DataFederationApi_DownloadFederationQueryLogsExecute_Call) Run(run func(r admin.DownloadFederationQueryLogsApiRequest)) *DataFederationApi_DownloadFederationQueryLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadFederationQueryLogsApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogsExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *DataFederationApi_DownloadFederationQueryLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogsExecute_Call) RunAndReturn(run func(admin.DownloadFederationQueryLogsApiRequest) (io.ReadCloser, *http.Response, error)) *DataFederationApi_DownloadFederationQueryLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFederationQueryLogsWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) DownloadFederationQueryLogsWithParams(ctx context.Context, args *admin.DownloadFederationQueryLogsApiParams) admin.DownloadFederationQueryLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFederationQueryLogsWithParams")
	}

	var r0 admin.DownloadFederationQueryLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadFederationQueryLogsApiParams) admin.DownloadFederationQueryLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadFederationQueryLogsApiRequest)
	}

	return r0
}

// DataFederationApi_DownloadFederationQueryLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFederationQueryLogsWithParams'
type DataFederationApi_DownloadFederationQueryLogsWithParams_Call struct {
	*mock.Call
}

// DownloadFederationQueryLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadFederationQueryLogsApiParams
func (_e *DataFederationApi_Expecter) DownloadFederationQueryLogsWithParams(ctx any, args any) *DataFederationApi_DownloadFederationQueryLogsWithParams_Call {
	return &DataFederationApi_DownloadFederationQueryLogsWithParams_Call{Call: _e.mock.On("DownloadFederationQueryLogsWithParams", ctx, args)}
}

func (_c *DataFederationApi_DownloadFederationQueryLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadFederationQueryLogsApiParams)) *DataFederationApi_DownloadFederationQueryLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadFederationQueryLogsApiParams))
	})
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogsWithParams_Call) Return(_a0 admin.DownloadFederationQueryLogsApiRequest) *DataFederationApi_DownloadFederationQueryLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_DownloadFederationQueryLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadFederationQueryLogsApiParams) admin.DownloadFederationQueryLogsApiRequest) *DataFederationApi_DownloadFederationQueryLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederation provides a mock function with given fields: ctx, groupId, tenantName
func (_m *DataFederationApi) GetDataFederation(ctx context.Context, groupId string, tenantName string) admin.GetDataFederationApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederation")
	}

	var r0 admin.GetDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetDataFederationApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.GetDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_GetDataFederation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederation'
type DataFederationApi_GetDataFederation_Call struct {
	*mock.Call
}

// GetDataFederation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *DataFederationApi_Expecter) GetDataFederation(ctx any, groupId any, tenantName any) *DataFederationApi_GetDataFederation_Call {
	return &DataFederationApi_GetDataFederation_Call{Call: _e.mock.On("GetDataFederation", ctx, groupId, tenantName)}
}

func (_c *DataFederationApi_GetDataFederation_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *DataFederationApi_GetDataFederation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederation_Call) Return(_a0 admin.GetDataFederationApiRequest) *DataFederationApi_GetDataFederation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetDataFederation_Call) RunAndReturn(run func(context.Context, string, string) admin.GetDataFederationApiRequest) *DataFederationApi_GetDataFederation_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederationExecute provides a mock function with given fields: r
func (_m *DataFederationApi) GetDataFederationExecute(r admin.GetDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederationExecute")
	}

	var r0 *admin.DataLakeTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDataFederationApiRequest) *admin.DataLakeTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDataFederationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDataFederationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_GetDataFederationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederationExecute'
type DataFederationApi_GetDataFederationExecute_Call struct {
	*mock.Call
}

// GetDataFederationExecute is a helper method to define mock.On call
//   - r admin.GetDataFederationApiRequest
func (_e *DataFederationApi_Expecter) GetDataFederationExecute(r any) *DataFederationApi_GetDataFederationExecute_Call {
	return &DataFederationApi_GetDataFederationExecute_Call{Call: _e.mock.On("GetDataFederationExecute", r)}
}

func (_c *DataFederationApi_GetDataFederationExecute_Call) Run(run func(r admin.GetDataFederationApiRequest)) *DataFederationApi_GetDataFederationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDataFederationApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederationExecute_Call) Return(_a0 *admin.DataLakeTenant, _a1 *http.Response, _a2 error) *DataFederationApi_GetDataFederationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_GetDataFederationExecute_Call) RunAndReturn(run func(admin.GetDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)) *DataFederationApi_GetDataFederationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederationLimit provides a mock function with given fields: ctx, groupId, tenantName, limitName
func (_m *DataFederationApi) GetDataFederationLimit(ctx context.Context, groupId string, tenantName string, limitName string) admin.GetDataFederationLimitApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, limitName)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederationLimit")
	}

	var r0 admin.GetDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, limitName)
	} else {
		r0 = ret.Get(0).(admin.GetDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_GetDataFederationLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederationLimit'
type DataFederationApi_GetDataFederationLimit_Call struct {
	*mock.Call
}

// GetDataFederationLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - limitName string
func (_e *DataFederationApi_Expecter) GetDataFederationLimit(ctx any, groupId any, tenantName any, limitName any) *DataFederationApi_GetDataFederationLimit_Call {
	return &DataFederationApi_GetDataFederationLimit_Call{Call: _e.mock.On("GetDataFederationLimit", ctx, groupId, tenantName, limitName)}
}

func (_c *DataFederationApi_GetDataFederationLimit_Call) Run(run func(ctx context.Context, groupId string, tenantName string, limitName string)) *DataFederationApi_GetDataFederationLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimit_Call) Return(_a0 admin.GetDataFederationLimitApiRequest) *DataFederationApi_GetDataFederationLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimit_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetDataFederationLimitApiRequest) *DataFederationApi_GetDataFederationLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederationLimitExecute provides a mock function with given fields: r
func (_m *DataFederationApi) GetDataFederationLimitExecute(r admin.GetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederationLimitExecute")
	}

	var r0 *admin.DataFederationTenantQueryLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetDataFederationLimitApiRequest) *admin.DataFederationTenantQueryLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationTenantQueryLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetDataFederationLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetDataFederationLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_GetDataFederationLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederationLimitExecute'
type DataFederationApi_GetDataFederationLimitExecute_Call struct {
	*mock.Call
}

// GetDataFederationLimitExecute is a helper method to define mock.On call
//   - r admin.GetDataFederationLimitApiRequest
func (_e *DataFederationApi_Expecter) GetDataFederationLimitExecute(r any) *DataFederationApi_GetDataFederationLimitExecute_Call {
	return &DataFederationApi_GetDataFederationLimitExecute_Call{Call: _e.mock.On("GetDataFederationLimitExecute", r)}
}

func (_c *DataFederationApi_GetDataFederationLimitExecute_Call) Run(run func(r admin.GetDataFederationLimitApiRequest)) *DataFederationApi_GetDataFederationLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetDataFederationLimitApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimitExecute_Call) Return(_a0 *admin.DataFederationTenantQueryLimit, _a1 *http.Response, _a2 error) *DataFederationApi_GetDataFederationLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimitExecute_Call) RunAndReturn(run func(admin.GetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error)) *DataFederationApi_GetDataFederationLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederationLimitWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) GetDataFederationLimitWithParams(ctx context.Context, args *admin.GetDataFederationLimitApiParams) admin.GetDataFederationLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederationLimitWithParams")
	}

	var r0 admin.GetDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDataFederationLimitApiParams) admin.GetDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_GetDataFederationLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederationLimitWithParams'
type DataFederationApi_GetDataFederationLimitWithParams_Call struct {
	*mock.Call
}

// GetDataFederationLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDataFederationLimitApiParams
func (_e *DataFederationApi_Expecter) GetDataFederationLimitWithParams(ctx any, args any) *DataFederationApi_GetDataFederationLimitWithParams_Call {
	return &DataFederationApi_GetDataFederationLimitWithParams_Call{Call: _e.mock.On("GetDataFederationLimitWithParams", ctx, args)}
}

func (_c *DataFederationApi_GetDataFederationLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDataFederationLimitApiParams)) *DataFederationApi_GetDataFederationLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDataFederationLimitApiParams))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimitWithParams_Call) Return(_a0 admin.GetDataFederationLimitApiRequest) *DataFederationApi_GetDataFederationLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetDataFederationLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDataFederationLimitApiParams) admin.GetDataFederationLimitApiRequest) *DataFederationApi_GetDataFederationLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFederationWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) GetDataFederationWithParams(ctx context.Context, args *admin.GetDataFederationApiParams) admin.GetDataFederationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFederationWithParams")
	}

	var r0 admin.GetDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDataFederationApiParams) admin.GetDataFederationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_GetDataFederationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFederationWithParams'
type DataFederationApi_GetDataFederationWithParams_Call struct {
	*mock.Call
}

// GetDataFederationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetDataFederationApiParams
func (_e *DataFederationApi_Expecter) GetDataFederationWithParams(ctx any, args any) *DataFederationApi_GetDataFederationWithParams_Call {
	return &DataFederationApi_GetDataFederationWithParams_Call{Call: _e.mock.On("GetDataFederationWithParams", ctx, args)}
}

func (_c *DataFederationApi_GetDataFederationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetDataFederationApiParams)) *DataFederationApi_GetDataFederationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDataFederationApiParams))
	})
	return _c
}

func (_c *DataFederationApi_GetDataFederationWithParams_Call) Return(_a0 admin.GetDataFederationApiRequest) *DataFederationApi_GetDataFederationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetDataFederationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetDataFederationApiParams) admin.GetDataFederationApiRequest) *DataFederationApi_GetDataFederationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateEndpointId provides a mock function with given fields: ctx, groupId, endpointId
func (_m *DataFederationApi) GetPrivateEndpointId(ctx context.Context, groupId string, endpointId string) admin.GetPrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, groupId, endpointId)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateEndpointId")
	}

	var r0 admin.GetPrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, groupId, endpointId)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_GetPrivateEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateEndpointId'
type DataFederationApi_GetPrivateEndpointId_Call struct {
	*mock.Call
}

// GetPrivateEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - endpointId string
func (_e *DataFederationApi_Expecter) GetPrivateEndpointId(ctx any, groupId any, endpointId any) *DataFederationApi_GetPrivateEndpointId_Call {
	return &DataFederationApi_GetPrivateEndpointId_Call{Call: _e.mock.On("GetPrivateEndpointId", ctx, groupId, endpointId)}
}

func (_c *DataFederationApi_GetPrivateEndpointId_Call) Run(run func(ctx context.Context, groupId string, endpointId string)) *DataFederationApi_GetPrivateEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointId_Call) Return(_a0 admin.GetPrivateEndpointIdApiRequest) *DataFederationApi_GetPrivateEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointId_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPrivateEndpointIdApiRequest) *DataFederationApi_GetPrivateEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateEndpointIdExecute provides a mock function with given fields: r
func (_m *DataFederationApi) GetPrivateEndpointIdExecute(r admin.GetPrivateEndpointIdApiRequest) (*admin.PrivateNetworkEndpointIdEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateEndpointIdExecute")
	}

	var r0 *admin.PrivateNetworkEndpointIdEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPrivateEndpointIdApiRequest) (*admin.PrivateNetworkEndpointIdEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPrivateEndpointIdApiRequest) *admin.PrivateNetworkEndpointIdEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PrivateNetworkEndpointIdEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPrivateEndpointIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPrivateEndpointIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_GetPrivateEndpointIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateEndpointIdExecute'
type DataFederationApi_GetPrivateEndpointIdExecute_Call struct {
	*mock.Call
}

// GetPrivateEndpointIdExecute is a helper method to define mock.On call
//   - r admin.GetPrivateEndpointIdApiRequest
func (_e *DataFederationApi_Expecter) GetPrivateEndpointIdExecute(r any) *DataFederationApi_GetPrivateEndpointIdExecute_Call {
	return &DataFederationApi_GetPrivateEndpointIdExecute_Call{Call: _e.mock.On("GetPrivateEndpointIdExecute", r)}
}

func (_c *DataFederationApi_GetPrivateEndpointIdExecute_Call) Run(run func(r admin.GetPrivateEndpointIdApiRequest)) *DataFederationApi_GetPrivateEndpointIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPrivateEndpointIdApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointIdExecute_Call) Return(_a0 *admin.PrivateNetworkEndpointIdEntry, _a1 *http.Response, _a2 error) *DataFederationApi_GetPrivateEndpointIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointIdExecute_Call) RunAndReturn(run func(admin.GetPrivateEndpointIdApiRequest) (*admin.PrivateNetworkEndpointIdEntry, *http.Response, error)) *DataFederationApi_GetPrivateEndpointIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateEndpointIdWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) GetPrivateEndpointIdWithParams(ctx context.Context, args *admin.GetPrivateEndpointIdApiParams) admin.GetPrivateEndpointIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateEndpointIdWithParams")
	}

	var r0 admin.GetPrivateEndpointIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPrivateEndpointIdApiParams) admin.GetPrivateEndpointIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateEndpointIdApiRequest)
	}

	return r0
}

// DataFederationApi_GetPrivateEndpointIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateEndpointIdWithParams'
type DataFederationApi_GetPrivateEndpointIdWithParams_Call struct {
	*mock.Call
}

// GetPrivateEndpointIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPrivateEndpointIdApiParams
func (_e *DataFederationApi_Expecter) GetPrivateEndpointIdWithParams(ctx any, args any) *DataFederationApi_GetPrivateEndpointIdWithParams_Call {
	return &DataFederationApi_GetPrivateEndpointIdWithParams_Call{Call: _e.mock.On("GetPrivateEndpointIdWithParams", ctx, args)}
}

func (_c *DataFederationApi_GetPrivateEndpointIdWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPrivateEndpointIdApiParams)) *DataFederationApi_GetPrivateEndpointIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPrivateEndpointIdApiParams))
	})
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointIdWithParams_Call) Return(_a0 admin.GetPrivateEndpointIdApiRequest) *DataFederationApi_GetPrivateEndpointIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_GetPrivateEndpointIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPrivateEndpointIdApiParams) admin.GetPrivateEndpointIdApiRequest) *DataFederationApi_GetPrivateEndpointIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederation provides a mock function with given fields: ctx, groupId
func (_m *DataFederationApi) ListDataFederation(ctx context.Context, groupId string) admin.ListDataFederationApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederation")
	}

	var r0 admin.ListDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListDataFederationApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_ListDataFederation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederation'
type DataFederationApi_ListDataFederation_Call struct {
	*mock.Call
}

// ListDataFederation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *DataFederationApi_Expecter) ListDataFederation(ctx any, groupId any) *DataFederationApi_ListDataFederation_Call {
	return &DataFederationApi_ListDataFederation_Call{Call: _e.mock.On("ListDataFederation", ctx, groupId)}
}

func (_c *DataFederationApi_ListDataFederation_Call) Run(run func(ctx context.Context, groupId string)) *DataFederationApi_ListDataFederation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederation_Call) Return(_a0 admin.ListDataFederationApiRequest) *DataFederationApi_ListDataFederation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListDataFederation_Call) RunAndReturn(run func(context.Context, string) admin.ListDataFederationApiRequest) *DataFederationApi_ListDataFederation_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederationExecute provides a mock function with given fields: r
func (_m *DataFederationApi) ListDataFederationExecute(r admin.ListDataFederationApiRequest) ([]admin.DataLakeTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederationExecute")
	}

	var r0 []admin.DataLakeTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDataFederationApiRequest) ([]admin.DataLakeTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDataFederationApiRequest) []admin.DataLakeTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataLakeTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDataFederationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDataFederationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_ListDataFederationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederationExecute'
type DataFederationApi_ListDataFederationExecute_Call struct {
	*mock.Call
}

// ListDataFederationExecute is a helper method to define mock.On call
//   - r admin.ListDataFederationApiRequest
func (_e *DataFederationApi_Expecter) ListDataFederationExecute(r any) *DataFederationApi_ListDataFederationExecute_Call {
	return &DataFederationApi_ListDataFederationExecute_Call{Call: _e.mock.On("ListDataFederationExecute", r)}
}

func (_c *DataFederationApi_ListDataFederationExecute_Call) Run(run func(r admin.ListDataFederationApiRequest)) *DataFederationApi_ListDataFederationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDataFederationApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederationExecute_Call) Return(_a0 []admin.DataLakeTenant, _a1 *http.Response, _a2 error) *DataFederationApi_ListDataFederationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_ListDataFederationExecute_Call) RunAndReturn(run func(admin.ListDataFederationApiRequest) ([]admin.DataLakeTenant, *http.Response, error)) *DataFederationApi_ListDataFederationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederationLimits provides a mock function with given fields: ctx, groupId, tenantName
func (_m *DataFederationApi) ListDataFederationLimits(ctx context.Context, groupId string, tenantName string) admin.ListDataFederationLimitsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederationLimits")
	}

	var r0 admin.ListDataFederationLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDataFederationLimitsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.ListDataFederationLimitsApiRequest)
	}

	return r0
}

// DataFederationApi_ListDataFederationLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederationLimits'
type DataFederationApi_ListDataFederationLimits_Call struct {
	*mock.Call
}

// ListDataFederationLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *DataFederationApi_Expecter) ListDataFederationLimits(ctx any, groupId any, tenantName any) *DataFederationApi_ListDataFederationLimits_Call {
	return &DataFederationApi_ListDataFederationLimits_Call{Call: _e.mock.On("ListDataFederationLimits", ctx, groupId, tenantName)}
}

func (_c *DataFederationApi_ListDataFederationLimits_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *DataFederationApi_ListDataFederationLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimits_Call) Return(_a0 admin.ListDataFederationLimitsApiRequest) *DataFederationApi_ListDataFederationLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimits_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDataFederationLimitsApiRequest) *DataFederationApi_ListDataFederationLimits_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederationLimitsExecute provides a mock function with given fields: r
func (_m *DataFederationApi) ListDataFederationLimitsExecute(r admin.ListDataFederationLimitsApiRequest) ([]admin.DataFederationTenantQueryLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederationLimitsExecute")
	}

	var r0 []admin.DataFederationTenantQueryLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDataFederationLimitsApiRequest) ([]admin.DataFederationTenantQueryLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDataFederationLimitsApiRequest) []admin.DataFederationTenantQueryLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataFederationTenantQueryLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDataFederationLimitsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDataFederationLimitsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_ListDataFederationLimitsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederationLimitsExecute'
type DataFederationApi_ListDataFederationLimitsExecute_Call struct {
	*mock.Call
}

// ListDataFederationLimitsExecute is a helper method to define mock.On call
//   - r admin.ListDataFederationLimitsApiRequest
func (_e *DataFederationApi_Expecter) ListDataFederationLimitsExecute(r any) *DataFederationApi_ListDataFederationLimitsExecute_Call {
	return &DataFederationApi_ListDataFederationLimitsExecute_Call{Call: _e.mock.On("ListDataFederationLimitsExecute", r)}
}

func (_c *DataFederationApi_ListDataFederationLimitsExecute_Call) Run(run func(r admin.ListDataFederationLimitsApiRequest)) *DataFederationApi_ListDataFederationLimitsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDataFederationLimitsApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimitsExecute_Call) Return(_a0 []admin.DataFederationTenantQueryLimit, _a1 *http.Response, _a2 error) *DataFederationApi_ListDataFederationLimitsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimitsExecute_Call) RunAndReturn(run func(admin.ListDataFederationLimitsApiRequest) ([]admin.DataFederationTenantQueryLimit, *http.Response, error)) *DataFederationApi_ListDataFederationLimitsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederationLimitsWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) ListDataFederationLimitsWithParams(ctx context.Context, args *admin.ListDataFederationLimitsApiParams) admin.ListDataFederationLimitsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederationLimitsWithParams")
	}

	var r0 admin.ListDataFederationLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDataFederationLimitsApiParams) admin.ListDataFederationLimitsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDataFederationLimitsApiRequest)
	}

	return r0
}

// DataFederationApi_ListDataFederationLimitsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederationLimitsWithParams'
type DataFederationApi_ListDataFederationLimitsWithParams_Call struct {
	*mock.Call
}

// ListDataFederationLimitsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDataFederationLimitsApiParams
func (_e *DataFederationApi_Expecter) ListDataFederationLimitsWithParams(ctx any, args any) *DataFederationApi_ListDataFederationLimitsWithParams_Call {
	return &DataFederationApi_ListDataFederationLimitsWithParams_Call{Call: _e.mock.On("ListDataFederationLimitsWithParams", ctx, args)}
}

func (_c *DataFederationApi_ListDataFederationLimitsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDataFederationLimitsApiParams)) *DataFederationApi_ListDataFederationLimitsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDataFederationLimitsApiParams))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimitsWithParams_Call) Return(_a0 admin.ListDataFederationLimitsApiRequest) *DataFederationApi_ListDataFederationLimitsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListDataFederationLimitsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDataFederationLimitsApiParams) admin.ListDataFederationLimitsApiRequest) *DataFederationApi_ListDataFederationLimitsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDataFederationWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) ListDataFederationWithParams(ctx context.Context, args *admin.ListDataFederationApiParams) admin.ListDataFederationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDataFederationWithParams")
	}

	var r0 admin.ListDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDataFederationApiParams) admin.ListDataFederationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_ListDataFederationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDataFederationWithParams'
type DataFederationApi_ListDataFederationWithParams_Call struct {
	*mock.Call
}

// ListDataFederationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDataFederationApiParams
func (_e *DataFederationApi_Expecter) ListDataFederationWithParams(ctx any, args any) *DataFederationApi_ListDataFederationWithParams_Call {
	return &DataFederationApi_ListDataFederationWithParams_Call{Call: _e.mock.On("ListDataFederationWithParams", ctx, args)}
}

func (_c *DataFederationApi_ListDataFederationWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDataFederationApiParams)) *DataFederationApi_ListDataFederationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDataFederationApiParams))
	})
	return _c
}

func (_c *DataFederationApi_ListDataFederationWithParams_Call) Return(_a0 admin.ListDataFederationApiRequest) *DataFederationApi_ListDataFederationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListDataFederationWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDataFederationApiParams) admin.ListDataFederationApiRequest) *DataFederationApi_ListDataFederationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointIds provides a mock function with given fields: ctx, groupId
func (_m *DataFederationApi) ListPrivateEndpointIds(ctx context.Context, groupId string) admin.ListPrivateEndpointIdsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointIds")
	}

	var r0 admin.ListPrivateEndpointIdsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPrivateEndpointIdsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateEndpointIdsApiRequest)
	}

	return r0
}

// DataFederationApi_ListPrivateEndpointIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointIds'
type DataFederationApi_ListPrivateEndpointIds_Call struct {
	*mock.Call
}

// ListPrivateEndpointIds is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *DataFederationApi_Expecter) ListPrivateEndpointIds(ctx any, groupId any) *DataFederationApi_ListPrivateEndpointIds_Call {
	return &DataFederationApi_ListPrivateEndpointIds_Call{Call: _e.mock.On("ListPrivateEndpointIds", ctx, groupId)}
}

func (_c *DataFederationApi_ListPrivateEndpointIds_Call) Run(run func(ctx context.Context, groupId string)) *DataFederationApi_ListPrivateEndpointIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIds_Call) Return(_a0 admin.ListPrivateEndpointIdsApiRequest) *DataFederationApi_ListPrivateEndpointIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIds_Call) RunAndReturn(run func(context.Context, string) admin.ListPrivateEndpointIdsApiRequest) *DataFederationApi_ListPrivateEndpointIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointIdsExecute provides a mock function with given fields: r
func (_m *DataFederationApi) ListPrivateEndpointIdsExecute(r admin.ListPrivateEndpointIdsApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointIdsExecute")
	}

	var r0 *admin.PaginatedPrivateNetworkEndpointIdEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPrivateEndpointIdsApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPrivateEndpointIdsApiRequest) *admin.PaginatedPrivateNetworkEndpointIdEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedPrivateNetworkEndpointIdEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPrivateEndpointIdsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPrivateEndpointIdsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_ListPrivateEndpointIdsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointIdsExecute'
type DataFederationApi_ListPrivateEndpointIdsExecute_Call struct {
	*mock.Call
}

// ListPrivateEndpointIdsExecute is a helper method to define mock.On call
//   - r admin.ListPrivateEndpointIdsApiRequest
func (_e *DataFederationApi_Expecter) ListPrivateEndpointIdsExecute(r any) *DataFederationApi_ListPrivateEndpointIdsExecute_Call {
	return &DataFederationApi_ListPrivateEndpointIdsExecute_Call{Call: _e.mock.On("ListPrivateEndpointIdsExecute", r)}
}

func (_c *DataFederationApi_ListPrivateEndpointIdsExecute_Call) Run(run func(r admin.ListPrivateEndpointIdsApiRequest)) *DataFederationApi_ListPrivateEndpointIdsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPrivateEndpointIdsApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIdsExecute_Call) Return(_a0 *admin.PaginatedPrivateNetworkEndpointIdEntry, _a1 *http.Response, _a2 error) *DataFederationApi_ListPrivateEndpointIdsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIdsExecute_Call) RunAndReturn(run func(admin.ListPrivateEndpointIdsApiRequest) (*admin.PaginatedPrivateNetworkEndpointIdEntry, *http.Response, error)) *DataFederationApi_ListPrivateEndpointIdsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointIdsWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) ListPrivateEndpointIdsWithParams(ctx context.Context, args *admin.ListPrivateEndpointIdsApiParams) admin.ListPrivateEndpointIdsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointIdsWithParams")
	}

	var r0 admin.ListPrivateEndpointIdsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPrivateEndpointIdsApiParams) admin.ListPrivateEndpointIdsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateEndpointIdsApiRequest)
	}

	return r0
}

// DataFederationApi_ListPrivateEndpointIdsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointIdsWithParams'
type DataFederationApi_ListPrivateEndpointIdsWithParams_Call struct {
	*mock.Call
}

// ListPrivateEndpointIdsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPrivateEndpointIdsApiParams
func (_e *DataFederationApi_Expecter) ListPrivateEndpointIdsWithParams(ctx any, args any) *DataFederationApi_ListPrivateEndpointIdsWithParams_Call {
	return &DataFederationApi_ListPrivateEndpointIdsWithParams_Call{Call: _e.mock.On("ListPrivateEndpointIdsWithParams", ctx, args)}
}

func (_c *DataFederationApi_ListPrivateEndpointIdsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPrivateEndpointIdsApiParams)) *DataFederationApi_ListPrivateEndpointIdsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPrivateEndpointIdsApiParams))
	})
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIdsWithParams_Call) Return(_a0 admin.ListPrivateEndpointIdsApiRequest) *DataFederationApi_ListPrivateEndpointIdsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_ListPrivateEndpointIdsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPrivateEndpointIdsApiParams) admin.ListPrivateEndpointIdsApiRequest) *DataFederationApi_ListPrivateEndpointIdsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataFederationLimit provides a mock function with given fields: ctx, groupId, tenantName, limitName, dataFederationTenantQueryLimit
func (_m *DataFederationApi) SetDataFederationLimit(ctx context.Context, groupId string, tenantName string, limitName string, dataFederationTenantQueryLimit *admin.DataFederationTenantQueryLimit) admin.SetDataFederationLimitApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, limitName, dataFederationTenantQueryLimit)

	if len(ret) == 0 {
		panic("no return value specified for SetDataFederationLimit")
	}

	var r0 admin.SetDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.DataFederationTenantQueryLimit) admin.SetDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, limitName, dataFederationTenantQueryLimit)
	} else {
		r0 = ret.Get(0).(admin.SetDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_SetDataFederationLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataFederationLimit'
type DataFederationApi_SetDataFederationLimit_Call struct {
	*mock.Call
}

// SetDataFederationLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - limitName string
//   - dataFederationTenantQueryLimit *admin.DataFederationTenantQueryLimit
func (_e *DataFederationApi_Expecter) SetDataFederationLimit(ctx any, groupId any, tenantName any, limitName any, dataFederationTenantQueryLimit any) *DataFederationApi_SetDataFederationLimit_Call {
	return &DataFederationApi_SetDataFederationLimit_Call{Call: _e.mock.On("SetDataFederationLimit", ctx, groupId, tenantName, limitName, dataFederationTenantQueryLimit)}
}

func (_c *DataFederationApi_SetDataFederationLimit_Call) Run(run func(ctx context.Context, groupId string, tenantName string, limitName string, dataFederationTenantQueryLimit *admin.DataFederationTenantQueryLimit)) *DataFederationApi_SetDataFederationLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.DataFederationTenantQueryLimit))
	})
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimit_Call) Return(_a0 admin.SetDataFederationLimitApiRequest) *DataFederationApi_SetDataFederationLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimit_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.DataFederationTenantQueryLimit) admin.SetDataFederationLimitApiRequest) *DataFederationApi_SetDataFederationLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataFederationLimitExecute provides a mock function with given fields: r
func (_m *DataFederationApi) SetDataFederationLimitExecute(r admin.SetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetDataFederationLimitExecute")
	}

	var r0 *admin.DataFederationTenantQueryLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.SetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SetDataFederationLimitApiRequest) *admin.DataFederationTenantQueryLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationTenantQueryLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SetDataFederationLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.SetDataFederationLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_SetDataFederationLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataFederationLimitExecute'
type DataFederationApi_SetDataFederationLimitExecute_Call struct {
	*mock.Call
}

// SetDataFederationLimitExecute is a helper method to define mock.On call
//   - r admin.SetDataFederationLimitApiRequest
func (_e *DataFederationApi_Expecter) SetDataFederationLimitExecute(r any) *DataFederationApi_SetDataFederationLimitExecute_Call {
	return &DataFederationApi_SetDataFederationLimitExecute_Call{Call: _e.mock.On("SetDataFederationLimitExecute", r)}
}

func (_c *DataFederationApi_SetDataFederationLimitExecute_Call) Run(run func(r admin.SetDataFederationLimitApiRequest)) *DataFederationApi_SetDataFederationLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SetDataFederationLimitApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimitExecute_Call) Return(_a0 *admin.DataFederationTenantQueryLimit, _a1 *http.Response, _a2 error) *DataFederationApi_SetDataFederationLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimitExecute_Call) RunAndReturn(run func(admin.SetDataFederationLimitApiRequest) (*admin.DataFederationTenantQueryLimit, *http.Response, error)) *DataFederationApi_SetDataFederationLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataFederationLimitWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) SetDataFederationLimitWithParams(ctx context.Context, args *admin.SetDataFederationLimitApiParams) admin.SetDataFederationLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SetDataFederationLimitWithParams")
	}

	var r0 admin.SetDataFederationLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SetDataFederationLimitApiParams) admin.SetDataFederationLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SetDataFederationLimitApiRequest)
	}

	return r0
}

// DataFederationApi_SetDataFederationLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataFederationLimitWithParams'
type DataFederationApi_SetDataFederationLimitWithParams_Call struct {
	*mock.Call
}

// SetDataFederationLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SetDataFederationLimitApiParams
func (_e *DataFederationApi_Expecter) SetDataFederationLimitWithParams(ctx any, args any) *DataFederationApi_SetDataFederationLimitWithParams_Call {
	return &DataFederationApi_SetDataFederationLimitWithParams_Call{Call: _e.mock.On("SetDataFederationLimitWithParams", ctx, args)}
}

func (_c *DataFederationApi_SetDataFederationLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.SetDataFederationLimitApiParams)) *DataFederationApi_SetDataFederationLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SetDataFederationLimitApiParams))
	})
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimitWithParams_Call) Return(_a0 admin.SetDataFederationLimitApiRequest) *DataFederationApi_SetDataFederationLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_SetDataFederationLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.SetDataFederationLimitApiParams) admin.SetDataFederationLimitApiRequest) *DataFederationApi_SetDataFederationLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataFederation provides a mock function with given fields: ctx, groupId, tenantName, dataLakeTenant
func (_m *DataFederationApi) UpdateDataFederation(ctx context.Context, groupId string, tenantName string, dataLakeTenant *admin.DataLakeTenant) admin.UpdateDataFederationApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, dataLakeTenant)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataFederation")
	}

	var r0 admin.UpdateDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataLakeTenant) admin.UpdateDataFederationApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, dataLakeTenant)
	} else {
		r0 = ret.Get(0).(admin.UpdateDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_UpdateDataFederation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataFederation'
type DataFederationApi_UpdateDataFederation_Call struct {
	*mock.Call
}

// UpdateDataFederation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - dataLakeTenant *admin.DataLakeTenant
func (_e *DataFederationApi_Expecter) UpdateDataFederation(ctx any, groupId any, tenantName any, dataLakeTenant any) *DataFederationApi_UpdateDataFederation_Call {
	return &DataFederationApi_UpdateDataFederation_Call{Call: _e.mock.On("UpdateDataFederation", ctx, groupId, tenantName, dataLakeTenant)}
}

func (_c *DataFederationApi_UpdateDataFederation_Call) Run(run func(ctx context.Context, groupId string, tenantName string, dataLakeTenant *admin.DataLakeTenant)) *DataFederationApi_UpdateDataFederation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataLakeTenant))
	})
	return _c
}

func (_c *DataFederationApi_UpdateDataFederation_Call) Return(_a0 admin.UpdateDataFederationApiRequest) *DataFederationApi_UpdateDataFederation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_UpdateDataFederation_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataLakeTenant) admin.UpdateDataFederationApiRequest) *DataFederationApi_UpdateDataFederation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataFederationExecute provides a mock function with given fields: r
func (_m *DataFederationApi) UpdateDataFederationExecute(r admin.UpdateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataFederationExecute")
	}

	var r0 *admin.DataLakeTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateDataFederationApiRequest) *admin.DataLakeTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateDataFederationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateDataFederationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataFederationApi_UpdateDataFederationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataFederationExecute'
type DataFederationApi_UpdateDataFederationExecute_Call struct {
	*mock.Call
}

// UpdateDataFederationExecute is a helper method to define mock.On call
//   - r admin.UpdateDataFederationApiRequest
func (_e *DataFederationApi_Expecter) UpdateDataFederationExecute(r any) *DataFederationApi_UpdateDataFederationExecute_Call {
	return &DataFederationApi_UpdateDataFederationExecute_Call{Call: _e.mock.On("UpdateDataFederationExecute", r)}
}

func (_c *DataFederationApi_UpdateDataFederationExecute_Call) Run(run func(r admin.UpdateDataFederationApiRequest)) *DataFederationApi_UpdateDataFederationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateDataFederationApiRequest))
	})
	return _c
}

func (_c *DataFederationApi_UpdateDataFederationExecute_Call) Return(_a0 *admin.DataLakeTenant, _a1 *http.Response, _a2 error) *DataFederationApi_UpdateDataFederationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataFederationApi_UpdateDataFederationExecute_Call) RunAndReturn(run func(admin.UpdateDataFederationApiRequest) (*admin.DataLakeTenant, *http.Response, error)) *DataFederationApi_UpdateDataFederationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataFederationWithParams provides a mock function with given fields: ctx, args
func (_m *DataFederationApi) UpdateDataFederationWithParams(ctx context.Context, args *admin.UpdateDataFederationApiParams) admin.UpdateDataFederationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataFederationWithParams")
	}

	var r0 admin.UpdateDataFederationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateDataFederationApiParams) admin.UpdateDataFederationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateDataFederationApiRequest)
	}

	return r0
}

// DataFederationApi_UpdateDataFederationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataFederationWithParams'
type DataFederationApi_UpdateDataFederationWithParams_Call struct {
	*mock.Call
}

// UpdateDataFederationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateDataFederationApiParams
func (_e *DataFederationApi_Expecter) UpdateDataFederationWithParams(ctx any, args any) *DataFederationApi_UpdateDataFederationWithParams_Call {
	return &DataFederationApi_UpdateDataFederationWithParams_Call{Call: _e.mock.On("UpdateDataFederationWithParams", ctx, args)}
}

func (_c *DataFederationApi_UpdateDataFederationWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateDataFederationApiParams)) *DataFederationApi_UpdateDataFederationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateDataFederationApiParams))
	})
	return _c
}

func (_c *DataFederationApi_UpdateDataFederationWithParams_Call) Return(_a0 admin.UpdateDataFederationApiRequest) *DataFederationApi_UpdateDataFederationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationApi_UpdateDataFederationWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateDataFederationApiParams) admin.UpdateDataFederationApiRequest) *DataFederationApi_UpdateDataFederationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataFederationApi creates a new instance of DataFederationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataFederationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataFederationApi {
	mock := &DataFederationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
