// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240805002/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ServiceAccountsApi is an autogenerated mock type for the ServiceAccountsApi type
type ServiceAccountsApi struct {
	mock.Mock
}

type ServiceAccountsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAccountsApi) EXPECT() *ServiceAccountsApi_Expecter {
	return &ServiceAccountsApi_Expecter{mock: &_m.Mock}
}

// CreateProjectServiceAccount provides a mock function with given fields: ctx, groupId, groupServiceAccountRequest
func (_m *ServiceAccountsApi) CreateProjectServiceAccount(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, groupServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccount")
	}

	var r0 admin.CreateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, groupServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccount'
type ServiceAccountsApi_CreateProjectServiceAccount_Call struct {
	*mock.Call
}

// CreateProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupServiceAccountRequest *admin.GroupServiceAccountRequest
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccount(ctx interface{}, groupId interface{}, groupServiceAccountRequest interface{}) *ServiceAccountsApi_CreateProjectServiceAccount_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccount_Call{Call: _e.mock.On("CreateProjectServiceAccount", ctx, groupId, groupServiceAccountRequest)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccount_Call) Run(run func(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest)) *ServiceAccountsApi_CreateProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupServiceAccountRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccount_Call) Return(_a0 admin.CreateProjectServiceAccountApiRequest) *ServiceAccountsApi_CreateProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateProjectServiceAccountApiRequest) *ServiceAccountsApi_CreateProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountAccessList provides a mock function with given fields: ctx, groupId, clientId, serviceAccountIPAccessListEntry
func (_m *ServiceAccountsApi) CreateProjectServiceAccountAccessList(ctx context.Context, groupId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry) admin.CreateProjectServiceAccountAccessListApiRequest {
	ret := _m.Called(ctx, groupId, clientId, serviceAccountIPAccessListEntry)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountAccessList")
	}

	var r0 admin.CreateProjectServiceAccountAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateProjectServiceAccountAccessListApiRequest); ok {
		r0 = rf(ctx, groupId, clientId, serviceAccountIPAccessListEntry)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountAccessList'
type ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
//   - serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccountAccessList(ctx interface{}, groupId interface{}, clientId interface{}, serviceAccountIPAccessListEntry interface{}) *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call{Call: _e.mock.On("CreateProjectServiceAccountAccessList", ctx, groupId, clientId, serviceAccountIPAccessListEntry)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call) Run(run func(ctx context.Context, groupId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry)) *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*[]admin.ServiceAccountIPAccessListEntry))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call) Return(_a0 admin.CreateProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call) RunAndReturn(run func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateProjectServiceAccountAccessListExecute(r admin.CreateProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateProjectServiceAccountAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateProjectServiceAccountAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountAccessListExecute'
type ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountAccessListExecute is a helper method to define mock.On call
//   - r admin.CreateProjectServiceAccountAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccountAccessListExecute(r interface{}) *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call{Call: _e.mock.On("CreateProjectServiceAccountAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call) Run(run func(r admin.CreateProjectServiceAccountAccessListApiRequest)) *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateProjectServiceAccountAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call) RunAndReturn(run func(admin.CreateProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_CreateProjectServiceAccountAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateProjectServiceAccountAccessListWithParams(ctx context.Context, args *admin.CreateProjectServiceAccountAccessListApiParams) admin.CreateProjectServiceAccountAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountAccessListWithParams")
	}

	var r0 admin.CreateProjectServiceAccountAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateProjectServiceAccountAccessListApiParams) admin.CreateProjectServiceAccountAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountAccessListWithParams'
type ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateProjectServiceAccountAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccountAccessListWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call{Call: _e.mock.On("CreateProjectServiceAccountAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateProjectServiceAccountAccessListApiParams)) *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateProjectServiceAccountAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call) Return(_a0 admin.CreateProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateProjectServiceAccountAccessListApiParams) admin.CreateProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateProjectServiceAccountExecute(r admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateProjectServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountExecute'
type ServiceAccountsApi_CreateProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateProjectServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccountExecute(r interface{}) *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccountExecute_Call{Call: _e.mock.On("CreateProjectServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call) Run(run func(r admin.CreateProjectServiceAccountApiRequest)) *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_CreateProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateProjectServiceAccountWithParams(ctx context.Context, args *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectServiceAccountWithParams")
	}

	var r0 admin.CreateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectServiceAccountWithParams'
type ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateProjectServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) CreateProjectServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call {
	return &ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call{Call: _e.mock.On("CreateProjectServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateProjectServiceAccountApiParams)) *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call) Return(_a0 admin.CreateProjectServiceAccountApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateProjectServiceAccountApiParams) admin.CreateProjectServiceAccountApiRequest) *ServiceAccountsApi_CreateProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, orgId, orgServiceAccountRequest
func (_m *ServiceAccountsApi) CreateServiceAccount(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, orgServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 admin.CreateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, orgServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type ServiceAccountsApi_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - orgServiceAccountRequest *admin.OrgServiceAccountRequest
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccount(ctx interface{}, orgId interface{}, orgServiceAccountRequest interface{}) *ServiceAccountsApi_CreateServiceAccount_Call {
	return &ServiceAccountsApi_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, orgId, orgServiceAccountRequest)}
}

func (_c *ServiceAccountsApi_CreateServiceAccount_Call) Run(run func(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest)) *ServiceAccountsApi_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrgServiceAccountRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccount_Call) Return(_a0 admin.CreateServiceAccountApiRequest) *ServiceAccountsApi_CreateServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateServiceAccountApiRequest) *ServiceAccountsApi_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateServiceAccountExecute(r admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountExecute'
type ServiceAccountsApi_CreateServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccountExecute(r interface{}) *ServiceAccountsApi_CreateServiceAccountExecute_Call {
	return &ServiceAccountsApi_CreateServiceAccountExecute_Call{Call: _e.mock.On("CreateServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_CreateServiceAccountExecute_Call) Run(run func(r admin.CreateServiceAccountApiRequest)) *ServiceAccountsApi_CreateServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_CreateServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecret provides a mock function with given fields: ctx, orgId, clientId, serviceAccountSecretRequest
func (_m *ServiceAccountsApi) CreateServiceAccountSecret(ctx context.Context, orgId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, orgId, clientId, serviceAccountSecretRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecret")
	}

	var r0 admin.CreateServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, orgId, clientId, serviceAccountSecretRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateServiceAccountSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecret'
type ServiceAccountsApi_CreateServiceAccountSecret_Call struct {
	*mock.Call
}

// CreateServiceAccountSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
//   - serviceAccountSecretRequest *admin.ServiceAccountSecretRequest
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccountSecret(ctx interface{}, orgId interface{}, clientId interface{}, serviceAccountSecretRequest interface{}) *ServiceAccountsApi_CreateServiceAccountSecret_Call {
	return &ServiceAccountsApi_CreateServiceAccountSecret_Call{Call: _e.mock.On("CreateServiceAccountSecret", ctx, orgId, clientId, serviceAccountSecretRequest)}
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecret_Call) Run(run func(ctx context.Context, orgId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest)) *ServiceAccountsApi_CreateServiceAccountSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ServiceAccountSecretRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecret_Call) Return(_a0 admin.CreateServiceAccountSecretApiRequest) *ServiceAccountsApi_CreateServiceAccountSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecret_Call) RunAndReturn(run func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateServiceAccountSecretApiRequest) *ServiceAccountsApi_CreateServiceAccountSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateServiceAccountSecretExecute(r admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecretExecute")
	}

	var r0 *admin.ServiceAccountSecret
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateServiceAccountSecretApiRequest) *admin.ServiceAccountSecret); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccountSecret)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateServiceAccountSecretApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateServiceAccountSecretApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateServiceAccountSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecretExecute'
type ServiceAccountsApi_CreateServiceAccountSecretExecute_Call struct {
	*mock.Call
}

// CreateServiceAccountSecretExecute is a helper method to define mock.On call
//   - r admin.CreateServiceAccountSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccountSecretExecute(r interface{}) *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call {
	return &ServiceAccountsApi_CreateServiceAccountSecretExecute_Call{Call: _e.mock.On("CreateServiceAccountSecretExecute", r)}
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call) Run(run func(r admin.CreateServiceAccountSecretApiRequest)) *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateServiceAccountSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call) Return(_a0 *admin.ServiceAccountSecret, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call) RunAndReturn(run func(admin.CreateServiceAccountSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)) *ServiceAccountsApi_CreateServiceAccountSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateServiceAccountSecretWithParams(ctx context.Context, args *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountSecretWithParams")
	}

	var r0 admin.CreateServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountSecretWithParams'
type ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call struct {
	*mock.Call
}

// CreateServiceAccountSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateServiceAccountSecretApiParams
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccountSecretWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call {
	return &ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call{Call: _e.mock.On("CreateServiceAccountSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateServiceAccountSecretApiParams)) *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateServiceAccountSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call) Return(_a0 admin.CreateServiceAccountSecretApiRequest) *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateServiceAccountSecretApiParams) admin.CreateServiceAccountSecretApiRequest) *ServiceAccountsApi_CreateServiceAccountSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateServiceAccountWithParams(ctx context.Context, args *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountWithParams")
	}

	var r0 admin.CreateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountWithParams'
type ServiceAccountsApi_CreateServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) CreateServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_CreateServiceAccountWithParams_Call {
	return &ServiceAccountsApi_CreateServiceAccountWithParams_Call{Call: _e.mock.On("CreateServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateServiceAccountApiParams)) *ServiceAccountsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountWithParams_Call) Return(_a0 admin.CreateServiceAccountApiRequest) *ServiceAccountsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateServiceAccountApiParams) admin.CreateServiceAccountApiRequest) *ServiceAccountsApi_CreateServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccount provides a mock function with given fields: ctx, clientId, groupId
func (_m *ServiceAccountsApi) DeleteProjectServiceAccount(ctx context.Context, clientId string, groupId string) admin.DeleteProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccount")
	}

	var r0 admin.DeleteProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccount'
type ServiceAccountsApi_DeleteProjectServiceAccount_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - groupId string
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccount(ctx interface{}, clientId interface{}, groupId interface{}) *ServiceAccountsApi_DeleteProjectServiceAccount_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccount_Call{Call: _e.mock.On("DeleteProjectServiceAccount", ctx, clientId, groupId)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccount_Call) Run(run func(ctx context.Context, clientId string, groupId string)) *ServiceAccountsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccount_Call) Return(_a0 admin.DeleteProjectServiceAccountApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteProjectServiceAccountApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountAccessListEntry provides a mock function with given fields: ctx, groupId, clientId, ipAddress
func (_m *ServiceAccountsApi) DeleteProjectServiceAccountAccessListEntry(ctx context.Context, groupId string, clientId string, ipAddress string) admin.DeleteProjectServiceAccountAccessListEntryApiRequest {
	ret := _m.Called(ctx, groupId, clientId, ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountAccessListEntry")
	}

	var r0 admin.DeleteProjectServiceAccountAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteProjectServiceAccountAccessListEntryApiRequest); ok {
		r0 = rf(ctx, groupId, clientId, ipAddress)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountAccessListEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountAccessListEntry'
type ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountAccessListEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
//   - ipAddress string
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccountAccessListEntry(ctx interface{}, groupId interface{}, clientId interface{}, ipAddress interface{}) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call{Call: _e.mock.On("DeleteProjectServiceAccountAccessListEntry", ctx, groupId, clientId, ipAddress)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call) Run(run func(ctx context.Context, groupId string, clientId string, ipAddress string)) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call) Return(_a0 admin.DeleteProjectServiceAccountAccessListEntryApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteProjectServiceAccountAccessListEntryApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountAccessListEntryExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteProjectServiceAccountAccessListEntryExecute(r admin.DeleteProjectServiceAccountAccessListEntryApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountAccessListEntryExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountAccessListEntryApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountAccessListEntryApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectServiceAccountAccessListEntryApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountAccessListEntryExecute'
type ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountAccessListEntryExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectServiceAccountAccessListEntryApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccountAccessListEntryExecute(r interface{}) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call{Call: _e.mock.On("DeleteProjectServiceAccountAccessListEntryExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call) Run(run func(r admin.DeleteProjectServiceAccountAccessListEntryApiRequest)) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectServiceAccountAccessListEntryApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call) RunAndReturn(run func(admin.DeleteProjectServiceAccountAccessListEntryApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountAccessListEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteProjectServiceAccountAccessListEntryWithParams(ctx context.Context, args *admin.DeleteProjectServiceAccountAccessListEntryApiParams) admin.DeleteProjectServiceAccountAccessListEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountAccessListEntryWithParams")
	}

	var r0 admin.DeleteProjectServiceAccountAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectServiceAccountAccessListEntryApiParams) admin.DeleteProjectServiceAccountAccessListEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountAccessListEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountAccessListEntryWithParams'
type ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountAccessListEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectServiceAccountAccessListEntryApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccountAccessListEntryWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call{Call: _e.mock.On("DeleteProjectServiceAccountAccessListEntryWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectServiceAccountAccessListEntryApiParams)) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectServiceAccountAccessListEntryApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call) Return(_a0 admin.DeleteProjectServiceAccountAccessListEntryApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectServiceAccountAccessListEntryApiParams) admin.DeleteProjectServiceAccountAccessListEntryApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountAccessListEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteProjectServiceAccountExecute(r admin.DeleteProjectServiceAccountApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectServiceAccountApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountExecute'
type ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccountExecute(r interface{}) *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call{Call: _e.mock.On("DeleteProjectServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call) Run(run func(r admin.DeleteProjectServiceAccountApiRequest)) *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteProjectServiceAccountApiRequest) (interface{}, *http.Response, error)) *ServiceAccountsApi_DeleteProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteProjectServiceAccountWithParams(ctx context.Context, args *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectServiceAccountWithParams")
	}

	var r0 admin.DeleteProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectServiceAccountWithParams'
type ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteProjectServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call {
	return &ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call{Call: _e.mock.On("DeleteProjectServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectServiceAccountApiParams)) *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call) Return(_a0 admin.DeleteProjectServiceAccountApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectServiceAccountApiParams) admin.DeleteProjectServiceAccountApiRequest) *ServiceAccountsApi_DeleteProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, clientId, orgId
func (_m *ServiceAccountsApi) DeleteServiceAccount(ctx context.Context, clientId string, orgId string) admin.DeleteServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 admin.DeleteServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type ServiceAccountsApi_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccount(ctx interface{}, clientId interface{}, orgId interface{}) *ServiceAccountsApi_DeleteServiceAccount_Call {
	return &ServiceAccountsApi_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, clientId, orgId)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccount_Call) Run(run func(ctx context.Context, clientId string, orgId string)) *ServiceAccountsApi_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccount_Call) Return(_a0 admin.DeleteServiceAccountApiRequest) *ServiceAccountsApi_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteServiceAccountApiRequest) *ServiceAccountsApi_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteServiceAccountExecute(r admin.DeleteServiceAccountApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteServiceAccountApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountExecute'
type ServiceAccountsApi_DeleteServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccountExecute(r interface{}) *ServiceAccountsApi_DeleteServiceAccountExecute_Call {
	return &ServiceAccountsApi_DeleteServiceAccountExecute_Call{Call: _e.mock.On("DeleteServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccountExecute_Call) Run(run func(r admin.DeleteServiceAccountApiRequest)) *ServiceAccountsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteServiceAccountApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecret provides a mock function with given fields: ctx, clientId, secretId, orgId
func (_m *ServiceAccountsApi) DeleteServiceAccountSecret(ctx context.Context, clientId string, secretId string, orgId string) admin.DeleteServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, clientId, secretId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecret")
	}

	var r0 admin.DeleteServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, clientId, secretId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteServiceAccountSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecret'
type ServiceAccountsApi_DeleteServiceAccountSecret_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - secretId string
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccountSecret(ctx interface{}, clientId interface{}, secretId interface{}, orgId interface{}) *ServiceAccountsApi_DeleteServiceAccountSecret_Call {
	return &ServiceAccountsApi_DeleteServiceAccountSecret_Call{Call: _e.mock.On("DeleteServiceAccountSecret", ctx, clientId, secretId, orgId)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecret_Call) Run(run func(ctx context.Context, clientId string, secretId string, orgId string)) *ServiceAccountsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecret_Call) Return(_a0 admin.DeleteServiceAccountSecretApiRequest) *ServiceAccountsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecret_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteServiceAccountSecretApiRequest) *ServiceAccountsApi_DeleteServiceAccountSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteServiceAccountSecretExecute(r admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecretExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteServiceAccountSecretApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteServiceAccountSecretApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecretExecute'
type ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecretExecute is a helper method to define mock.On call
//   - r admin.DeleteServiceAccountSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccountSecretExecute(r interface{}) *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call {
	return &ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call{Call: _e.mock.On("DeleteServiceAccountSecretExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call) Run(run func(r admin.DeleteServiceAccountSecretApiRequest)) *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteServiceAccountSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call) RunAndReturn(run func(admin.DeleteServiceAccountSecretApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteServiceAccountSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteServiceAccountSecretWithParams(ctx context.Context, args *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountSecretWithParams")
	}

	var r0 admin.DeleteServiceAccountSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountSecretWithParams'
type ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call struct {
	*mock.Call
}

// DeleteServiceAccountSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteServiceAccountSecretApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccountSecretWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call {
	return &ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call{Call: _e.mock.On("DeleteServiceAccountSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteServiceAccountSecretApiParams)) *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteServiceAccountSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call) Return(_a0 admin.DeleteServiceAccountSecretApiRequest) *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteServiceAccountSecretApiParams) admin.DeleteServiceAccountSecretApiRequest) *ServiceAccountsApi_DeleteServiceAccountSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteServiceAccountWithParams(ctx context.Context, args *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountWithParams")
	}

	var r0 admin.DeleteServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountWithParams'
type ServiceAccountsApi_DeleteServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_DeleteServiceAccountWithParams_Call {
	return &ServiceAccountsApi_DeleteServiceAccountWithParams_Call{Call: _e.mock.On("DeleteServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteServiceAccountApiParams)) *ServiceAccountsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountWithParams_Call) Return(_a0 admin.DeleteServiceAccountApiRequest) *ServiceAccountsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteServiceAccountApiParams) admin.DeleteServiceAccountApiRequest) *ServiceAccountsApi_DeleteServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccount provides a mock function with given fields: ctx, groupId, clientId
func (_m *ServiceAccountsApi) GetProjectServiceAccount(ctx context.Context, groupId string, clientId string) admin.GetProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccount")
	}

	var r0 admin.GetProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, clientId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccount'
type ServiceAccountsApi_GetProjectServiceAccount_Call struct {
	*mock.Call
}

// GetProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) GetProjectServiceAccount(ctx interface{}, groupId interface{}, clientId interface{}) *ServiceAccountsApi_GetProjectServiceAccount_Call {
	return &ServiceAccountsApi_GetProjectServiceAccount_Call{Call: _e.mock.On("GetProjectServiceAccount", ctx, groupId, clientId)}
}

func (_c *ServiceAccountsApi_GetProjectServiceAccount_Call) Run(run func(ctx context.Context, groupId string, clientId string)) *ServiceAccountsApi_GetProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccount_Call) Return(_a0 admin.GetProjectServiceAccountApiRequest) *ServiceAccountsApi_GetProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProjectServiceAccountApiRequest) *ServiceAccountsApi_GetProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) GetProjectServiceAccountExecute(r admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_GetProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccountExecute'
type ServiceAccountsApi_GetProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// GetProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetProjectServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) GetProjectServiceAccountExecute(r interface{}) *ServiceAccountsApi_GetProjectServiceAccountExecute_Call {
	return &ServiceAccountsApi_GetProjectServiceAccountExecute_Call{Call: _e.mock.On("GetProjectServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountExecute_Call) Run(run func(r admin.GetProjectServiceAccountApiRequest)) *ServiceAccountsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.GetProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_GetProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) GetProjectServiceAccountWithParams(ctx context.Context, args *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectServiceAccountWithParams")
	}

	var r0 admin.GetProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectServiceAccountWithParams'
type ServiceAccountsApi_GetProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) GetProjectServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call {
	return &ServiceAccountsApi_GetProjectServiceAccountWithParams_Call{Call: _e.mock.On("GetProjectServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectServiceAccountApiParams)) *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call) Return(_a0 admin.GetProjectServiceAccountApiRequest) *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectServiceAccountApiParams) admin.GetProjectServiceAccountApiRequest) *ServiceAccountsApi_GetProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccount provides a mock function with given fields: ctx, orgId, clientId
func (_m *ServiceAccountsApi) GetServiceAccount(ctx context.Context, orgId string, clientId string) admin.GetServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccount")
	}

	var r0 admin.GetServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, clientId)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccount'
type ServiceAccountsApi_GetServiceAccount_Call struct {
	*mock.Call
}

// GetServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) GetServiceAccount(ctx interface{}, orgId interface{}, clientId interface{}) *ServiceAccountsApi_GetServiceAccount_Call {
	return &ServiceAccountsApi_GetServiceAccount_Call{Call: _e.mock.On("GetServiceAccount", ctx, orgId, clientId)}
}

func (_c *ServiceAccountsApi_GetServiceAccount_Call) Run(run func(ctx context.Context, orgId string, clientId string)) *ServiceAccountsApi_GetServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccount_Call) Return(_a0 admin.GetServiceAccountApiRequest) *ServiceAccountsApi_GetServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetServiceAccountApiRequest) *ServiceAccountsApi_GetServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) GetServiceAccountExecute(r admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_GetServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountExecute'
type ServiceAccountsApi_GetServiceAccountExecute_Call struct {
	*mock.Call
}

// GetServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) GetServiceAccountExecute(r interface{}) *ServiceAccountsApi_GetServiceAccountExecute_Call {
	return &ServiceAccountsApi_GetServiceAccountExecute_Call{Call: _e.mock.On("GetServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_GetServiceAccountExecute_Call) Run(run func(r admin.GetServiceAccountApiRequest)) *ServiceAccountsApi_GetServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_GetServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountExecute_Call) RunAndReturn(run func(admin.GetServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_GetServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) GetServiceAccountWithParams(ctx context.Context, args *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountWithParams")
	}

	var r0 admin.GetServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountWithParams'
type ServiceAccountsApi_GetServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) GetServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_GetServiceAccountWithParams_Call {
	return &ServiceAccountsApi_GetServiceAccountWithParams_Call{Call: _e.mock.On("GetServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_GetServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServiceAccountApiParams)) *ServiceAccountsApi_GetServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountWithParams_Call) Return(_a0 admin.GetServiceAccountApiRequest) *ServiceAccountsApi_GetServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServiceAccountApiParams) admin.GetServiceAccountApiRequest) *ServiceAccountsApi_GetServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountAccessList provides a mock function with given fields: ctx, groupId, clientId
func (_m *ServiceAccountsApi) ListProjectServiceAccountAccessList(ctx context.Context, groupId string, clientId string) admin.ListProjectServiceAccountAccessListApiRequest {
	ret := _m.Called(ctx, groupId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountAccessList")
	}

	var r0 admin.ListProjectServiceAccountAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListProjectServiceAccountAccessListApiRequest); ok {
		r0 = rf(ctx, groupId, clientId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListProjectServiceAccountAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountAccessList'
type ServiceAccountsApi_ListProjectServiceAccountAccessList_Call struct {
	*mock.Call
}

// ListProjectServiceAccountAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccountAccessList(ctx interface{}, groupId interface{}, clientId interface{}) *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call {
	return &ServiceAccountsApi_ListProjectServiceAccountAccessList_Call{Call: _e.mock.On("ListProjectServiceAccountAccessList", ctx, groupId, clientId)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call) Run(run func(ctx context.Context, groupId string, clientId string)) *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call) Return(_a0 admin.ListProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call) RunAndReturn(run func(context.Context, string, string) admin.ListProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_ListProjectServiceAccountAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListProjectServiceAccountAccessListExecute(r admin.ListProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectServiceAccountAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectServiceAccountAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountAccessListExecute'
type ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call struct {
	*mock.Call
}

// ListProjectServiceAccountAccessListExecute is a helper method to define mock.On call
//   - r admin.ListProjectServiceAccountAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccountAccessListExecute(r interface{}) *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call {
	return &ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call{Call: _e.mock.On("ListProjectServiceAccountAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call) Run(run func(r admin.ListProjectServiceAccountAccessListApiRequest)) *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectServiceAccountAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call) RunAndReturn(run func(admin.ListProjectServiceAccountAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_ListProjectServiceAccountAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListProjectServiceAccountAccessListWithParams(ctx context.Context, args *admin.ListProjectServiceAccountAccessListApiParams) admin.ListProjectServiceAccountAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountAccessListWithParams")
	}

	var r0 admin.ListProjectServiceAccountAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectServiceAccountAccessListApiParams) admin.ListProjectServiceAccountAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountAccessListWithParams'
type ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call struct {
	*mock.Call
}

// ListProjectServiceAccountAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectServiceAccountAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccountAccessListWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call {
	return &ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call{Call: _e.mock.On("ListProjectServiceAccountAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectServiceAccountAccessListApiParams)) *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectServiceAccountAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call) Return(_a0 admin.ListProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectServiceAccountAccessListApiParams) admin.ListProjectServiceAccountAccessListApiRequest) *ServiceAccountsApi_ListProjectServiceAccountAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccounts provides a mock function with given fields: ctx, groupId
func (_m *ServiceAccountsApi) ListProjectServiceAccounts(ctx context.Context, groupId string) admin.ListProjectServiceAccountsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccounts")
	}

	var r0 admin.ListProjectServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListProjectServiceAccountsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListProjectServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccounts'
type ServiceAccountsApi_ListProjectServiceAccounts_Call struct {
	*mock.Call
}

// ListProjectServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccounts(ctx interface{}, groupId interface{}) *ServiceAccountsApi_ListProjectServiceAccounts_Call {
	return &ServiceAccountsApi_ListProjectServiceAccounts_Call{Call: _e.mock.On("ListProjectServiceAccounts", ctx, groupId)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccounts_Call) Run(run func(ctx context.Context, groupId string)) *ServiceAccountsApi_ListProjectServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccounts_Call) Return(_a0 admin.ListProjectServiceAccountsApiRequest) *ServiceAccountsApi_ListProjectServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListProjectServiceAccountsApiRequest) *ServiceAccountsApi_ListProjectServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListProjectServiceAccountsExecute(r admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountsExecute")
	}

	var r0 *admin.PaginatedGroupServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectServiceAccountsApiRequest) *admin.PaginatedGroupServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedGroupServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListProjectServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountsExecute'
type ServiceAccountsApi_ListProjectServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListProjectServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListProjectServiceAccountsApiRequest
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccountsExecute(r interface{}) *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call {
	return &ServiceAccountsApi_ListProjectServiceAccountsExecute_Call{Call: _e.mock.On("ListProjectServiceAccountsExecute", r)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call) Run(run func(r admin.ListProjectServiceAccountsApiRequest)) *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectServiceAccountsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedGroupServiceAccounts, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListProjectServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)) *ServiceAccountsApi_ListProjectServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListProjectServiceAccountsWithParams(ctx context.Context, args *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectServiceAccountsWithParams")
	}

	var r0 admin.ListProjectServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectServiceAccountsWithParams'
type ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListProjectServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectServiceAccountsApiParams
func (_e *ServiceAccountsApi_Expecter) ListProjectServiceAccountsWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call {
	return &ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call{Call: _e.mock.On("ListProjectServiceAccountsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectServiceAccountsApiParams)) *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectServiceAccountsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call) Return(_a0 admin.ListProjectServiceAccountsApiRequest) *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectServiceAccountsApiParams) admin.ListProjectServiceAccountsApiRequest) *ServiceAccountsApi_ListProjectServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjects provides a mock function with given fields: ctx, orgId, clientId
func (_m *ServiceAccountsApi) ListServiceAccountProjects(ctx context.Context, orgId string, clientId string) admin.ListServiceAccountProjectsApiRequest {
	ret := _m.Called(ctx, orgId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjects")
	}

	var r0 admin.ListServiceAccountProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListServiceAccountProjectsApiRequest); ok {
		r0 = rf(ctx, orgId, clientId)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountProjectsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListServiceAccountProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjects'
type ServiceAccountsApi_ListServiceAccountProjects_Call struct {
	*mock.Call
}

// ListServiceAccountProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) ListServiceAccountProjects(ctx interface{}, orgId interface{}, clientId interface{}) *ServiceAccountsApi_ListServiceAccountProjects_Call {
	return &ServiceAccountsApi_ListServiceAccountProjects_Call{Call: _e.mock.On("ListServiceAccountProjects", ctx, orgId, clientId)}
}

func (_c *ServiceAccountsApi_ListServiceAccountProjects_Call) Run(run func(ctx context.Context, orgId string, clientId string)) *ServiceAccountsApi_ListServiceAccountProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjects_Call) Return(_a0 admin.ListServiceAccountProjectsApiRequest) *ServiceAccountsApi_ListServiceAccountProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjects_Call) RunAndReturn(run func(context.Context, string, string) admin.ListServiceAccountProjectsApiRequest) *ServiceAccountsApi_ListServiceAccountProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjectsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListServiceAccountProjectsExecute(r admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjectsExecute")
	}

	var r0 *admin.PaginatedServiceAccountGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountProjectsApiRequest) *admin.PaginatedServiceAccountGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServiceAccountProjectsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServiceAccountProjectsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListServiceAccountProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjectsExecute'
type ServiceAccountsApi_ListServiceAccountProjectsExecute_Call struct {
	*mock.Call
}

// ListServiceAccountProjectsExecute is a helper method to define mock.On call
//   - r admin.ListServiceAccountProjectsApiRequest
func (_e *ServiceAccountsApi_Expecter) ListServiceAccountProjectsExecute(r interface{}) *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call {
	return &ServiceAccountsApi_ListServiceAccountProjectsExecute_Call{Call: _e.mock.On("ListServiceAccountProjectsExecute", r)}
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call) Run(run func(r admin.ListServiceAccountProjectsApiRequest)) *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServiceAccountProjectsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call) Return(_a0 *admin.PaginatedServiceAccountGroup, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call) RunAndReturn(run func(admin.ListServiceAccountProjectsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)) *ServiceAccountsApi_ListServiceAccountProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountProjectsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListServiceAccountProjectsWithParams(ctx context.Context, args *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountProjectsWithParams")
	}

	var r0 admin.ListServiceAccountProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountProjectsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountProjectsWithParams'
type ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call struct {
	*mock.Call
}

// ListServiceAccountProjectsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServiceAccountProjectsApiParams
func (_e *ServiceAccountsApi_Expecter) ListServiceAccountProjectsWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call {
	return &ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call{Call: _e.mock.On("ListServiceAccountProjectsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServiceAccountProjectsApiParams)) *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServiceAccountProjectsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call) Return(_a0 admin.ListServiceAccountProjectsApiRequest) *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServiceAccountProjectsApiParams) admin.ListServiceAccountProjectsApiRequest) *ServiceAccountsApi_ListServiceAccountProjectsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccounts provides a mock function with given fields: ctx, orgId
func (_m *ServiceAccountsApi) ListServiceAccounts(ctx context.Context, orgId string) admin.ListServiceAccountsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccounts")
	}

	var r0 admin.ListServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListServiceAccountsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccounts'
type ServiceAccountsApi_ListServiceAccounts_Call struct {
	*mock.Call
}

// ListServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) ListServiceAccounts(ctx interface{}, orgId interface{}) *ServiceAccountsApi_ListServiceAccounts_Call {
	return &ServiceAccountsApi_ListServiceAccounts_Call{Call: _e.mock.On("ListServiceAccounts", ctx, orgId)}
}

func (_c *ServiceAccountsApi_ListServiceAccounts_Call) Run(run func(ctx context.Context, orgId string)) *ServiceAccountsApi_ListServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccounts_Call) Return(_a0 admin.ListServiceAccountsApiRequest) *ServiceAccountsApi_ListServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListServiceAccountsApiRequest) *ServiceAccountsApi_ListServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListServiceAccountsExecute(r admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsExecute")
	}

	var r0 *admin.PaginatedOrgServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListServiceAccountsApiRequest) *admin.PaginatedOrgServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsExecute'
type ServiceAccountsApi_ListServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListServiceAccountsApiRequest
func (_e *ServiceAccountsApi_Expecter) ListServiceAccountsExecute(r interface{}) *ServiceAccountsApi_ListServiceAccountsExecute_Call {
	return &ServiceAccountsApi_ListServiceAccountsExecute_Call{Call: _e.mock.On("ListServiceAccountsExecute", r)}
}

func (_c *ServiceAccountsApi_ListServiceAccountsExecute_Call) Run(run func(r admin.ListServiceAccountsApiRequest)) *ServiceAccountsApi_ListServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListServiceAccountsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedOrgServiceAccounts, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)) *ServiceAccountsApi_ListServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListServiceAccountsWithParams(ctx context.Context, args *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsWithParams")
	}

	var r0 admin.ListServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsWithParams'
type ServiceAccountsApi_ListServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListServiceAccountsApiParams
func (_e *ServiceAccountsApi_Expecter) ListServiceAccountsWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_ListServiceAccountsWithParams_Call {
	return &ServiceAccountsApi_ListServiceAccountsWithParams_Call{Call: _e.mock.On("ListServiceAccountsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListServiceAccountsApiParams)) *ServiceAccountsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListServiceAccountsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountsWithParams_Call) Return(_a0 admin.ListServiceAccountsApiRequest) *ServiceAccountsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListServiceAccountsApiParams) admin.ListServiceAccountsApiRequest) *ServiceAccountsApi_ListServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccount provides a mock function with given fields: ctx, clientId, groupId, groupServiceAccountUpdateRequest
func (_m *ServiceAccountsApi) UpdateProjectServiceAccount(ctx context.Context, clientId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, groupId, groupServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccount")
	}

	var r0 admin.UpdateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, groupId, groupServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateProjectServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccount'
type ServiceAccountsApi_UpdateProjectServiceAccount_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - groupId string
//   - groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest
func (_e *ServiceAccountsApi_Expecter) UpdateProjectServiceAccount(ctx interface{}, clientId interface{}, groupId interface{}, groupServiceAccountUpdateRequest interface{}) *ServiceAccountsApi_UpdateProjectServiceAccount_Call {
	return &ServiceAccountsApi_UpdateProjectServiceAccount_Call{Call: _e.mock.On("UpdateProjectServiceAccount", ctx, clientId, groupId, groupServiceAccountUpdateRequest)}
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccount_Call) Run(run func(ctx context.Context, clientId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest)) *ServiceAccountsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccount_Call) Return(_a0 admin.UpdateProjectServiceAccountApiRequest) *ServiceAccountsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateProjectServiceAccountApiRequest) *ServiceAccountsApi_UpdateProjectServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) UpdateProjectServiceAccountExecute(r admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccountExecute'
type ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) UpdateProjectServiceAccountExecute(r interface{}) *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call {
	return &ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call{Call: _e.mock.On("UpdateProjectServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call) Run(run func(r admin.UpdateProjectServiceAccountApiRequest)) *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateProjectServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_UpdateProjectServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) UpdateProjectServiceAccountWithParams(ctx context.Context, args *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectServiceAccountWithParams")
	}

	var r0 admin.UpdateProjectServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectServiceAccountWithParams'
type ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateProjectServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) UpdateProjectServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call {
	return &ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call{Call: _e.mock.On("UpdateProjectServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectServiceAccountApiParams)) *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call) Return(_a0 admin.UpdateProjectServiceAccountApiRequest) *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectServiceAccountApiParams) admin.UpdateProjectServiceAccountApiRequest) *ServiceAccountsApi_UpdateProjectServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccount provides a mock function with given fields: ctx, clientId, orgId, orgServiceAccountUpdateRequest
func (_m *ServiceAccountsApi) UpdateServiceAccount(ctx context.Context, clientId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, orgId, orgServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccount")
	}

	var r0 admin.UpdateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, orgId, orgServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccount'
type ServiceAccountsApi_UpdateServiceAccount_Call struct {
	*mock.Call
}

// UpdateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - orgId string
//   - orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest
func (_e *ServiceAccountsApi_Expecter) UpdateServiceAccount(ctx interface{}, clientId interface{}, orgId interface{}, orgServiceAccountUpdateRequest interface{}) *ServiceAccountsApi_UpdateServiceAccount_Call {
	return &ServiceAccountsApi_UpdateServiceAccount_Call{Call: _e.mock.On("UpdateServiceAccount", ctx, clientId, orgId, orgServiceAccountUpdateRequest)}
}

func (_c *ServiceAccountsApi_UpdateServiceAccount_Call) Run(run func(ctx context.Context, clientId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest)) *ServiceAccountsApi_UpdateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrgServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccount_Call) Return(_a0 admin.UpdateServiceAccountApiRequest) *ServiceAccountsApi_UpdateServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateServiceAccountApiRequest) *ServiceAccountsApi_UpdateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) UpdateServiceAccountExecute(r admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_UpdateServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccountExecute'
type ServiceAccountsApi_UpdateServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) UpdateServiceAccountExecute(r interface{}) *ServiceAccountsApi_UpdateServiceAccountExecute_Call {
	return &ServiceAccountsApi_UpdateServiceAccountExecute_Call{Call: _e.mock.On("UpdateServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_UpdateServiceAccountExecute_Call) Run(run func(r admin.UpdateServiceAccountApiRequest)) *ServiceAccountsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_UpdateServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) UpdateServiceAccountWithParams(ctx context.Context, args *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccountWithParams")
	}

	var r0 admin.UpdateServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccountWithParams'
type ServiceAccountsApi_UpdateServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) UpdateServiceAccountWithParams(ctx interface{}, args interface{}) *ServiceAccountsApi_UpdateServiceAccountWithParams_Call {
	return &ServiceAccountsApi_UpdateServiceAccountWithParams_Call{Call: _e.mock.On("UpdateServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_UpdateServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateServiceAccountApiParams)) *ServiceAccountsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccountWithParams_Call) Return(_a0 admin.UpdateServiceAccountApiRequest) *ServiceAccountsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateServiceAccountApiParams) admin.UpdateServiceAccountApiRequest) *ServiceAccountsApi_UpdateServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceAccountsApi creates a new instance of ServiceAccountsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAccountsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAccountsApi {
	mock := &ServiceAccountsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
