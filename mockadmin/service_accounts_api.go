// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ServiceAccountsApi is an autogenerated mock type for the ServiceAccountsApi type
type ServiceAccountsApi struct {
	mock.Mock
}

type ServiceAccountsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAccountsApi) EXPECT() *ServiceAccountsApi_Expecter {
	return &ServiceAccountsApi_Expecter{mock: &_m.Mock}
}

// CreateAccessList provides a mock function with given fields: ctx, groupId, clientId, serviceAccountIPAccessListEntry
func (_m *ServiceAccountsApi) CreateAccessList(ctx context.Context, groupId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry) admin.CreateAccessListApiRequest {
	ret := _m.Called(ctx, groupId, clientId, serviceAccountIPAccessListEntry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessList")
	}

	var r0 admin.CreateAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateAccessListApiRequest); ok {
		r0 = rf(ctx, groupId, clientId, serviceAccountIPAccessListEntry)
	} else {
		r0 = ret.Get(0).(admin.CreateAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessList'
type ServiceAccountsApi_CreateAccessList_Call struct {
	*mock.Call
}

// CreateAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
//   - serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry
func (_e *ServiceAccountsApi_Expecter) CreateAccessList(ctx any, groupId any, clientId any, serviceAccountIPAccessListEntry any) *ServiceAccountsApi_CreateAccessList_Call {
	return &ServiceAccountsApi_CreateAccessList_Call{Call: _e.mock.On("CreateAccessList", ctx, groupId, clientId, serviceAccountIPAccessListEntry)}
}

func (_c *ServiceAccountsApi_CreateAccessList_Call) Run(run func(ctx context.Context, groupId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry)) *ServiceAccountsApi_CreateAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*[]admin.ServiceAccountIPAccessListEntry))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessList_Call) Return(_a0 admin.CreateAccessListApiRequest) *ServiceAccountsApi_CreateAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessList_Call) RunAndReturn(run func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateAccessListApiRequest) *ServiceAccountsApi_CreateAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateAccessListExecute(r admin.CreateAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessListExecute'
type ServiceAccountsApi_CreateAccessListExecute_Call struct {
	*mock.Call
}

// CreateAccessListExecute is a helper method to define mock.On call
//   - r admin.CreateAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateAccessListExecute(r any) *ServiceAccountsApi_CreateAccessListExecute_Call {
	return &ServiceAccountsApi_CreateAccessListExecute_Call{Call: _e.mock.On("CreateAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_CreateAccessListExecute_Call) Run(run func(r admin.CreateAccessListApiRequest)) *ServiceAccountsApi_CreateAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessListExecute_Call) RunAndReturn(run func(admin.CreateAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_CreateAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateAccessListWithParams(ctx context.Context, args *admin.CreateAccessListApiParams) admin.CreateAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessListWithParams")
	}

	var r0 admin.CreateAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAccessListApiParams) admin.CreateAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessListWithParams'
type ServiceAccountsApi_CreateAccessListWithParams_Call struct {
	*mock.Call
}

// CreateAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) CreateAccessListWithParams(ctx any, args any) *ServiceAccountsApi_CreateAccessListWithParams_Call {
	return &ServiceAccountsApi_CreateAccessListWithParams_Call{Call: _e.mock.On("CreateAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAccessListApiParams)) *ServiceAccountsApi_CreateAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessListWithParams_Call) Return(_a0 admin.CreateAccessListApiRequest) *ServiceAccountsApi_CreateAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAccessListApiParams) admin.CreateAccessListApiRequest) *ServiceAccountsApi_CreateAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupSecret provides a mock function with given fields: ctx, groupId, clientId, serviceAccountSecretRequest
func (_m *ServiceAccountsApi) CreateGroupSecret(ctx context.Context, groupId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest) admin.CreateGroupSecretApiRequest {
	ret := _m.Called(ctx, groupId, clientId, serviceAccountSecretRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupSecret")
	}

	var r0 admin.CreateGroupSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateGroupSecretApiRequest); ok {
		r0 = rf(ctx, groupId, clientId, serviceAccountSecretRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateGroupSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupSecret'
type ServiceAccountsApi_CreateGroupSecret_Call struct {
	*mock.Call
}

// CreateGroupSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
//   - serviceAccountSecretRequest *admin.ServiceAccountSecretRequest
func (_e *ServiceAccountsApi_Expecter) CreateGroupSecret(ctx any, groupId any, clientId any, serviceAccountSecretRequest any) *ServiceAccountsApi_CreateGroupSecret_Call {
	return &ServiceAccountsApi_CreateGroupSecret_Call{Call: _e.mock.On("CreateGroupSecret", ctx, groupId, clientId, serviceAccountSecretRequest)}
}

func (_c *ServiceAccountsApi_CreateGroupSecret_Call) Run(run func(ctx context.Context, groupId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest)) *ServiceAccountsApi_CreateGroupSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ServiceAccountSecretRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecret_Call) Return(_a0 admin.CreateGroupSecretApiRequest) *ServiceAccountsApi_CreateGroupSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecret_Call) RunAndReturn(run func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateGroupSecretApiRequest) *ServiceAccountsApi_CreateGroupSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateGroupSecretExecute(r admin.CreateGroupSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupSecretExecute")
	}

	var r0 *admin.ServiceAccountSecret
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupSecretApiRequest) *admin.ServiceAccountSecret); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccountSecret)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupSecretApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupSecretApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateGroupSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupSecretExecute'
type ServiceAccountsApi_CreateGroupSecretExecute_Call struct {
	*mock.Call
}

// CreateGroupSecretExecute is a helper method to define mock.On call
//   - r admin.CreateGroupSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateGroupSecretExecute(r any) *ServiceAccountsApi_CreateGroupSecretExecute_Call {
	return &ServiceAccountsApi_CreateGroupSecretExecute_Call{Call: _e.mock.On("CreateGroupSecretExecute", r)}
}

func (_c *ServiceAccountsApi_CreateGroupSecretExecute_Call) Run(run func(r admin.CreateGroupSecretApiRequest)) *ServiceAccountsApi_CreateGroupSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecretExecute_Call) Return(_a0 *admin.ServiceAccountSecret, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateGroupSecretExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecretExecute_Call) RunAndReturn(run func(admin.CreateGroupSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)) *ServiceAccountsApi_CreateGroupSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateGroupSecretWithParams(ctx context.Context, args *admin.CreateGroupSecretApiParams) admin.CreateGroupSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupSecretWithParams")
	}

	var r0 admin.CreateGroupSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupSecretApiParams) admin.CreateGroupSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateGroupSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupSecretWithParams'
type ServiceAccountsApi_CreateGroupSecretWithParams_Call struct {
	*mock.Call
}

// CreateGroupSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupSecretApiParams
func (_e *ServiceAccountsApi_Expecter) CreateGroupSecretWithParams(ctx any, args any) *ServiceAccountsApi_CreateGroupSecretWithParams_Call {
	return &ServiceAccountsApi_CreateGroupSecretWithParams_Call{Call: _e.mock.On("CreateGroupSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateGroupSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupSecretApiParams)) *ServiceAccountsApi_CreateGroupSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecretWithParams_Call) Return(_a0 admin.CreateGroupSecretApiRequest) *ServiceAccountsApi_CreateGroupSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupSecretApiParams) admin.CreateGroupSecretApiRequest) *ServiceAccountsApi_CreateGroupSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupServiceAccount provides a mock function with given fields: ctx, groupId, groupServiceAccountRequest
func (_m *ServiceAccountsApi) CreateGroupServiceAccount(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest) admin.CreateGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, groupServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupServiceAccount")
	}

	var r0 admin.CreateGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, groupServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateGroupServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupServiceAccount'
type ServiceAccountsApi_CreateGroupServiceAccount_Call struct {
	*mock.Call
}

// CreateGroupServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupServiceAccountRequest *admin.GroupServiceAccountRequest
func (_e *ServiceAccountsApi_Expecter) CreateGroupServiceAccount(ctx any, groupId any, groupServiceAccountRequest any) *ServiceAccountsApi_CreateGroupServiceAccount_Call {
	return &ServiceAccountsApi_CreateGroupServiceAccount_Call{Call: _e.mock.On("CreateGroupServiceAccount", ctx, groupId, groupServiceAccountRequest)}
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccount_Call) Run(run func(ctx context.Context, groupId string, groupServiceAccountRequest *admin.GroupServiceAccountRequest)) *ServiceAccountsApi_CreateGroupServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupServiceAccountRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccount_Call) Return(_a0 admin.CreateGroupServiceAccountApiRequest) *ServiceAccountsApi_CreateGroupServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.GroupServiceAccountRequest) admin.CreateGroupServiceAccountApiRequest) *ServiceAccountsApi_CreateGroupServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateGroupServiceAccountExecute(r admin.CreateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateGroupServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupServiceAccountExecute'
type ServiceAccountsApi_CreateGroupServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateGroupServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateGroupServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateGroupServiceAccountExecute(r any) *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call {
	return &ServiceAccountsApi_CreateGroupServiceAccountExecute_Call{Call: _e.mock.On("CreateGroupServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call) Run(run func(r admin.CreateGroupServiceAccountApiRequest)) *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_CreateGroupServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateGroupServiceAccountWithParams(ctx context.Context, args *admin.CreateGroupServiceAccountApiParams) admin.CreateGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupServiceAccountWithParams")
	}

	var r0 admin.CreateGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupServiceAccountApiParams) admin.CreateGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupServiceAccountWithParams'
type ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateGroupServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) CreateGroupServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call {
	return &ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call{Call: _e.mock.On("CreateGroupServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupServiceAccountApiParams)) *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call) Return(_a0 admin.CreateGroupServiceAccountApiRequest) *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupServiceAccountApiParams) admin.CreateGroupServiceAccountApiRequest) *ServiceAccountsApi_CreateGroupServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgAccessList provides a mock function with given fields: ctx, orgId, clientId, serviceAccountIPAccessListEntry
func (_m *ServiceAccountsApi) CreateOrgAccessList(ctx context.Context, orgId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry) admin.CreateOrgAccessListApiRequest {
	ret := _m.Called(ctx, orgId, clientId, serviceAccountIPAccessListEntry)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgAccessList")
	}

	var r0 admin.CreateOrgAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateOrgAccessListApiRequest); ok {
		r0 = rf(ctx, orgId, clientId, serviceAccountIPAccessListEntry)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgAccessList'
type ServiceAccountsApi_CreateOrgAccessList_Call struct {
	*mock.Call
}

// CreateOrgAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
//   - serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry
func (_e *ServiceAccountsApi_Expecter) CreateOrgAccessList(ctx any, orgId any, clientId any, serviceAccountIPAccessListEntry any) *ServiceAccountsApi_CreateOrgAccessList_Call {
	return &ServiceAccountsApi_CreateOrgAccessList_Call{Call: _e.mock.On("CreateOrgAccessList", ctx, orgId, clientId, serviceAccountIPAccessListEntry)}
}

func (_c *ServiceAccountsApi_CreateOrgAccessList_Call) Run(run func(ctx context.Context, orgId string, clientId string, serviceAccountIPAccessListEntry *[]admin.ServiceAccountIPAccessListEntry)) *ServiceAccountsApi_CreateOrgAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*[]admin.ServiceAccountIPAccessListEntry))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessList_Call) Return(_a0 admin.CreateOrgAccessListApiRequest) *ServiceAccountsApi_CreateOrgAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessList_Call) RunAndReturn(run func(context.Context, string, string, *[]admin.ServiceAccountIPAccessListEntry) admin.CreateOrgAccessListApiRequest) *ServiceAccountsApi_CreateOrgAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateOrgAccessListExecute(r admin.CreateOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateOrgAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgAccessListExecute'
type ServiceAccountsApi_CreateOrgAccessListExecute_Call struct {
	*mock.Call
}

// CreateOrgAccessListExecute is a helper method to define mock.On call
//   - r admin.CreateOrgAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateOrgAccessListExecute(r any) *ServiceAccountsApi_CreateOrgAccessListExecute_Call {
	return &ServiceAccountsApi_CreateOrgAccessListExecute_Call{Call: _e.mock.On("CreateOrgAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_CreateOrgAccessListExecute_Call) Run(run func(r admin.CreateOrgAccessListApiRequest)) *ServiceAccountsApi_CreateOrgAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateOrgAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessListExecute_Call) RunAndReturn(run func(admin.CreateOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_CreateOrgAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateOrgAccessListWithParams(ctx context.Context, args *admin.CreateOrgAccessListApiParams) admin.CreateOrgAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgAccessListWithParams")
	}

	var r0 admin.CreateOrgAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgAccessListApiParams) admin.CreateOrgAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgAccessListWithParams'
type ServiceAccountsApi_CreateOrgAccessListWithParams_Call struct {
	*mock.Call
}

// CreateOrgAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) CreateOrgAccessListWithParams(ctx any, args any) *ServiceAccountsApi_CreateOrgAccessListWithParams_Call {
	return &ServiceAccountsApi_CreateOrgAccessListWithParams_Call{Call: _e.mock.On("CreateOrgAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateOrgAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgAccessListApiParams)) *ServiceAccountsApi_CreateOrgAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessListWithParams_Call) Return(_a0 admin.CreateOrgAccessListApiRequest) *ServiceAccountsApi_CreateOrgAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgAccessListApiParams) admin.CreateOrgAccessListApiRequest) *ServiceAccountsApi_CreateOrgAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgSecret provides a mock function with given fields: ctx, orgId, clientId, serviceAccountSecretRequest
func (_m *ServiceAccountsApi) CreateOrgSecret(ctx context.Context, orgId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest) admin.CreateOrgSecretApiRequest {
	ret := _m.Called(ctx, orgId, clientId, serviceAccountSecretRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgSecret")
	}

	var r0 admin.CreateOrgSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateOrgSecretApiRequest); ok {
		r0 = rf(ctx, orgId, clientId, serviceAccountSecretRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgSecret'
type ServiceAccountsApi_CreateOrgSecret_Call struct {
	*mock.Call
}

// CreateOrgSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
//   - serviceAccountSecretRequest *admin.ServiceAccountSecretRequest
func (_e *ServiceAccountsApi_Expecter) CreateOrgSecret(ctx any, orgId any, clientId any, serviceAccountSecretRequest any) *ServiceAccountsApi_CreateOrgSecret_Call {
	return &ServiceAccountsApi_CreateOrgSecret_Call{Call: _e.mock.On("CreateOrgSecret", ctx, orgId, clientId, serviceAccountSecretRequest)}
}

func (_c *ServiceAccountsApi_CreateOrgSecret_Call) Run(run func(ctx context.Context, orgId string, clientId string, serviceAccountSecretRequest *admin.ServiceAccountSecretRequest)) *ServiceAccountsApi_CreateOrgSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ServiceAccountSecretRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecret_Call) Return(_a0 admin.CreateOrgSecretApiRequest) *ServiceAccountsApi_CreateOrgSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecret_Call) RunAndReturn(run func(context.Context, string, string, *admin.ServiceAccountSecretRequest) admin.CreateOrgSecretApiRequest) *ServiceAccountsApi_CreateOrgSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateOrgSecretExecute(r admin.CreateOrgSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgSecretExecute")
	}

	var r0 *admin.ServiceAccountSecret
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgSecretApiRequest) *admin.ServiceAccountSecret); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccountSecret)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgSecretApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgSecretApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateOrgSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgSecretExecute'
type ServiceAccountsApi_CreateOrgSecretExecute_Call struct {
	*mock.Call
}

// CreateOrgSecretExecute is a helper method to define mock.On call
//   - r admin.CreateOrgSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateOrgSecretExecute(r any) *ServiceAccountsApi_CreateOrgSecretExecute_Call {
	return &ServiceAccountsApi_CreateOrgSecretExecute_Call{Call: _e.mock.On("CreateOrgSecretExecute", r)}
}

func (_c *ServiceAccountsApi_CreateOrgSecretExecute_Call) Run(run func(r admin.CreateOrgSecretApiRequest)) *ServiceAccountsApi_CreateOrgSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecretExecute_Call) Return(_a0 *admin.ServiceAccountSecret, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateOrgSecretExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecretExecute_Call) RunAndReturn(run func(admin.CreateOrgSecretApiRequest) (*admin.ServiceAccountSecret, *http.Response, error)) *ServiceAccountsApi_CreateOrgSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateOrgSecretWithParams(ctx context.Context, args *admin.CreateOrgSecretApiParams) admin.CreateOrgSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgSecretWithParams")
	}

	var r0 admin.CreateOrgSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgSecretApiParams) admin.CreateOrgSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgSecretWithParams'
type ServiceAccountsApi_CreateOrgSecretWithParams_Call struct {
	*mock.Call
}

// CreateOrgSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgSecretApiParams
func (_e *ServiceAccountsApi_Expecter) CreateOrgSecretWithParams(ctx any, args any) *ServiceAccountsApi_CreateOrgSecretWithParams_Call {
	return &ServiceAccountsApi_CreateOrgSecretWithParams_Call{Call: _e.mock.On("CreateOrgSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateOrgSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgSecretApiParams)) *ServiceAccountsApi_CreateOrgSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecretWithParams_Call) Return(_a0 admin.CreateOrgSecretApiRequest) *ServiceAccountsApi_CreateOrgSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgSecretApiParams) admin.CreateOrgSecretApiRequest) *ServiceAccountsApi_CreateOrgSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgServiceAccount provides a mock function with given fields: ctx, orgId, orgServiceAccountRequest
func (_m *ServiceAccountsApi) CreateOrgServiceAccount(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest) admin.CreateOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, orgServiceAccountRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgServiceAccount")
	}

	var r0 admin.CreateOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, orgServiceAccountRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgServiceAccount'
type ServiceAccountsApi_CreateOrgServiceAccount_Call struct {
	*mock.Call
}

// CreateOrgServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - orgServiceAccountRequest *admin.OrgServiceAccountRequest
func (_e *ServiceAccountsApi_Expecter) CreateOrgServiceAccount(ctx any, orgId any, orgServiceAccountRequest any) *ServiceAccountsApi_CreateOrgServiceAccount_Call {
	return &ServiceAccountsApi_CreateOrgServiceAccount_Call{Call: _e.mock.On("CreateOrgServiceAccount", ctx, orgId, orgServiceAccountRequest)}
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccount_Call) Run(run func(ctx context.Context, orgId string, orgServiceAccountRequest *admin.OrgServiceAccountRequest)) *ServiceAccountsApi_CreateOrgServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrgServiceAccountRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccount_Call) Return(_a0 admin.CreateOrgServiceAccountApiRequest) *ServiceAccountsApi_CreateOrgServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccount_Call) RunAndReturn(run func(context.Context, string, *admin.OrgServiceAccountRequest) admin.CreateOrgServiceAccountApiRequest) *ServiceAccountsApi_CreateOrgServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) CreateOrgServiceAccountExecute(r admin.CreateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_CreateOrgServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgServiceAccountExecute'
type ServiceAccountsApi_CreateOrgServiceAccountExecute_Call struct {
	*mock.Call
}

// CreateOrgServiceAccountExecute is a helper method to define mock.On call
//   - r admin.CreateOrgServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) CreateOrgServiceAccountExecute(r any) *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call {
	return &ServiceAccountsApi_CreateOrgServiceAccountExecute_Call{Call: _e.mock.On("CreateOrgServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call) Run(run func(r admin.CreateOrgServiceAccountApiRequest)) *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call) RunAndReturn(run func(admin.CreateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_CreateOrgServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) CreateOrgServiceAccountWithParams(ctx context.Context, args *admin.CreateOrgServiceAccountApiParams) admin.CreateOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgServiceAccountWithParams")
	}

	var r0 admin.CreateOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgServiceAccountApiParams) admin.CreateOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgServiceAccountWithParams'
type ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call struct {
	*mock.Call
}

// CreateOrgServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) CreateOrgServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call {
	return &ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call{Call: _e.mock.On("CreateOrgServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgServiceAccountApiParams)) *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call) Return(_a0 admin.CreateOrgServiceAccountApiRequest) *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgServiceAccountApiParams) admin.CreateOrgServiceAccountApiRequest) *ServiceAccountsApi_CreateOrgServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupAccessEntry provides a mock function with given fields: ctx, groupId, clientId, ipAddress
func (_m *ServiceAccountsApi) DeleteGroupAccessEntry(ctx context.Context, groupId string, clientId string, ipAddress string) admin.DeleteGroupAccessEntryApiRequest {
	ret := _m.Called(ctx, groupId, clientId, ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupAccessEntry")
	}

	var r0 admin.DeleteGroupAccessEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteGroupAccessEntryApiRequest); ok {
		r0 = rf(ctx, groupId, clientId, ipAddress)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupAccessEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupAccessEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupAccessEntry'
type ServiceAccountsApi_DeleteGroupAccessEntry_Call struct {
	*mock.Call
}

// DeleteGroupAccessEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
//   - ipAddress string
func (_e *ServiceAccountsApi_Expecter) DeleteGroupAccessEntry(ctx any, groupId any, clientId any, ipAddress any) *ServiceAccountsApi_DeleteGroupAccessEntry_Call {
	return &ServiceAccountsApi_DeleteGroupAccessEntry_Call{Call: _e.mock.On("DeleteGroupAccessEntry", ctx, groupId, clientId, ipAddress)}
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntry_Call) Run(run func(ctx context.Context, groupId string, clientId string, ipAddress string)) *ServiceAccountsApi_DeleteGroupAccessEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntry_Call) Return(_a0 admin.DeleteGroupAccessEntryApiRequest) *ServiceAccountsApi_DeleteGroupAccessEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntry_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteGroupAccessEntryApiRequest) *ServiceAccountsApi_DeleteGroupAccessEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupAccessEntryExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteGroupAccessEntryExecute(r admin.DeleteGroupAccessEntryApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupAccessEntryExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupAccessEntryApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupAccessEntryApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupAccessEntryApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupAccessEntryExecute'
type ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call struct {
	*mock.Call
}

// DeleteGroupAccessEntryExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupAccessEntryApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteGroupAccessEntryExecute(r any) *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call {
	return &ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call{Call: _e.mock.On("DeleteGroupAccessEntryExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call) Run(run func(r admin.DeleteGroupAccessEntryApiRequest)) *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupAccessEntryApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call) RunAndReturn(run func(admin.DeleteGroupAccessEntryApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteGroupAccessEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupAccessEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteGroupAccessEntryWithParams(ctx context.Context, args *admin.DeleteGroupAccessEntryApiParams) admin.DeleteGroupAccessEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupAccessEntryWithParams")
	}

	var r0 admin.DeleteGroupAccessEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupAccessEntryApiParams) admin.DeleteGroupAccessEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupAccessEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupAccessEntryWithParams'
type ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call struct {
	*mock.Call
}

// DeleteGroupAccessEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupAccessEntryApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteGroupAccessEntryWithParams(ctx any, args any) *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call {
	return &ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call{Call: _e.mock.On("DeleteGroupAccessEntryWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupAccessEntryApiParams)) *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupAccessEntryApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call) Return(_a0 admin.DeleteGroupAccessEntryApiRequest) *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupAccessEntryApiParams) admin.DeleteGroupAccessEntryApiRequest) *ServiceAccountsApi_DeleteGroupAccessEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupSecret provides a mock function with given fields: ctx, clientId, secretId, groupId
func (_m *ServiceAccountsApi) DeleteGroupSecret(ctx context.Context, clientId string, secretId string, groupId string) admin.DeleteGroupSecretApiRequest {
	ret := _m.Called(ctx, clientId, secretId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupSecret")
	}

	var r0 admin.DeleteGroupSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteGroupSecretApiRequest); ok {
		r0 = rf(ctx, clientId, secretId, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupSecret'
type ServiceAccountsApi_DeleteGroupSecret_Call struct {
	*mock.Call
}

// DeleteGroupSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - secretId string
//   - groupId string
func (_e *ServiceAccountsApi_Expecter) DeleteGroupSecret(ctx any, clientId any, secretId any, groupId any) *ServiceAccountsApi_DeleteGroupSecret_Call {
	return &ServiceAccountsApi_DeleteGroupSecret_Call{Call: _e.mock.On("DeleteGroupSecret", ctx, clientId, secretId, groupId)}
}

func (_c *ServiceAccountsApi_DeleteGroupSecret_Call) Run(run func(ctx context.Context, clientId string, secretId string, groupId string)) *ServiceAccountsApi_DeleteGroupSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecret_Call) Return(_a0 admin.DeleteGroupSecretApiRequest) *ServiceAccountsApi_DeleteGroupSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecret_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteGroupSecretApiRequest) *ServiceAccountsApi_DeleteGroupSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteGroupSecretExecute(r admin.DeleteGroupSecretApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupSecretExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupSecretApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupSecretApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupSecretApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteGroupSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupSecretExecute'
type ServiceAccountsApi_DeleteGroupSecretExecute_Call struct {
	*mock.Call
}

// DeleteGroupSecretExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteGroupSecretExecute(r any) *ServiceAccountsApi_DeleteGroupSecretExecute_Call {
	return &ServiceAccountsApi_DeleteGroupSecretExecute_Call{Call: _e.mock.On("DeleteGroupSecretExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteGroupSecretExecute_Call) Run(run func(r admin.DeleteGroupSecretApiRequest)) *ServiceAccountsApi_DeleteGroupSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecretExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteGroupSecretExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecretExecute_Call) RunAndReturn(run func(admin.DeleteGroupSecretApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteGroupSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteGroupSecretWithParams(ctx context.Context, args *admin.DeleteGroupSecretApiParams) admin.DeleteGroupSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupSecretWithParams")
	}

	var r0 admin.DeleteGroupSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupSecretApiParams) admin.DeleteGroupSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupSecretWithParams'
type ServiceAccountsApi_DeleteGroupSecretWithParams_Call struct {
	*mock.Call
}

// DeleteGroupSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupSecretApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteGroupSecretWithParams(ctx any, args any) *ServiceAccountsApi_DeleteGroupSecretWithParams_Call {
	return &ServiceAccountsApi_DeleteGroupSecretWithParams_Call{Call: _e.mock.On("DeleteGroupSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteGroupSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupSecretApiParams)) *ServiceAccountsApi_DeleteGroupSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecretWithParams_Call) Return(_a0 admin.DeleteGroupSecretApiRequest) *ServiceAccountsApi_DeleteGroupSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupSecretApiParams) admin.DeleteGroupSecretApiRequest) *ServiceAccountsApi_DeleteGroupSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupServiceAccount provides a mock function with given fields: ctx, clientId, groupId
func (_m *ServiceAccountsApi) DeleteGroupServiceAccount(ctx context.Context, clientId string, groupId string) admin.DeleteGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupServiceAccount")
	}

	var r0 admin.DeleteGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupServiceAccount'
type ServiceAccountsApi_DeleteGroupServiceAccount_Call struct {
	*mock.Call
}

// DeleteGroupServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - groupId string
func (_e *ServiceAccountsApi_Expecter) DeleteGroupServiceAccount(ctx any, clientId any, groupId any) *ServiceAccountsApi_DeleteGroupServiceAccount_Call {
	return &ServiceAccountsApi_DeleteGroupServiceAccount_Call{Call: _e.mock.On("DeleteGroupServiceAccount", ctx, clientId, groupId)}
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccount_Call) Run(run func(ctx context.Context, clientId string, groupId string)) *ServiceAccountsApi_DeleteGroupServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccount_Call) Return(_a0 admin.DeleteGroupServiceAccountApiRequest) *ServiceAccountsApi_DeleteGroupServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupServiceAccountApiRequest) *ServiceAccountsApi_DeleteGroupServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteGroupServiceAccountExecute(r admin.DeleteGroupServiceAccountApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupServiceAccountExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupServiceAccountApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupServiceAccountApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupServiceAccountApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupServiceAccountExecute'
type ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteGroupServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteGroupServiceAccountExecute(r any) *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call {
	return &ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call{Call: _e.mock.On("DeleteGroupServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call) Run(run func(r admin.DeleteGroupServiceAccountApiRequest)) *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteGroupServiceAccountApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteGroupServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteGroupServiceAccountWithParams(ctx context.Context, args *admin.DeleteGroupServiceAccountApiParams) admin.DeleteGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupServiceAccountWithParams")
	}

	var r0 admin.DeleteGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupServiceAccountApiParams) admin.DeleteGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupServiceAccountWithParams'
type ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteGroupServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteGroupServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call {
	return &ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call{Call: _e.mock.On("DeleteGroupServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupServiceAccountApiParams)) *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call) Return(_a0 admin.DeleteGroupServiceAccountApiRequest) *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupServiceAccountApiParams) admin.DeleteGroupServiceAccountApiRequest) *ServiceAccountsApi_DeleteGroupServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgAccessEntry provides a mock function with given fields: ctx, orgId, clientId, ipAddress
func (_m *ServiceAccountsApi) DeleteOrgAccessEntry(ctx context.Context, orgId string, clientId string, ipAddress string) admin.DeleteOrgAccessEntryApiRequest {
	ret := _m.Called(ctx, orgId, clientId, ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgAccessEntry")
	}

	var r0 admin.DeleteOrgAccessEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteOrgAccessEntryApiRequest); ok {
		r0 = rf(ctx, orgId, clientId, ipAddress)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgAccessEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgAccessEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgAccessEntry'
type ServiceAccountsApi_DeleteOrgAccessEntry_Call struct {
	*mock.Call
}

// DeleteOrgAccessEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
//   - ipAddress string
func (_e *ServiceAccountsApi_Expecter) DeleteOrgAccessEntry(ctx any, orgId any, clientId any, ipAddress any) *ServiceAccountsApi_DeleteOrgAccessEntry_Call {
	return &ServiceAccountsApi_DeleteOrgAccessEntry_Call{Call: _e.mock.On("DeleteOrgAccessEntry", ctx, orgId, clientId, ipAddress)}
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntry_Call) Run(run func(ctx context.Context, orgId string, clientId string, ipAddress string)) *ServiceAccountsApi_DeleteOrgAccessEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntry_Call) Return(_a0 admin.DeleteOrgAccessEntryApiRequest) *ServiceAccountsApi_DeleteOrgAccessEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntry_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteOrgAccessEntryApiRequest) *ServiceAccountsApi_DeleteOrgAccessEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgAccessEntryExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteOrgAccessEntryExecute(r admin.DeleteOrgAccessEntryApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgAccessEntryExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgAccessEntryApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgAccessEntryApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgAccessEntryApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgAccessEntryExecute'
type ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call struct {
	*mock.Call
}

// DeleteOrgAccessEntryExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgAccessEntryApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteOrgAccessEntryExecute(r any) *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call {
	return &ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call{Call: _e.mock.On("DeleteOrgAccessEntryExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call) Run(run func(r admin.DeleteOrgAccessEntryApiRequest)) *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgAccessEntryApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call) RunAndReturn(run func(admin.DeleteOrgAccessEntryApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteOrgAccessEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgAccessEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteOrgAccessEntryWithParams(ctx context.Context, args *admin.DeleteOrgAccessEntryApiParams) admin.DeleteOrgAccessEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgAccessEntryWithParams")
	}

	var r0 admin.DeleteOrgAccessEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgAccessEntryApiParams) admin.DeleteOrgAccessEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgAccessEntryApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgAccessEntryWithParams'
type ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call struct {
	*mock.Call
}

// DeleteOrgAccessEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgAccessEntryApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteOrgAccessEntryWithParams(ctx any, args any) *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call {
	return &ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call{Call: _e.mock.On("DeleteOrgAccessEntryWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgAccessEntryApiParams)) *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgAccessEntryApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call) Return(_a0 admin.DeleteOrgAccessEntryApiRequest) *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgAccessEntryApiParams) admin.DeleteOrgAccessEntryApiRequest) *ServiceAccountsApi_DeleteOrgAccessEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgSecret provides a mock function with given fields: ctx, clientId, secretId, orgId
func (_m *ServiceAccountsApi) DeleteOrgSecret(ctx context.Context, clientId string, secretId string, orgId string) admin.DeleteOrgSecretApiRequest {
	ret := _m.Called(ctx, clientId, secretId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgSecret")
	}

	var r0 admin.DeleteOrgSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteOrgSecretApiRequest); ok {
		r0 = rf(ctx, clientId, secretId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgSecret'
type ServiceAccountsApi_DeleteOrgSecret_Call struct {
	*mock.Call
}

// DeleteOrgSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - secretId string
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) DeleteOrgSecret(ctx any, clientId any, secretId any, orgId any) *ServiceAccountsApi_DeleteOrgSecret_Call {
	return &ServiceAccountsApi_DeleteOrgSecret_Call{Call: _e.mock.On("DeleteOrgSecret", ctx, clientId, secretId, orgId)}
}

func (_c *ServiceAccountsApi_DeleteOrgSecret_Call) Run(run func(ctx context.Context, clientId string, secretId string, orgId string)) *ServiceAccountsApi_DeleteOrgSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecret_Call) Return(_a0 admin.DeleteOrgSecretApiRequest) *ServiceAccountsApi_DeleteOrgSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecret_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteOrgSecretApiRequest) *ServiceAccountsApi_DeleteOrgSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgSecretExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteOrgSecretExecute(r admin.DeleteOrgSecretApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgSecretExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgSecretApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgSecretApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgSecretApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteOrgSecretExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgSecretExecute'
type ServiceAccountsApi_DeleteOrgSecretExecute_Call struct {
	*mock.Call
}

// DeleteOrgSecretExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgSecretApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteOrgSecretExecute(r any) *ServiceAccountsApi_DeleteOrgSecretExecute_Call {
	return &ServiceAccountsApi_DeleteOrgSecretExecute_Call{Call: _e.mock.On("DeleteOrgSecretExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteOrgSecretExecute_Call) Run(run func(r admin.DeleteOrgSecretApiRequest)) *ServiceAccountsApi_DeleteOrgSecretExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgSecretApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecretExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteOrgSecretExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecretExecute_Call) RunAndReturn(run func(admin.DeleteOrgSecretApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteOrgSecretExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgSecretWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteOrgSecretWithParams(ctx context.Context, args *admin.DeleteOrgSecretApiParams) admin.DeleteOrgSecretApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgSecretWithParams")
	}

	var r0 admin.DeleteOrgSecretApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgSecretApiParams) admin.DeleteOrgSecretApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgSecretApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgSecretWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgSecretWithParams'
type ServiceAccountsApi_DeleteOrgSecretWithParams_Call struct {
	*mock.Call
}

// DeleteOrgSecretWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgSecretApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteOrgSecretWithParams(ctx any, args any) *ServiceAccountsApi_DeleteOrgSecretWithParams_Call {
	return &ServiceAccountsApi_DeleteOrgSecretWithParams_Call{Call: _e.mock.On("DeleteOrgSecretWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteOrgSecretWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgSecretApiParams)) *ServiceAccountsApi_DeleteOrgSecretWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgSecretApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecretWithParams_Call) Return(_a0 admin.DeleteOrgSecretApiRequest) *ServiceAccountsApi_DeleteOrgSecretWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgSecretWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgSecretApiParams) admin.DeleteOrgSecretApiRequest) *ServiceAccountsApi_DeleteOrgSecretWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgServiceAccount provides a mock function with given fields: ctx, clientId, orgId
func (_m *ServiceAccountsApi) DeleteOrgServiceAccount(ctx context.Context, clientId string, orgId string) admin.DeleteOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgServiceAccount")
	}

	var r0 admin.DeleteOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgServiceAccount'
type ServiceAccountsApi_DeleteOrgServiceAccount_Call struct {
	*mock.Call
}

// DeleteOrgServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) DeleteOrgServiceAccount(ctx any, clientId any, orgId any) *ServiceAccountsApi_DeleteOrgServiceAccount_Call {
	return &ServiceAccountsApi_DeleteOrgServiceAccount_Call{Call: _e.mock.On("DeleteOrgServiceAccount", ctx, clientId, orgId)}
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccount_Call) Run(run func(ctx context.Context, clientId string, orgId string)) *ServiceAccountsApi_DeleteOrgServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccount_Call) Return(_a0 admin.DeleteOrgServiceAccountApiRequest) *ServiceAccountsApi_DeleteOrgServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteOrgServiceAccountApiRequest) *ServiceAccountsApi_DeleteOrgServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) DeleteOrgServiceAccountExecute(r admin.DeleteOrgServiceAccountApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgServiceAccountExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgServiceAccountApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgServiceAccountApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgServiceAccountApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgServiceAccountExecute'
type ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call struct {
	*mock.Call
}

// DeleteOrgServiceAccountExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) DeleteOrgServiceAccountExecute(r any) *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call {
	return &ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call{Call: _e.mock.On("DeleteOrgServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call) Run(run func(r admin.DeleteOrgServiceAccountApiRequest)) *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call) Return(_a0 *http.Response, _a1 error) *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call) RunAndReturn(run func(admin.DeleteOrgServiceAccountApiRequest) (*http.Response, error)) *ServiceAccountsApi_DeleteOrgServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) DeleteOrgServiceAccountWithParams(ctx context.Context, args *admin.DeleteOrgServiceAccountApiParams) admin.DeleteOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgServiceAccountWithParams")
	}

	var r0 admin.DeleteOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgServiceAccountApiParams) admin.DeleteOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgServiceAccountWithParams'
type ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call struct {
	*mock.Call
}

// DeleteOrgServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) DeleteOrgServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call {
	return &ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call{Call: _e.mock.On("DeleteOrgServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgServiceAccountApiParams)) *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call) Return(_a0 admin.DeleteOrgServiceAccountApiRequest) *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgServiceAccountApiParams) admin.DeleteOrgServiceAccountApiRequest) *ServiceAccountsApi_DeleteOrgServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupServiceAccount provides a mock function with given fields: ctx, groupId, clientId
func (_m *ServiceAccountsApi) GetGroupServiceAccount(ctx context.Context, groupId string, clientId string) admin.GetGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, groupId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupServiceAccount")
	}

	var r0 admin.GetGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, groupId, clientId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetGroupServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupServiceAccount'
type ServiceAccountsApi_GetGroupServiceAccount_Call struct {
	*mock.Call
}

// GetGroupServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) GetGroupServiceAccount(ctx any, groupId any, clientId any) *ServiceAccountsApi_GetGroupServiceAccount_Call {
	return &ServiceAccountsApi_GetGroupServiceAccount_Call{Call: _e.mock.On("GetGroupServiceAccount", ctx, groupId, clientId)}
}

func (_c *ServiceAccountsApi_GetGroupServiceAccount_Call) Run(run func(ctx context.Context, groupId string, clientId string)) *ServiceAccountsApi_GetGroupServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccount_Call) Return(_a0 admin.GetGroupServiceAccountApiRequest) *ServiceAccountsApi_GetGroupServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupServiceAccountApiRequest) *ServiceAccountsApi_GetGroupServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) GetGroupServiceAccountExecute(r admin.GetGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_GetGroupServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupServiceAccountExecute'
type ServiceAccountsApi_GetGroupServiceAccountExecute_Call struct {
	*mock.Call
}

// GetGroupServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetGroupServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) GetGroupServiceAccountExecute(r any) *ServiceAccountsApi_GetGroupServiceAccountExecute_Call {
	return &ServiceAccountsApi_GetGroupServiceAccountExecute_Call{Call: _e.mock.On("GetGroupServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountExecute_Call) Run(run func(r admin.GetGroupServiceAccountApiRequest)) *ServiceAccountsApi_GetGroupServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_GetGroupServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountExecute_Call) RunAndReturn(run func(admin.GetGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_GetGroupServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) GetGroupServiceAccountWithParams(ctx context.Context, args *admin.GetGroupServiceAccountApiParams) admin.GetGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupServiceAccountWithParams")
	}

	var r0 admin.GetGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupServiceAccountApiParams) admin.GetGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetGroupServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupServiceAccountWithParams'
type ServiceAccountsApi_GetGroupServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetGroupServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) GetGroupServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call {
	return &ServiceAccountsApi_GetGroupServiceAccountWithParams_Call{Call: _e.mock.On("GetGroupServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupServiceAccountApiParams)) *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call) Return(_a0 admin.GetGroupServiceAccountApiRequest) *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupServiceAccountApiParams) admin.GetGroupServiceAccountApiRequest) *ServiceAccountsApi_GetGroupServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgServiceAccount provides a mock function with given fields: ctx, orgId, clientId
func (_m *ServiceAccountsApi) GetOrgServiceAccount(ctx context.Context, orgId string, clientId string) admin.GetOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, orgId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgServiceAccount")
	}

	var r0 admin.GetOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, orgId, clientId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetOrgServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgServiceAccount'
type ServiceAccountsApi_GetOrgServiceAccount_Call struct {
	*mock.Call
}

// GetOrgServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) GetOrgServiceAccount(ctx any, orgId any, clientId any) *ServiceAccountsApi_GetOrgServiceAccount_Call {
	return &ServiceAccountsApi_GetOrgServiceAccount_Call{Call: _e.mock.On("GetOrgServiceAccount", ctx, orgId, clientId)}
}

func (_c *ServiceAccountsApi_GetOrgServiceAccount_Call) Run(run func(ctx context.Context, orgId string, clientId string)) *ServiceAccountsApi_GetOrgServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccount_Call) Return(_a0 admin.GetOrgServiceAccountApiRequest) *ServiceAccountsApi_GetOrgServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccount_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgServiceAccountApiRequest) *ServiceAccountsApi_GetOrgServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) GetOrgServiceAccountExecute(r admin.GetOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_GetOrgServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgServiceAccountExecute'
type ServiceAccountsApi_GetOrgServiceAccountExecute_Call struct {
	*mock.Call
}

// GetOrgServiceAccountExecute is a helper method to define mock.On call
//   - r admin.GetOrgServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) GetOrgServiceAccountExecute(r any) *ServiceAccountsApi_GetOrgServiceAccountExecute_Call {
	return &ServiceAccountsApi_GetOrgServiceAccountExecute_Call{Call: _e.mock.On("GetOrgServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountExecute_Call) Run(run func(r admin.GetOrgServiceAccountApiRequest)) *ServiceAccountsApi_GetOrgServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_GetOrgServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountExecute_Call) RunAndReturn(run func(admin.GetOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_GetOrgServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) GetOrgServiceAccountWithParams(ctx context.Context, args *admin.GetOrgServiceAccountApiParams) admin.GetOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgServiceAccountWithParams")
	}

	var r0 admin.GetOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgServiceAccountApiParams) admin.GetOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetOrgServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgServiceAccountWithParams'
type ServiceAccountsApi_GetOrgServiceAccountWithParams_Call struct {
	*mock.Call
}

// GetOrgServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) GetOrgServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call {
	return &ServiceAccountsApi_GetOrgServiceAccountWithParams_Call{Call: _e.mock.On("GetOrgServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgServiceAccountApiParams)) *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call) Return(_a0 admin.GetOrgServiceAccountApiRequest) *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgServiceAccountApiParams) admin.GetOrgServiceAccountApiRequest) *ServiceAccountsApi_GetOrgServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountGroups provides a mock function with given fields: ctx, orgId, clientId
func (_m *ServiceAccountsApi) GetServiceAccountGroups(ctx context.Context, orgId string, clientId string) admin.GetServiceAccountGroupsApiRequest {
	ret := _m.Called(ctx, orgId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountGroups")
	}

	var r0 admin.GetServiceAccountGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetServiceAccountGroupsApiRequest); ok {
		r0 = rf(ctx, orgId, clientId)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountGroupsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetServiceAccountGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountGroups'
type ServiceAccountsApi_GetServiceAccountGroups_Call struct {
	*mock.Call
}

// GetServiceAccountGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) GetServiceAccountGroups(ctx any, orgId any, clientId any) *ServiceAccountsApi_GetServiceAccountGroups_Call {
	return &ServiceAccountsApi_GetServiceAccountGroups_Call{Call: _e.mock.On("GetServiceAccountGroups", ctx, orgId, clientId)}
}

func (_c *ServiceAccountsApi_GetServiceAccountGroups_Call) Run(run func(ctx context.Context, orgId string, clientId string)) *ServiceAccountsApi_GetServiceAccountGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroups_Call) Return(_a0 admin.GetServiceAccountGroupsApiRequest) *ServiceAccountsApi_GetServiceAccountGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroups_Call) RunAndReturn(run func(context.Context, string, string) admin.GetServiceAccountGroupsApiRequest) *ServiceAccountsApi_GetServiceAccountGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountGroupsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) GetServiceAccountGroupsExecute(r admin.GetServiceAccountGroupsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountGroupsExecute")
	}

	var r0 *admin.PaginatedServiceAccountGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountGroupsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServiceAccountGroupsApiRequest) *admin.PaginatedServiceAccountGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetServiceAccountGroupsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServiceAccountGroupsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_GetServiceAccountGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountGroupsExecute'
type ServiceAccountsApi_GetServiceAccountGroupsExecute_Call struct {
	*mock.Call
}

// GetServiceAccountGroupsExecute is a helper method to define mock.On call
//   - r admin.GetServiceAccountGroupsApiRequest
func (_e *ServiceAccountsApi_Expecter) GetServiceAccountGroupsExecute(r any) *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call {
	return &ServiceAccountsApi_GetServiceAccountGroupsExecute_Call{Call: _e.mock.On("GetServiceAccountGroupsExecute", r)}
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call) Run(run func(r admin.GetServiceAccountGroupsApiRequest)) *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServiceAccountGroupsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call) Return(_a0 *admin.PaginatedServiceAccountGroup, _a1 *http.Response, _a2 error) *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call) RunAndReturn(run func(admin.GetServiceAccountGroupsApiRequest) (*admin.PaginatedServiceAccountGroup, *http.Response, error)) *ServiceAccountsApi_GetServiceAccountGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountGroupsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) GetServiceAccountGroupsWithParams(ctx context.Context, args *admin.GetServiceAccountGroupsApiParams) admin.GetServiceAccountGroupsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountGroupsWithParams")
	}

	var r0 admin.GetServiceAccountGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServiceAccountGroupsApiParams) admin.GetServiceAccountGroupsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServiceAccountGroupsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountGroupsWithParams'
type ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call struct {
	*mock.Call
}

// GetServiceAccountGroupsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServiceAccountGroupsApiParams
func (_e *ServiceAccountsApi_Expecter) GetServiceAccountGroupsWithParams(ctx any, args any) *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call {
	return &ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call{Call: _e.mock.On("GetServiceAccountGroupsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServiceAccountGroupsApiParams)) *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServiceAccountGroupsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call) Return(_a0 admin.GetServiceAccountGroupsApiRequest) *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServiceAccountGroupsApiParams) admin.GetServiceAccountGroupsApiRequest) *ServiceAccountsApi_GetServiceAccountGroupsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// InviteGroupServiceAccount provides a mock function with given fields: ctx, clientId, groupId, groupServiceAccountRoleAssignment
func (_m *ServiceAccountsApi) InviteGroupServiceAccount(ctx context.Context, clientId string, groupId string, groupServiceAccountRoleAssignment *admin.GroupServiceAccountRoleAssignment) admin.InviteGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, groupId, groupServiceAccountRoleAssignment)

	if len(ret) == 0 {
		panic("no return value specified for InviteGroupServiceAccount")
	}

	var r0 admin.InviteGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupServiceAccountRoleAssignment) admin.InviteGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, groupId, groupServiceAccountRoleAssignment)
	} else {
		r0 = ret.Get(0).(admin.InviteGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_InviteGroupServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteGroupServiceAccount'
type ServiceAccountsApi_InviteGroupServiceAccount_Call struct {
	*mock.Call
}

// InviteGroupServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - groupId string
//   - groupServiceAccountRoleAssignment *admin.GroupServiceAccountRoleAssignment
func (_e *ServiceAccountsApi_Expecter) InviteGroupServiceAccount(ctx any, clientId any, groupId any, groupServiceAccountRoleAssignment any) *ServiceAccountsApi_InviteGroupServiceAccount_Call {
	return &ServiceAccountsApi_InviteGroupServiceAccount_Call{Call: _e.mock.On("InviteGroupServiceAccount", ctx, clientId, groupId, groupServiceAccountRoleAssignment)}
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccount_Call) Run(run func(ctx context.Context, clientId string, groupId string, groupServiceAccountRoleAssignment *admin.GroupServiceAccountRoleAssignment)) *ServiceAccountsApi_InviteGroupServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupServiceAccountRoleAssignment))
	})
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccount_Call) Return(_a0 admin.InviteGroupServiceAccountApiRequest) *ServiceAccountsApi_InviteGroupServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupServiceAccountRoleAssignment) admin.InviteGroupServiceAccountApiRequest) *ServiceAccountsApi_InviteGroupServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// InviteGroupServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) InviteGroupServiceAccountExecute(r admin.InviteGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for InviteGroupServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.InviteGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.InviteGroupServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.InviteGroupServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.InviteGroupServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_InviteGroupServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteGroupServiceAccountExecute'
type ServiceAccountsApi_InviteGroupServiceAccountExecute_Call struct {
	*mock.Call
}

// InviteGroupServiceAccountExecute is a helper method to define mock.On call
//   - r admin.InviteGroupServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) InviteGroupServiceAccountExecute(r any) *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call {
	return &ServiceAccountsApi_InviteGroupServiceAccountExecute_Call{Call: _e.mock.On("InviteGroupServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call) Run(run func(r admin.InviteGroupServiceAccountApiRequest)) *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.InviteGroupServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call) RunAndReturn(run func(admin.InviteGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_InviteGroupServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// InviteGroupServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) InviteGroupServiceAccountWithParams(ctx context.Context, args *admin.InviteGroupServiceAccountApiParams) admin.InviteGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for InviteGroupServiceAccountWithParams")
	}

	var r0 admin.InviteGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.InviteGroupServiceAccountApiParams) admin.InviteGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.InviteGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteGroupServiceAccountWithParams'
type ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call struct {
	*mock.Call
}

// InviteGroupServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.InviteGroupServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) InviteGroupServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call {
	return &ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call{Call: _e.mock.On("InviteGroupServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.InviteGroupServiceAccountApiParams)) *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.InviteGroupServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call) Return(_a0 admin.InviteGroupServiceAccountApiRequest) *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.InviteGroupServiceAccountApiParams) admin.InviteGroupServiceAccountApiRequest) *ServiceAccountsApi_InviteGroupServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessList provides a mock function with given fields: ctx, groupId, clientId
func (_m *ServiceAccountsApi) ListAccessList(ctx context.Context, groupId string, clientId string) admin.ListAccessListApiRequest {
	ret := _m.Called(ctx, groupId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessList")
	}

	var r0 admin.ListAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListAccessListApiRequest); ok {
		r0 = rf(ctx, groupId, clientId)
	} else {
		r0 = ret.Get(0).(admin.ListAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessList'
type ServiceAccountsApi_ListAccessList_Call struct {
	*mock.Call
}

// ListAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) ListAccessList(ctx any, groupId any, clientId any) *ServiceAccountsApi_ListAccessList_Call {
	return &ServiceAccountsApi_ListAccessList_Call{Call: _e.mock.On("ListAccessList", ctx, groupId, clientId)}
}

func (_c *ServiceAccountsApi_ListAccessList_Call) Run(run func(ctx context.Context, groupId string, clientId string)) *ServiceAccountsApi_ListAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListAccessList_Call) Return(_a0 admin.ListAccessListApiRequest) *ServiceAccountsApi_ListAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListAccessList_Call) RunAndReturn(run func(context.Context, string, string) admin.ListAccessListApiRequest) *ServiceAccountsApi_ListAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListAccessListExecute(r admin.ListAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessListExecute'
type ServiceAccountsApi_ListAccessListExecute_Call struct {
	*mock.Call
}

// ListAccessListExecute is a helper method to define mock.On call
//   - r admin.ListAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) ListAccessListExecute(r any) *ServiceAccountsApi_ListAccessListExecute_Call {
	return &ServiceAccountsApi_ListAccessListExecute_Call{Call: _e.mock.On("ListAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_ListAccessListExecute_Call) Run(run func(r admin.ListAccessListApiRequest)) *ServiceAccountsApi_ListAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListAccessListExecute_Call) RunAndReturn(run func(admin.ListAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_ListAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListAccessListWithParams(ctx context.Context, args *admin.ListAccessListApiParams) admin.ListAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessListWithParams")
	}

	var r0 admin.ListAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAccessListApiParams) admin.ListAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessListWithParams'
type ServiceAccountsApi_ListAccessListWithParams_Call struct {
	*mock.Call
}

// ListAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) ListAccessListWithParams(ctx any, args any) *ServiceAccountsApi_ListAccessListWithParams_Call {
	return &ServiceAccountsApi_ListAccessListWithParams_Call{Call: _e.mock.On("ListAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAccessListApiParams)) *ServiceAccountsApi_ListAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListAccessListWithParams_Call) Return(_a0 admin.ListAccessListApiRequest) *ServiceAccountsApi_ListAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAccessListApiParams) admin.ListAccessListApiRequest) *ServiceAccountsApi_ListAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupServiceAccounts provides a mock function with given fields: ctx, groupId
func (_m *ServiceAccountsApi) ListGroupServiceAccounts(ctx context.Context, groupId string) admin.ListGroupServiceAccountsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupServiceAccounts")
	}

	var r0 admin.ListGroupServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupServiceAccountsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListGroupServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupServiceAccounts'
type ServiceAccountsApi_ListGroupServiceAccounts_Call struct {
	*mock.Call
}

// ListGroupServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ServiceAccountsApi_Expecter) ListGroupServiceAccounts(ctx any, groupId any) *ServiceAccountsApi_ListGroupServiceAccounts_Call {
	return &ServiceAccountsApi_ListGroupServiceAccounts_Call{Call: _e.mock.On("ListGroupServiceAccounts", ctx, groupId)}
}

func (_c *ServiceAccountsApi_ListGroupServiceAccounts_Call) Run(run func(ctx context.Context, groupId string)) *ServiceAccountsApi_ListGroupServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccounts_Call) Return(_a0 admin.ListGroupServiceAccountsApiRequest) *ServiceAccountsApi_ListGroupServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupServiceAccountsApiRequest) *ServiceAccountsApi_ListGroupServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupServiceAccountsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListGroupServiceAccountsExecute(r admin.ListGroupServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupServiceAccountsExecute")
	}

	var r0 *admin.PaginatedGroupServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupServiceAccountsApiRequest) *admin.PaginatedGroupServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedGroupServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListGroupServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupServiceAccountsExecute'
type ServiceAccountsApi_ListGroupServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListGroupServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListGroupServiceAccountsApiRequest
func (_e *ServiceAccountsApi_Expecter) ListGroupServiceAccountsExecute(r any) *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call {
	return &ServiceAccountsApi_ListGroupServiceAccountsExecute_Call{Call: _e.mock.On("ListGroupServiceAccountsExecute", r)}
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call) Run(run func(r admin.ListGroupServiceAccountsApiRequest)) *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupServiceAccountsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedGroupServiceAccounts, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListGroupServiceAccountsApiRequest) (*admin.PaginatedGroupServiceAccounts, *http.Response, error)) *ServiceAccountsApi_ListGroupServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListGroupServiceAccountsWithParams(ctx context.Context, args *admin.ListGroupServiceAccountsApiParams) admin.ListGroupServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupServiceAccountsWithParams")
	}

	var r0 admin.ListGroupServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupServiceAccountsApiParams) admin.ListGroupServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupServiceAccountsWithParams'
type ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListGroupServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupServiceAccountsApiParams
func (_e *ServiceAccountsApi_Expecter) ListGroupServiceAccountsWithParams(ctx any, args any) *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call {
	return &ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call{Call: _e.mock.On("ListGroupServiceAccountsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupServiceAccountsApiParams)) *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupServiceAccountsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call) Return(_a0 admin.ListGroupServiceAccountsApiRequest) *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupServiceAccountsApiParams) admin.ListGroupServiceAccountsApiRequest) *ServiceAccountsApi_ListGroupServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgAccessList provides a mock function with given fields: ctx, orgId, clientId
func (_m *ServiceAccountsApi) ListOrgAccessList(ctx context.Context, orgId string, clientId string) admin.ListOrgAccessListApiRequest {
	ret := _m.Called(ctx, orgId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgAccessList")
	}

	var r0 admin.ListOrgAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListOrgAccessListApiRequest); ok {
		r0 = rf(ctx, orgId, clientId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListOrgAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgAccessList'
type ServiceAccountsApi_ListOrgAccessList_Call struct {
	*mock.Call
}

// ListOrgAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - clientId string
func (_e *ServiceAccountsApi_Expecter) ListOrgAccessList(ctx any, orgId any, clientId any) *ServiceAccountsApi_ListOrgAccessList_Call {
	return &ServiceAccountsApi_ListOrgAccessList_Call{Call: _e.mock.On("ListOrgAccessList", ctx, orgId, clientId)}
}

func (_c *ServiceAccountsApi_ListOrgAccessList_Call) Run(run func(ctx context.Context, orgId string, clientId string)) *ServiceAccountsApi_ListOrgAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessList_Call) Return(_a0 admin.ListOrgAccessListApiRequest) *ServiceAccountsApi_ListOrgAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessList_Call) RunAndReturn(run func(context.Context, string, string) admin.ListOrgAccessListApiRequest) *ServiceAccountsApi_ListOrgAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgAccessListExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListOrgAccessListExecute(r admin.ListOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgAccessListExecute")
	}

	var r0 *admin.PaginatedServiceAccountIPAccessEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgAccessListApiRequest) *admin.PaginatedServiceAccountIPAccessEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedServiceAccountIPAccessEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgAccessListApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgAccessListApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListOrgAccessListExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgAccessListExecute'
type ServiceAccountsApi_ListOrgAccessListExecute_Call struct {
	*mock.Call
}

// ListOrgAccessListExecute is a helper method to define mock.On call
//   - r admin.ListOrgAccessListApiRequest
func (_e *ServiceAccountsApi_Expecter) ListOrgAccessListExecute(r any) *ServiceAccountsApi_ListOrgAccessListExecute_Call {
	return &ServiceAccountsApi_ListOrgAccessListExecute_Call{Call: _e.mock.On("ListOrgAccessListExecute", r)}
}

func (_c *ServiceAccountsApi_ListOrgAccessListExecute_Call) Run(run func(r admin.ListOrgAccessListApiRequest)) *ServiceAccountsApi_ListOrgAccessListExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgAccessListApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessListExecute_Call) Return(_a0 *admin.PaginatedServiceAccountIPAccessEntry, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListOrgAccessListExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessListExecute_Call) RunAndReturn(run func(admin.ListOrgAccessListApiRequest) (*admin.PaginatedServiceAccountIPAccessEntry, *http.Response, error)) *ServiceAccountsApi_ListOrgAccessListExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgAccessListWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListOrgAccessListWithParams(ctx context.Context, args *admin.ListOrgAccessListApiParams) admin.ListOrgAccessListApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgAccessListWithParams")
	}

	var r0 admin.ListOrgAccessListApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgAccessListApiParams) admin.ListOrgAccessListApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgAccessListApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListOrgAccessListWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgAccessListWithParams'
type ServiceAccountsApi_ListOrgAccessListWithParams_Call struct {
	*mock.Call
}

// ListOrgAccessListWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgAccessListApiParams
func (_e *ServiceAccountsApi_Expecter) ListOrgAccessListWithParams(ctx any, args any) *ServiceAccountsApi_ListOrgAccessListWithParams_Call {
	return &ServiceAccountsApi_ListOrgAccessListWithParams_Call{Call: _e.mock.On("ListOrgAccessListWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListOrgAccessListWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgAccessListApiParams)) *ServiceAccountsApi_ListOrgAccessListWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgAccessListApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessListWithParams_Call) Return(_a0 admin.ListOrgAccessListApiRequest) *ServiceAccountsApi_ListOrgAccessListWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgAccessListWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgAccessListApiParams) admin.ListOrgAccessListApiRequest) *ServiceAccountsApi_ListOrgAccessListWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgServiceAccounts provides a mock function with given fields: ctx, orgId
func (_m *ServiceAccountsApi) ListOrgServiceAccounts(ctx context.Context, orgId string) admin.ListOrgServiceAccountsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgServiceAccounts")
	}

	var r0 admin.ListOrgServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgServiceAccountsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListOrgServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgServiceAccounts'
type ServiceAccountsApi_ListOrgServiceAccounts_Call struct {
	*mock.Call
}

// ListOrgServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *ServiceAccountsApi_Expecter) ListOrgServiceAccounts(ctx any, orgId any) *ServiceAccountsApi_ListOrgServiceAccounts_Call {
	return &ServiceAccountsApi_ListOrgServiceAccounts_Call{Call: _e.mock.On("ListOrgServiceAccounts", ctx, orgId)}
}

func (_c *ServiceAccountsApi_ListOrgServiceAccounts_Call) Run(run func(ctx context.Context, orgId string)) *ServiceAccountsApi_ListOrgServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccounts_Call) Return(_a0 admin.ListOrgServiceAccountsApiRequest) *ServiceAccountsApi_ListOrgServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccounts_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgServiceAccountsApiRequest) *ServiceAccountsApi_ListOrgServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgServiceAccountsExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) ListOrgServiceAccountsExecute(r admin.ListOrgServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgServiceAccountsExecute")
	}

	var r0 *admin.PaginatedOrgServiceAccounts
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgServiceAccountsApiRequest) *admin.PaginatedOrgServiceAccounts); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgServiceAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgServiceAccountsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgServiceAccountsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_ListOrgServiceAccountsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgServiceAccountsExecute'
type ServiceAccountsApi_ListOrgServiceAccountsExecute_Call struct {
	*mock.Call
}

// ListOrgServiceAccountsExecute is a helper method to define mock.On call
//   - r admin.ListOrgServiceAccountsApiRequest
func (_e *ServiceAccountsApi_Expecter) ListOrgServiceAccountsExecute(r any) *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call {
	return &ServiceAccountsApi_ListOrgServiceAccountsExecute_Call{Call: _e.mock.On("ListOrgServiceAccountsExecute", r)}
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call) Run(run func(r admin.ListOrgServiceAccountsApiRequest)) *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgServiceAccountsApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call) Return(_a0 *admin.PaginatedOrgServiceAccounts, _a1 *http.Response, _a2 error) *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call) RunAndReturn(run func(admin.ListOrgServiceAccountsApiRequest) (*admin.PaginatedOrgServiceAccounts, *http.Response, error)) *ServiceAccountsApi_ListOrgServiceAccountsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgServiceAccountsWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) ListOrgServiceAccountsWithParams(ctx context.Context, args *admin.ListOrgServiceAccountsApiParams) admin.ListOrgServiceAccountsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgServiceAccountsWithParams")
	}

	var r0 admin.ListOrgServiceAccountsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgServiceAccountsApiParams) admin.ListOrgServiceAccountsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgServiceAccountsApiRequest)
	}

	return r0
}

// ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgServiceAccountsWithParams'
type ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call struct {
	*mock.Call
}

// ListOrgServiceAccountsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgServiceAccountsApiParams
func (_e *ServiceAccountsApi_Expecter) ListOrgServiceAccountsWithParams(ctx any, args any) *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call {
	return &ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call{Call: _e.mock.On("ListOrgServiceAccountsWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgServiceAccountsApiParams)) *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgServiceAccountsApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call) Return(_a0 admin.ListOrgServiceAccountsApiRequest) *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgServiceAccountsApiParams) admin.ListOrgServiceAccountsApiRequest) *ServiceAccountsApi_ListOrgServiceAccountsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupServiceAccount provides a mock function with given fields: ctx, clientId, groupId, groupServiceAccountUpdateRequest
func (_m *ServiceAccountsApi) UpdateGroupServiceAccount(ctx context.Context, clientId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest) admin.UpdateGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, groupId, groupServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupServiceAccount")
	}

	var r0 admin.UpdateGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, groupId, groupServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateGroupServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupServiceAccount'
type ServiceAccountsApi_UpdateGroupServiceAccount_Call struct {
	*mock.Call
}

// UpdateGroupServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - groupId string
//   - groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest
func (_e *ServiceAccountsApi_Expecter) UpdateGroupServiceAccount(ctx any, clientId any, groupId any, groupServiceAccountUpdateRequest any) *ServiceAccountsApi_UpdateGroupServiceAccount_Call {
	return &ServiceAccountsApi_UpdateGroupServiceAccount_Call{Call: _e.mock.On("UpdateGroupServiceAccount", ctx, clientId, groupId, groupServiceAccountUpdateRequest)}
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccount_Call) Run(run func(ctx context.Context, clientId string, groupId string, groupServiceAccountUpdateRequest *admin.GroupServiceAccountUpdateRequest)) *ServiceAccountsApi_UpdateGroupServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccount_Call) Return(_a0 admin.UpdateGroupServiceAccountApiRequest) *ServiceAccountsApi_UpdateGroupServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupServiceAccountUpdateRequest) admin.UpdateGroupServiceAccountApiRequest) *ServiceAccountsApi_UpdateGroupServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) UpdateGroupServiceAccountExecute(r admin.UpdateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupServiceAccountExecute")
	}

	var r0 *admin.GroupServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupServiceAccountApiRequest) *admin.GroupServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupServiceAccountExecute'
type ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateGroupServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) UpdateGroupServiceAccountExecute(r any) *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call {
	return &ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call{Call: _e.mock.On("UpdateGroupServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call) Run(run func(r admin.UpdateGroupServiceAccountApiRequest)) *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call) Return(_a0 *admin.GroupServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateGroupServiceAccountApiRequest) (*admin.GroupServiceAccount, *http.Response, error)) *ServiceAccountsApi_UpdateGroupServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) UpdateGroupServiceAccountWithParams(ctx context.Context, args *admin.UpdateGroupServiceAccountApiParams) admin.UpdateGroupServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupServiceAccountWithParams")
	}

	var r0 admin.UpdateGroupServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupServiceAccountApiParams) admin.UpdateGroupServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupServiceAccountWithParams'
type ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateGroupServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) UpdateGroupServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call {
	return &ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call{Call: _e.mock.On("UpdateGroupServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupServiceAccountApiParams)) *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call) Return(_a0 admin.UpdateGroupServiceAccountApiRequest) *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupServiceAccountApiParams) admin.UpdateGroupServiceAccountApiRequest) *ServiceAccountsApi_UpdateGroupServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgServiceAccount provides a mock function with given fields: ctx, clientId, orgId, orgServiceAccountUpdateRequest
func (_m *ServiceAccountsApi) UpdateOrgServiceAccount(ctx context.Context, clientId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest) admin.UpdateOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, clientId, orgId, orgServiceAccountUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgServiceAccount")
	}

	var r0 admin.UpdateOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, clientId, orgId, orgServiceAccountUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateOrgServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgServiceAccount'
type ServiceAccountsApi_UpdateOrgServiceAccount_Call struct {
	*mock.Call
}

// UpdateOrgServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - clientId string
//   - orgId string
//   - orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest
func (_e *ServiceAccountsApi_Expecter) UpdateOrgServiceAccount(ctx any, clientId any, orgId any, orgServiceAccountUpdateRequest any) *ServiceAccountsApi_UpdateOrgServiceAccount_Call {
	return &ServiceAccountsApi_UpdateOrgServiceAccount_Call{Call: _e.mock.On("UpdateOrgServiceAccount", ctx, clientId, orgId, orgServiceAccountUpdateRequest)}
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccount_Call) Run(run func(ctx context.Context, clientId string, orgId string, orgServiceAccountUpdateRequest *admin.OrgServiceAccountUpdateRequest)) *ServiceAccountsApi_UpdateOrgServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrgServiceAccountUpdateRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccount_Call) Return(_a0 admin.UpdateOrgServiceAccountApiRequest) *ServiceAccountsApi_UpdateOrgServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrgServiceAccountUpdateRequest) admin.UpdateOrgServiceAccountApiRequest) *ServiceAccountsApi_UpdateOrgServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgServiceAccountExecute provides a mock function with given fields: r
func (_m *ServiceAccountsApi) UpdateOrgServiceAccountExecute(r admin.UpdateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgServiceAccountExecute")
	}

	var r0 *admin.OrgServiceAccount
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgServiceAccountApiRequest) *admin.OrgServiceAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgServiceAccountApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgServiceAccountApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgServiceAccountExecute'
type ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call struct {
	*mock.Call
}

// UpdateOrgServiceAccountExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgServiceAccountApiRequest
func (_e *ServiceAccountsApi_Expecter) UpdateOrgServiceAccountExecute(r any) *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call {
	return &ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call{Call: _e.mock.On("UpdateOrgServiceAccountExecute", r)}
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call) Run(run func(r admin.UpdateOrgServiceAccountApiRequest)) *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgServiceAccountApiRequest))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call) Return(_a0 *admin.OrgServiceAccount, _a1 *http.Response, _a2 error) *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call) RunAndReturn(run func(admin.UpdateOrgServiceAccountApiRequest) (*admin.OrgServiceAccount, *http.Response, error)) *ServiceAccountsApi_UpdateOrgServiceAccountExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgServiceAccountWithParams provides a mock function with given fields: ctx, args
func (_m *ServiceAccountsApi) UpdateOrgServiceAccountWithParams(ctx context.Context, args *admin.UpdateOrgServiceAccountApiParams) admin.UpdateOrgServiceAccountApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgServiceAccountWithParams")
	}

	var r0 admin.UpdateOrgServiceAccountApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgServiceAccountApiParams) admin.UpdateOrgServiceAccountApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgServiceAccountApiRequest)
	}

	return r0
}

// ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgServiceAccountWithParams'
type ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call struct {
	*mock.Call
}

// UpdateOrgServiceAccountWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgServiceAccountApiParams
func (_e *ServiceAccountsApi_Expecter) UpdateOrgServiceAccountWithParams(ctx any, args any) *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call {
	return &ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call{Call: _e.mock.On("UpdateOrgServiceAccountWithParams", ctx, args)}
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgServiceAccountApiParams)) *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgServiceAccountApiParams))
	})
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call) Return(_a0 admin.UpdateOrgServiceAccountApiRequest) *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgServiceAccountApiParams) admin.UpdateOrgServiceAccountApiRequest) *ServiceAccountsApi_UpdateOrgServiceAccountWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceAccountsApi creates a new instance of ServiceAccountsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAccountsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAccountsApi {
	mock := &ServiceAccountsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
