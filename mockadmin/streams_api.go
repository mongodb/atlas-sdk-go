// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StreamsApi is an autogenerated mock type for the StreamsApi type
type StreamsApi struct {
	mock.Mock
}

type StreamsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamsApi) EXPECT() *StreamsApi_Expecter {
	return &StreamsApi_Expecter{mock: &_m.Mock}
}

// AcceptVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id, vPCPeeringActionChallenge
func (_m *StreamsApi) AcceptVpcPeeringConnection(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id, vPCPeeringActionChallenge)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnection")
	}

	var r0 admin.AcceptVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id, vPCPeeringActionChallenge)
	} else {
		r0 = ret.Get(0).(admin.AcceptVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnection'
type StreamsApi_AcceptVpcPeeringConnection_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
//   - vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnection(ctx any, groupId any, id any, vPCPeeringActionChallenge any) *StreamsApi_AcceptVpcPeeringConnection_Call {
	return &StreamsApi_AcceptVpcPeeringConnection_Call{Call: _e.mock.On("AcceptVpcPeeringConnection", ctx, groupId, id, vPCPeeringActionChallenge)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge)) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.VPCPeeringActionChallenge))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) Return(_a0 admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) AcceptVpcPeeringConnectionExecute(r admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AcceptVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AcceptVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_AcceptVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnectionExecute'
type StreamsApi_AcceptVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.AcceptVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnectionExecute(r any) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	return &StreamsApi_AcceptVpcPeeringConnectionExecute_Call{Call: _e.mock.On("AcceptVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) Run(run func(r admin.AcceptVpcPeeringConnectionApiRequest)) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AcceptVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) AcceptVpcPeeringConnectionWithParams(ctx context.Context, args *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnectionWithParams")
	}

	var r0 admin.AcceptVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AcceptVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnectionWithParams'
type StreamsApi_AcceptVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AcceptVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_AcceptVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("AcceptVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.AcceptVpcPeeringConnectionApiParams)) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AcceptVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) Return(_a0 admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnection provides a mock function with given fields: ctx, groupId, streamsPrivateLinkConnection
func (_m *StreamsApi) CreatePrivateLinkConnection(ctx context.Context, groupId string, streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, streamsPrivateLinkConnection)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnection")
	}

	var r0 admin.CreatePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, streamsPrivateLinkConnection)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreatePrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnection'
type StreamsApi_CreatePrivateLinkConnection_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnection(ctx any, groupId any, streamsPrivateLinkConnection any) *StreamsApi_CreatePrivateLinkConnection_Call {
	return &StreamsApi_CreatePrivateLinkConnection_Call{Call: _e.mock.On("CreatePrivateLinkConnection", ctx, groupId, streamsPrivateLinkConnection)}
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection)) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.StreamsPrivateLinkConnection))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) Return(_a0 admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreatePrivateLinkConnectionExecute(r admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnectionExecute")
	}

	var r0 *admin.StreamsPrivateLinkConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateLinkConnectionApiRequest) *admin.StreamsPrivateLinkConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsPrivateLinkConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePrivateLinkConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePrivateLinkConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreatePrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnectionExecute'
type StreamsApi_CreatePrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.CreatePrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnectionExecute(r any) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	return &StreamsApi_CreatePrivateLinkConnectionExecute_Call{Call: _e.mock.On("CreatePrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) Run(run func(r admin.CreatePrivateLinkConnectionApiRequest)) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) Return(_a0 *admin.StreamsPrivateLinkConnection, _a1 *http.Response, _a2 error) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreatePrivateLinkConnectionWithParams(ctx context.Context, args *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnectionWithParams")
	}

	var r0 admin.CreatePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreatePrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnectionWithParams'
type StreamsApi_CreatePrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	return &StreamsApi_CreatePrivateLinkConnectionWithParams_Call{Call: _e.mock.On("CreatePrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePrivateLinkConnectionApiParams)) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) Return(_a0 admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, streamsConnection
func (_m *StreamsApi) CreateStreamConnection(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnection")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnection'
type StreamsApi_CreateStreamConnection_Call struct {
	*mock.Call
}

// CreateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) CreateStreamConnection(ctx any, groupId any, tenantName any, streamsConnection any) *StreamsApi_CreateStreamConnection_Call {
	return &StreamsApi_CreateStreamConnection_Call{Call: _e.mock.On("CreateStreamConnection", ctx, groupId, tenantName, streamsConnection)}
}

func (_c *StreamsApi_CreateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamConnectionExecute(r admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionExecute'
type StreamsApi_CreateStreamConnectionExecute_Call struct {
	*mock.Call
}

// CreateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.CreateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) CreateStreamConnectionExecute(r any) *StreamsApi_CreateStreamConnectionExecute_Call {
	return &StreamsApi_CreateStreamConnectionExecute_Call{Call: _e.mock.On("CreateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Run(run func(r admin.CreateStreamConnectionApiRequest)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) RunAndReturn(run func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamConnectionWithParams(ctx context.Context, args *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionWithParams")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionWithParams'
type StreamsApi_CreateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// CreateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) CreateStreamConnectionWithParams(ctx any, args any) *StreamsApi_CreateStreamConnectionWithParams_Call {
	return &StreamsApi_CreateStreamConnectionWithParams_Call{Call: _e.mock.On("CreateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamConnectionApiParams)) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, streamsProcessor
func (_m *StreamsApi) CreateStreamProcessor(ctx context.Context, groupId string, tenantName string, streamsProcessor *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsProcessor)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessor")
	}

	var r0 admin.CreateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsProcessor)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessor'
type StreamsApi_CreateStreamProcessor_Call struct {
	*mock.Call
}

// CreateStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsProcessor *admin.StreamsProcessor
func (_e *StreamsApi_Expecter) CreateStreamProcessor(ctx any, groupId any, tenantName any, streamsProcessor any) *StreamsApi_CreateStreamProcessor_Call {
	return &StreamsApi_CreateStreamProcessor_Call{Call: _e.mock.On("CreateStreamProcessor", ctx, groupId, tenantName, streamsProcessor)}
}

func (_c *StreamsApi_CreateStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsProcessor *admin.StreamsProcessor)) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsProcessor))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessor_Call) Return(_a0 admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamProcessorExecute(r admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessorExecute")
	}

	var r0 *admin.StreamsProcessor
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamProcessorApiRequest) *admin.StreamsProcessor); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsProcessor)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessorExecute'
type StreamsApi_CreateStreamProcessorExecute_Call struct {
	*mock.Call
}

// CreateStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.CreateStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) CreateStreamProcessorExecute(r any) *StreamsApi_CreateStreamProcessorExecute_Call {
	return &StreamsApi_CreateStreamProcessorExecute_Call{Call: _e.mock.On("CreateStreamProcessorExecute", r)}
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) Run(run func(r admin.CreateStreamProcessorApiRequest)) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) Return(_a0 *admin.StreamsProcessor, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) RunAndReturn(run func(admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error)) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamProcessorWithParams(ctx context.Context, args *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessorWithParams")
	}

	var r0 admin.CreateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessorWithParams'
type StreamsApi_CreateStreamProcessorWithParams_Call struct {
	*mock.Call
}

// CreateStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamProcessorApiParams
func (_e *StreamsApi_Expecter) CreateStreamProcessorWithParams(ctx any, args any) *StreamsApi_CreateStreamProcessorWithParams_Call {
	return &StreamsApi_CreateStreamProcessorWithParams_Call{Call: _e.mock.On("CreateStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamProcessorApiParams)) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) Return(_a0 admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamWorkspace provides a mock function with given fields: ctx, groupId, streamsTenant
func (_m *StreamsApi) CreateStreamWorkspace(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant) admin.CreateStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, groupId, streamsTenant)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamWorkspace")
	}

	var r0 admin.CreateStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, groupId, streamsTenant)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamWorkspace'
type StreamsApi_CreateStreamWorkspace_Call struct {
	*mock.Call
}

// CreateStreamWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - streamsTenant *admin.StreamsTenant
func (_e *StreamsApi_Expecter) CreateStreamWorkspace(ctx any, groupId any, streamsTenant any) *StreamsApi_CreateStreamWorkspace_Call {
	return &StreamsApi_CreateStreamWorkspace_Call{Call: _e.mock.On("CreateStreamWorkspace", ctx, groupId, streamsTenant)}
}

func (_c *StreamsApi_CreateStreamWorkspace_Call) Run(run func(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant)) *StreamsApi_CreateStreamWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.StreamsTenant))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspace_Call) Return(_a0 admin.CreateStreamWorkspaceApiRequest) *StreamsApi_CreateStreamWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspace_Call) RunAndReturn(run func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamWorkspaceApiRequest) *StreamsApi_CreateStreamWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamWorkspaceExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamWorkspaceExecute(r admin.CreateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamWorkspaceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamWorkspaceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamWorkspaceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamWorkspaceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamWorkspaceExecute'
type StreamsApi_CreateStreamWorkspaceExecute_Call struct {
	*mock.Call
}

// CreateStreamWorkspaceExecute is a helper method to define mock.On call
//   - r admin.CreateStreamWorkspaceApiRequest
func (_e *StreamsApi_Expecter) CreateStreamWorkspaceExecute(r any) *StreamsApi_CreateStreamWorkspaceExecute_Call {
	return &StreamsApi_CreateStreamWorkspaceExecute_Call{Call: _e.mock.On("CreateStreamWorkspaceExecute", r)}
}

func (_c *StreamsApi_CreateStreamWorkspaceExecute_Call) Run(run func(r admin.CreateStreamWorkspaceApiRequest)) *StreamsApi_CreateStreamWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamWorkspaceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspaceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamWorkspaceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspaceExecute_Call) RunAndReturn(run func(admin.CreateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_CreateStreamWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamWorkspaceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamWorkspaceWithParams(ctx context.Context, args *admin.CreateStreamWorkspaceApiParams) admin.CreateStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamWorkspaceWithParams")
	}

	var r0 admin.CreateStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamWorkspaceApiParams) admin.CreateStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamWorkspaceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamWorkspaceWithParams'
type StreamsApi_CreateStreamWorkspaceWithParams_Call struct {
	*mock.Call
}

// CreateStreamWorkspaceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamWorkspaceApiParams
func (_e *StreamsApi_Expecter) CreateStreamWorkspaceWithParams(ctx any, args any) *StreamsApi_CreateStreamWorkspaceWithParams_Call {
	return &StreamsApi_CreateStreamWorkspaceWithParams_Call{Call: _e.mock.On("CreateStreamWorkspaceWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamWorkspaceWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamWorkspaceApiParams)) *StreamsApi_CreateStreamWorkspaceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamWorkspaceApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspaceWithParams_Call) Return(_a0 admin.CreateStreamWorkspaceApiRequest) *StreamsApi_CreateStreamWorkspaceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamWorkspaceWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamWorkspaceApiParams) admin.CreateStreamWorkspaceApiRequest) *StreamsApi_CreateStreamWorkspaceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnection provides a mock function with given fields: ctx, groupId, connectionId
func (_m *StreamsApi) DeletePrivateLinkConnection(ctx context.Context, groupId string, connectionId string) admin.DeletePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnection")
	}

	var r0 admin.DeletePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, connectionId)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeletePrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnection'
type StreamsApi_DeletePrivateLinkConnection_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - connectionId string
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnection(ctx any, groupId any, connectionId any) *StreamsApi_DeletePrivateLinkConnection_Call {
	return &StreamsApi_DeletePrivateLinkConnection_Call{Call: _e.mock.On("DeletePrivateLinkConnection", ctx, groupId, connectionId)}
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, connectionId string)) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) Return(_a0 admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeletePrivateLinkConnectionExecute(r admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateLinkConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePrivateLinkConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeletePrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnectionExecute'
type StreamsApi_DeletePrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.DeletePrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnectionExecute(r any) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	return &StreamsApi_DeletePrivateLinkConnectionExecute_Call{Call: _e.mock.On("DeletePrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) Run(run func(r admin.DeletePrivateLinkConnectionApiRequest)) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeletePrivateLinkConnectionWithParams(ctx context.Context, args *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnectionWithParams")
	}

	var r0 admin.DeletePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeletePrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnectionWithParams'
type StreamsApi_DeletePrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	return &StreamsApi_DeletePrivateLinkConnectionWithParams_Call{Call: _e.mock.On("DeletePrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePrivateLinkConnectionApiParams)) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) Return(_a0 admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) DeleteStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnection")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnection'
type StreamsApi_DeleteStreamConnection_Call struct {
	*mock.Call
}

// DeleteStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) DeleteStreamConnection(ctx any, groupId any, tenantName any, connectionName any) *StreamsApi_DeleteStreamConnection_Call {
	return &StreamsApi_DeleteStreamConnection_Call{Call: _e.mock.On("DeleteStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamConnectionExecute(r admin.DeleteStreamConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionExecute'
type StreamsApi_DeleteStreamConnectionExecute_Call struct {
	*mock.Call
}

// DeleteStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamConnectionExecute(r any) *StreamsApi_DeleteStreamConnectionExecute_Call {
	return &StreamsApi_DeleteStreamConnectionExecute_Call{Call: _e.mock.On("DeleteStreamConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Run(run func(r admin.DeleteStreamConnectionApiRequest)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) RunAndReturn(run func(admin.DeleteStreamConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamConnectionWithParams(ctx context.Context, args *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionWithParams")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionWithParams'
type StreamsApi_DeleteStreamConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteStreamConnectionWithParams(ctx any, args any) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	return &StreamsApi_DeleteStreamConnectionWithParams_Call{Call: _e.mock.On("DeleteStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamConnectionApiParams)) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) DeleteStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.DeleteStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessor")
	}

	var r0 admin.DeleteStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessor'
type StreamsApi_DeleteStreamProcessor_Call struct {
	*mock.Call
}

// DeleteStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) DeleteStreamProcessor(ctx any, groupId any, tenantName any, processorName any) *StreamsApi_DeleteStreamProcessor_Call {
	return &StreamsApi_DeleteStreamProcessor_Call{Call: _e.mock.On("DeleteStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) Return(_a0 admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamProcessorExecute(r admin.DeleteStreamProcessorApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessorExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamProcessorApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamProcessorApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamProcessorApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessorExecute'
type StreamsApi_DeleteStreamProcessorExecute_Call struct {
	*mock.Call
}

// DeleteStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamProcessorExecute(r any) *StreamsApi_DeleteStreamProcessorExecute_Call {
	return &StreamsApi_DeleteStreamProcessorExecute_Call{Call: _e.mock.On("DeleteStreamProcessorExecute", r)}
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) Run(run func(r admin.DeleteStreamProcessorApiRequest)) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) RunAndReturn(run func(admin.DeleteStreamProcessorApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamProcessorWithParams(ctx context.Context, args *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessorWithParams")
	}

	var r0 admin.DeleteStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessorWithParams'
type StreamsApi_DeleteStreamProcessorWithParams_Call struct {
	*mock.Call
}

// DeleteStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamProcessorApiParams
func (_e *StreamsApi_Expecter) DeleteStreamProcessorWithParams(ctx any, args any) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	return &StreamsApi_DeleteStreamProcessorWithParams_Call{Call: _e.mock.On("DeleteStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamProcessorApiParams)) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) Return(_a0 admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamWorkspace provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DeleteStreamWorkspace(ctx context.Context, groupId string, tenantName string) admin.DeleteStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamWorkspace")
	}

	var r0 admin.DeleteStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamWorkspace'
type StreamsApi_DeleteStreamWorkspace_Call struct {
	*mock.Call
}

// DeleteStreamWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DeleteStreamWorkspace(ctx any, groupId any, tenantName any) *StreamsApi_DeleteStreamWorkspace_Call {
	return &StreamsApi_DeleteStreamWorkspace_Call{Call: _e.mock.On("DeleteStreamWorkspace", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DeleteStreamWorkspace_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DeleteStreamWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspace_Call) Return(_a0 admin.DeleteStreamWorkspaceApiRequest) *StreamsApi_DeleteStreamWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspace_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteStreamWorkspaceApiRequest) *StreamsApi_DeleteStreamWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamWorkspaceExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamWorkspaceExecute(r admin.DeleteStreamWorkspaceApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamWorkspaceExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamWorkspaceApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamWorkspaceApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamWorkspaceApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamWorkspaceExecute'
type StreamsApi_DeleteStreamWorkspaceExecute_Call struct {
	*mock.Call
}

// DeleteStreamWorkspaceExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamWorkspaceApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamWorkspaceExecute(r any) *StreamsApi_DeleteStreamWorkspaceExecute_Call {
	return &StreamsApi_DeleteStreamWorkspaceExecute_Call{Call: _e.mock.On("DeleteStreamWorkspaceExecute", r)}
}

func (_c *StreamsApi_DeleteStreamWorkspaceExecute_Call) Run(run func(r admin.DeleteStreamWorkspaceApiRequest)) *StreamsApi_DeleteStreamWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamWorkspaceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspaceExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamWorkspaceExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspaceExecute_Call) RunAndReturn(run func(admin.DeleteStreamWorkspaceApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamWorkspaceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamWorkspaceWithParams(ctx context.Context, args *admin.DeleteStreamWorkspaceApiParams) admin.DeleteStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamWorkspaceWithParams")
	}

	var r0 admin.DeleteStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamWorkspaceApiParams) admin.DeleteStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamWorkspaceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamWorkspaceWithParams'
type StreamsApi_DeleteStreamWorkspaceWithParams_Call struct {
	*mock.Call
}

// DeleteStreamWorkspaceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamWorkspaceApiParams
func (_e *StreamsApi_Expecter) DeleteStreamWorkspaceWithParams(ctx any, args any) *StreamsApi_DeleteStreamWorkspaceWithParams_Call {
	return &StreamsApi_DeleteStreamWorkspaceWithParams_Call{Call: _e.mock.On("DeleteStreamWorkspaceWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamWorkspaceWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamWorkspaceApiParams)) *StreamsApi_DeleteStreamWorkspaceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamWorkspaceApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspaceWithParams_Call) Return(_a0 admin.DeleteStreamWorkspaceApiRequest) *StreamsApi_DeleteStreamWorkspaceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamWorkspaceWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamWorkspaceApiParams) admin.DeleteStreamWorkspaceApiRequest) *StreamsApi_DeleteStreamWorkspaceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) DeleteVpcPeeringConnection(ctx context.Context, groupId string, id string) admin.DeleteVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnection")
	}

	var r0 admin.DeleteVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.DeleteVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnection'
type StreamsApi_DeleteVpcPeeringConnection_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnection(ctx any, groupId any, id any) *StreamsApi_DeleteVpcPeeringConnection_Call {
	return &StreamsApi_DeleteVpcPeeringConnection_Call{Call: _e.mock.On("DeleteVpcPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) Return(_a0 admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteVpcPeeringConnectionExecute(r admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnectionExecute'
type StreamsApi_DeleteVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnectionExecute(r any) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	return &StreamsApi_DeleteVpcPeeringConnectionExecute_Call{Call: _e.mock.On("DeleteVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) Run(run func(r admin.DeleteVpcPeeringConnectionApiRequest)) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteVpcPeeringConnectionWithParams(ctx context.Context, args *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnectionWithParams")
	}

	var r0 admin.DeleteVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnectionWithParams'
type StreamsApi_DeleteVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_DeleteVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("DeleteVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteVpcPeeringConnectionApiParams)) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) Return(_a0 admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAuditLogs provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DownloadAuditLogs(ctx context.Context, groupId string, tenantName string) admin.DownloadAuditLogsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DownloadAuditLogs")
	}

	var r0 admin.DownloadAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DownloadAuditLogsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DownloadAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAuditLogs'
type StreamsApi_DownloadAuditLogs_Call struct {
	*mock.Call
}

// DownloadAuditLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DownloadAuditLogs(ctx any, groupId any, tenantName any) *StreamsApi_DownloadAuditLogs_Call {
	return &StreamsApi_DownloadAuditLogs_Call{Call: _e.mock.On("DownloadAuditLogs", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DownloadAuditLogs_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DownloadAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DownloadAuditLogs_Call) Return(_a0 admin.DownloadAuditLogsApiRequest) *StreamsApi_DownloadAuditLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadAuditLogs_Call) RunAndReturn(run func(context.Context, string, string) admin.DownloadAuditLogsApiRequest) *StreamsApi_DownloadAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAuditLogsExecute provides a mock function with given fields: r
func (_m *StreamsApi) DownloadAuditLogsExecute(r admin.DownloadAuditLogsApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadAuditLogsExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadAuditLogsApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadAuditLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadAuditLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DownloadAuditLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAuditLogsExecute'
type StreamsApi_DownloadAuditLogsExecute_Call struct {
	*mock.Call
}

// DownloadAuditLogsExecute is a helper method to define mock.On call
//   - r admin.DownloadAuditLogsApiRequest
func (_e *StreamsApi_Expecter) DownloadAuditLogsExecute(r any) *StreamsApi_DownloadAuditLogsExecute_Call {
	return &StreamsApi_DownloadAuditLogsExecute_Call{Call: _e.mock.On("DownloadAuditLogsExecute", r)}
}

func (_c *StreamsApi_DownloadAuditLogsExecute_Call) Run(run func(r admin.DownloadAuditLogsApiRequest)) *StreamsApi_DownloadAuditLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadAuditLogsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DownloadAuditLogsExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *StreamsApi_DownloadAuditLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DownloadAuditLogsExecute_Call) RunAndReturn(run func(admin.DownloadAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)) *StreamsApi_DownloadAuditLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAuditLogsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DownloadAuditLogsWithParams(ctx context.Context, args *admin.DownloadAuditLogsApiParams) admin.DownloadAuditLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadAuditLogsWithParams")
	}

	var r0 admin.DownloadAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadAuditLogsApiParams) admin.DownloadAuditLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadAuditLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAuditLogsWithParams'
type StreamsApi_DownloadAuditLogsWithParams_Call struct {
	*mock.Call
}

// DownloadAuditLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadAuditLogsApiParams
func (_e *StreamsApi_Expecter) DownloadAuditLogsWithParams(ctx any, args any) *StreamsApi_DownloadAuditLogsWithParams_Call {
	return &StreamsApi_DownloadAuditLogsWithParams_Call{Call: _e.mock.On("DownloadAuditLogsWithParams", ctx, args)}
}

func (_c *StreamsApi_DownloadAuditLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadAuditLogsApiParams)) *StreamsApi_DownloadAuditLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadAuditLogsApiParams))
	})
	return _c
}

func (_c *StreamsApi_DownloadAuditLogsWithParams_Call) Return(_a0 admin.DownloadAuditLogsApiRequest) *StreamsApi_DownloadAuditLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadAuditLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadAuditLogsApiParams) admin.DownloadAuditLogsApiRequest) *StreamsApi_DownloadAuditLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountDetails provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) GetAccountDetails(ctx context.Context, groupId string) admin.GetAccountDetailsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDetails")
	}

	var r0 admin.GetAccountDetailsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetAccountDetailsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetAccountDetailsApiRequest)
	}

	return r0
}

// StreamsApi_GetAccountDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDetails'
type StreamsApi_GetAccountDetails_Call struct {
	*mock.Call
}

// GetAccountDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) GetAccountDetails(ctx any, groupId any) *StreamsApi_GetAccountDetails_Call {
	return &StreamsApi_GetAccountDetails_Call{Call: _e.mock.On("GetAccountDetails", ctx, groupId)}
}

func (_c *StreamsApi_GetAccountDetails_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_GetAccountDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_GetAccountDetails_Call) Return(_a0 admin.GetAccountDetailsApiRequest) *StreamsApi_GetAccountDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetAccountDetails_Call) RunAndReturn(run func(context.Context, string) admin.GetAccountDetailsApiRequest) *StreamsApi_GetAccountDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountDetailsExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetAccountDetailsExecute(r admin.GetAccountDetailsApiRequest) (*admin.AccountDetails, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDetailsExecute")
	}

	var r0 *admin.AccountDetails
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAccountDetailsApiRequest) (*admin.AccountDetails, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAccountDetailsApiRequest) *admin.AccountDetails); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AccountDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAccountDetailsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAccountDetailsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetAccountDetailsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDetailsExecute'
type StreamsApi_GetAccountDetailsExecute_Call struct {
	*mock.Call
}

// GetAccountDetailsExecute is a helper method to define mock.On call
//   - r admin.GetAccountDetailsApiRequest
func (_e *StreamsApi_Expecter) GetAccountDetailsExecute(r any) *StreamsApi_GetAccountDetailsExecute_Call {
	return &StreamsApi_GetAccountDetailsExecute_Call{Call: _e.mock.On("GetAccountDetailsExecute", r)}
}

func (_c *StreamsApi_GetAccountDetailsExecute_Call) Run(run func(r admin.GetAccountDetailsApiRequest)) *StreamsApi_GetAccountDetailsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAccountDetailsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetAccountDetailsExecute_Call) Return(_a0 *admin.AccountDetails, _a1 *http.Response, _a2 error) *StreamsApi_GetAccountDetailsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetAccountDetailsExecute_Call) RunAndReturn(run func(admin.GetAccountDetailsApiRequest) (*admin.AccountDetails, *http.Response, error)) *StreamsApi_GetAccountDetailsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountDetailsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetAccountDetailsWithParams(ctx context.Context, args *admin.GetAccountDetailsApiParams) admin.GetAccountDetailsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDetailsWithParams")
	}

	var r0 admin.GetAccountDetailsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAccountDetailsApiParams) admin.GetAccountDetailsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAccountDetailsApiRequest)
	}

	return r0
}

// StreamsApi_GetAccountDetailsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDetailsWithParams'
type StreamsApi_GetAccountDetailsWithParams_Call struct {
	*mock.Call
}

// GetAccountDetailsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAccountDetailsApiParams
func (_e *StreamsApi_Expecter) GetAccountDetailsWithParams(ctx any, args any) *StreamsApi_GetAccountDetailsWithParams_Call {
	return &StreamsApi_GetAccountDetailsWithParams_Call{Call: _e.mock.On("GetAccountDetailsWithParams", ctx, args)}
}

func (_c *StreamsApi_GetAccountDetailsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAccountDetailsApiParams)) *StreamsApi_GetAccountDetailsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAccountDetailsApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetAccountDetailsWithParams_Call) Return(_a0 admin.GetAccountDetailsApiRequest) *StreamsApi_GetAccountDetailsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetAccountDetailsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAccountDetailsApiParams) admin.GetAccountDetailsApiRequest) *StreamsApi_GetAccountDetailsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnection provides a mock function with given fields: ctx, groupId, connectionId
func (_m *StreamsApi) GetPrivateLinkConnection(ctx context.Context, groupId string, connectionId string) admin.GetPrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnection")
	}

	var r0 admin.GetPrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, connectionId)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetPrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnection'
type StreamsApi_GetPrivateLinkConnection_Call struct {
	*mock.Call
}

// GetPrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - connectionId string
func (_e *StreamsApi_Expecter) GetPrivateLinkConnection(ctx any, groupId any, connectionId any) *StreamsApi_GetPrivateLinkConnection_Call {
	return &StreamsApi_GetPrivateLinkConnection_Call{Call: _e.mock.On("GetPrivateLinkConnection", ctx, groupId, connectionId)}
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, connectionId string)) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) Return(_a0 admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetPrivateLinkConnectionExecute(r admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnectionExecute")
	}

	var r0 *admin.StreamsPrivateLinkConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPrivateLinkConnectionApiRequest) *admin.StreamsPrivateLinkConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsPrivateLinkConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPrivateLinkConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPrivateLinkConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetPrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnectionExecute'
type StreamsApi_GetPrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// GetPrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.GetPrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) GetPrivateLinkConnectionExecute(r any) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	return &StreamsApi_GetPrivateLinkConnectionExecute_Call{Call: _e.mock.On("GetPrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) Run(run func(r admin.GetPrivateLinkConnectionApiRequest)) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) Return(_a0 *admin.StreamsPrivateLinkConnection, _a1 *http.Response, _a2 error) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetPrivateLinkConnectionWithParams(ctx context.Context, args *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnectionWithParams")
	}

	var r0 admin.GetPrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetPrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnectionWithParams'
type StreamsApi_GetPrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// GetPrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) GetPrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	return &StreamsApi_GetPrivateLinkConnectionWithParams_Call{Call: _e.mock.On("GetPrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPrivateLinkConnectionApiParams)) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) Return(_a0 admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) GetStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnection")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnection'
type StreamsApi_GetStreamConnection_Call struct {
	*mock.Call
}

// GetStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) GetStreamConnection(ctx any, groupId any, tenantName any, connectionName any) *StreamsApi_GetStreamConnection_Call {
	return &StreamsApi_GetStreamConnection_Call{Call: _e.mock.On("GetStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_GetStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamConnectionExecute(r admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionExecute'
type StreamsApi_GetStreamConnectionExecute_Call struct {
	*mock.Call
}

// GetStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.GetStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) GetStreamConnectionExecute(r any) *StreamsApi_GetStreamConnectionExecute_Call {
	return &StreamsApi_GetStreamConnectionExecute_Call{Call: _e.mock.On("GetStreamConnectionExecute", r)}
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Run(run func(r admin.GetStreamConnectionApiRequest)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) RunAndReturn(run func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamConnectionWithParams(ctx context.Context, args *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionWithParams")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionWithParams'
type StreamsApi_GetStreamConnectionWithParams_Call struct {
	*mock.Call
}

// GetStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamConnectionApiParams
func (_e *StreamsApi_Expecter) GetStreamConnectionWithParams(ctx any, args any) *StreamsApi_GetStreamConnectionWithParams_Call {
	return &StreamsApi_GetStreamConnectionWithParams_Call{Call: _e.mock.On("GetStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamConnectionApiParams)) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) GetStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.GetStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessor")
	}

	var r0 admin.GetStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessor'
type StreamsApi_GetStreamProcessor_Call struct {
	*mock.Call
}

// GetStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) GetStreamProcessor(ctx any, groupId any, tenantName any, processorName any) *StreamsApi_GetStreamProcessor_Call {
	return &StreamsApi_GetStreamProcessor_Call{Call: _e.mock.On("GetStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_GetStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessor_Call) Return(_a0 admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamProcessorExecute(r admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorExecute")
	}

	var r0 *admin.StreamsProcessorWithStats
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorApiRequest) *admin.StreamsProcessorWithStats); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsProcessorWithStats)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorExecute'
type StreamsApi_GetStreamProcessorExecute_Call struct {
	*mock.Call
}

// GetStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.GetStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) GetStreamProcessorExecute(r any) *StreamsApi_GetStreamProcessorExecute_Call {
	return &StreamsApi_GetStreamProcessorExecute_Call{Call: _e.mock.On("GetStreamProcessorExecute", r)}
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) Run(run func(r admin.GetStreamProcessorApiRequest)) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) Return(_a0 *admin.StreamsProcessorWithStats, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) RunAndReturn(run func(admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamProcessorWithParams(ctx context.Context, args *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorWithParams")
	}

	var r0 admin.GetStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorWithParams'
type StreamsApi_GetStreamProcessorWithParams_Call struct {
	*mock.Call
}

// GetStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamProcessorApiParams
func (_e *StreamsApi_Expecter) GetStreamProcessorWithParams(ctx any, args any) *StreamsApi_GetStreamProcessorWithParams_Call {
	return &StreamsApi_GetStreamProcessorWithParams_Call{Call: _e.mock.On("GetStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamProcessorApiParams)) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) Return(_a0 admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessors provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) GetStreamProcessors(ctx context.Context, groupId string, tenantName string) admin.GetStreamProcessorsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessors")
	}

	var r0 admin.GetStreamProcessorsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetStreamProcessorsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorsApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessors'
type StreamsApi_GetStreamProcessors_Call struct {
	*mock.Call
}

// GetStreamProcessors is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) GetStreamProcessors(ctx any, groupId any, tenantName any) *StreamsApi_GetStreamProcessors_Call {
	return &StreamsApi_GetStreamProcessors_Call{Call: _e.mock.On("GetStreamProcessors", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_GetStreamProcessors_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_GetStreamProcessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessors_Call) Return(_a0 admin.GetStreamProcessorsApiRequest) *StreamsApi_GetStreamProcessors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessors_Call) RunAndReturn(run func(context.Context, string, string) admin.GetStreamProcessorsApiRequest) *StreamsApi_GetStreamProcessors_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorsExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamProcessorsExecute(r admin.GetStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorsExecute")
	}

	var r0 *admin.PaginatedApiStreamsStreamProcessorWithStats
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorsApiRequest) *admin.PaginatedApiStreamsStreamProcessorWithStats); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsStreamProcessorWithStats)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamProcessorsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamProcessorsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamProcessorsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorsExecute'
type StreamsApi_GetStreamProcessorsExecute_Call struct {
	*mock.Call
}

// GetStreamProcessorsExecute is a helper method to define mock.On call
//   - r admin.GetStreamProcessorsApiRequest
func (_e *StreamsApi_Expecter) GetStreamProcessorsExecute(r any) *StreamsApi_GetStreamProcessorsExecute_Call {
	return &StreamsApi_GetStreamProcessorsExecute_Call{Call: _e.mock.On("GetStreamProcessorsExecute", r)}
}

func (_c *StreamsApi_GetStreamProcessorsExecute_Call) Run(run func(r admin.GetStreamProcessorsApiRequest)) *StreamsApi_GetStreamProcessorsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamProcessorsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsStreamProcessorWithStats, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamProcessorsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorsExecute_Call) RunAndReturn(run func(admin.GetStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error)) *StreamsApi_GetStreamProcessorsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamProcessorsWithParams(ctx context.Context, args *admin.GetStreamProcessorsApiParams) admin.GetStreamProcessorsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorsWithParams")
	}

	var r0 admin.GetStreamProcessorsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamProcessorsApiParams) admin.GetStreamProcessorsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorsApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessorsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorsWithParams'
type StreamsApi_GetStreamProcessorsWithParams_Call struct {
	*mock.Call
}

// GetStreamProcessorsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamProcessorsApiParams
func (_e *StreamsApi_Expecter) GetStreamProcessorsWithParams(ctx any, args any) *StreamsApi_GetStreamProcessorsWithParams_Call {
	return &StreamsApi_GetStreamProcessorsWithParams_Call{Call: _e.mock.On("GetStreamProcessorsWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamProcessorsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamProcessorsApiParams)) *StreamsApi_GetStreamProcessorsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamProcessorsApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorsWithParams_Call) Return(_a0 admin.GetStreamProcessorsApiRequest) *StreamsApi_GetStreamProcessorsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamProcessorsApiParams) admin.GetStreamProcessorsApiRequest) *StreamsApi_GetStreamProcessorsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamWorkspace provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) GetStreamWorkspace(ctx context.Context, groupId string, tenantName string) admin.GetStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamWorkspace")
	}

	var r0 admin.GetStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamWorkspace'
type StreamsApi_GetStreamWorkspace_Call struct {
	*mock.Call
}

// GetStreamWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) GetStreamWorkspace(ctx any, groupId any, tenantName any) *StreamsApi_GetStreamWorkspace_Call {
	return &StreamsApi_GetStreamWorkspace_Call{Call: _e.mock.On("GetStreamWorkspace", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_GetStreamWorkspace_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_GetStreamWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamWorkspace_Call) Return(_a0 admin.GetStreamWorkspaceApiRequest) *StreamsApi_GetStreamWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamWorkspace_Call) RunAndReturn(run func(context.Context, string, string) admin.GetStreamWorkspaceApiRequest) *StreamsApi_GetStreamWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamWorkspaceExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamWorkspaceExecute(r admin.GetStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamWorkspaceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamWorkspaceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamWorkspaceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamWorkspaceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamWorkspaceExecute'
type StreamsApi_GetStreamWorkspaceExecute_Call struct {
	*mock.Call
}

// GetStreamWorkspaceExecute is a helper method to define mock.On call
//   - r admin.GetStreamWorkspaceApiRequest
func (_e *StreamsApi_Expecter) GetStreamWorkspaceExecute(r any) *StreamsApi_GetStreamWorkspaceExecute_Call {
	return &StreamsApi_GetStreamWorkspaceExecute_Call{Call: _e.mock.On("GetStreamWorkspaceExecute", r)}
}

func (_c *StreamsApi_GetStreamWorkspaceExecute_Call) Run(run func(r admin.GetStreamWorkspaceApiRequest)) *StreamsApi_GetStreamWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamWorkspaceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamWorkspaceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamWorkspaceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamWorkspaceExecute_Call) RunAndReturn(run func(admin.GetStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_GetStreamWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamWorkspaceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamWorkspaceWithParams(ctx context.Context, args *admin.GetStreamWorkspaceApiParams) admin.GetStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamWorkspaceWithParams")
	}

	var r0 admin.GetStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamWorkspaceApiParams) admin.GetStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamWorkspaceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamWorkspaceWithParams'
type StreamsApi_GetStreamWorkspaceWithParams_Call struct {
	*mock.Call
}

// GetStreamWorkspaceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamWorkspaceApiParams
func (_e *StreamsApi_Expecter) GetStreamWorkspaceWithParams(ctx any, args any) *StreamsApi_GetStreamWorkspaceWithParams_Call {
	return &StreamsApi_GetStreamWorkspaceWithParams_Call{Call: _e.mock.On("GetStreamWorkspaceWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamWorkspaceWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamWorkspaceApiParams)) *StreamsApi_GetStreamWorkspaceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamWorkspaceApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamWorkspaceWithParams_Call) Return(_a0 admin.GetStreamWorkspaceApiRequest) *StreamsApi_GetStreamWorkspaceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamWorkspaceWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamWorkspaceApiParams) admin.GetStreamWorkspaceApiRequest) *StreamsApi_GetStreamWorkspaceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivePeeringConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListActivePeeringConnections(ctx context.Context, groupId string) admin.ListActivePeeringConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListActivePeeringConnections")
	}

	var r0 admin.ListActivePeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListActivePeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListActivePeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListActivePeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivePeeringConnections'
type StreamsApi_ListActivePeeringConnections_Call struct {
	*mock.Call
}

// ListActivePeeringConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListActivePeeringConnections(ctx any, groupId any) *StreamsApi_ListActivePeeringConnections_Call {
	return &StreamsApi_ListActivePeeringConnections_Call{Call: _e.mock.On("ListActivePeeringConnections", ctx, groupId)}
}

func (_c *StreamsApi_ListActivePeeringConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListActivePeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnections_Call) Return(_a0 admin.ListActivePeeringConnectionsApiRequest) *StreamsApi_ListActivePeeringConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnections_Call) RunAndReturn(run func(context.Context, string) admin.ListActivePeeringConnectionsApiRequest) *StreamsApi_ListActivePeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivePeeringConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListActivePeeringConnectionsExecute(r admin.ListActivePeeringConnectionsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListActivePeeringConnectionsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.ListActivePeeringConnectionsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListActivePeeringConnectionsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListActivePeeringConnectionsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_ListActivePeeringConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivePeeringConnectionsExecute'
type StreamsApi_ListActivePeeringConnectionsExecute_Call struct {
	*mock.Call
}

// ListActivePeeringConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListActivePeeringConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListActivePeeringConnectionsExecute(r any) *StreamsApi_ListActivePeeringConnectionsExecute_Call {
	return &StreamsApi_ListActivePeeringConnectionsExecute_Call{Call: _e.mock.On("ListActivePeeringConnectionsExecute", r)}
}

func (_c *StreamsApi_ListActivePeeringConnectionsExecute_Call) Run(run func(r admin.ListActivePeeringConnectionsApiRequest)) *StreamsApi_ListActivePeeringConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListActivePeeringConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnectionsExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_ListActivePeeringConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnectionsExecute_Call) RunAndReturn(run func(admin.ListActivePeeringConnectionsApiRequest) (*http.Response, error)) *StreamsApi_ListActivePeeringConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivePeeringConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListActivePeeringConnectionsWithParams(ctx context.Context, args *admin.ListActivePeeringConnectionsApiParams) admin.ListActivePeeringConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListActivePeeringConnectionsWithParams")
	}

	var r0 admin.ListActivePeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListActivePeeringConnectionsApiParams) admin.ListActivePeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListActivePeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListActivePeeringConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivePeeringConnectionsWithParams'
type StreamsApi_ListActivePeeringConnectionsWithParams_Call struct {
	*mock.Call
}

// ListActivePeeringConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListActivePeeringConnectionsApiParams
func (_e *StreamsApi_Expecter) ListActivePeeringConnectionsWithParams(ctx any, args any) *StreamsApi_ListActivePeeringConnectionsWithParams_Call {
	return &StreamsApi_ListActivePeeringConnectionsWithParams_Call{Call: _e.mock.On("ListActivePeeringConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListActivePeeringConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListActivePeeringConnectionsApiParams)) *StreamsApi_ListActivePeeringConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListActivePeeringConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnectionsWithParams_Call) Return(_a0 admin.ListActivePeeringConnectionsApiRequest) *StreamsApi_ListActivePeeringConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListActivePeeringConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListActivePeeringConnectionsApiParams) admin.ListActivePeeringConnectionsApiRequest) *StreamsApi_ListActivePeeringConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListPrivateLinkConnections(ctx context.Context, groupId string) admin.ListPrivateLinkConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnections")
	}

	var r0 admin.ListPrivateLinkConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPrivateLinkConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateLinkConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListPrivateLinkConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnections'
type StreamsApi_ListPrivateLinkConnections_Call struct {
	*mock.Call
}

// ListPrivateLinkConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListPrivateLinkConnections(ctx any, groupId any) *StreamsApi_ListPrivateLinkConnections_Call {
	return &StreamsApi_ListPrivateLinkConnections_Call{Call: _e.mock.On("ListPrivateLinkConnections", ctx, groupId)}
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) Return(_a0 admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) RunAndReturn(run func(context.Context, string) admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListPrivateLinkConnectionsExecute(r admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnectionsExecute")
	}

	var r0 *admin.PaginatedApiStreamsPrivateLink
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPrivateLinkConnectionsApiRequest) *admin.PaginatedApiStreamsPrivateLink); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsPrivateLink)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPrivateLinkConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPrivateLinkConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListPrivateLinkConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnectionsExecute'
type StreamsApi_ListPrivateLinkConnectionsExecute_Call struct {
	*mock.Call
}

// ListPrivateLinkConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListPrivateLinkConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListPrivateLinkConnectionsExecute(r any) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	return &StreamsApi_ListPrivateLinkConnectionsExecute_Call{Call: _e.mock.On("ListPrivateLinkConnectionsExecute", r)}
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) Run(run func(r admin.ListPrivateLinkConnectionsApiRequest)) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPrivateLinkConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsPrivateLink, _a1 *http.Response, _a2 error) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) RunAndReturn(run func(admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error)) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListPrivateLinkConnectionsWithParams(ctx context.Context, args *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnectionsWithParams")
	}

	var r0 admin.ListPrivateLinkConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateLinkConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListPrivateLinkConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnectionsWithParams'
type StreamsApi_ListPrivateLinkConnectionsWithParams_Call struct {
	*mock.Call
}

// ListPrivateLinkConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPrivateLinkConnectionsApiParams
func (_e *StreamsApi_Expecter) ListPrivateLinkConnectionsWithParams(ctx any, args any) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	return &StreamsApi_ListPrivateLinkConnectionsWithParams_Call{Call: _e.mock.On("ListPrivateLinkConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPrivateLinkConnectionsApiParams)) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPrivateLinkConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) Return(_a0 admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnections provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) ListStreamConnections(ctx context.Context, groupId string, tenantName string) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnections")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnections'
type StreamsApi_ListStreamConnections_Call struct {
	*mock.Call
}

// ListStreamConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) ListStreamConnections(ctx any, groupId any, tenantName any) *StreamsApi_ListStreamConnections_Call {
	return &StreamsApi_ListStreamConnections_Call{Call: _e.mock.On("ListStreamConnections", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_ListStreamConnections_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) RunAndReturn(run func(context.Context, string, string) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamConnectionsExecute(r admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsExecute")
	}

	var r0 *admin.PaginatedApiStreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) *admin.PaginatedApiStreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsExecute'
type StreamsApi_ListStreamConnectionsExecute_Call struct {
	*mock.Call
}

// ListStreamConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListStreamConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListStreamConnectionsExecute(r any) *StreamsApi_ListStreamConnectionsExecute_Call {
	return &StreamsApi_ListStreamConnectionsExecute_Call{Call: _e.mock.On("ListStreamConnectionsExecute", r)}
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Run(run func(r admin.ListStreamConnectionsApiRequest)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) RunAndReturn(run func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamConnectionsWithParams(ctx context.Context, args *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsWithParams")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsWithParams'
type StreamsApi_ListStreamConnectionsWithParams_Call struct {
	*mock.Call
}

// ListStreamConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamConnectionsApiParams
func (_e *StreamsApi_Expecter) ListStreamConnectionsWithParams(ctx any, args any) *StreamsApi_ListStreamConnectionsWithParams_Call {
	return &StreamsApi_ListStreamConnectionsWithParams_Call{Call: _e.mock.On("ListStreamConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamConnectionsApiParams)) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamWorkspaces provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListStreamWorkspaces(ctx context.Context, groupId string) admin.ListStreamWorkspacesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamWorkspaces")
	}

	var r0 admin.ListStreamWorkspacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListStreamWorkspacesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListStreamWorkspacesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamWorkspaces'
type StreamsApi_ListStreamWorkspaces_Call struct {
	*mock.Call
}

// ListStreamWorkspaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListStreamWorkspaces(ctx any, groupId any) *StreamsApi_ListStreamWorkspaces_Call {
	return &StreamsApi_ListStreamWorkspaces_Call{Call: _e.mock.On("ListStreamWorkspaces", ctx, groupId)}
}

func (_c *StreamsApi_ListStreamWorkspaces_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListStreamWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamWorkspaces_Call) Return(_a0 admin.ListStreamWorkspacesApiRequest) *StreamsApi_ListStreamWorkspaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamWorkspaces_Call) RunAndReturn(run func(context.Context, string) admin.ListStreamWorkspacesApiRequest) *StreamsApi_ListStreamWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamWorkspacesExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamWorkspacesExecute(r admin.ListStreamWorkspacesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamWorkspacesExecute")
	}

	var r0 *admin.PaginatedApiStreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamWorkspacesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamWorkspacesApiRequest) *admin.PaginatedApiStreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamWorkspacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamWorkspacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamWorkspacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamWorkspacesExecute'
type StreamsApi_ListStreamWorkspacesExecute_Call struct {
	*mock.Call
}

// ListStreamWorkspacesExecute is a helper method to define mock.On call
//   - r admin.ListStreamWorkspacesApiRequest
func (_e *StreamsApi_Expecter) ListStreamWorkspacesExecute(r any) *StreamsApi_ListStreamWorkspacesExecute_Call {
	return &StreamsApi_ListStreamWorkspacesExecute_Call{Call: _e.mock.On("ListStreamWorkspacesExecute", r)}
}

func (_c *StreamsApi_ListStreamWorkspacesExecute_Call) Run(run func(r admin.ListStreamWorkspacesApiRequest)) *StreamsApi_ListStreamWorkspacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamWorkspacesApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamWorkspacesExecute_Call) Return(_a0 *admin.PaginatedApiStreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamWorkspacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamWorkspacesExecute_Call) RunAndReturn(run func(admin.ListStreamWorkspacesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)) *StreamsApi_ListStreamWorkspacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamWorkspacesWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamWorkspacesWithParams(ctx context.Context, args *admin.ListStreamWorkspacesApiParams) admin.ListStreamWorkspacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamWorkspacesWithParams")
	}

	var r0 admin.ListStreamWorkspacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamWorkspacesApiParams) admin.ListStreamWorkspacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamWorkspacesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamWorkspacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamWorkspacesWithParams'
type StreamsApi_ListStreamWorkspacesWithParams_Call struct {
	*mock.Call
}

// ListStreamWorkspacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamWorkspacesApiParams
func (_e *StreamsApi_Expecter) ListStreamWorkspacesWithParams(ctx any, args any) *StreamsApi_ListStreamWorkspacesWithParams_Call {
	return &StreamsApi_ListStreamWorkspacesWithParams_Call{Call: _e.mock.On("ListStreamWorkspacesWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamWorkspacesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamWorkspacesApiParams)) *StreamsApi_ListStreamWorkspacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamWorkspacesApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamWorkspacesWithParams_Call) Return(_a0 admin.ListStreamWorkspacesApiRequest) *StreamsApi_ListStreamWorkspacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamWorkspacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamWorkspacesApiParams) admin.ListStreamWorkspacesApiRequest) *StreamsApi_ListStreamWorkspacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListVpcPeeringConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListVpcPeeringConnections(ctx context.Context, groupId string) admin.ListVpcPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcPeeringConnections")
	}

	var r0 admin.ListVpcPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListVpcPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListVpcPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListVpcPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVpcPeeringConnections'
type StreamsApi_ListVpcPeeringConnections_Call struct {
	*mock.Call
}

// ListVpcPeeringConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListVpcPeeringConnections(ctx any, groupId any) *StreamsApi_ListVpcPeeringConnections_Call {
	return &StreamsApi_ListVpcPeeringConnections_Call{Call: _e.mock.On("ListVpcPeeringConnections", ctx, groupId)}
}

func (_c *StreamsApi_ListVpcPeeringConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListVpcPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnections_Call) Return(_a0 admin.ListVpcPeeringConnectionsApiRequest) *StreamsApi_ListVpcPeeringConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnections_Call) RunAndReturn(run func(context.Context, string) admin.ListVpcPeeringConnectionsApiRequest) *StreamsApi_ListVpcPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListVpcPeeringConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListVpcPeeringConnectionsExecute(r admin.ListVpcPeeringConnectionsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcPeeringConnectionsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.ListVpcPeeringConnectionsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListVpcPeeringConnectionsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListVpcPeeringConnectionsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_ListVpcPeeringConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVpcPeeringConnectionsExecute'
type StreamsApi_ListVpcPeeringConnectionsExecute_Call struct {
	*mock.Call
}

// ListVpcPeeringConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListVpcPeeringConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListVpcPeeringConnectionsExecute(r any) *StreamsApi_ListVpcPeeringConnectionsExecute_Call {
	return &StreamsApi_ListVpcPeeringConnectionsExecute_Call{Call: _e.mock.On("ListVpcPeeringConnectionsExecute", r)}
}

func (_c *StreamsApi_ListVpcPeeringConnectionsExecute_Call) Run(run func(r admin.ListVpcPeeringConnectionsApiRequest)) *StreamsApi_ListVpcPeeringConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListVpcPeeringConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnectionsExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_ListVpcPeeringConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnectionsExecute_Call) RunAndReturn(run func(admin.ListVpcPeeringConnectionsApiRequest) (*http.Response, error)) *StreamsApi_ListVpcPeeringConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListVpcPeeringConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListVpcPeeringConnectionsWithParams(ctx context.Context, args *admin.ListVpcPeeringConnectionsApiParams) admin.ListVpcPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcPeeringConnectionsWithParams")
	}

	var r0 admin.ListVpcPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListVpcPeeringConnectionsApiParams) admin.ListVpcPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListVpcPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListVpcPeeringConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVpcPeeringConnectionsWithParams'
type StreamsApi_ListVpcPeeringConnectionsWithParams_Call struct {
	*mock.Call
}

// ListVpcPeeringConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListVpcPeeringConnectionsApiParams
func (_e *StreamsApi_Expecter) ListVpcPeeringConnectionsWithParams(ctx any, args any) *StreamsApi_ListVpcPeeringConnectionsWithParams_Call {
	return &StreamsApi_ListVpcPeeringConnectionsWithParams_Call{Call: _e.mock.On("ListVpcPeeringConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListVpcPeeringConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListVpcPeeringConnectionsApiParams)) *StreamsApi_ListVpcPeeringConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListVpcPeeringConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnectionsWithParams_Call) Return(_a0 admin.ListVpcPeeringConnectionsApiRequest) *StreamsApi_ListVpcPeeringConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListVpcPeeringConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListVpcPeeringConnectionsApiParams) admin.ListVpcPeeringConnectionsApiRequest) *StreamsApi_ListVpcPeeringConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) RejectVpcPeeringConnection(ctx context.Context, groupId string, id string) admin.RejectVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnection")
	}

	var r0 admin.RejectVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RejectVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.RejectVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnection'
type StreamsApi_RejectVpcPeeringConnection_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnection(ctx any, groupId any, id any) *StreamsApi_RejectVpcPeeringConnection_Call {
	return &StreamsApi_RejectVpcPeeringConnection_Call{Call: _e.mock.On("RejectVpcPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) Return(_a0 admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) RejectVpcPeeringConnectionExecute(r admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RejectVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RejectVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_RejectVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnectionExecute'
type StreamsApi_RejectVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.RejectVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnectionExecute(r any) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	return &StreamsApi_RejectVpcPeeringConnectionExecute_Call{Call: _e.mock.On("RejectVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) Run(run func(r admin.RejectVpcPeeringConnectionApiRequest)) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RejectVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) RejectVpcPeeringConnectionWithParams(ctx context.Context, args *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnectionWithParams")
	}

	var r0 admin.RejectVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RejectVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnectionWithParams'
type StreamsApi_RejectVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RejectVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_RejectVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("RejectVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.RejectVpcPeeringConnectionApiParams)) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RejectVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) Return(_a0 admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) StartStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.StartStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessor")
	}

	var r0 admin.StartStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.StartStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessor'
type StreamsApi_StartStreamProcessor_Call struct {
	*mock.Call
}

// StartStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) StartStreamProcessor(ctx any, groupId any, tenantName any, processorName any) *StreamsApi_StartStreamProcessor_Call {
	return &StreamsApi_StartStreamProcessor_Call{Call: _e.mock.On("StartStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_StartStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessor_Call) Return(_a0 admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) StartStreamProcessorExecute(r admin.StartStreamProcessorApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.StartStreamProcessorApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_StartStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorExecute'
type StreamsApi_StartStreamProcessorExecute_Call struct {
	*mock.Call
}

// StartStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.StartStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) StartStreamProcessorExecute(r any) *StreamsApi_StartStreamProcessorExecute_Call {
	return &StreamsApi_StartStreamProcessorExecute_Call{Call: _e.mock.On("StartStreamProcessorExecute", r)}
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) Run(run func(r admin.StartStreamProcessorApiRequest)) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.StartStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) RunAndReturn(run func(admin.StartStreamProcessorApiRequest) (*http.Response, error)) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorWith provides a mock function with given fields: ctx, groupId, tenantName, processorName, streamsStartStreamProcessorWith
func (_m *StreamsApi) StartStreamProcessorWith(ctx context.Context, groupId string, tenantName string, processorName string, streamsStartStreamProcessorWith *admin.StreamsStartStreamProcessorWith) admin.StartStreamProcessorWithApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName, streamsStartStreamProcessorWith)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorWith")
	}

	var r0 admin.StartStreamProcessorWithApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.StreamsStartStreamProcessorWith) admin.StartStreamProcessorWithApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName, streamsStartStreamProcessorWith)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorWithApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessorWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorWith'
type StreamsApi_StartStreamProcessorWith_Call struct {
	*mock.Call
}

// StartStreamProcessorWith is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
//   - streamsStartStreamProcessorWith *admin.StreamsStartStreamProcessorWith
func (_e *StreamsApi_Expecter) StartStreamProcessorWith(ctx any, groupId any, tenantName any, processorName any, streamsStartStreamProcessorWith any) *StreamsApi_StartStreamProcessorWith_Call {
	return &StreamsApi_StartStreamProcessorWith_Call{Call: _e.mock.On("StartStreamProcessorWith", ctx, groupId, tenantName, processorName, streamsStartStreamProcessorWith)}
}

func (_c *StreamsApi_StartStreamProcessorWith_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string, streamsStartStreamProcessorWith *admin.StreamsStartStreamProcessorWith)) *StreamsApi_StartStreamProcessorWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.StreamsStartStreamProcessorWith))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWith_Call) Return(_a0 admin.StartStreamProcessorWithApiRequest) *StreamsApi_StartStreamProcessorWith_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWith_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.StreamsStartStreamProcessorWith) admin.StartStreamProcessorWithApiRequest) *StreamsApi_StartStreamProcessorWith_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorWithExecute provides a mock function with given fields: r
func (_m *StreamsApi) StartStreamProcessorWithExecute(r admin.StartStreamProcessorWithApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorWithExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorWithApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorWithApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.StartStreamProcessorWithApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_StartStreamProcessorWithExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorWithExecute'
type StreamsApi_StartStreamProcessorWithExecute_Call struct {
	*mock.Call
}

// StartStreamProcessorWithExecute is a helper method to define mock.On call
//   - r admin.StartStreamProcessorWithApiRequest
func (_e *StreamsApi_Expecter) StartStreamProcessorWithExecute(r any) *StreamsApi_StartStreamProcessorWithExecute_Call {
	return &StreamsApi_StartStreamProcessorWithExecute_Call{Call: _e.mock.On("StartStreamProcessorWithExecute", r)}
}

func (_c *StreamsApi_StartStreamProcessorWithExecute_Call) Run(run func(r admin.StartStreamProcessorWithApiRequest)) *StreamsApi_StartStreamProcessorWithExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.StartStreamProcessorWithApiRequest))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_StartStreamProcessorWithExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithExecute_Call) RunAndReturn(run func(admin.StartStreamProcessorWithApiRequest) (*http.Response, error)) *StreamsApi_StartStreamProcessorWithExecute_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) StartStreamProcessorWithParams(ctx context.Context, args *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorWithParams")
	}

	var r0 admin.StartStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorWithParams'
type StreamsApi_StartStreamProcessorWithParams_Call struct {
	*mock.Call
}

// StartStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.StartStreamProcessorApiParams
func (_e *StreamsApi_Expecter) StartStreamProcessorWithParams(ctx any, args any) *StreamsApi_StartStreamProcessorWithParams_Call {
	return &StreamsApi_StartStreamProcessorWithParams_Call{Call: _e.mock.On("StartStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.StartStreamProcessorApiParams)) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.StartStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) Return(_a0 admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorWithWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) StartStreamProcessorWithWithParams(ctx context.Context, args *admin.StartStreamProcessorWithApiParams) admin.StartStreamProcessorWithApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorWithWithParams")
	}

	var r0 admin.StartStreamProcessorWithApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.StartStreamProcessorWithApiParams) admin.StartStreamProcessorWithApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorWithApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessorWithWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorWithWithParams'
type StreamsApi_StartStreamProcessorWithWithParams_Call struct {
	*mock.Call
}

// StartStreamProcessorWithWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.StartStreamProcessorWithApiParams
func (_e *StreamsApi_Expecter) StartStreamProcessorWithWithParams(ctx any, args any) *StreamsApi_StartStreamProcessorWithWithParams_Call {
	return &StreamsApi_StartStreamProcessorWithWithParams_Call{Call: _e.mock.On("StartStreamProcessorWithWithParams", ctx, args)}
}

func (_c *StreamsApi_StartStreamProcessorWithWithParams_Call) Run(run func(ctx context.Context, args *admin.StartStreamProcessorWithApiParams)) *StreamsApi_StartStreamProcessorWithWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.StartStreamProcessorWithApiParams))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithWithParams_Call) Return(_a0 admin.StartStreamProcessorWithApiRequest) *StreamsApi_StartStreamProcessorWithWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithWithParams_Call) RunAndReturn(run func(context.Context, *admin.StartStreamProcessorWithApiParams) admin.StartStreamProcessorWithApiRequest) *StreamsApi_StartStreamProcessorWithWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) StopStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.StopStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessor")
	}

	var r0 admin.StopStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.StopStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.StopStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StopStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessor'
type StreamsApi_StopStreamProcessor_Call struct {
	*mock.Call
}

// StopStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) StopStreamProcessor(ctx any, groupId any, tenantName any, processorName any) *StreamsApi_StopStreamProcessor_Call {
	return &StreamsApi_StopStreamProcessor_Call{Call: _e.mock.On("StopStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_StopStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessor_Call) Return(_a0 admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StopStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) StopStreamProcessorExecute(r admin.StopStreamProcessorApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessorExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.StopStreamProcessorApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.StopStreamProcessorApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.StopStreamProcessorApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_StopStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessorExecute'
type StreamsApi_StopStreamProcessorExecute_Call struct {
	*mock.Call
}

// StopStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.StopStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) StopStreamProcessorExecute(r any) *StreamsApi_StopStreamProcessorExecute_Call {
	return &StreamsApi_StopStreamProcessorExecute_Call{Call: _e.mock.On("StopStreamProcessorExecute", r)}
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) Run(run func(r admin.StopStreamProcessorApiRequest)) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.StopStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) RunAndReturn(run func(admin.StopStreamProcessorApiRequest) (*http.Response, error)) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) StopStreamProcessorWithParams(ctx context.Context, args *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessorWithParams")
	}

	var r0 admin.StopStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.StopStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StopStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessorWithParams'
type StreamsApi_StopStreamProcessorWithParams_Call struct {
	*mock.Call
}

// StopStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.StopStreamProcessorApiParams
func (_e *StreamsApi_Expecter) StopStreamProcessorWithParams(ctx any, args any) *StreamsApi_StopStreamProcessorWithParams_Call {
	return &StreamsApi_StopStreamProcessorWithParams_Call{Call: _e.mock.On("StopStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.StopStreamProcessorApiParams)) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.StopStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) Return(_a0 admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName, streamsConnection
func (_m *StreamsApi) UpdateStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnection")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnection'
type StreamsApi_UpdateStreamConnection_Call struct {
	*mock.Call
}

// UpdateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) UpdateStreamConnection(ctx any, groupId any, tenantName any, connectionName any, streamsConnection any) *StreamsApi_UpdateStreamConnection_Call {
	return &StreamsApi_UpdateStreamConnection_Call{Call: _e.mock.On("UpdateStreamConnection", ctx, groupId, tenantName, connectionName, streamsConnection)}
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamConnectionExecute(r admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionExecute'
type StreamsApi_UpdateStreamConnectionExecute_Call struct {
	*mock.Call
}

// UpdateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamConnectionExecute(r any) *StreamsApi_UpdateStreamConnectionExecute_Call {
	return &StreamsApi_UpdateStreamConnectionExecute_Call{Call: _e.mock.On("UpdateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Run(run func(r admin.UpdateStreamConnectionApiRequest)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) RunAndReturn(run func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamConnectionWithParams(ctx context.Context, args *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionWithParams")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionWithParams'
type StreamsApi_UpdateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// UpdateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) UpdateStreamConnectionWithParams(ctx any, args any) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	return &StreamsApi_UpdateStreamConnectionWithParams_Call{Call: _e.mock.On("UpdateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamConnectionApiParams)) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName, streamsModifyStreamProcessor
func (_m *StreamsApi) UpdateStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string, streamsModifyStreamProcessor *admin.StreamsModifyStreamProcessor) admin.UpdateStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName, streamsModifyStreamProcessor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamProcessor")
	}

	var r0 admin.UpdateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.StreamsModifyStreamProcessor) admin.UpdateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName, streamsModifyStreamProcessor)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamProcessor'
type StreamsApi_UpdateStreamProcessor_Call struct {
	*mock.Call
}

// UpdateStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
//   - streamsModifyStreamProcessor *admin.StreamsModifyStreamProcessor
func (_e *StreamsApi_Expecter) UpdateStreamProcessor(ctx any, groupId any, tenantName any, processorName any, streamsModifyStreamProcessor any) *StreamsApi_UpdateStreamProcessor_Call {
	return &StreamsApi_UpdateStreamProcessor_Call{Call: _e.mock.On("UpdateStreamProcessor", ctx, groupId, tenantName, processorName, streamsModifyStreamProcessor)}
}

func (_c *StreamsApi_UpdateStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string, streamsModifyStreamProcessor *admin.StreamsModifyStreamProcessor)) *StreamsApi_UpdateStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.StreamsModifyStreamProcessor))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessor_Call) Return(_a0 admin.UpdateStreamProcessorApiRequest) *StreamsApi_UpdateStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.StreamsModifyStreamProcessor) admin.UpdateStreamProcessorApiRequest) *StreamsApi_UpdateStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamProcessorExecute(r admin.UpdateStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamProcessorExecute")
	}

	var r0 *admin.StreamsProcessorWithStats
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamProcessorApiRequest) *admin.StreamsProcessorWithStats); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsProcessorWithStats)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamProcessorExecute'
type StreamsApi_UpdateStreamProcessorExecute_Call struct {
	*mock.Call
}

// UpdateStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamProcessorExecute(r any) *StreamsApi_UpdateStreamProcessorExecute_Call {
	return &StreamsApi_UpdateStreamProcessorExecute_Call{Call: _e.mock.On("UpdateStreamProcessorExecute", r)}
}

func (_c *StreamsApi_UpdateStreamProcessorExecute_Call) Run(run func(r admin.UpdateStreamProcessorApiRequest)) *StreamsApi_UpdateStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessorExecute_Call) Return(_a0 *admin.StreamsProcessorWithStats, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessorExecute_Call) RunAndReturn(run func(admin.UpdateStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)) *StreamsApi_UpdateStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamProcessorWithParams(ctx context.Context, args *admin.UpdateStreamProcessorApiParams) admin.UpdateStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamProcessorWithParams")
	}

	var r0 admin.UpdateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamProcessorApiParams) admin.UpdateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamProcessorWithParams'
type StreamsApi_UpdateStreamProcessorWithParams_Call struct {
	*mock.Call
}

// UpdateStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamProcessorApiParams
func (_e *StreamsApi_Expecter) UpdateStreamProcessorWithParams(ctx any, args any) *StreamsApi_UpdateStreamProcessorWithParams_Call {
	return &StreamsApi_UpdateStreamProcessorWithParams_Call{Call: _e.mock.On("UpdateStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamProcessorApiParams)) *StreamsApi_UpdateStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessorWithParams_Call) Return(_a0 admin.UpdateStreamProcessorApiRequest) *StreamsApi_UpdateStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamProcessorApiParams) admin.UpdateStreamProcessorApiRequest) *StreamsApi_UpdateStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamWorkspace provides a mock function with given fields: ctx, groupId, tenantName, streamsDataProcessRegion
func (_m *StreamsApi) UpdateStreamWorkspace(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion) admin.UpdateStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsDataProcessRegion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamWorkspace")
	}

	var r0 admin.UpdateStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsDataProcessRegion)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamWorkspace'
type StreamsApi_UpdateStreamWorkspace_Call struct {
	*mock.Call
}

// UpdateStreamWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsDataProcessRegion *admin.StreamsDataProcessRegion
func (_e *StreamsApi_Expecter) UpdateStreamWorkspace(ctx any, groupId any, tenantName any, streamsDataProcessRegion any) *StreamsApi_UpdateStreamWorkspace_Call {
	return &StreamsApi_UpdateStreamWorkspace_Call{Call: _e.mock.On("UpdateStreamWorkspace", ctx, groupId, tenantName, streamsDataProcessRegion)}
}

func (_c *StreamsApi_UpdateStreamWorkspace_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion)) *StreamsApi_UpdateStreamWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsDataProcessRegion))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspace_Call) Return(_a0 admin.UpdateStreamWorkspaceApiRequest) *StreamsApi_UpdateStreamWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspace_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamWorkspaceApiRequest) *StreamsApi_UpdateStreamWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamWorkspaceExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamWorkspaceExecute(r admin.UpdateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamWorkspaceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamWorkspaceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamWorkspaceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamWorkspaceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamWorkspaceExecute'
type StreamsApi_UpdateStreamWorkspaceExecute_Call struct {
	*mock.Call
}

// UpdateStreamWorkspaceExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamWorkspaceApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamWorkspaceExecute(r any) *StreamsApi_UpdateStreamWorkspaceExecute_Call {
	return &StreamsApi_UpdateStreamWorkspaceExecute_Call{Call: _e.mock.On("UpdateStreamWorkspaceExecute", r)}
}

func (_c *StreamsApi_UpdateStreamWorkspaceExecute_Call) Run(run func(r admin.UpdateStreamWorkspaceApiRequest)) *StreamsApi_UpdateStreamWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamWorkspaceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspaceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamWorkspaceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspaceExecute_Call) RunAndReturn(run func(admin.UpdateStreamWorkspaceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_UpdateStreamWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamWorkspaceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamWorkspaceWithParams(ctx context.Context, args *admin.UpdateStreamWorkspaceApiParams) admin.UpdateStreamWorkspaceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamWorkspaceWithParams")
	}

	var r0 admin.UpdateStreamWorkspaceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamWorkspaceApiParams) admin.UpdateStreamWorkspaceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamWorkspaceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamWorkspaceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamWorkspaceWithParams'
type StreamsApi_UpdateStreamWorkspaceWithParams_Call struct {
	*mock.Call
}

// UpdateStreamWorkspaceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamWorkspaceApiParams
func (_e *StreamsApi_Expecter) UpdateStreamWorkspaceWithParams(ctx any, args any) *StreamsApi_UpdateStreamWorkspaceWithParams_Call {
	return &StreamsApi_UpdateStreamWorkspaceWithParams_Call{Call: _e.mock.On("UpdateStreamWorkspaceWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamWorkspaceWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamWorkspaceApiParams)) *StreamsApi_UpdateStreamWorkspaceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamWorkspaceApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspaceWithParams_Call) Return(_a0 admin.UpdateStreamWorkspaceApiRequest) *StreamsApi_UpdateStreamWorkspaceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamWorkspaceWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamWorkspaceApiParams) admin.UpdateStreamWorkspaceApiRequest) *StreamsApi_UpdateStreamWorkspaceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// WithStreamSampleConnections provides a mock function with given fields: ctx, groupId, body
func (_m *StreamsApi) WithStreamSampleConnections(ctx context.Context, groupId string, body *any) admin.WithStreamSampleConnectionsApiRequest {
	ret := _m.Called(ctx, groupId, body)

	if len(ret) == 0 {
		panic("no return value specified for WithStreamSampleConnections")
	}

	var r0 admin.WithStreamSampleConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *any) admin.WithStreamSampleConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId, body)
	} else {
		r0 = ret.Get(0).(admin.WithStreamSampleConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_WithStreamSampleConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStreamSampleConnections'
type StreamsApi_WithStreamSampleConnections_Call struct {
	*mock.Call
}

// WithStreamSampleConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - body *any
func (_e *StreamsApi_Expecter) WithStreamSampleConnections(ctx any, groupId any, body any) *StreamsApi_WithStreamSampleConnections_Call {
	return &StreamsApi_WithStreamSampleConnections_Call{Call: _e.mock.On("WithStreamSampleConnections", ctx, groupId, body)}
}

func (_c *StreamsApi_WithStreamSampleConnections_Call) Run(run func(ctx context.Context, groupId string, body *any)) *StreamsApi_WithStreamSampleConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*any))
	})
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnections_Call) Return(_a0 admin.WithStreamSampleConnectionsApiRequest) *StreamsApi_WithStreamSampleConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnections_Call) RunAndReturn(run func(context.Context, string, *any) admin.WithStreamSampleConnectionsApiRequest) *StreamsApi_WithStreamSampleConnections_Call {
	_c.Call.Return(run)
	return _c
}

// WithStreamSampleConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) WithStreamSampleConnectionsExecute(r admin.WithStreamSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WithStreamSampleConnectionsExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.WithStreamSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.WithStreamSampleConnectionsApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.WithStreamSampleConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.WithStreamSampleConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_WithStreamSampleConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStreamSampleConnectionsExecute'
type StreamsApi_WithStreamSampleConnectionsExecute_Call struct {
	*mock.Call
}

// WithStreamSampleConnectionsExecute is a helper method to define mock.On call
//   - r admin.WithStreamSampleConnectionsApiRequest
func (_e *StreamsApi_Expecter) WithStreamSampleConnectionsExecute(r any) *StreamsApi_WithStreamSampleConnectionsExecute_Call {
	return &StreamsApi_WithStreamSampleConnectionsExecute_Call{Call: _e.mock.On("WithStreamSampleConnectionsExecute", r)}
}

func (_c *StreamsApi_WithStreamSampleConnectionsExecute_Call) Run(run func(r admin.WithStreamSampleConnectionsApiRequest)) *StreamsApi_WithStreamSampleConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.WithStreamSampleConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnectionsExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_WithStreamSampleConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnectionsExecute_Call) RunAndReturn(run func(admin.WithStreamSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_WithStreamSampleConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WithStreamSampleConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) WithStreamSampleConnectionsWithParams(ctx context.Context, args *admin.WithStreamSampleConnectionsApiParams) admin.WithStreamSampleConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for WithStreamSampleConnectionsWithParams")
	}

	var r0 admin.WithStreamSampleConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WithStreamSampleConnectionsApiParams) admin.WithStreamSampleConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.WithStreamSampleConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_WithStreamSampleConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStreamSampleConnectionsWithParams'
type StreamsApi_WithStreamSampleConnectionsWithParams_Call struct {
	*mock.Call
}

// WithStreamSampleConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.WithStreamSampleConnectionsApiParams
func (_e *StreamsApi_Expecter) WithStreamSampleConnectionsWithParams(ctx any, args any) *StreamsApi_WithStreamSampleConnectionsWithParams_Call {
	return &StreamsApi_WithStreamSampleConnectionsWithParams_Call{Call: _e.mock.On("WithStreamSampleConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_WithStreamSampleConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.WithStreamSampleConnectionsApiParams)) *StreamsApi_WithStreamSampleConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WithStreamSampleConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnectionsWithParams_Call) Return(_a0 admin.WithStreamSampleConnectionsApiRequest) *StreamsApi_WithStreamSampleConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_WithStreamSampleConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.WithStreamSampleConnectionsApiParams) admin.WithStreamSampleConnectionsApiRequest) *StreamsApi_WithStreamSampleConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamsApi creates a new instance of StreamsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamsApi {
	mock := &StreamsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
