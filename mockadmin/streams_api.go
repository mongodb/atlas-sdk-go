// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115014/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StreamsApi is an autogenerated mock type for the StreamsApi type
type StreamsApi struct {
	mock.Mock
}

type StreamsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamsApi) EXPECT() *StreamsApi_Expecter {
	return &StreamsApi_Expecter{mock: &_m.Mock}
}

// AcceptVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id, vPCPeeringActionChallenge
func (_m *StreamsApi) AcceptVpcPeeringConnection(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id, vPCPeeringActionChallenge)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnection")
	}

	var r0 admin.AcceptVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id, vPCPeeringActionChallenge)
	} else {
		r0 = ret.Get(0).(admin.AcceptVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnection'
type StreamsApi_AcceptVpcPeeringConnection_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
//   - vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnection(ctx any, groupId any, id any, vPCPeeringActionChallenge any) *StreamsApi_AcceptVpcPeeringConnection_Call {
	return &StreamsApi_AcceptVpcPeeringConnection_Call{Call: _e.mock.On("AcceptVpcPeeringConnection", ctx, groupId, id, vPCPeeringActionChallenge)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge)) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.VPCPeeringActionChallenge))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) Return(_a0 admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) AcceptVpcPeeringConnectionExecute(r admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AcceptVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AcceptVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_AcceptVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnectionExecute'
type StreamsApi_AcceptVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.AcceptVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnectionExecute(r any) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	return &StreamsApi_AcceptVpcPeeringConnectionExecute_Call{Call: _e.mock.On("AcceptVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) Run(run func(r admin.AcceptVpcPeeringConnectionApiRequest)) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AcceptVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.AcceptVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_AcceptVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) AcceptVpcPeeringConnectionWithParams(ctx context.Context, args *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVpcPeeringConnectionWithParams")
	}

	var r0 admin.AcceptVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AcceptVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVpcPeeringConnectionWithParams'
type StreamsApi_AcceptVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// AcceptVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AcceptVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) AcceptVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_AcceptVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("AcceptVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.AcceptVpcPeeringConnectionApiParams)) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AcceptVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) Return(_a0 admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.AcceptVpcPeeringConnectionApiParams) admin.AcceptVpcPeeringConnectionApiRequest) *StreamsApi_AcceptVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnection provides a mock function with given fields: ctx, groupId, streamsPrivateLinkConnection
func (_m *StreamsApi) CreatePrivateLinkConnection(ctx context.Context, groupId string, streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, streamsPrivateLinkConnection)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnection")
	}

	var r0 admin.CreatePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, streamsPrivateLinkConnection)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreatePrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnection'
type StreamsApi_CreatePrivateLinkConnection_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnection(ctx any, groupId any, streamsPrivateLinkConnection any) *StreamsApi_CreatePrivateLinkConnection_Call {
	return &StreamsApi_CreatePrivateLinkConnection_Call{Call: _e.mock.On("CreatePrivateLinkConnection", ctx, groupId, streamsPrivateLinkConnection)}
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, streamsPrivateLinkConnection *admin.StreamsPrivateLinkConnection)) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.StreamsPrivateLinkConnection))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) Return(_a0 admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, *admin.StreamsPrivateLinkConnection) admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreatePrivateLinkConnectionExecute(r admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnectionExecute")
	}

	var r0 *admin.StreamsPrivateLinkConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePrivateLinkConnectionApiRequest) *admin.StreamsPrivateLinkConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsPrivateLinkConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePrivateLinkConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePrivateLinkConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreatePrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnectionExecute'
type StreamsApi_CreatePrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.CreatePrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnectionExecute(r any) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	return &StreamsApi_CreatePrivateLinkConnectionExecute_Call{Call: _e.mock.On("CreatePrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) Run(run func(r admin.CreatePrivateLinkConnectionApiRequest)) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) Return(_a0 *admin.StreamsPrivateLinkConnection, _a1 *http.Response, _a2 error) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.CreatePrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)) *StreamsApi_CreatePrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreatePrivateLinkConnectionWithParams(ctx context.Context, args *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateLinkConnectionWithParams")
	}

	var r0 admin.CreatePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreatePrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateLinkConnectionWithParams'
type StreamsApi_CreatePrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// CreatePrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) CreatePrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	return &StreamsApi_CreatePrivateLinkConnectionWithParams_Call{Call: _e.mock.On("CreatePrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePrivateLinkConnectionApiParams)) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) Return(_a0 admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreatePrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePrivateLinkConnectionApiParams) admin.CreatePrivateLinkConnectionApiRequest) *StreamsApi_CreatePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, streamsConnection
func (_m *StreamsApi) CreateStreamConnection(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnection")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnection'
type StreamsApi_CreateStreamConnection_Call struct {
	*mock.Call
}

// CreateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) CreateStreamConnection(ctx any, groupId any, tenantName any, streamsConnection any) *StreamsApi_CreateStreamConnection_Call {
	return &StreamsApi_CreateStreamConnection_Call{Call: _e.mock.On("CreateStreamConnection", ctx, groupId, tenantName, streamsConnection)}
}

func (_c *StreamsApi_CreateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamConnectionExecute(r admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionExecute'
type StreamsApi_CreateStreamConnectionExecute_Call struct {
	*mock.Call
}

// CreateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.CreateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) CreateStreamConnectionExecute(r any) *StreamsApi_CreateStreamConnectionExecute_Call {
	return &StreamsApi_CreateStreamConnectionExecute_Call{Call: _e.mock.On("CreateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Run(run func(r admin.CreateStreamConnectionApiRequest)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) RunAndReturn(run func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamConnectionWithParams(ctx context.Context, args *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionWithParams")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionWithParams'
type StreamsApi_CreateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// CreateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) CreateStreamConnectionWithParams(ctx any, args any) *StreamsApi_CreateStreamConnectionWithParams_Call {
	return &StreamsApi_CreateStreamConnectionWithParams_Call{Call: _e.mock.On("CreateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamConnectionApiParams)) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstance provides a mock function with given fields: ctx, groupId, streamsTenant
func (_m *StreamsApi) CreateStreamInstance(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, streamsTenant)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstance")
	}

	var r0 admin.CreateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, streamsTenant)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstance'
type StreamsApi_CreateStreamInstance_Call struct {
	*mock.Call
}

// CreateStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - streamsTenant *admin.StreamsTenant
func (_e *StreamsApi_Expecter) CreateStreamInstance(ctx any, groupId any, streamsTenant any) *StreamsApi_CreateStreamInstance_Call {
	return &StreamsApi_CreateStreamInstance_Call{Call: _e.mock.On("CreateStreamInstance", ctx, groupId, streamsTenant)}
}

func (_c *StreamsApi_CreateStreamInstance_Call) Run(run func(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant)) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.StreamsTenant))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstance_Call) Return(_a0 admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstance_Call) RunAndReturn(run func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamInstanceExecute(r admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceExecute'
type StreamsApi_CreateStreamInstanceExecute_Call struct {
	*mock.Call
}

// CreateStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.CreateStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) CreateStreamInstanceExecute(r any) *StreamsApi_CreateStreamInstanceExecute_Call {
	return &StreamsApi_CreateStreamInstanceExecute_Call{Call: _e.mock.On("CreateStreamInstanceExecute", r)}
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) Run(run func(r admin.CreateStreamInstanceApiRequest)) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) RunAndReturn(run func(admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamInstanceWithParams(ctx context.Context, args *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceWithParams")
	}

	var r0 admin.CreateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceWithParams'
type StreamsApi_CreateStreamInstanceWithParams_Call struct {
	*mock.Call
}

// CreateStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamInstanceApiParams
func (_e *StreamsApi_Expecter) CreateStreamInstanceWithParams(ctx any, args any) *StreamsApi_CreateStreamInstanceWithParams_Call {
	return &StreamsApi_CreateStreamInstanceWithParams_Call{Call: _e.mock.On("CreateStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamInstanceApiParams)) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) Return(_a0 admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnection provides a mock function with given fields: ctx, groupId, connectionId
func (_m *StreamsApi) DeletePrivateLinkConnection(ctx context.Context, groupId string, connectionId string) admin.DeletePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnection")
	}

	var r0 admin.DeletePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, connectionId)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeletePrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnection'
type StreamsApi_DeletePrivateLinkConnection_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - connectionId string
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnection(ctx any, groupId any, connectionId any) *StreamsApi_DeletePrivateLinkConnection_Call {
	return &StreamsApi_DeletePrivateLinkConnection_Call{Call: _e.mock.On("DeletePrivateLinkConnection", ctx, groupId, connectionId)}
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, connectionId string)) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) Return(_a0 admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeletePrivateLinkConnectionExecute(r admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePrivateLinkConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePrivateLinkConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeletePrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnectionExecute'
type StreamsApi_DeletePrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.DeletePrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnectionExecute(r any) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	return &StreamsApi_DeletePrivateLinkConnectionExecute_Call{Call: _e.mock.On("DeletePrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) Run(run func(r admin.DeletePrivateLinkConnectionApiRequest)) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.DeletePrivateLinkConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeletePrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeletePrivateLinkConnectionWithParams(ctx context.Context, args *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateLinkConnectionWithParams")
	}

	var r0 admin.DeletePrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeletePrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateLinkConnectionWithParams'
type StreamsApi_DeletePrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// DeletePrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) DeletePrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	return &StreamsApi_DeletePrivateLinkConnectionWithParams_Call{Call: _e.mock.On("DeletePrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePrivateLinkConnectionApiParams)) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) Return(_a0 admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeletePrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePrivateLinkConnectionApiParams) admin.DeletePrivateLinkConnectionApiRequest) *StreamsApi_DeletePrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) DeleteStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnection")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnection'
type StreamsApi_DeleteStreamConnection_Call struct {
	*mock.Call
}

// DeleteStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) DeleteStreamConnection(ctx any, groupId any, tenantName any, connectionName any) *StreamsApi_DeleteStreamConnection_Call {
	return &StreamsApi_DeleteStreamConnection_Call{Call: _e.mock.On("DeleteStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamConnectionExecute(r admin.DeleteStreamConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionExecute'
type StreamsApi_DeleteStreamConnectionExecute_Call struct {
	*mock.Call
}

// DeleteStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamConnectionExecute(r any) *StreamsApi_DeleteStreamConnectionExecute_Call {
	return &StreamsApi_DeleteStreamConnectionExecute_Call{Call: _e.mock.On("DeleteStreamConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Run(run func(r admin.DeleteStreamConnectionApiRequest)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) RunAndReturn(run func(admin.DeleteStreamConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamConnectionWithParams(ctx context.Context, args *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionWithParams")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionWithParams'
type StreamsApi_DeleteStreamConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteStreamConnectionWithParams(ctx any, args any) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	return &StreamsApi_DeleteStreamConnectionWithParams_Call{Call: _e.mock.On("DeleteStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamConnectionApiParams)) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstance provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DeleteStreamInstance(ctx context.Context, groupId string, tenantName string) admin.DeleteStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstance")
	}

	var r0 admin.DeleteStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstance'
type StreamsApi_DeleteStreamInstance_Call struct {
	*mock.Call
}

// DeleteStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DeleteStreamInstance(ctx any, groupId any, tenantName any) *StreamsApi_DeleteStreamInstance_Call {
	return &StreamsApi_DeleteStreamInstance_Call{Call: _e.mock.On("DeleteStreamInstance", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DeleteStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstance_Call) Return(_a0 admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamInstanceExecute(r admin.DeleteStreamInstanceApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstanceExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamInstanceApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamInstanceApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamInstanceApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstanceExecute'
type StreamsApi_DeleteStreamInstanceExecute_Call struct {
	*mock.Call
}

// DeleteStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamInstanceExecute(r any) *StreamsApi_DeleteStreamInstanceExecute_Call {
	return &StreamsApi_DeleteStreamInstanceExecute_Call{Call: _e.mock.On("DeleteStreamInstanceExecute", r)}
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) Run(run func(r admin.DeleteStreamInstanceApiRequest)) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) RunAndReturn(run func(admin.DeleteStreamInstanceApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamInstanceWithParams(ctx context.Context, args *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstanceWithParams")
	}

	var r0 admin.DeleteStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstanceWithParams'
type StreamsApi_DeleteStreamInstanceWithParams_Call struct {
	*mock.Call
}

// DeleteStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamInstanceApiParams
func (_e *StreamsApi_Expecter) DeleteStreamInstanceWithParams(ctx any, args any) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	return &StreamsApi_DeleteStreamInstanceWithParams_Call{Call: _e.mock.On("DeleteStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamInstanceApiParams)) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) Return(_a0 admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) DeleteVpcPeeringConnection(ctx context.Context, groupId string, id string) admin.DeleteVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnection")
	}

	var r0 admin.DeleteVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.DeleteVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnection'
type StreamsApi_DeleteVpcPeeringConnection_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnection(ctx any, groupId any, id any) *StreamsApi_DeleteVpcPeeringConnection_Call {
	return &StreamsApi_DeleteVpcPeeringConnection_Call{Call: _e.mock.On("DeleteVpcPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) Return(_a0 admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteVpcPeeringConnectionExecute(r admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnectionExecute'
type StreamsApi_DeleteVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnectionExecute(r any) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	return &StreamsApi_DeleteVpcPeeringConnectionExecute_Call{Call: _e.mock.On("DeleteVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) Run(run func(r admin.DeleteVpcPeeringConnectionApiRequest)) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.DeleteVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_DeleteVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteVpcPeeringConnectionWithParams(ctx context.Context, args *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcPeeringConnectionWithParams")
	}

	var r0 admin.DeleteVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVpcPeeringConnectionWithParams'
type StreamsApi_DeleteVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_DeleteVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("DeleteVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteVpcPeeringConnectionApiParams)) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) Return(_a0 admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteVpcPeeringConnectionApiParams) admin.DeleteVpcPeeringConnectionApiRequest) *StreamsApi_DeleteVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogs provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DownloadStreamTenantAuditLogs(ctx context.Context, groupId string, tenantName string) admin.DownloadStreamTenantAuditLogsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogs")
	}

	var r0 admin.DownloadStreamTenantAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DownloadStreamTenantAuditLogsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DownloadStreamTenantAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadStreamTenantAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogs'
type StreamsApi_DownloadStreamTenantAuditLogs_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogs(ctx any, groupId any, tenantName any) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogs_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogs", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) Return(_a0 admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) RunAndReturn(run func(context.Context, string, string) admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogsExecute provides a mock function with given fields: r
func (_m *StreamsApi) DownloadStreamTenantAuditLogsExecute(r admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogsExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadStreamTenantAuditLogsApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadStreamTenantAuditLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadStreamTenantAuditLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DownloadStreamTenantAuditLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogsExecute'
type StreamsApi_DownloadStreamTenantAuditLogsExecute_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogsExecute is a helper method to define mock.On call
//   - r admin.DownloadStreamTenantAuditLogsApiRequest
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogsExecute(r any) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogsExecute_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogsExecute", r)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) Run(run func(r admin.DownloadStreamTenantAuditLogsApiRequest)) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadStreamTenantAuditLogsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) RunAndReturn(run func(admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DownloadStreamTenantAuditLogsWithParams(ctx context.Context, args *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogsWithParams")
	}

	var r0 admin.DownloadStreamTenantAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadStreamTenantAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogsWithParams'
type StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadStreamTenantAuditLogsApiParams
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogsWithParams(ctx any, args any) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogsWithParams", ctx, args)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadStreamTenantAuditLogsApiParams)) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadStreamTenantAuditLogsApiParams))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) Return(_a0 admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnection provides a mock function with given fields: ctx, groupId, connectionId
func (_m *StreamsApi) GetPrivateLinkConnection(ctx context.Context, groupId string, connectionId string) admin.GetPrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, groupId, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnection")
	}

	var r0 admin.GetPrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, connectionId)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetPrivateLinkConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnection'
type StreamsApi_GetPrivateLinkConnection_Call struct {
	*mock.Call
}

// GetPrivateLinkConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - connectionId string
func (_e *StreamsApi_Expecter) GetPrivateLinkConnection(ctx any, groupId any, connectionId any) *StreamsApi_GetPrivateLinkConnection_Call {
	return &StreamsApi_GetPrivateLinkConnection_Call{Call: _e.mock.On("GetPrivateLinkConnection", ctx, groupId, connectionId)}
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) Run(run func(ctx context.Context, groupId string, connectionId string)) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) Return(_a0 admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetPrivateLinkConnectionExecute(r admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnectionExecute")
	}

	var r0 *admin.StreamsPrivateLinkConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPrivateLinkConnectionApiRequest) *admin.StreamsPrivateLinkConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsPrivateLinkConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPrivateLinkConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPrivateLinkConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetPrivateLinkConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnectionExecute'
type StreamsApi_GetPrivateLinkConnectionExecute_Call struct {
	*mock.Call
}

// GetPrivateLinkConnectionExecute is a helper method to define mock.On call
//   - r admin.GetPrivateLinkConnectionApiRequest
func (_e *StreamsApi_Expecter) GetPrivateLinkConnectionExecute(r any) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	return &StreamsApi_GetPrivateLinkConnectionExecute_Call{Call: _e.mock.On("GetPrivateLinkConnectionExecute", r)}
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) Run(run func(r admin.GetPrivateLinkConnectionApiRequest)) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPrivateLinkConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) Return(_a0 *admin.StreamsPrivateLinkConnection, _a1 *http.Response, _a2 error) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionExecute_Call) RunAndReturn(run func(admin.GetPrivateLinkConnectionApiRequest) (*admin.StreamsPrivateLinkConnection, *http.Response, error)) *StreamsApi_GetPrivateLinkConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateLinkConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetPrivateLinkConnectionWithParams(ctx context.Context, args *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateLinkConnectionWithParams")
	}

	var r0 admin.GetPrivateLinkConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPrivateLinkConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetPrivateLinkConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateLinkConnectionWithParams'
type StreamsApi_GetPrivateLinkConnectionWithParams_Call struct {
	*mock.Call
}

// GetPrivateLinkConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPrivateLinkConnectionApiParams
func (_e *StreamsApi_Expecter) GetPrivateLinkConnectionWithParams(ctx any, args any) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	return &StreamsApi_GetPrivateLinkConnectionWithParams_Call{Call: _e.mock.On("GetPrivateLinkConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPrivateLinkConnectionApiParams)) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPrivateLinkConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) Return(_a0 admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetPrivateLinkConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPrivateLinkConnectionApiParams) admin.GetPrivateLinkConnectionApiRequest) *StreamsApi_GetPrivateLinkConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) GetStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnection")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnection'
type StreamsApi_GetStreamConnection_Call struct {
	*mock.Call
}

// GetStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) GetStreamConnection(ctx any, groupId any, tenantName any, connectionName any) *StreamsApi_GetStreamConnection_Call {
	return &StreamsApi_GetStreamConnection_Call{Call: _e.mock.On("GetStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_GetStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamConnectionExecute(r admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionExecute'
type StreamsApi_GetStreamConnectionExecute_Call struct {
	*mock.Call
}

// GetStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.GetStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) GetStreamConnectionExecute(r any) *StreamsApi_GetStreamConnectionExecute_Call {
	return &StreamsApi_GetStreamConnectionExecute_Call{Call: _e.mock.On("GetStreamConnectionExecute", r)}
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Run(run func(r admin.GetStreamConnectionApiRequest)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) RunAndReturn(run func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamConnectionWithParams(ctx context.Context, args *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionWithParams")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionWithParams'
type StreamsApi_GetStreamConnectionWithParams_Call struct {
	*mock.Call
}

// GetStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamConnectionApiParams
func (_e *StreamsApi_Expecter) GetStreamConnectionWithParams(ctx any, args any) *StreamsApi_GetStreamConnectionWithParams_Call {
	return &StreamsApi_GetStreamConnectionWithParams_Call{Call: _e.mock.On("GetStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamConnectionApiParams)) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstance provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) GetStreamInstance(ctx context.Context, groupId string, tenantName string) admin.GetStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstance")
	}

	var r0 admin.GetStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstance'
type StreamsApi_GetStreamInstance_Call struct {
	*mock.Call
}

// GetStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) GetStreamInstance(ctx any, groupId any, tenantName any) *StreamsApi_GetStreamInstance_Call {
	return &StreamsApi_GetStreamInstance_Call{Call: _e.mock.On("GetStreamInstance", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_GetStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstance_Call) Return(_a0 admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamInstanceExecute(r admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstanceExecute'
type StreamsApi_GetStreamInstanceExecute_Call struct {
	*mock.Call
}

// GetStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.GetStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) GetStreamInstanceExecute(r any) *StreamsApi_GetStreamInstanceExecute_Call {
	return &StreamsApi_GetStreamInstanceExecute_Call{Call: _e.mock.On("GetStreamInstanceExecute", r)}
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) Run(run func(r admin.GetStreamInstanceApiRequest)) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) RunAndReturn(run func(admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamInstanceWithParams(ctx context.Context, args *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstanceWithParams")
	}

	var r0 admin.GetStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstanceWithParams'
type StreamsApi_GetStreamInstanceWithParams_Call struct {
	*mock.Call
}

// GetStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamInstanceApiParams
func (_e *StreamsApi_Expecter) GetStreamInstanceWithParams(ctx any, args any) *StreamsApi_GetStreamInstanceWithParams_Call {
	return &StreamsApi_GetStreamInstanceWithParams_Call{Call: _e.mock.On("GetStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamInstanceApiParams)) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) Return(_a0 admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetVpcPeeringConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) GetVpcPeeringConnections(ctx context.Context, groupId string) admin.GetVpcPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcPeeringConnections")
	}

	var r0 admin.GetVpcPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetVpcPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetVpcPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_GetVpcPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVpcPeeringConnections'
type StreamsApi_GetVpcPeeringConnections_Call struct {
	*mock.Call
}

// GetVpcPeeringConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) GetVpcPeeringConnections(ctx any, groupId any) *StreamsApi_GetVpcPeeringConnections_Call {
	return &StreamsApi_GetVpcPeeringConnections_Call{Call: _e.mock.On("GetVpcPeeringConnections", ctx, groupId)}
}

func (_c *StreamsApi_GetVpcPeeringConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_GetVpcPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnections_Call) Return(_a0 admin.GetVpcPeeringConnectionsApiRequest) *StreamsApi_GetVpcPeeringConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnections_Call) RunAndReturn(run func(context.Context, string) admin.GetVpcPeeringConnectionsApiRequest) *StreamsApi_GetVpcPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// GetVpcPeeringConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetVpcPeeringConnectionsExecute(r admin.GetVpcPeeringConnectionsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcPeeringConnectionsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.GetVpcPeeringConnectionsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetVpcPeeringConnectionsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetVpcPeeringConnectionsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_GetVpcPeeringConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVpcPeeringConnectionsExecute'
type StreamsApi_GetVpcPeeringConnectionsExecute_Call struct {
	*mock.Call
}

// GetVpcPeeringConnectionsExecute is a helper method to define mock.On call
//   - r admin.GetVpcPeeringConnectionsApiRequest
func (_e *StreamsApi_Expecter) GetVpcPeeringConnectionsExecute(r any) *StreamsApi_GetVpcPeeringConnectionsExecute_Call {
	return &StreamsApi_GetVpcPeeringConnectionsExecute_Call{Call: _e.mock.On("GetVpcPeeringConnectionsExecute", r)}
}

func (_c *StreamsApi_GetVpcPeeringConnectionsExecute_Call) Run(run func(r admin.GetVpcPeeringConnectionsApiRequest)) *StreamsApi_GetVpcPeeringConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetVpcPeeringConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnectionsExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_GetVpcPeeringConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnectionsExecute_Call) RunAndReturn(run func(admin.GetVpcPeeringConnectionsApiRequest) (*http.Response, error)) *StreamsApi_GetVpcPeeringConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVpcPeeringConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetVpcPeeringConnectionsWithParams(ctx context.Context, args *admin.GetVpcPeeringConnectionsApiParams) admin.GetVpcPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcPeeringConnectionsWithParams")
	}

	var r0 admin.GetVpcPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVpcPeeringConnectionsApiParams) admin.GetVpcPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetVpcPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_GetVpcPeeringConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVpcPeeringConnectionsWithParams'
type StreamsApi_GetVpcPeeringConnectionsWithParams_Call struct {
	*mock.Call
}

// GetVpcPeeringConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetVpcPeeringConnectionsApiParams
func (_e *StreamsApi_Expecter) GetVpcPeeringConnectionsWithParams(ctx any, args any) *StreamsApi_GetVpcPeeringConnectionsWithParams_Call {
	return &StreamsApi_GetVpcPeeringConnectionsWithParams_Call{Call: _e.mock.On("GetVpcPeeringConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_GetVpcPeeringConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetVpcPeeringConnectionsApiParams)) *StreamsApi_GetVpcPeeringConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetVpcPeeringConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnectionsWithParams_Call) Return(_a0 admin.GetVpcPeeringConnectionsApiRequest) *StreamsApi_GetVpcPeeringConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetVpcPeeringConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetVpcPeeringConnectionsApiParams) admin.GetVpcPeeringConnectionsApiRequest) *StreamsApi_GetVpcPeeringConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListPrivateLinkConnections(ctx context.Context, groupId string) admin.ListPrivateLinkConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnections")
	}

	var r0 admin.ListPrivateLinkConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPrivateLinkConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateLinkConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListPrivateLinkConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnections'
type StreamsApi_ListPrivateLinkConnections_Call struct {
	*mock.Call
}

// ListPrivateLinkConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListPrivateLinkConnections(ctx any, groupId any) *StreamsApi_ListPrivateLinkConnections_Call {
	return &StreamsApi_ListPrivateLinkConnections_Call{Call: _e.mock.On("ListPrivateLinkConnections", ctx, groupId)}
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) Return(_a0 admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnections_Call) RunAndReturn(run func(context.Context, string) admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListPrivateLinkConnectionsExecute(r admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnectionsExecute")
	}

	var r0 *admin.PaginatedApiStreamsPrivateLink
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPrivateLinkConnectionsApiRequest) *admin.PaginatedApiStreamsPrivateLink); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsPrivateLink)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPrivateLinkConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPrivateLinkConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListPrivateLinkConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnectionsExecute'
type StreamsApi_ListPrivateLinkConnectionsExecute_Call struct {
	*mock.Call
}

// ListPrivateLinkConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListPrivateLinkConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListPrivateLinkConnectionsExecute(r any) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	return &StreamsApi_ListPrivateLinkConnectionsExecute_Call{Call: _e.mock.On("ListPrivateLinkConnectionsExecute", r)}
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) Run(run func(r admin.ListPrivateLinkConnectionsApiRequest)) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPrivateLinkConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsPrivateLink, _a1 *http.Response, _a2 error) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsExecute_Call) RunAndReturn(run func(admin.ListPrivateLinkConnectionsApiRequest) (*admin.PaginatedApiStreamsPrivateLink, *http.Response, error)) *StreamsApi_ListPrivateLinkConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateLinkConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListPrivateLinkConnectionsWithParams(ctx context.Context, args *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateLinkConnectionsWithParams")
	}

	var r0 admin.ListPrivateLinkConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPrivateLinkConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListPrivateLinkConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateLinkConnectionsWithParams'
type StreamsApi_ListPrivateLinkConnectionsWithParams_Call struct {
	*mock.Call
}

// ListPrivateLinkConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPrivateLinkConnectionsApiParams
func (_e *StreamsApi_Expecter) ListPrivateLinkConnectionsWithParams(ctx any, args any) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	return &StreamsApi_ListPrivateLinkConnectionsWithParams_Call{Call: _e.mock.On("ListPrivateLinkConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPrivateLinkConnectionsApiParams)) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPrivateLinkConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) Return(_a0 admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListPrivateLinkConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPrivateLinkConnectionsApiParams) admin.ListPrivateLinkConnectionsApiRequest) *StreamsApi_ListPrivateLinkConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnections provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) ListStreamConnections(ctx context.Context, groupId string, tenantName string) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnections")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnections'
type StreamsApi_ListStreamConnections_Call struct {
	*mock.Call
}

// ListStreamConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) ListStreamConnections(ctx any, groupId any, tenantName any) *StreamsApi_ListStreamConnections_Call {
	return &StreamsApi_ListStreamConnections_Call{Call: _e.mock.On("ListStreamConnections", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_ListStreamConnections_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) RunAndReturn(run func(context.Context, string, string) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamConnectionsExecute(r admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsExecute")
	}

	var r0 *admin.PaginatedApiStreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) *admin.PaginatedApiStreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsExecute'
type StreamsApi_ListStreamConnectionsExecute_Call struct {
	*mock.Call
}

// ListStreamConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListStreamConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListStreamConnectionsExecute(r any) *StreamsApi_ListStreamConnectionsExecute_Call {
	return &StreamsApi_ListStreamConnectionsExecute_Call{Call: _e.mock.On("ListStreamConnectionsExecute", r)}
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Run(run func(r admin.ListStreamConnectionsApiRequest)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) RunAndReturn(run func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamConnectionsWithParams(ctx context.Context, args *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsWithParams")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsWithParams'
type StreamsApi_ListStreamConnectionsWithParams_Call struct {
	*mock.Call
}

// ListStreamConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamConnectionsApiParams
func (_e *StreamsApi_Expecter) ListStreamConnectionsWithParams(ctx any, args any) *StreamsApi_ListStreamConnectionsWithParams_Call {
	return &StreamsApi_ListStreamConnectionsWithParams_Call{Call: _e.mock.On("ListStreamConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamConnectionsApiParams)) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstances provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListStreamInstances(ctx context.Context, groupId string) admin.ListStreamInstancesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstances")
	}

	var r0 admin.ListStreamInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListStreamInstancesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListStreamInstancesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstances'
type StreamsApi_ListStreamInstances_Call struct {
	*mock.Call
}

// ListStreamInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListStreamInstances(ctx any, groupId any) *StreamsApi_ListStreamInstances_Call {
	return &StreamsApi_ListStreamInstances_Call{Call: _e.mock.On("ListStreamInstances", ctx, groupId)}
}

func (_c *StreamsApi_ListStreamInstances_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstances_Call) Return(_a0 admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamInstances_Call) RunAndReturn(run func(context.Context, string) admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstancesExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamInstancesExecute(r admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstancesExecute")
	}

	var r0 *admin.PaginatedApiStreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamInstancesApiRequest) *admin.PaginatedApiStreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamInstancesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamInstancesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamInstancesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstancesExecute'
type StreamsApi_ListStreamInstancesExecute_Call struct {
	*mock.Call
}

// ListStreamInstancesExecute is a helper method to define mock.On call
//   - r admin.ListStreamInstancesApiRequest
func (_e *StreamsApi_Expecter) ListStreamInstancesExecute(r any) *StreamsApi_ListStreamInstancesExecute_Call {
	return &StreamsApi_ListStreamInstancesExecute_Call{Call: _e.mock.On("ListStreamInstancesExecute", r)}
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) Run(run func(r admin.ListStreamInstancesApiRequest)) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamInstancesApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) Return(_a0 *admin.PaginatedApiStreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) RunAndReturn(run func(admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstancesWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamInstancesWithParams(ctx context.Context, args *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstancesWithParams")
	}

	var r0 admin.ListStreamInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamInstancesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamInstancesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstancesWithParams'
type StreamsApi_ListStreamInstancesWithParams_Call struct {
	*mock.Call
}

// ListStreamInstancesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamInstancesApiParams
func (_e *StreamsApi_Expecter) ListStreamInstancesWithParams(ctx any, args any) *StreamsApi_ListStreamInstancesWithParams_Call {
	return &StreamsApi_ListStreamInstancesWithParams_Call{Call: _e.mock.On("ListStreamInstancesWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamInstancesApiParams)) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamInstancesApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) Return(_a0 admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) RejectVpcPeeringConnection(ctx context.Context, groupId string, id string) admin.RejectVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnection")
	}

	var r0 admin.RejectVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RejectVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.RejectVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVpcPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnection'
type StreamsApi_RejectVpcPeeringConnection_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnection(ctx any, groupId any, id any) *StreamsApi_RejectVpcPeeringConnection_Call {
	return &StreamsApi_RejectVpcPeeringConnection_Call{Call: _e.mock.On("RejectVpcPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) Return(_a0 admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) RejectVpcPeeringConnectionExecute(r admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnectionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RejectVpcPeeringConnectionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RejectVpcPeeringConnectionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_RejectVpcPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnectionExecute'
type StreamsApi_RejectVpcPeeringConnectionExecute_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.RejectVpcPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnectionExecute(r any) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	return &StreamsApi_RejectVpcPeeringConnectionExecute_Call{Call: _e.mock.On("RejectVpcPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) Run(run func(r admin.RejectVpcPeeringConnectionApiRequest)) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RejectVpcPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionExecute_Call) RunAndReturn(run func(admin.RejectVpcPeeringConnectionApiRequest) (*http.Response, error)) *StreamsApi_RejectVpcPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVpcPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) RejectVpcPeeringConnectionWithParams(ctx context.Context, args *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RejectVpcPeeringConnectionWithParams")
	}

	var r0 admin.RejectVpcPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RejectVpcPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVpcPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVpcPeeringConnectionWithParams'
type StreamsApi_RejectVpcPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// RejectVpcPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RejectVpcPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) RejectVpcPeeringConnectionWithParams(ctx any, args any) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	return &StreamsApi_RejectVpcPeeringConnectionWithParams_Call{Call: _e.mock.On("RejectVpcPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.RejectVpcPeeringConnectionApiParams)) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RejectVpcPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) Return(_a0 admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVpcPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.RejectVpcPeeringConnectionApiParams) admin.RejectVpcPeeringConnectionApiRequest) *StreamsApi_RejectVpcPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName, streamsConnection
func (_m *StreamsApi) UpdateStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnection")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnection'
type StreamsApi_UpdateStreamConnection_Call struct {
	*mock.Call
}

// UpdateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) UpdateStreamConnection(ctx any, groupId any, tenantName any, connectionName any, streamsConnection any) *StreamsApi_UpdateStreamConnection_Call {
	return &StreamsApi_UpdateStreamConnection_Call{Call: _e.mock.On("UpdateStreamConnection", ctx, groupId, tenantName, connectionName, streamsConnection)}
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamConnectionExecute(r admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionExecute'
type StreamsApi_UpdateStreamConnectionExecute_Call struct {
	*mock.Call
}

// UpdateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamConnectionExecute(r any) *StreamsApi_UpdateStreamConnectionExecute_Call {
	return &StreamsApi_UpdateStreamConnectionExecute_Call{Call: _e.mock.On("UpdateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Run(run func(r admin.UpdateStreamConnectionApiRequest)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) RunAndReturn(run func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamConnectionWithParams(ctx context.Context, args *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionWithParams")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionWithParams'
type StreamsApi_UpdateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// UpdateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) UpdateStreamConnectionWithParams(ctx any, args any) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	return &StreamsApi_UpdateStreamConnectionWithParams_Call{Call: _e.mock.On("UpdateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamConnectionApiParams)) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstance provides a mock function with given fields: ctx, groupId, tenantName, streamsDataProcessRegion
func (_m *StreamsApi) UpdateStreamInstance(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsDataProcessRegion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstance")
	}

	var r0 admin.UpdateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsDataProcessRegion)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstance'
type StreamsApi_UpdateStreamInstance_Call struct {
	*mock.Call
}

// UpdateStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsDataProcessRegion *admin.StreamsDataProcessRegion
func (_e *StreamsApi_Expecter) UpdateStreamInstance(ctx any, groupId any, tenantName any, streamsDataProcessRegion any) *StreamsApi_UpdateStreamInstance_Call {
	return &StreamsApi_UpdateStreamInstance_Call{Call: _e.mock.On("UpdateStreamInstance", ctx, groupId, tenantName, streamsDataProcessRegion)}
}

func (_c *StreamsApi_UpdateStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion)) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsDataProcessRegion))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstance_Call) Return(_a0 admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstance_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamInstanceExecute(r admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstanceExecute'
type StreamsApi_UpdateStreamInstanceExecute_Call struct {
	*mock.Call
}

// UpdateStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamInstanceExecute(r any) *StreamsApi_UpdateStreamInstanceExecute_Call {
	return &StreamsApi_UpdateStreamInstanceExecute_Call{Call: _e.mock.On("UpdateStreamInstanceExecute", r)}
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) Run(run func(r admin.UpdateStreamInstanceApiRequest)) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) RunAndReturn(run func(admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamInstanceWithParams(ctx context.Context, args *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstanceWithParams")
	}

	var r0 admin.UpdateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstanceWithParams'
type StreamsApi_UpdateStreamInstanceWithParams_Call struct {
	*mock.Call
}

// UpdateStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamInstanceApiParams
func (_e *StreamsApi_Expecter) UpdateStreamInstanceWithParams(ctx any, args any) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	return &StreamsApi_UpdateStreamInstanceWithParams_Call{Call: _e.mock.On("UpdateStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamInstanceApiParams)) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) Return(_a0 admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamsApi creates a new instance of StreamsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamsApi {
	mock := &StreamsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
