// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240805004/admin"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StreamsApi is an autogenerated mock type for the StreamsApi type
type StreamsApi struct {
	mock.Mock
}

type StreamsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamsApi) EXPECT() *StreamsApi_Expecter {
	return &StreamsApi_Expecter{mock: &_m.Mock}
}

// AcceptVPCPeeringConnection provides a mock function with given fields: ctx, groupId, id, vPCPeeringActionChallenge
func (_m *StreamsApi) AcceptVPCPeeringConnection(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge) admin.AcceptVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id, vPCPeeringActionChallenge)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVPCPeeringConnection")
	}

	var r0 admin.AcceptVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id, vPCPeeringActionChallenge)
	} else {
		r0 = ret.Get(0).(admin.AcceptVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVPCPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVPCPeeringConnection'
type StreamsApi_AcceptVPCPeeringConnection_Call struct {
	*mock.Call
}

// AcceptVPCPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
//   - vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge
func (_e *StreamsApi_Expecter) AcceptVPCPeeringConnection(ctx interface{}, groupId interface{}, id interface{}, vPCPeeringActionChallenge interface{}) *StreamsApi_AcceptVPCPeeringConnection_Call {
	return &StreamsApi_AcceptVPCPeeringConnection_Call{Call: _e.mock.On("AcceptVPCPeeringConnection", ctx, groupId, id, vPCPeeringActionChallenge)}
}

func (_c *StreamsApi_AcceptVPCPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string, vPCPeeringActionChallenge *admin.VPCPeeringActionChallenge)) *StreamsApi_AcceptVPCPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.VPCPeeringActionChallenge))
	})
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnection_Call) Return(_a0 admin.AcceptVPCPeeringConnectionApiRequest) *StreamsApi_AcceptVPCPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.VPCPeeringActionChallenge) admin.AcceptVPCPeeringConnectionApiRequest) *StreamsApi_AcceptVPCPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVPCPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) AcceptVPCPeeringConnectionExecute(r admin.AcceptVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVPCPeeringConnectionExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AcceptVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AcceptVPCPeeringConnectionApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AcceptVPCPeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AcceptVPCPeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_AcceptVPCPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVPCPeeringConnectionExecute'
type StreamsApi_AcceptVPCPeeringConnectionExecute_Call struct {
	*mock.Call
}

// AcceptVPCPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.AcceptVPCPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) AcceptVPCPeeringConnectionExecute(r interface{}) *StreamsApi_AcceptVPCPeeringConnectionExecute_Call {
	return &StreamsApi_AcceptVPCPeeringConnectionExecute_Call{Call: _e.mock.On("AcceptVPCPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionExecute_Call) Run(run func(r admin.AcceptVPCPeeringConnectionApiRequest)) *StreamsApi_AcceptVPCPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AcceptVPCPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_AcceptVPCPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionExecute_Call) RunAndReturn(run func(admin.AcceptVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)) *StreamsApi_AcceptVPCPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptVPCPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) AcceptVPCPeeringConnectionWithParams(ctx context.Context, args *admin.AcceptVPCPeeringConnectionApiParams) admin.AcceptVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AcceptVPCPeeringConnectionWithParams")
	}

	var r0 admin.AcceptVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AcceptVPCPeeringConnectionApiParams) admin.AcceptVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AcceptVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_AcceptVPCPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptVPCPeeringConnectionWithParams'
type StreamsApi_AcceptVPCPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// AcceptVPCPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AcceptVPCPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) AcceptVPCPeeringConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call {
	return &StreamsApi_AcceptVPCPeeringConnectionWithParams_Call{Call: _e.mock.On("AcceptVPCPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.AcceptVPCPeeringConnectionApiParams)) *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AcceptVPCPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call) Return(_a0 admin.AcceptVPCPeeringConnectionApiRequest) *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.AcceptVPCPeeringConnectionApiParams) admin.AcceptVPCPeeringConnectionApiRequest) *StreamsApi_AcceptVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, streamsConnection
func (_m *StreamsApi) CreateStreamConnection(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnection")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnection'
type StreamsApi_CreateStreamConnection_Call struct {
	*mock.Call
}

// CreateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) CreateStreamConnection(ctx interface{}, groupId interface{}, tenantName interface{}, streamsConnection interface{}) *StreamsApi_CreateStreamConnection_Call {
	return &StreamsApi_CreateStreamConnection_Call{Call: _e.mock.On("CreateStreamConnection", ctx, groupId, tenantName, streamsConnection)}
}

func (_c *StreamsApi_CreateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsConnection) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamConnectionExecute(r admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionExecute'
type StreamsApi_CreateStreamConnectionExecute_Call struct {
	*mock.Call
}

// CreateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.CreateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) CreateStreamConnectionExecute(r interface{}) *StreamsApi_CreateStreamConnectionExecute_Call {
	return &StreamsApi_CreateStreamConnectionExecute_Call{Call: _e.mock.On("CreateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Run(run func(r admin.CreateStreamConnectionApiRequest)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionExecute_Call) RunAndReturn(run func(admin.CreateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_CreateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamConnectionWithParams(ctx context.Context, args *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamConnectionWithParams")
	}

	var r0 admin.CreateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamConnectionWithParams'
type StreamsApi_CreateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// CreateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) CreateStreamConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_CreateStreamConnectionWithParams_Call {
	return &StreamsApi_CreateStreamConnectionWithParams_Call{Call: _e.mock.On("CreateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamConnectionApiParams)) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) Return(_a0 admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamConnectionApiParams) admin.CreateStreamConnectionApiRequest) *StreamsApi_CreateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstance provides a mock function with given fields: ctx, groupId, streamsTenant
func (_m *StreamsApi) CreateStreamInstance(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, streamsTenant)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstance")
	}

	var r0 admin.CreateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, streamsTenant)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstance'
type StreamsApi_CreateStreamInstance_Call struct {
	*mock.Call
}

// CreateStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - streamsTenant *admin.StreamsTenant
func (_e *StreamsApi_Expecter) CreateStreamInstance(ctx interface{}, groupId interface{}, streamsTenant interface{}) *StreamsApi_CreateStreamInstance_Call {
	return &StreamsApi_CreateStreamInstance_Call{Call: _e.mock.On("CreateStreamInstance", ctx, groupId, streamsTenant)}
}

func (_c *StreamsApi_CreateStreamInstance_Call) Run(run func(ctx context.Context, groupId string, streamsTenant *admin.StreamsTenant)) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.StreamsTenant))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstance_Call) Return(_a0 admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstance_Call) RunAndReturn(run func(context.Context, string, *admin.StreamsTenant) admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamInstanceExecute(r admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceExecute'
type StreamsApi_CreateStreamInstanceExecute_Call struct {
	*mock.Call
}

// CreateStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.CreateStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) CreateStreamInstanceExecute(r interface{}) *StreamsApi_CreateStreamInstanceExecute_Call {
	return &StreamsApi_CreateStreamInstanceExecute_Call{Call: _e.mock.On("CreateStreamInstanceExecute", r)}
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) Run(run func(r admin.CreateStreamInstanceApiRequest)) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceExecute_Call) RunAndReturn(run func(admin.CreateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_CreateStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamInstanceWithParams(ctx context.Context, args *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceWithParams")
	}

	var r0 admin.CreateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceWithParams'
type StreamsApi_CreateStreamInstanceWithParams_Call struct {
	*mock.Call
}

// CreateStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamInstanceApiParams
func (_e *StreamsApi_Expecter) CreateStreamInstanceWithParams(ctx interface{}, args interface{}) *StreamsApi_CreateStreamInstanceWithParams_Call {
	return &StreamsApi_CreateStreamInstanceWithParams_Call{Call: _e.mock.On("CreateStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamInstanceApiParams)) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) Return(_a0 admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamInstanceApiParams) admin.CreateStreamInstanceApiRequest) *StreamsApi_CreateStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceWithSampleConnections provides a mock function with given fields: ctx, groupId, body
func (_m *StreamsApi) CreateStreamInstanceWithSampleConnections(ctx context.Context, groupId string, body *interface{}) admin.CreateStreamInstanceWithSampleConnectionsApiRequest {
	ret := _m.Called(ctx, groupId, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceWithSampleConnections")
	}

	var r0 admin.CreateStreamInstanceWithSampleConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *interface{}) admin.CreateStreamInstanceWithSampleConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId, body)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceWithSampleConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstanceWithSampleConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceWithSampleConnections'
type StreamsApi_CreateStreamInstanceWithSampleConnections_Call struct {
	*mock.Call
}

// CreateStreamInstanceWithSampleConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - body *interface{}
func (_e *StreamsApi_Expecter) CreateStreamInstanceWithSampleConnections(ctx interface{}, groupId interface{}, body interface{}) *StreamsApi_CreateStreamInstanceWithSampleConnections_Call {
	return &StreamsApi_CreateStreamInstanceWithSampleConnections_Call{Call: _e.mock.On("CreateStreamInstanceWithSampleConnections", ctx, groupId, body)}
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnections_Call) Run(run func(ctx context.Context, groupId string, body *interface{})) *StreamsApi_CreateStreamInstanceWithSampleConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*interface{}))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnections_Call) Return(_a0 admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *StreamsApi_CreateStreamInstanceWithSampleConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnections_Call) RunAndReturn(run func(context.Context, string, *interface{}) admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *StreamsApi_CreateStreamInstanceWithSampleConnections_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceWithSampleConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamInstanceWithSampleConnectionsExecute(r admin.CreateStreamInstanceWithSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceWithSampleConnectionsExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceWithSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamInstanceWithSampleConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceWithSampleConnectionsExecute'
type StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call struct {
	*mock.Call
}

// CreateStreamInstanceWithSampleConnectionsExecute is a helper method to define mock.On call
//   - r admin.CreateStreamInstanceWithSampleConnectionsApiRequest
func (_e *StreamsApi_Expecter) CreateStreamInstanceWithSampleConnectionsExecute(r interface{}) *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call {
	return &StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call{Call: _e.mock.On("CreateStreamInstanceWithSampleConnectionsExecute", r)}
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call) Run(run func(r admin.CreateStreamInstanceWithSampleConnectionsApiRequest)) *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamInstanceWithSampleConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call) RunAndReturn(run func(admin.CreateStreamInstanceWithSampleConnectionsApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_CreateStreamInstanceWithSampleConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamInstanceWithSampleConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamInstanceWithSampleConnectionsWithParams(ctx context.Context, args *admin.CreateStreamInstanceWithSampleConnectionsApiParams) admin.CreateStreamInstanceWithSampleConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamInstanceWithSampleConnectionsWithParams")
	}

	var r0 admin.CreateStreamInstanceWithSampleConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamInstanceWithSampleConnectionsApiParams) admin.CreateStreamInstanceWithSampleConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamInstanceWithSampleConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamInstanceWithSampleConnectionsWithParams'
type StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call struct {
	*mock.Call
}

// CreateStreamInstanceWithSampleConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamInstanceWithSampleConnectionsApiParams
func (_e *StreamsApi_Expecter) CreateStreamInstanceWithSampleConnectionsWithParams(ctx interface{}, args interface{}) *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call {
	return &StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call{Call: _e.mock.On("CreateStreamInstanceWithSampleConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamInstanceWithSampleConnectionsApiParams)) *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamInstanceWithSampleConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call) Return(_a0 admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamInstanceWithSampleConnectionsApiParams) admin.CreateStreamInstanceWithSampleConnectionsApiRequest) *StreamsApi_CreateStreamInstanceWithSampleConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, streamsProcessor
func (_m *StreamsApi) CreateStreamProcessor(ctx context.Context, groupId string, tenantName string, streamsProcessor *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsProcessor)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessor")
	}

	var r0 admin.CreateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsProcessor)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessor'
type StreamsApi_CreateStreamProcessor_Call struct {
	*mock.Call
}

// CreateStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsProcessor *admin.StreamsProcessor
func (_e *StreamsApi_Expecter) CreateStreamProcessor(ctx interface{}, groupId interface{}, tenantName interface{}, streamsProcessor interface{}) *StreamsApi_CreateStreamProcessor_Call {
	return &StreamsApi_CreateStreamProcessor_Call{Call: _e.mock.On("CreateStreamProcessor", ctx, groupId, tenantName, streamsProcessor)}
}

func (_c *StreamsApi_CreateStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsProcessor *admin.StreamsProcessor)) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsProcessor))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessor_Call) Return(_a0 admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsProcessor) admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) CreateStreamProcessorExecute(r admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessorExecute")
	}

	var r0 *admin.StreamsProcessor
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateStreamProcessorApiRequest) *admin.StreamsProcessor); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsProcessor)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_CreateStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessorExecute'
type StreamsApi_CreateStreamProcessorExecute_Call struct {
	*mock.Call
}

// CreateStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.CreateStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) CreateStreamProcessorExecute(r interface{}) *StreamsApi_CreateStreamProcessorExecute_Call {
	return &StreamsApi_CreateStreamProcessorExecute_Call{Call: _e.mock.On("CreateStreamProcessorExecute", r)}
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) Run(run func(r admin.CreateStreamProcessorApiRequest)) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) Return(_a0 *admin.StreamsProcessor, _a1 *http.Response, _a2 error) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorExecute_Call) RunAndReturn(run func(admin.CreateStreamProcessorApiRequest) (*admin.StreamsProcessor, *http.Response, error)) *StreamsApi_CreateStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) CreateStreamProcessorWithParams(ctx context.Context, args *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamProcessorWithParams")
	}

	var r0 admin.CreateStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_CreateStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamProcessorWithParams'
type StreamsApi_CreateStreamProcessorWithParams_Call struct {
	*mock.Call
}

// CreateStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateStreamProcessorApiParams
func (_e *StreamsApi_Expecter) CreateStreamProcessorWithParams(ctx interface{}, args interface{}) *StreamsApi_CreateStreamProcessorWithParams_Call {
	return &StreamsApi_CreateStreamProcessorWithParams_Call{Call: _e.mock.On("CreateStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateStreamProcessorApiParams)) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) Return(_a0 admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_CreateStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateStreamProcessorApiParams) admin.CreateStreamProcessorApiRequest) *StreamsApi_CreateStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) DeleteStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnection")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnection'
type StreamsApi_DeleteStreamConnection_Call struct {
	*mock.Call
}

// DeleteStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) DeleteStreamConnection(ctx interface{}, groupId interface{}, tenantName interface{}, connectionName interface{}) *StreamsApi_DeleteStreamConnection_Call {
	return &StreamsApi_DeleteStreamConnection_Call{Call: _e.mock.On("DeleteStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamConnectionExecute(r admin.DeleteStreamConnectionApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamConnectionApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DeleteStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionExecute'
type StreamsApi_DeleteStreamConnectionExecute_Call struct {
	*mock.Call
}

// DeleteStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamConnectionExecute(r interface{}) *StreamsApi_DeleteStreamConnectionExecute_Call {
	return &StreamsApi_DeleteStreamConnectionExecute_Call{Call: _e.mock.On("DeleteStreamConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Run(run func(r admin.DeleteStreamConnectionApiRequest)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionExecute_Call) RunAndReturn(run func(admin.DeleteStreamConnectionApiRequest) (interface{}, *http.Response, error)) *StreamsApi_DeleteStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamConnectionWithParams(ctx context.Context, args *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamConnectionWithParams")
	}

	var r0 admin.DeleteStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamConnectionWithParams'
type StreamsApi_DeleteStreamConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteStreamConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	return &StreamsApi_DeleteStreamConnectionWithParams_Call{Call: _e.mock.On("DeleteStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamConnectionApiParams)) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) Return(_a0 admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamConnectionApiParams) admin.DeleteStreamConnectionApiRequest) *StreamsApi_DeleteStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstance provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DeleteStreamInstance(ctx context.Context, groupId string, tenantName string) admin.DeleteStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstance")
	}

	var r0 admin.DeleteStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstance'
type StreamsApi_DeleteStreamInstance_Call struct {
	*mock.Call
}

// DeleteStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DeleteStreamInstance(ctx interface{}, groupId interface{}, tenantName interface{}) *StreamsApi_DeleteStreamInstance_Call {
	return &StreamsApi_DeleteStreamInstance_Call{Call: _e.mock.On("DeleteStreamInstance", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DeleteStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstance_Call) Return(_a0 admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamInstanceExecute(r admin.DeleteStreamInstanceApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstanceExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamInstanceApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamInstanceApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DeleteStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstanceExecute'
type StreamsApi_DeleteStreamInstanceExecute_Call struct {
	*mock.Call
}

// DeleteStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamInstanceExecute(r interface{}) *StreamsApi_DeleteStreamInstanceExecute_Call {
	return &StreamsApi_DeleteStreamInstanceExecute_Call{Call: _e.mock.On("DeleteStreamInstanceExecute", r)}
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) Run(run func(r admin.DeleteStreamInstanceApiRequest)) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceExecute_Call) RunAndReturn(run func(admin.DeleteStreamInstanceApiRequest) (interface{}, *http.Response, error)) *StreamsApi_DeleteStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamInstanceWithParams(ctx context.Context, args *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamInstanceWithParams")
	}

	var r0 admin.DeleteStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamInstanceWithParams'
type StreamsApi_DeleteStreamInstanceWithParams_Call struct {
	*mock.Call
}

// DeleteStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamInstanceApiParams
func (_e *StreamsApi_Expecter) DeleteStreamInstanceWithParams(ctx interface{}, args interface{}) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	return &StreamsApi_DeleteStreamInstanceWithParams_Call{Call: _e.mock.On("DeleteStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamInstanceApiParams)) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) Return(_a0 admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamInstanceApiParams) admin.DeleteStreamInstanceApiRequest) *StreamsApi_DeleteStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) DeleteStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.DeleteStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessor")
	}

	var r0 admin.DeleteStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessor'
type StreamsApi_DeleteStreamProcessor_Call struct {
	*mock.Call
}

// DeleteStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) DeleteStreamProcessor(ctx interface{}, groupId interface{}, tenantName interface{}, processorName interface{}) *StreamsApi_DeleteStreamProcessor_Call {
	return &StreamsApi_DeleteStreamProcessor_Call{Call: _e.mock.On("DeleteStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) Return(_a0 admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteStreamProcessorExecute(r admin.DeleteStreamProcessorApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessorExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamProcessorApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteStreamProcessorApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteStreamProcessorApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_DeleteStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessorExecute'
type StreamsApi_DeleteStreamProcessorExecute_Call struct {
	*mock.Call
}

// DeleteStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.DeleteStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) DeleteStreamProcessorExecute(r interface{}) *StreamsApi_DeleteStreamProcessorExecute_Call {
	return &StreamsApi_DeleteStreamProcessorExecute_Call{Call: _e.mock.On("DeleteStreamProcessorExecute", r)}
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) Run(run func(r admin.DeleteStreamProcessorApiRequest)) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorExecute_Call) RunAndReturn(run func(admin.DeleteStreamProcessorApiRequest) (*http.Response, error)) *StreamsApi_DeleteStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteStreamProcessorWithParams(ctx context.Context, args *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamProcessorWithParams")
	}

	var r0 admin.DeleteStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_DeleteStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStreamProcessorWithParams'
type StreamsApi_DeleteStreamProcessorWithParams_Call struct {
	*mock.Call
}

// DeleteStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteStreamProcessorApiParams
func (_e *StreamsApi_Expecter) DeleteStreamProcessorWithParams(ctx interface{}, args interface{}) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	return &StreamsApi_DeleteStreamProcessorWithParams_Call{Call: _e.mock.On("DeleteStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteStreamProcessorApiParams)) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) Return(_a0 admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteStreamProcessorApiParams) admin.DeleteStreamProcessorApiRequest) *StreamsApi_DeleteStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVPCPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) DeleteVPCPeeringConnection(ctx context.Context, groupId string, id string) admin.DeleteVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCPeeringConnection")
	}

	var r0 admin.DeleteVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.DeleteVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVPCPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVPCPeeringConnection'
type StreamsApi_DeleteVPCPeeringConnection_Call struct {
	*mock.Call
}

// DeleteVPCPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) DeleteVPCPeeringConnection(ctx interface{}, groupId interface{}, id interface{}) *StreamsApi_DeleteVPCPeeringConnection_Call {
	return &StreamsApi_DeleteVPCPeeringConnection_Call{Call: _e.mock.On("DeleteVPCPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_DeleteVPCPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_DeleteVPCPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnection_Call) Return(_a0 admin.DeleteVPCPeeringConnectionApiRequest) *StreamsApi_DeleteVPCPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteVPCPeeringConnectionApiRequest) *StreamsApi_DeleteVPCPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVPCPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) DeleteVPCPeeringConnectionExecute(r admin.DeleteVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCPeeringConnectionExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteVPCPeeringConnectionApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteVPCPeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteVPCPeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DeleteVPCPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVPCPeeringConnectionExecute'
type StreamsApi_DeleteVPCPeeringConnectionExecute_Call struct {
	*mock.Call
}

// DeleteVPCPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.DeleteVPCPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) DeleteVPCPeeringConnectionExecute(r interface{}) *StreamsApi_DeleteVPCPeeringConnectionExecute_Call {
	return &StreamsApi_DeleteVPCPeeringConnectionExecute_Call{Call: _e.mock.On("DeleteVPCPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionExecute_Call) Run(run func(r admin.DeleteVPCPeeringConnectionApiRequest)) *StreamsApi_DeleteVPCPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteVPCPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_DeleteVPCPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionExecute_Call) RunAndReturn(run func(admin.DeleteVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)) *StreamsApi_DeleteVPCPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVPCPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DeleteVPCPeeringConnectionWithParams(ctx context.Context, args *admin.DeleteVPCPeeringConnectionApiParams) admin.DeleteVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCPeeringConnectionWithParams")
	}

	var r0 admin.DeleteVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteVPCPeeringConnectionApiParams) admin.DeleteVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_DeleteVPCPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVPCPeeringConnectionWithParams'
type StreamsApi_DeleteVPCPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// DeleteVPCPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteVPCPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) DeleteVPCPeeringConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call {
	return &StreamsApi_DeleteVPCPeeringConnectionWithParams_Call{Call: _e.mock.On("DeleteVPCPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteVPCPeeringConnectionApiParams)) *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteVPCPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call) Return(_a0 admin.DeleteVPCPeeringConnectionApiRequest) *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteVPCPeeringConnectionApiParams) admin.DeleteVPCPeeringConnectionApiRequest) *StreamsApi_DeleteVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogs provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) DownloadStreamTenantAuditLogs(ctx context.Context, groupId string, tenantName string) admin.DownloadStreamTenantAuditLogsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogs")
	}

	var r0 admin.DownloadStreamTenantAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DownloadStreamTenantAuditLogsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.DownloadStreamTenantAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadStreamTenantAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogs'
type StreamsApi_DownloadStreamTenantAuditLogs_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogs(ctx interface{}, groupId interface{}, tenantName interface{}) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogs_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogs", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) Return(_a0 admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogs_Call) RunAndReturn(run func(context.Context, string, string) admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogsExecute provides a mock function with given fields: r
func (_m *StreamsApi) DownloadStreamTenantAuditLogsExecute(r admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogsExecute")
	}

	var r0 io.ReadCloser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadStreamTenantAuditLogsApiRequest) io.ReadCloser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadStreamTenantAuditLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadStreamTenantAuditLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_DownloadStreamTenantAuditLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogsExecute'
type StreamsApi_DownloadStreamTenantAuditLogsExecute_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogsExecute is a helper method to define mock.On call
//   - r admin.DownloadStreamTenantAuditLogsApiRequest
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogsExecute(r interface{}) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogsExecute_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogsExecute", r)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) Run(run func(r admin.DownloadStreamTenantAuditLogsApiRequest)) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadStreamTenantAuditLogsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) Return(_a0 io.ReadCloser, _a1 *http.Response, _a2 error) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call) RunAndReturn(run func(admin.DownloadStreamTenantAuditLogsApiRequest) (io.ReadCloser, *http.Response, error)) *StreamsApi_DownloadStreamTenantAuditLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadStreamTenantAuditLogsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) DownloadStreamTenantAuditLogsWithParams(ctx context.Context, args *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStreamTenantAuditLogsWithParams")
	}

	var r0 admin.DownloadStreamTenantAuditLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadStreamTenantAuditLogsApiRequest)
	}

	return r0
}

// StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStreamTenantAuditLogsWithParams'
type StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call struct {
	*mock.Call
}

// DownloadStreamTenantAuditLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadStreamTenantAuditLogsApiParams
func (_e *StreamsApi_Expecter) DownloadStreamTenantAuditLogsWithParams(ctx interface{}, args interface{}) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	return &StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call{Call: _e.mock.On("DownloadStreamTenantAuditLogsWithParams", ctx, args)}
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadStreamTenantAuditLogsApiParams)) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadStreamTenantAuditLogsApiParams))
	})
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) Return(_a0 admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadStreamTenantAuditLogsApiParams) admin.DownloadStreamTenantAuditLogsApiRequest) *StreamsApi_DownloadStreamTenantAuditLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName
func (_m *StreamsApi) GetStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnection")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnection'
type StreamsApi_GetStreamConnection_Call struct {
	*mock.Call
}

// GetStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
func (_e *StreamsApi_Expecter) GetStreamConnection(ctx interface{}, groupId interface{}, tenantName interface{}, connectionName interface{}) *StreamsApi_GetStreamConnection_Call {
	return &StreamsApi_GetStreamConnection_Call{Call: _e.mock.On("GetStreamConnection", ctx, groupId, tenantName, connectionName)}
}

func (_c *StreamsApi_GetStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string)) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamConnectionExecute(r admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionExecute'
type StreamsApi_GetStreamConnectionExecute_Call struct {
	*mock.Call
}

// GetStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.GetStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) GetStreamConnectionExecute(r interface{}) *StreamsApi_GetStreamConnectionExecute_Call {
	return &StreamsApi_GetStreamConnectionExecute_Call{Call: _e.mock.On("GetStreamConnectionExecute", r)}
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Run(run func(r admin.GetStreamConnectionApiRequest)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionExecute_Call) RunAndReturn(run func(admin.GetStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_GetStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamConnectionWithParams(ctx context.Context, args *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamConnectionWithParams")
	}

	var r0 admin.GetStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamConnectionWithParams'
type StreamsApi_GetStreamConnectionWithParams_Call struct {
	*mock.Call
}

// GetStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamConnectionApiParams
func (_e *StreamsApi_Expecter) GetStreamConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_GetStreamConnectionWithParams_Call {
	return &StreamsApi_GetStreamConnectionWithParams_Call{Call: _e.mock.On("GetStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamConnectionApiParams)) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) Return(_a0 admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamConnectionApiParams) admin.GetStreamConnectionApiRequest) *StreamsApi_GetStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstance provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) GetStreamInstance(ctx context.Context, groupId string, tenantName string) admin.GetStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstance")
	}

	var r0 admin.GetStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstance'
type StreamsApi_GetStreamInstance_Call struct {
	*mock.Call
}

// GetStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) GetStreamInstance(ctx interface{}, groupId interface{}, tenantName interface{}) *StreamsApi_GetStreamInstance_Call {
	return &StreamsApi_GetStreamInstance_Call{Call: _e.mock.On("GetStreamInstance", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_GetStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstance_Call) Return(_a0 admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamInstanceExecute(r admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstanceExecute'
type StreamsApi_GetStreamInstanceExecute_Call struct {
	*mock.Call
}

// GetStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.GetStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) GetStreamInstanceExecute(r interface{}) *StreamsApi_GetStreamInstanceExecute_Call {
	return &StreamsApi_GetStreamInstanceExecute_Call{Call: _e.mock.On("GetStreamInstanceExecute", r)}
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) Run(run func(r admin.GetStreamInstanceApiRequest)) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamInstanceExecute_Call) RunAndReturn(run func(admin.GetStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_GetStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamInstanceWithParams(ctx context.Context, args *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInstanceWithParams")
	}

	var r0 admin.GetStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInstanceWithParams'
type StreamsApi_GetStreamInstanceWithParams_Call struct {
	*mock.Call
}

// GetStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamInstanceApiParams
func (_e *StreamsApi_Expecter) GetStreamInstanceWithParams(ctx interface{}, args interface{}) *StreamsApi_GetStreamInstanceWithParams_Call {
	return &StreamsApi_GetStreamInstanceWithParams_Call{Call: _e.mock.On("GetStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamInstanceApiParams)) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) Return(_a0 admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamInstanceApiParams) admin.GetStreamInstanceApiRequest) *StreamsApi_GetStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) GetStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.GetStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessor")
	}

	var r0 admin.GetStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessor'
type StreamsApi_GetStreamProcessor_Call struct {
	*mock.Call
}

// GetStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) GetStreamProcessor(ctx interface{}, groupId interface{}, tenantName interface{}, processorName interface{}) *StreamsApi_GetStreamProcessor_Call {
	return &StreamsApi_GetStreamProcessor_Call{Call: _e.mock.On("GetStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_GetStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessor_Call) Return(_a0 admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetStreamProcessorExecute(r admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorExecute")
	}

	var r0 *admin.StreamsProcessorWithStats
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetStreamProcessorApiRequest) *admin.StreamsProcessorWithStats); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsProcessorWithStats)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_GetStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorExecute'
type StreamsApi_GetStreamProcessorExecute_Call struct {
	*mock.Call
}

// GetStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.GetStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) GetStreamProcessorExecute(r interface{}) *StreamsApi_GetStreamProcessorExecute_Call {
	return &StreamsApi_GetStreamProcessorExecute_Call{Call: _e.mock.On("GetStreamProcessorExecute", r)}
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) Run(run func(r admin.GetStreamProcessorApiRequest)) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) Return(_a0 *admin.StreamsProcessorWithStats, _a1 *http.Response, _a2 error) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorExecute_Call) RunAndReturn(run func(admin.GetStreamProcessorApiRequest) (*admin.StreamsProcessorWithStats, *http.Response, error)) *StreamsApi_GetStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetStreamProcessorWithParams(ctx context.Context, args *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamProcessorWithParams")
	}

	var r0 admin.GetStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_GetStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamProcessorWithParams'
type StreamsApi_GetStreamProcessorWithParams_Call struct {
	*mock.Call
}

// GetStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetStreamProcessorApiParams
func (_e *StreamsApi_Expecter) GetStreamProcessorWithParams(ctx interface{}, args interface{}) *StreamsApi_GetStreamProcessorWithParams_Call {
	return &StreamsApi_GetStreamProcessorWithParams_Call{Call: _e.mock.On("GetStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.GetStreamProcessorApiParams)) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) Return(_a0 admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetStreamProcessorApiParams) admin.GetStreamProcessorApiRequest) *StreamsApi_GetStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCPeeringConnections provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) GetVPCPeeringConnections(ctx context.Context, groupId string) admin.GetVPCPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetVPCPeeringConnections")
	}

	var r0 admin.GetVPCPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetVPCPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetVPCPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_GetVPCPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCPeeringConnections'
type StreamsApi_GetVPCPeeringConnections_Call struct {
	*mock.Call
}

// GetVPCPeeringConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) GetVPCPeeringConnections(ctx interface{}, groupId interface{}) *StreamsApi_GetVPCPeeringConnections_Call {
	return &StreamsApi_GetVPCPeeringConnections_Call{Call: _e.mock.On("GetVPCPeeringConnections", ctx, groupId)}
}

func (_c *StreamsApi_GetVPCPeeringConnections_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_GetVPCPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnections_Call) Return(_a0 admin.GetVPCPeeringConnectionsApiRequest) *StreamsApi_GetVPCPeeringConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnections_Call) RunAndReturn(run func(context.Context, string) admin.GetVPCPeeringConnectionsApiRequest) *StreamsApi_GetVPCPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCPeeringConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) GetVPCPeeringConnectionsExecute(r admin.GetVPCPeeringConnectionsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVPCPeeringConnectionsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.GetVPCPeeringConnectionsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetVPCPeeringConnectionsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetVPCPeeringConnectionsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamsApi_GetVPCPeeringConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCPeeringConnectionsExecute'
type StreamsApi_GetVPCPeeringConnectionsExecute_Call struct {
	*mock.Call
}

// GetVPCPeeringConnectionsExecute is a helper method to define mock.On call
//   - r admin.GetVPCPeeringConnectionsApiRequest
func (_e *StreamsApi_Expecter) GetVPCPeeringConnectionsExecute(r interface{}) *StreamsApi_GetVPCPeeringConnectionsExecute_Call {
	return &StreamsApi_GetVPCPeeringConnectionsExecute_Call{Call: _e.mock.On("GetVPCPeeringConnectionsExecute", r)}
}

func (_c *StreamsApi_GetVPCPeeringConnectionsExecute_Call) Run(run func(r admin.GetVPCPeeringConnectionsApiRequest)) *StreamsApi_GetVPCPeeringConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetVPCPeeringConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnectionsExecute_Call) Return(_a0 *http.Response, _a1 error) *StreamsApi_GetVPCPeeringConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnectionsExecute_Call) RunAndReturn(run func(admin.GetVPCPeeringConnectionsApiRequest) (*http.Response, error)) *StreamsApi_GetVPCPeeringConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCPeeringConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) GetVPCPeeringConnectionsWithParams(ctx context.Context, args *admin.GetVPCPeeringConnectionsApiParams) admin.GetVPCPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetVPCPeeringConnectionsWithParams")
	}

	var r0 admin.GetVPCPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVPCPeeringConnectionsApiParams) admin.GetVPCPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetVPCPeeringConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_GetVPCPeeringConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCPeeringConnectionsWithParams'
type StreamsApi_GetVPCPeeringConnectionsWithParams_Call struct {
	*mock.Call
}

// GetVPCPeeringConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetVPCPeeringConnectionsApiParams
func (_e *StreamsApi_Expecter) GetVPCPeeringConnectionsWithParams(ctx interface{}, args interface{}) *StreamsApi_GetVPCPeeringConnectionsWithParams_Call {
	return &StreamsApi_GetVPCPeeringConnectionsWithParams_Call{Call: _e.mock.On("GetVPCPeeringConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_GetVPCPeeringConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetVPCPeeringConnectionsApiParams)) *StreamsApi_GetVPCPeeringConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetVPCPeeringConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnectionsWithParams_Call) Return(_a0 admin.GetVPCPeeringConnectionsApiRequest) *StreamsApi_GetVPCPeeringConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_GetVPCPeeringConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetVPCPeeringConnectionsApiParams) admin.GetVPCPeeringConnectionsApiRequest) *StreamsApi_GetVPCPeeringConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnections provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) ListStreamConnections(ctx context.Context, groupId string, tenantName string) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnections")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnections'
type StreamsApi_ListStreamConnections_Call struct {
	*mock.Call
}

// ListStreamConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) ListStreamConnections(ctx interface{}, groupId interface{}, tenantName interface{}) *StreamsApi_ListStreamConnections_Call {
	return &StreamsApi_ListStreamConnections_Call{Call: _e.mock.On("ListStreamConnections", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_ListStreamConnections_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnections_Call) RunAndReturn(run func(context.Context, string, string) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamConnectionsExecute(r admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsExecute")
	}

	var r0 *admin.PaginatedApiStreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamConnectionsApiRequest) *admin.PaginatedApiStreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsExecute'
type StreamsApi_ListStreamConnectionsExecute_Call struct {
	*mock.Call
}

// ListStreamConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListStreamConnectionsApiRequest
func (_e *StreamsApi_Expecter) ListStreamConnectionsExecute(r interface{}) *StreamsApi_ListStreamConnectionsExecute_Call {
	return &StreamsApi_ListStreamConnectionsExecute_Call{Call: _e.mock.On("ListStreamConnectionsExecute", r)}
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Run(run func(r admin.ListStreamConnectionsApiRequest)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamConnectionsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsExecute_Call) RunAndReturn(run func(admin.ListStreamConnectionsApiRequest) (*admin.PaginatedApiStreamsConnection, *http.Response, error)) *StreamsApi_ListStreamConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamConnectionsWithParams(ctx context.Context, args *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamConnectionsWithParams")
	}

	var r0 admin.ListStreamConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamConnectionsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamConnectionsWithParams'
type StreamsApi_ListStreamConnectionsWithParams_Call struct {
	*mock.Call
}

// ListStreamConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamConnectionsApiParams
func (_e *StreamsApi_Expecter) ListStreamConnectionsWithParams(ctx interface{}, args interface{}) *StreamsApi_ListStreamConnectionsWithParams_Call {
	return &StreamsApi_ListStreamConnectionsWithParams_Call{Call: _e.mock.On("ListStreamConnectionsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamConnectionsApiParams)) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamConnectionsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) Return(_a0 admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamConnectionsApiParams) admin.ListStreamConnectionsApiRequest) *StreamsApi_ListStreamConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstances provides a mock function with given fields: ctx, groupId
func (_m *StreamsApi) ListStreamInstances(ctx context.Context, groupId string) admin.ListStreamInstancesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstances")
	}

	var r0 admin.ListStreamInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListStreamInstancesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListStreamInstancesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstances'
type StreamsApi_ListStreamInstances_Call struct {
	*mock.Call
}

// ListStreamInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *StreamsApi_Expecter) ListStreamInstances(ctx interface{}, groupId interface{}) *StreamsApi_ListStreamInstances_Call {
	return &StreamsApi_ListStreamInstances_Call{Call: _e.mock.On("ListStreamInstances", ctx, groupId)}
}

func (_c *StreamsApi_ListStreamInstances_Call) Run(run func(ctx context.Context, groupId string)) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstances_Call) Return(_a0 admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamInstances_Call) RunAndReturn(run func(context.Context, string) admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstancesExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamInstancesExecute(r admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstancesExecute")
	}

	var r0 *admin.PaginatedApiStreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamInstancesApiRequest) *admin.PaginatedApiStreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamInstancesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamInstancesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamInstancesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstancesExecute'
type StreamsApi_ListStreamInstancesExecute_Call struct {
	*mock.Call
}

// ListStreamInstancesExecute is a helper method to define mock.On call
//   - r admin.ListStreamInstancesApiRequest
func (_e *StreamsApi_Expecter) ListStreamInstancesExecute(r interface{}) *StreamsApi_ListStreamInstancesExecute_Call {
	return &StreamsApi_ListStreamInstancesExecute_Call{Call: _e.mock.On("ListStreamInstancesExecute", r)}
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) Run(run func(r admin.ListStreamInstancesApiRequest)) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamInstancesApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) Return(_a0 *admin.PaginatedApiStreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamInstancesExecute_Call) RunAndReturn(run func(admin.ListStreamInstancesApiRequest) (*admin.PaginatedApiStreamsTenant, *http.Response, error)) *StreamsApi_ListStreamInstancesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamInstancesWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamInstancesWithParams(ctx context.Context, args *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamInstancesWithParams")
	}

	var r0 admin.ListStreamInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamInstancesApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamInstancesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamInstancesWithParams'
type StreamsApi_ListStreamInstancesWithParams_Call struct {
	*mock.Call
}

// ListStreamInstancesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamInstancesApiParams
func (_e *StreamsApi_Expecter) ListStreamInstancesWithParams(ctx interface{}, args interface{}) *StreamsApi_ListStreamInstancesWithParams_Call {
	return &StreamsApi_ListStreamInstancesWithParams_Call{Call: _e.mock.On("ListStreamInstancesWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamInstancesApiParams)) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamInstancesApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) Return(_a0 admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamInstancesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamInstancesApiParams) admin.ListStreamInstancesApiRequest) *StreamsApi_ListStreamInstancesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamProcessors provides a mock function with given fields: ctx, groupId, tenantName
func (_m *StreamsApi) ListStreamProcessors(ctx context.Context, groupId string, tenantName string) admin.ListStreamProcessorsApiRequest {
	ret := _m.Called(ctx, groupId, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamProcessors")
	}

	var r0 admin.ListStreamProcessorsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListStreamProcessorsApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName)
	} else {
		r0 = ret.Get(0).(admin.ListStreamProcessorsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamProcessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamProcessors'
type StreamsApi_ListStreamProcessors_Call struct {
	*mock.Call
}

// ListStreamProcessors is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
func (_e *StreamsApi_Expecter) ListStreamProcessors(ctx interface{}, groupId interface{}, tenantName interface{}) *StreamsApi_ListStreamProcessors_Call {
	return &StreamsApi_ListStreamProcessors_Call{Call: _e.mock.On("ListStreamProcessors", ctx, groupId, tenantName)}
}

func (_c *StreamsApi_ListStreamProcessors_Call) Run(run func(ctx context.Context, groupId string, tenantName string)) *StreamsApi_ListStreamProcessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_ListStreamProcessors_Call) Return(_a0 admin.ListStreamProcessorsApiRequest) *StreamsApi_ListStreamProcessors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamProcessors_Call) RunAndReturn(run func(context.Context, string, string) admin.ListStreamProcessorsApiRequest) *StreamsApi_ListStreamProcessors_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamProcessorsExecute provides a mock function with given fields: r
func (_m *StreamsApi) ListStreamProcessorsExecute(r admin.ListStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamProcessorsExecute")
	}

	var r0 *admin.PaginatedApiStreamsStreamProcessorWithStats
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListStreamProcessorsApiRequest) *admin.PaginatedApiStreamsStreamProcessorWithStats); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiStreamsStreamProcessorWithStats)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListStreamProcessorsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListStreamProcessorsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_ListStreamProcessorsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamProcessorsExecute'
type StreamsApi_ListStreamProcessorsExecute_Call struct {
	*mock.Call
}

// ListStreamProcessorsExecute is a helper method to define mock.On call
//   - r admin.ListStreamProcessorsApiRequest
func (_e *StreamsApi_Expecter) ListStreamProcessorsExecute(r interface{}) *StreamsApi_ListStreamProcessorsExecute_Call {
	return &StreamsApi_ListStreamProcessorsExecute_Call{Call: _e.mock.On("ListStreamProcessorsExecute", r)}
}

func (_c *StreamsApi_ListStreamProcessorsExecute_Call) Run(run func(r admin.ListStreamProcessorsApiRequest)) *StreamsApi_ListStreamProcessorsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListStreamProcessorsApiRequest))
	})
	return _c
}

func (_c *StreamsApi_ListStreamProcessorsExecute_Call) Return(_a0 *admin.PaginatedApiStreamsStreamProcessorWithStats, _a1 *http.Response, _a2 error) *StreamsApi_ListStreamProcessorsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_ListStreamProcessorsExecute_Call) RunAndReturn(run func(admin.ListStreamProcessorsApiRequest) (*admin.PaginatedApiStreamsStreamProcessorWithStats, *http.Response, error)) *StreamsApi_ListStreamProcessorsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStreamProcessorsWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) ListStreamProcessorsWithParams(ctx context.Context, args *admin.ListStreamProcessorsApiParams) admin.ListStreamProcessorsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamProcessorsWithParams")
	}

	var r0 admin.ListStreamProcessorsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListStreamProcessorsApiParams) admin.ListStreamProcessorsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListStreamProcessorsApiRequest)
	}

	return r0
}

// StreamsApi_ListStreamProcessorsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStreamProcessorsWithParams'
type StreamsApi_ListStreamProcessorsWithParams_Call struct {
	*mock.Call
}

// ListStreamProcessorsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListStreamProcessorsApiParams
func (_e *StreamsApi_Expecter) ListStreamProcessorsWithParams(ctx interface{}, args interface{}) *StreamsApi_ListStreamProcessorsWithParams_Call {
	return &StreamsApi_ListStreamProcessorsWithParams_Call{Call: _e.mock.On("ListStreamProcessorsWithParams", ctx, args)}
}

func (_c *StreamsApi_ListStreamProcessorsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListStreamProcessorsApiParams)) *StreamsApi_ListStreamProcessorsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListStreamProcessorsApiParams))
	})
	return _c
}

func (_c *StreamsApi_ListStreamProcessorsWithParams_Call) Return(_a0 admin.ListStreamProcessorsApiRequest) *StreamsApi_ListStreamProcessorsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_ListStreamProcessorsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListStreamProcessorsApiParams) admin.ListStreamProcessorsApiRequest) *StreamsApi_ListStreamProcessorsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVPCPeeringConnection provides a mock function with given fields: ctx, groupId, id
func (_m *StreamsApi) RejectVPCPeeringConnection(ctx context.Context, groupId string, id string) admin.RejectVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, id)

	if len(ret) == 0 {
		panic("no return value specified for RejectVPCPeeringConnection")
	}

	var r0 admin.RejectVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RejectVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, id)
	} else {
		r0 = ret.Get(0).(admin.RejectVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVPCPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVPCPeeringConnection'
type StreamsApi_RejectVPCPeeringConnection_Call struct {
	*mock.Call
}

// RejectVPCPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - id string
func (_e *StreamsApi_Expecter) RejectVPCPeeringConnection(ctx interface{}, groupId interface{}, id interface{}) *StreamsApi_RejectVPCPeeringConnection_Call {
	return &StreamsApi_RejectVPCPeeringConnection_Call{Call: _e.mock.On("RejectVPCPeeringConnection", ctx, groupId, id)}
}

func (_c *StreamsApi_RejectVPCPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, id string)) *StreamsApi_RejectVPCPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnection_Call) Return(_a0 admin.RejectVPCPeeringConnectionApiRequest) *StreamsApi_RejectVPCPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.RejectVPCPeeringConnectionApiRequest) *StreamsApi_RejectVPCPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVPCPeeringConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) RejectVPCPeeringConnectionExecute(r admin.RejectVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RejectVPCPeeringConnectionExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RejectVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RejectVPCPeeringConnectionApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RejectVPCPeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RejectVPCPeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_RejectVPCPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVPCPeeringConnectionExecute'
type StreamsApi_RejectVPCPeeringConnectionExecute_Call struct {
	*mock.Call
}

// RejectVPCPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.RejectVPCPeeringConnectionApiRequest
func (_e *StreamsApi_Expecter) RejectVPCPeeringConnectionExecute(r interface{}) *StreamsApi_RejectVPCPeeringConnectionExecute_Call {
	return &StreamsApi_RejectVPCPeeringConnectionExecute_Call{Call: _e.mock.On("RejectVPCPeeringConnectionExecute", r)}
}

func (_c *StreamsApi_RejectVPCPeeringConnectionExecute_Call) Run(run func(r admin.RejectVPCPeeringConnectionApiRequest)) *StreamsApi_RejectVPCPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RejectVPCPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnectionExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_RejectVPCPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnectionExecute_Call) RunAndReturn(run func(admin.RejectVPCPeeringConnectionApiRequest) (interface{}, *http.Response, error)) *StreamsApi_RejectVPCPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RejectVPCPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) RejectVPCPeeringConnectionWithParams(ctx context.Context, args *admin.RejectVPCPeeringConnectionApiParams) admin.RejectVPCPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RejectVPCPeeringConnectionWithParams")
	}

	var r0 admin.RejectVPCPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RejectVPCPeeringConnectionApiParams) admin.RejectVPCPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RejectVPCPeeringConnectionApiRequest)
	}

	return r0
}

// StreamsApi_RejectVPCPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectVPCPeeringConnectionWithParams'
type StreamsApi_RejectVPCPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// RejectVPCPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RejectVPCPeeringConnectionApiParams
func (_e *StreamsApi_Expecter) RejectVPCPeeringConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_RejectVPCPeeringConnectionWithParams_Call {
	return &StreamsApi_RejectVPCPeeringConnectionWithParams_Call{Call: _e.mock.On("RejectVPCPeeringConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_RejectVPCPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.RejectVPCPeeringConnectionApiParams)) *StreamsApi_RejectVPCPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RejectVPCPeeringConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnectionWithParams_Call) Return(_a0 admin.RejectVPCPeeringConnectionApiRequest) *StreamsApi_RejectVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_RejectVPCPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.RejectVPCPeeringConnectionApiParams) admin.RejectVPCPeeringConnectionApiRequest) *StreamsApi_RejectVPCPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) StartStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.StartStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessor")
	}

	var r0 admin.StartStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.StartStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessor'
type StreamsApi_StartStreamProcessor_Call struct {
	*mock.Call
}

// StartStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) StartStreamProcessor(ctx interface{}, groupId interface{}, tenantName interface{}, processorName interface{}) *StreamsApi_StartStreamProcessor_Call {
	return &StreamsApi_StartStreamProcessor_Call{Call: _e.mock.On("StartStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_StartStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessor_Call) Return(_a0 admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) StartStreamProcessorExecute(r admin.StartStreamProcessorApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.StartStreamProcessorApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.StartStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.StartStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_StartStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorExecute'
type StreamsApi_StartStreamProcessorExecute_Call struct {
	*mock.Call
}

// StartStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.StartStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) StartStreamProcessorExecute(r interface{}) *StreamsApi_StartStreamProcessorExecute_Call {
	return &StreamsApi_StartStreamProcessorExecute_Call{Call: _e.mock.On("StartStreamProcessorExecute", r)}
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) Run(run func(r admin.StartStreamProcessorApiRequest)) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.StartStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorExecute_Call) RunAndReturn(run func(admin.StartStreamProcessorApiRequest) (interface{}, *http.Response, error)) *StreamsApi_StartStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// StartStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) StartStreamProcessorWithParams(ctx context.Context, args *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamProcessorWithParams")
	}

	var r0 admin.StartStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.StartStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StartStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStreamProcessorWithParams'
type StreamsApi_StartStreamProcessorWithParams_Call struct {
	*mock.Call
}

// StartStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.StartStreamProcessorApiParams
func (_e *StreamsApi_Expecter) StartStreamProcessorWithParams(ctx interface{}, args interface{}) *StreamsApi_StartStreamProcessorWithParams_Call {
	return &StreamsApi_StartStreamProcessorWithParams_Call{Call: _e.mock.On("StartStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.StartStreamProcessorApiParams)) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.StartStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) Return(_a0 admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StartStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.StartStreamProcessorApiParams) admin.StartStreamProcessorApiRequest) *StreamsApi_StartStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessor provides a mock function with given fields: ctx, groupId, tenantName, processorName
func (_m *StreamsApi) StopStreamProcessor(ctx context.Context, groupId string, tenantName string, processorName string) admin.StopStreamProcessorApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, processorName)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessor")
	}

	var r0 admin.StopStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.StopStreamProcessorApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, processorName)
	} else {
		r0 = ret.Get(0).(admin.StopStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StopStreamProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessor'
type StreamsApi_StopStreamProcessor_Call struct {
	*mock.Call
}

// StopStreamProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - processorName string
func (_e *StreamsApi_Expecter) StopStreamProcessor(ctx interface{}, groupId interface{}, tenantName interface{}, processorName interface{}) *StreamsApi_StopStreamProcessor_Call {
	return &StreamsApi_StopStreamProcessor_Call{Call: _e.mock.On("StopStreamProcessor", ctx, groupId, tenantName, processorName)}
}

func (_c *StreamsApi_StopStreamProcessor_Call) Run(run func(ctx context.Context, groupId string, tenantName string, processorName string)) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessor_Call) Return(_a0 admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StopStreamProcessor_Call) RunAndReturn(run func(context.Context, string, string, string) admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessorExecute provides a mock function with given fields: r
func (_m *StreamsApi) StopStreamProcessorExecute(r admin.StopStreamProcessorApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessorExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.StopStreamProcessorApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.StopStreamProcessorApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.StopStreamProcessorApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.StopStreamProcessorApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_StopStreamProcessorExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessorExecute'
type StreamsApi_StopStreamProcessorExecute_Call struct {
	*mock.Call
}

// StopStreamProcessorExecute is a helper method to define mock.On call
//   - r admin.StopStreamProcessorApiRequest
func (_e *StreamsApi_Expecter) StopStreamProcessorExecute(r interface{}) *StreamsApi_StopStreamProcessorExecute_Call {
	return &StreamsApi_StopStreamProcessorExecute_Call{Call: _e.mock.On("StopStreamProcessorExecute", r)}
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) Run(run func(r admin.StopStreamProcessorApiRequest)) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.StopStreamProcessorApiRequest))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_StopStreamProcessorExecute_Call) RunAndReturn(run func(admin.StopStreamProcessorApiRequest) (interface{}, *http.Response, error)) *StreamsApi_StopStreamProcessorExecute_Call {
	_c.Call.Return(run)
	return _c
}

// StopStreamProcessorWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) StopStreamProcessorWithParams(ctx context.Context, args *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamProcessorWithParams")
	}

	var r0 admin.StopStreamProcessorApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.StopStreamProcessorApiRequest)
	}

	return r0
}

// StreamsApi_StopStreamProcessorWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopStreamProcessorWithParams'
type StreamsApi_StopStreamProcessorWithParams_Call struct {
	*mock.Call
}

// StopStreamProcessorWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.StopStreamProcessorApiParams
func (_e *StreamsApi_Expecter) StopStreamProcessorWithParams(ctx interface{}, args interface{}) *StreamsApi_StopStreamProcessorWithParams_Call {
	return &StreamsApi_StopStreamProcessorWithParams_Call{Call: _e.mock.On("StopStreamProcessorWithParams", ctx, args)}
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) Run(run func(ctx context.Context, args *admin.StopStreamProcessorApiParams)) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.StopStreamProcessorApiParams))
	})
	return _c
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) Return(_a0 admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_StopStreamProcessorWithParams_Call) RunAndReturn(run func(context.Context, *admin.StopStreamProcessorApiParams) admin.StopStreamProcessorApiRequest) *StreamsApi_StopStreamProcessorWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnection provides a mock function with given fields: ctx, groupId, tenantName, connectionName, streamsConnection
func (_m *StreamsApi) UpdateStreamConnection(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, connectionName, streamsConnection)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnection")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, connectionName, streamsConnection)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnection'
type StreamsApi_UpdateStreamConnection_Call struct {
	*mock.Call
}

// UpdateStreamConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - connectionName string
//   - streamsConnection *admin.StreamsConnection
func (_e *StreamsApi_Expecter) UpdateStreamConnection(ctx interface{}, groupId interface{}, tenantName interface{}, connectionName interface{}, streamsConnection interface{}) *StreamsApi_UpdateStreamConnection_Call {
	return &StreamsApi_UpdateStreamConnection_Call{Call: _e.mock.On("UpdateStreamConnection", ctx, groupId, tenantName, connectionName, streamsConnection)}
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Run(run func(ctx context.Context, groupId string, tenantName string, connectionName string, streamsConnection *admin.StreamsConnection)) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.StreamsConnection))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnection_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.StreamsConnection) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamConnectionExecute(r admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionExecute")
	}

	var r0 *admin.StreamsConnection
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamConnectionApiRequest) *admin.StreamsConnection); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionExecute'
type StreamsApi_UpdateStreamConnectionExecute_Call struct {
	*mock.Call
}

// UpdateStreamConnectionExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamConnectionApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamConnectionExecute(r interface{}) *StreamsApi_UpdateStreamConnectionExecute_Call {
	return &StreamsApi_UpdateStreamConnectionExecute_Call{Call: _e.mock.On("UpdateStreamConnectionExecute", r)}
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Run(run func(r admin.UpdateStreamConnectionApiRequest)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamConnectionApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) Return(_a0 *admin.StreamsConnection, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionExecute_Call) RunAndReturn(run func(admin.UpdateStreamConnectionApiRequest) (*admin.StreamsConnection, *http.Response, error)) *StreamsApi_UpdateStreamConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamConnectionWithParams(ctx context.Context, args *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamConnectionWithParams")
	}

	var r0 admin.UpdateStreamConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamConnectionApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamConnectionWithParams'
type StreamsApi_UpdateStreamConnectionWithParams_Call struct {
	*mock.Call
}

// UpdateStreamConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamConnectionApiParams
func (_e *StreamsApi_Expecter) UpdateStreamConnectionWithParams(ctx interface{}, args interface{}) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	return &StreamsApi_UpdateStreamConnectionWithParams_Call{Call: _e.mock.On("UpdateStreamConnectionWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamConnectionApiParams)) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamConnectionApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) Return(_a0 admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamConnectionApiParams) admin.UpdateStreamConnectionApiRequest) *StreamsApi_UpdateStreamConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstance provides a mock function with given fields: ctx, groupId, tenantName, streamsDataProcessRegion
func (_m *StreamsApi) UpdateStreamInstance(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest {
	ret := _m.Called(ctx, groupId, tenantName, streamsDataProcessRegion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstance")
	}

	var r0 admin.UpdateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, tenantName, streamsDataProcessRegion)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstance'
type StreamsApi_UpdateStreamInstance_Call struct {
	*mock.Call
}

// UpdateStreamInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - tenantName string
//   - streamsDataProcessRegion *admin.StreamsDataProcessRegion
func (_e *StreamsApi_Expecter) UpdateStreamInstance(ctx interface{}, groupId interface{}, tenantName interface{}, streamsDataProcessRegion interface{}) *StreamsApi_UpdateStreamInstance_Call {
	return &StreamsApi_UpdateStreamInstance_Call{Call: _e.mock.On("UpdateStreamInstance", ctx, groupId, tenantName, streamsDataProcessRegion)}
}

func (_c *StreamsApi_UpdateStreamInstance_Call) Run(run func(ctx context.Context, groupId string, tenantName string, streamsDataProcessRegion *admin.StreamsDataProcessRegion)) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.StreamsDataProcessRegion))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstance_Call) Return(_a0 admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstance_Call) RunAndReturn(run func(context.Context, string, string, *admin.StreamsDataProcessRegion) admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstanceExecute provides a mock function with given fields: r
func (_m *StreamsApi) UpdateStreamInstanceExecute(r admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstanceExecute")
	}

	var r0 *admin.StreamsTenant
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateStreamInstanceApiRequest) *admin.StreamsTenant); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.StreamsTenant)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateStreamInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateStreamInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StreamsApi_UpdateStreamInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstanceExecute'
type StreamsApi_UpdateStreamInstanceExecute_Call struct {
	*mock.Call
}

// UpdateStreamInstanceExecute is a helper method to define mock.On call
//   - r admin.UpdateStreamInstanceApiRequest
func (_e *StreamsApi_Expecter) UpdateStreamInstanceExecute(r interface{}) *StreamsApi_UpdateStreamInstanceExecute_Call {
	return &StreamsApi_UpdateStreamInstanceExecute_Call{Call: _e.mock.On("UpdateStreamInstanceExecute", r)}
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) Run(run func(r admin.UpdateStreamInstanceApiRequest)) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateStreamInstanceApiRequest))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) Return(_a0 *admin.StreamsTenant, _a1 *http.Response, _a2 error) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceExecute_Call) RunAndReturn(run func(admin.UpdateStreamInstanceApiRequest) (*admin.StreamsTenant, *http.Response, error)) *StreamsApi_UpdateStreamInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStreamInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *StreamsApi) UpdateStreamInstanceWithParams(ctx context.Context, args *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamInstanceWithParams")
	}

	var r0 admin.UpdateStreamInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateStreamInstanceApiRequest)
	}

	return r0
}

// StreamsApi_UpdateStreamInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStreamInstanceWithParams'
type StreamsApi_UpdateStreamInstanceWithParams_Call struct {
	*mock.Call
}

// UpdateStreamInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateStreamInstanceApiParams
func (_e *StreamsApi_Expecter) UpdateStreamInstanceWithParams(ctx interface{}, args interface{}) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	return &StreamsApi_UpdateStreamInstanceWithParams_Call{Call: _e.mock.On("UpdateStreamInstanceWithParams", ctx, args)}
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateStreamInstanceApiParams)) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateStreamInstanceApiParams))
	})
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) Return(_a0 admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamsApi_UpdateStreamInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateStreamInstanceApiParams) admin.UpdateStreamInstanceApiRequest) *StreamsApi_UpdateStreamInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamsApi creates a new instance of StreamsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamsApi {
	mock := &StreamsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
