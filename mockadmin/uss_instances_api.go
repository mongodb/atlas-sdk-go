// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240805002/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// USSInstancesApi is an autogenerated mock type for the USSInstancesApi type
type USSInstancesApi struct {
	mock.Mock
}

type USSInstancesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *USSInstancesApi) EXPECT() *USSInstancesApi_Expecter {
	return &USSInstancesApi_Expecter{mock: &_m.Mock}
}

// CreateUSSInstance provides a mock function with given fields: ctx, groupId, uSSInstanceDescriptionCreate20250101
func (_m *USSInstancesApi) CreateUSSInstance(ctx context.Context, groupId string, uSSInstanceDescriptionCreate20250101 *admin.USSInstanceDescriptionCreate20250101) admin.CreateUSSInstanceApiRequest {
	ret := _m.Called(ctx, groupId, uSSInstanceDescriptionCreate20250101)

	if len(ret) == 0 {
		panic("no return value specified for CreateUSSInstance")
	}

	var r0 admin.CreateUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.USSInstanceDescriptionCreate20250101) admin.CreateUSSInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, uSSInstanceDescriptionCreate20250101)
	} else {
		r0 = ret.Get(0).(admin.CreateUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_CreateUSSInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUSSInstance'
type USSInstancesApi_CreateUSSInstance_Call struct {
	*mock.Call
}

// CreateUSSInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - uSSInstanceDescriptionCreate20250101 *admin.USSInstanceDescriptionCreate20250101
func (_e *USSInstancesApi_Expecter) CreateUSSInstance(ctx interface{}, groupId interface{}, uSSInstanceDescriptionCreate20250101 interface{}) *USSInstancesApi_CreateUSSInstance_Call {
	return &USSInstancesApi_CreateUSSInstance_Call{Call: _e.mock.On("CreateUSSInstance", ctx, groupId, uSSInstanceDescriptionCreate20250101)}
}

func (_c *USSInstancesApi_CreateUSSInstance_Call) Run(run func(ctx context.Context, groupId string, uSSInstanceDescriptionCreate20250101 *admin.USSInstanceDescriptionCreate20250101)) *USSInstancesApi_CreateUSSInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.USSInstanceDescriptionCreate20250101))
	})
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstance_Call) Return(_a0 admin.CreateUSSInstanceApiRequest) *USSInstancesApi_CreateUSSInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstance_Call) RunAndReturn(run func(context.Context, string, *admin.USSInstanceDescriptionCreate20250101) admin.CreateUSSInstanceApiRequest) *USSInstancesApi_CreateUSSInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUSSInstanceExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) CreateUSSInstanceExecute(r admin.CreateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateUSSInstanceExecute")
	}

	var r0 *admin.USSInstanceDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateUSSInstanceApiRequest) *admin.USSInstanceDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.USSInstanceDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateUSSInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateUSSInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_CreateUSSInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUSSInstanceExecute'
type USSInstancesApi_CreateUSSInstanceExecute_Call struct {
	*mock.Call
}

// CreateUSSInstanceExecute is a helper method to define mock.On call
//   - r admin.CreateUSSInstanceApiRequest
func (_e *USSInstancesApi_Expecter) CreateUSSInstanceExecute(r interface{}) *USSInstancesApi_CreateUSSInstanceExecute_Call {
	return &USSInstancesApi_CreateUSSInstanceExecute_Call{Call: _e.mock.On("CreateUSSInstanceExecute", r)}
}

func (_c *USSInstancesApi_CreateUSSInstanceExecute_Call) Run(run func(r admin.CreateUSSInstanceApiRequest)) *USSInstancesApi_CreateUSSInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateUSSInstanceApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstanceExecute_Call) Return(_a0 *admin.USSInstanceDescription20250101, _a1 *http.Response, _a2 error) *USSInstancesApi_CreateUSSInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstanceExecute_Call) RunAndReturn(run func(admin.CreateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)) *USSInstancesApi_CreateUSSInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUSSInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) CreateUSSInstanceWithParams(ctx context.Context, args *admin.CreateUSSInstanceApiParams) admin.CreateUSSInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateUSSInstanceWithParams")
	}

	var r0 admin.CreateUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateUSSInstanceApiParams) admin.CreateUSSInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_CreateUSSInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUSSInstanceWithParams'
type USSInstancesApi_CreateUSSInstanceWithParams_Call struct {
	*mock.Call
}

// CreateUSSInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateUSSInstanceApiParams
func (_e *USSInstancesApi_Expecter) CreateUSSInstanceWithParams(ctx interface{}, args interface{}) *USSInstancesApi_CreateUSSInstanceWithParams_Call {
	return &USSInstancesApi_CreateUSSInstanceWithParams_Call{Call: _e.mock.On("CreateUSSInstanceWithParams", ctx, args)}
}

func (_c *USSInstancesApi_CreateUSSInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateUSSInstanceApiParams)) *USSInstancesApi_CreateUSSInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateUSSInstanceApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstanceWithParams_Call) Return(_a0 admin.CreateUSSInstanceApiRequest) *USSInstancesApi_CreateUSSInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_CreateUSSInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateUSSInstanceApiParams) admin.CreateUSSInstanceApiRequest) *USSInstancesApi_CreateUSSInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUSSInstance provides a mock function with given fields: ctx, groupId, name
func (_m *USSInstancesApi) DeleteUSSInstance(ctx context.Context, groupId string, name string) admin.DeleteUSSInstanceApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUSSInstance")
	}

	var r0 admin.DeleteUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteUSSInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.DeleteUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_DeleteUSSInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUSSInstance'
type USSInstancesApi_DeleteUSSInstance_Call struct {
	*mock.Call
}

// DeleteUSSInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *USSInstancesApi_Expecter) DeleteUSSInstance(ctx interface{}, groupId interface{}, name interface{}) *USSInstancesApi_DeleteUSSInstance_Call {
	return &USSInstancesApi_DeleteUSSInstance_Call{Call: _e.mock.On("DeleteUSSInstance", ctx, groupId, name)}
}

func (_c *USSInstancesApi_DeleteUSSInstance_Call) Run(run func(ctx context.Context, groupId string, name string)) *USSInstancesApi_DeleteUSSInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstance_Call) Return(_a0 admin.DeleteUSSInstanceApiRequest) *USSInstancesApi_DeleteUSSInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteUSSInstanceApiRequest) *USSInstancesApi_DeleteUSSInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUSSInstanceExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) DeleteUSSInstanceExecute(r admin.DeleteUSSInstanceApiRequest) (interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUSSInstanceExecute")
	}

	var r0 interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteUSSInstanceApiRequest) (interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteUSSInstanceApiRequest) interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteUSSInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteUSSInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_DeleteUSSInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUSSInstanceExecute'
type USSInstancesApi_DeleteUSSInstanceExecute_Call struct {
	*mock.Call
}

// DeleteUSSInstanceExecute is a helper method to define mock.On call
//   - r admin.DeleteUSSInstanceApiRequest
func (_e *USSInstancesApi_Expecter) DeleteUSSInstanceExecute(r interface{}) *USSInstancesApi_DeleteUSSInstanceExecute_Call {
	return &USSInstancesApi_DeleteUSSInstanceExecute_Call{Call: _e.mock.On("DeleteUSSInstanceExecute", r)}
}

func (_c *USSInstancesApi_DeleteUSSInstanceExecute_Call) Run(run func(r admin.DeleteUSSInstanceApiRequest)) *USSInstancesApi_DeleteUSSInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteUSSInstanceApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstanceExecute_Call) Return(_a0 interface{}, _a1 *http.Response, _a2 error) *USSInstancesApi_DeleteUSSInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstanceExecute_Call) RunAndReturn(run func(admin.DeleteUSSInstanceApiRequest) (interface{}, *http.Response, error)) *USSInstancesApi_DeleteUSSInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUSSInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) DeleteUSSInstanceWithParams(ctx context.Context, args *admin.DeleteUSSInstanceApiParams) admin.DeleteUSSInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUSSInstanceWithParams")
	}

	var r0 admin.DeleteUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteUSSInstanceApiParams) admin.DeleteUSSInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_DeleteUSSInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUSSInstanceWithParams'
type USSInstancesApi_DeleteUSSInstanceWithParams_Call struct {
	*mock.Call
}

// DeleteUSSInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteUSSInstanceApiParams
func (_e *USSInstancesApi_Expecter) DeleteUSSInstanceWithParams(ctx interface{}, args interface{}) *USSInstancesApi_DeleteUSSInstanceWithParams_Call {
	return &USSInstancesApi_DeleteUSSInstanceWithParams_Call{Call: _e.mock.On("DeleteUSSInstanceWithParams", ctx, args)}
}

func (_c *USSInstancesApi_DeleteUSSInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteUSSInstanceApiParams)) *USSInstancesApi_DeleteUSSInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteUSSInstanceApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstanceWithParams_Call) Return(_a0 admin.DeleteUSSInstanceApiRequest) *USSInstancesApi_DeleteUSSInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_DeleteUSSInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteUSSInstanceApiParams) admin.DeleteUSSInstanceApiRequest) *USSInstancesApi_DeleteUSSInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUSSInstance provides a mock function with given fields: ctx, groupId, name
func (_m *USSInstancesApi) GetUSSInstance(ctx context.Context, groupId string, name string) admin.GetUSSInstanceApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUSSInstance")
	}

	var r0 admin.GetUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetUSSInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.GetUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_GetUSSInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUSSInstance'
type USSInstancesApi_GetUSSInstance_Call struct {
	*mock.Call
}

// GetUSSInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *USSInstancesApi_Expecter) GetUSSInstance(ctx interface{}, groupId interface{}, name interface{}) *USSInstancesApi_GetUSSInstance_Call {
	return &USSInstancesApi_GetUSSInstance_Call{Call: _e.mock.On("GetUSSInstance", ctx, groupId, name)}
}

func (_c *USSInstancesApi_GetUSSInstance_Call) Run(run func(ctx context.Context, groupId string, name string)) *USSInstancesApi_GetUSSInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *USSInstancesApi_GetUSSInstance_Call) Return(_a0 admin.GetUSSInstanceApiRequest) *USSInstancesApi_GetUSSInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_GetUSSInstance_Call) RunAndReturn(run func(context.Context, string, string) admin.GetUSSInstanceApiRequest) *USSInstancesApi_GetUSSInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetUSSInstanceExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) GetUSSInstanceExecute(r admin.GetUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUSSInstanceExecute")
	}

	var r0 *admin.USSInstanceDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUSSInstanceApiRequest) *admin.USSInstanceDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.USSInstanceDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUSSInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUSSInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_GetUSSInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUSSInstanceExecute'
type USSInstancesApi_GetUSSInstanceExecute_Call struct {
	*mock.Call
}

// GetUSSInstanceExecute is a helper method to define mock.On call
//   - r admin.GetUSSInstanceApiRequest
func (_e *USSInstancesApi_Expecter) GetUSSInstanceExecute(r interface{}) *USSInstancesApi_GetUSSInstanceExecute_Call {
	return &USSInstancesApi_GetUSSInstanceExecute_Call{Call: _e.mock.On("GetUSSInstanceExecute", r)}
}

func (_c *USSInstancesApi_GetUSSInstanceExecute_Call) Run(run func(r admin.GetUSSInstanceApiRequest)) *USSInstancesApi_GetUSSInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUSSInstanceApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_GetUSSInstanceExecute_Call) Return(_a0 *admin.USSInstanceDescription20250101, _a1 *http.Response, _a2 error) *USSInstancesApi_GetUSSInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_GetUSSInstanceExecute_Call) RunAndReturn(run func(admin.GetUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)) *USSInstancesApi_GetUSSInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUSSInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) GetUSSInstanceWithParams(ctx context.Context, args *admin.GetUSSInstanceApiParams) admin.GetUSSInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUSSInstanceWithParams")
	}

	var r0 admin.GetUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUSSInstanceApiParams) admin.GetUSSInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_GetUSSInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUSSInstanceWithParams'
type USSInstancesApi_GetUSSInstanceWithParams_Call struct {
	*mock.Call
}

// GetUSSInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUSSInstanceApiParams
func (_e *USSInstancesApi_Expecter) GetUSSInstanceWithParams(ctx interface{}, args interface{}) *USSInstancesApi_GetUSSInstanceWithParams_Call {
	return &USSInstancesApi_GetUSSInstanceWithParams_Call{Call: _e.mock.On("GetUSSInstanceWithParams", ctx, args)}
}

func (_c *USSInstancesApi_GetUSSInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUSSInstanceApiParams)) *USSInstancesApi_GetUSSInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUSSInstanceApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_GetUSSInstanceWithParams_Call) Return(_a0 admin.GetUSSInstanceApiRequest) *USSInstancesApi_GetUSSInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_GetUSSInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUSSInstanceApiParams) admin.GetUSSInstanceApiRequest) *USSInstancesApi_GetUSSInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListUSSInstances provides a mock function with given fields: ctx, groupId
func (_m *USSInstancesApi) ListUSSInstances(ctx context.Context, groupId string) admin.ListUSSInstancesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListUSSInstances")
	}

	var r0 admin.ListUSSInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListUSSInstancesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListUSSInstancesApiRequest)
	}

	return r0
}

// USSInstancesApi_ListUSSInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUSSInstances'
type USSInstancesApi_ListUSSInstances_Call struct {
	*mock.Call
}

// ListUSSInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *USSInstancesApi_Expecter) ListUSSInstances(ctx interface{}, groupId interface{}) *USSInstancesApi_ListUSSInstances_Call {
	return &USSInstancesApi_ListUSSInstances_Call{Call: _e.mock.On("ListUSSInstances", ctx, groupId)}
}

func (_c *USSInstancesApi_ListUSSInstances_Call) Run(run func(ctx context.Context, groupId string)) *USSInstancesApi_ListUSSInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *USSInstancesApi_ListUSSInstances_Call) Return(_a0 admin.ListUSSInstancesApiRequest) *USSInstancesApi_ListUSSInstances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_ListUSSInstances_Call) RunAndReturn(run func(context.Context, string) admin.ListUSSInstancesApiRequest) *USSInstancesApi_ListUSSInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListUSSInstancesExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) ListUSSInstancesExecute(r admin.ListUSSInstancesApiRequest) (*admin.PaginatedUSSInstance20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListUSSInstancesExecute")
	}

	var r0 *admin.PaginatedUSSInstance20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListUSSInstancesApiRequest) (*admin.PaginatedUSSInstance20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListUSSInstancesApiRequest) *admin.PaginatedUSSInstance20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedUSSInstance20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListUSSInstancesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListUSSInstancesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_ListUSSInstancesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUSSInstancesExecute'
type USSInstancesApi_ListUSSInstancesExecute_Call struct {
	*mock.Call
}

// ListUSSInstancesExecute is a helper method to define mock.On call
//   - r admin.ListUSSInstancesApiRequest
func (_e *USSInstancesApi_Expecter) ListUSSInstancesExecute(r interface{}) *USSInstancesApi_ListUSSInstancesExecute_Call {
	return &USSInstancesApi_ListUSSInstancesExecute_Call{Call: _e.mock.On("ListUSSInstancesExecute", r)}
}

func (_c *USSInstancesApi_ListUSSInstancesExecute_Call) Run(run func(r admin.ListUSSInstancesApiRequest)) *USSInstancesApi_ListUSSInstancesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListUSSInstancesApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_ListUSSInstancesExecute_Call) Return(_a0 *admin.PaginatedUSSInstance20250101, _a1 *http.Response, _a2 error) *USSInstancesApi_ListUSSInstancesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_ListUSSInstancesExecute_Call) RunAndReturn(run func(admin.ListUSSInstancesApiRequest) (*admin.PaginatedUSSInstance20250101, *http.Response, error)) *USSInstancesApi_ListUSSInstancesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListUSSInstancesWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) ListUSSInstancesWithParams(ctx context.Context, args *admin.ListUSSInstancesApiParams) admin.ListUSSInstancesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListUSSInstancesWithParams")
	}

	var r0 admin.ListUSSInstancesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListUSSInstancesApiParams) admin.ListUSSInstancesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListUSSInstancesApiRequest)
	}

	return r0
}

// USSInstancesApi_ListUSSInstancesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUSSInstancesWithParams'
type USSInstancesApi_ListUSSInstancesWithParams_Call struct {
	*mock.Call
}

// ListUSSInstancesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListUSSInstancesApiParams
func (_e *USSInstancesApi_Expecter) ListUSSInstancesWithParams(ctx interface{}, args interface{}) *USSInstancesApi_ListUSSInstancesWithParams_Call {
	return &USSInstancesApi_ListUSSInstancesWithParams_Call{Call: _e.mock.On("ListUSSInstancesWithParams", ctx, args)}
}

func (_c *USSInstancesApi_ListUSSInstancesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListUSSInstancesApiParams)) *USSInstancesApi_ListUSSInstancesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListUSSInstancesApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_ListUSSInstancesWithParams_Call) Return(_a0 admin.ListUSSInstancesApiRequest) *USSInstancesApi_ListUSSInstancesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_ListUSSInstancesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListUSSInstancesApiParams) admin.ListUSSInstancesApiRequest) *USSInstancesApi_ListUSSInstancesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUSSInstance provides a mock function with given fields: ctx, groupId, name, uSSInstanceDescription20250101
func (_m *USSInstancesApi) UpdateUSSInstance(ctx context.Context, groupId string, name string, uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101) admin.UpdateUSSInstanceApiRequest {
	ret := _m.Called(ctx, groupId, name, uSSInstanceDescription20250101)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUSSInstance")
	}

	var r0 admin.UpdateUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.USSInstanceDescription20250101) admin.UpdateUSSInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, name, uSSInstanceDescription20250101)
	} else {
		r0 = ret.Get(0).(admin.UpdateUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_UpdateUSSInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUSSInstance'
type USSInstancesApi_UpdateUSSInstance_Call struct {
	*mock.Call
}

// UpdateUSSInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
//   - uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101
func (_e *USSInstancesApi_Expecter) UpdateUSSInstance(ctx interface{}, groupId interface{}, name interface{}, uSSInstanceDescription20250101 interface{}) *USSInstancesApi_UpdateUSSInstance_Call {
	return &USSInstancesApi_UpdateUSSInstance_Call{Call: _e.mock.On("UpdateUSSInstance", ctx, groupId, name, uSSInstanceDescription20250101)}
}

func (_c *USSInstancesApi_UpdateUSSInstance_Call) Run(run func(ctx context.Context, groupId string, name string, uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101)) *USSInstancesApi_UpdateUSSInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.USSInstanceDescription20250101))
	})
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstance_Call) Return(_a0 admin.UpdateUSSInstanceApiRequest) *USSInstancesApi_UpdateUSSInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstance_Call) RunAndReturn(run func(context.Context, string, string, *admin.USSInstanceDescription20250101) admin.UpdateUSSInstanceApiRequest) *USSInstancesApi_UpdateUSSInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUSSInstanceExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) UpdateUSSInstanceExecute(r admin.UpdateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUSSInstanceExecute")
	}

	var r0 *admin.USSInstanceDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateUSSInstanceApiRequest) *admin.USSInstanceDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.USSInstanceDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateUSSInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateUSSInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_UpdateUSSInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUSSInstanceExecute'
type USSInstancesApi_UpdateUSSInstanceExecute_Call struct {
	*mock.Call
}

// UpdateUSSInstanceExecute is a helper method to define mock.On call
//   - r admin.UpdateUSSInstanceApiRequest
func (_e *USSInstancesApi_Expecter) UpdateUSSInstanceExecute(r interface{}) *USSInstancesApi_UpdateUSSInstanceExecute_Call {
	return &USSInstancesApi_UpdateUSSInstanceExecute_Call{Call: _e.mock.On("UpdateUSSInstanceExecute", r)}
}

func (_c *USSInstancesApi_UpdateUSSInstanceExecute_Call) Run(run func(r admin.UpdateUSSInstanceApiRequest)) *USSInstancesApi_UpdateUSSInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateUSSInstanceApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstanceExecute_Call) Return(_a0 *admin.USSInstanceDescription20250101, _a1 *http.Response, _a2 error) *USSInstancesApi_UpdateUSSInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstanceExecute_Call) RunAndReturn(run func(admin.UpdateUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)) *USSInstancesApi_UpdateUSSInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUSSInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) UpdateUSSInstanceWithParams(ctx context.Context, args *admin.UpdateUSSInstanceApiParams) admin.UpdateUSSInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUSSInstanceWithParams")
	}

	var r0 admin.UpdateUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateUSSInstanceApiParams) admin.UpdateUSSInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_UpdateUSSInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUSSInstanceWithParams'
type USSInstancesApi_UpdateUSSInstanceWithParams_Call struct {
	*mock.Call
}

// UpdateUSSInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateUSSInstanceApiParams
func (_e *USSInstancesApi_Expecter) UpdateUSSInstanceWithParams(ctx interface{}, args interface{}) *USSInstancesApi_UpdateUSSInstanceWithParams_Call {
	return &USSInstancesApi_UpdateUSSInstanceWithParams_Call{Call: _e.mock.On("UpdateUSSInstanceWithParams", ctx, args)}
}

func (_c *USSInstancesApi_UpdateUSSInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateUSSInstanceApiParams)) *USSInstancesApi_UpdateUSSInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateUSSInstanceApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstanceWithParams_Call) Return(_a0 admin.UpdateUSSInstanceApiRequest) *USSInstancesApi_UpdateUSSInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_UpdateUSSInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateUSSInstanceApiParams) admin.UpdateUSSInstanceApiRequest) *USSInstancesApi_UpdateUSSInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeUSSInstance provides a mock function with given fields: ctx, groupId, uSSInstanceDescription20250101
func (_m *USSInstancesApi) UpgradeUSSInstance(ctx context.Context, groupId string, uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101) admin.UpgradeUSSInstanceApiRequest {
	ret := _m.Called(ctx, groupId, uSSInstanceDescription20250101)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeUSSInstance")
	}

	var r0 admin.UpgradeUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.USSInstanceDescription20250101) admin.UpgradeUSSInstanceApiRequest); ok {
		r0 = rf(ctx, groupId, uSSInstanceDescription20250101)
	} else {
		r0 = ret.Get(0).(admin.UpgradeUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_UpgradeUSSInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeUSSInstance'
type USSInstancesApi_UpgradeUSSInstance_Call struct {
	*mock.Call
}

// UpgradeUSSInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101
func (_e *USSInstancesApi_Expecter) UpgradeUSSInstance(ctx interface{}, groupId interface{}, uSSInstanceDescription20250101 interface{}) *USSInstancesApi_UpgradeUSSInstance_Call {
	return &USSInstancesApi_UpgradeUSSInstance_Call{Call: _e.mock.On("UpgradeUSSInstance", ctx, groupId, uSSInstanceDescription20250101)}
}

func (_c *USSInstancesApi_UpgradeUSSInstance_Call) Run(run func(ctx context.Context, groupId string, uSSInstanceDescription20250101 *admin.USSInstanceDescription20250101)) *USSInstancesApi_UpgradeUSSInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.USSInstanceDescription20250101))
	})
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstance_Call) Return(_a0 admin.UpgradeUSSInstanceApiRequest) *USSInstancesApi_UpgradeUSSInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstance_Call) RunAndReturn(run func(context.Context, string, *admin.USSInstanceDescription20250101) admin.UpgradeUSSInstanceApiRequest) *USSInstancesApi_UpgradeUSSInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeUSSInstanceExecute provides a mock function with given fields: r
func (_m *USSInstancesApi) UpgradeUSSInstanceExecute(r admin.UpgradeUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeUSSInstanceExecute")
	}

	var r0 *admin.USSInstanceDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpgradeUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpgradeUSSInstanceApiRequest) *admin.USSInstanceDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.USSInstanceDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpgradeUSSInstanceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpgradeUSSInstanceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// USSInstancesApi_UpgradeUSSInstanceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeUSSInstanceExecute'
type USSInstancesApi_UpgradeUSSInstanceExecute_Call struct {
	*mock.Call
}

// UpgradeUSSInstanceExecute is a helper method to define mock.On call
//   - r admin.UpgradeUSSInstanceApiRequest
func (_e *USSInstancesApi_Expecter) UpgradeUSSInstanceExecute(r interface{}) *USSInstancesApi_UpgradeUSSInstanceExecute_Call {
	return &USSInstancesApi_UpgradeUSSInstanceExecute_Call{Call: _e.mock.On("UpgradeUSSInstanceExecute", r)}
}

func (_c *USSInstancesApi_UpgradeUSSInstanceExecute_Call) Run(run func(r admin.UpgradeUSSInstanceApiRequest)) *USSInstancesApi_UpgradeUSSInstanceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpgradeUSSInstanceApiRequest))
	})
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstanceExecute_Call) Return(_a0 *admin.USSInstanceDescription20250101, _a1 *http.Response, _a2 error) *USSInstancesApi_UpgradeUSSInstanceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstanceExecute_Call) RunAndReturn(run func(admin.UpgradeUSSInstanceApiRequest) (*admin.USSInstanceDescription20250101, *http.Response, error)) *USSInstancesApi_UpgradeUSSInstanceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeUSSInstanceWithParams provides a mock function with given fields: ctx, args
func (_m *USSInstancesApi) UpgradeUSSInstanceWithParams(ctx context.Context, args *admin.UpgradeUSSInstanceApiParams) admin.UpgradeUSSInstanceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeUSSInstanceWithParams")
	}

	var r0 admin.UpgradeUSSInstanceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpgradeUSSInstanceApiParams) admin.UpgradeUSSInstanceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpgradeUSSInstanceApiRequest)
	}

	return r0
}

// USSInstancesApi_UpgradeUSSInstanceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeUSSInstanceWithParams'
type USSInstancesApi_UpgradeUSSInstanceWithParams_Call struct {
	*mock.Call
}

// UpgradeUSSInstanceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpgradeUSSInstanceApiParams
func (_e *USSInstancesApi_Expecter) UpgradeUSSInstanceWithParams(ctx interface{}, args interface{}) *USSInstancesApi_UpgradeUSSInstanceWithParams_Call {
	return &USSInstancesApi_UpgradeUSSInstanceWithParams_Call{Call: _e.mock.On("UpgradeUSSInstanceWithParams", ctx, args)}
}

func (_c *USSInstancesApi_UpgradeUSSInstanceWithParams_Call) Run(run func(ctx context.Context, args *admin.UpgradeUSSInstanceApiParams)) *USSInstancesApi_UpgradeUSSInstanceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpgradeUSSInstanceApiParams))
	})
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstanceWithParams_Call) Return(_a0 admin.UpgradeUSSInstanceApiRequest) *USSInstancesApi_UpgradeUSSInstanceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *USSInstancesApi_UpgradeUSSInstanceWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpgradeUSSInstanceApiParams) admin.UpgradeUSSInstanceApiRequest) *USSInstancesApi_UpgradeUSSInstanceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewUSSInstancesApi creates a new instance of USSInstancesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUSSInstancesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *USSInstancesApi {
	mock := &USSInstancesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
