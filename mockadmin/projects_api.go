// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ProjectsApi is an autogenerated mock type for the ProjectsApi type
type ProjectsApi struct {
	mock.Mock
}

type ProjectsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectsApi) EXPECT() *ProjectsApi_Expecter {
	return &ProjectsApi_Expecter{mock: &_m.Mock}
}

// AddGroupUser provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) AddGroupUser(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.AddGroupUserApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUser")
	}

	var r0 admin.AddGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.AddGroupUserApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUserApiRequest)
	}

	return r0
}

// ProjectsApi_AddGroupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUser'
type ProjectsApi_AddGroupUser_Call struct {
	*mock.Call
}

// AddGroupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) AddGroupUser(ctx any, groupId any, groupInvitationRequest any) *ProjectsApi_AddGroupUser_Call {
	return &ProjectsApi_AddGroupUser_Call{Call: _e.mock.On("AddGroupUser", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_AddGroupUser_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_AddGroupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_AddGroupUser_Call) Return(_a0 admin.AddGroupUserApiRequest) *ProjectsApi_AddGroupUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_AddGroupUser_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.AddGroupUserApiRequest) *ProjectsApi_AddGroupUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUserExecute provides a mock function with given fields: r
func (_m *ProjectsApi) AddGroupUserExecute(r admin.AddGroupUserApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUserExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddGroupUserApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddGroupUserApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddGroupUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddGroupUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_AddGroupUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUserExecute'
type ProjectsApi_AddGroupUserExecute_Call struct {
	*mock.Call
}

// AddGroupUserExecute is a helper method to define mock.On call
//   - r admin.AddGroupUserApiRequest
func (_e *ProjectsApi_Expecter) AddGroupUserExecute(r any) *ProjectsApi_AddGroupUserExecute_Call {
	return &ProjectsApi_AddGroupUserExecute_Call{Call: _e.mock.On("AddGroupUserExecute", r)}
}

func (_c *ProjectsApi_AddGroupUserExecute_Call) Run(run func(r admin.AddGroupUserApiRequest)) *ProjectsApi_AddGroupUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddGroupUserApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_AddGroupUserExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_AddGroupUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_AddGroupUserExecute_Call) RunAndReturn(run func(admin.AddGroupUserApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *ProjectsApi_AddGroupUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUserWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) AddGroupUserWithParams(ctx context.Context, args *admin.AddGroupUserApiParams) admin.AddGroupUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUserWithParams")
	}

	var r0 admin.AddGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddGroupUserApiParams) admin.AddGroupUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUserApiRequest)
	}

	return r0
}

// ProjectsApi_AddGroupUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUserWithParams'
type ProjectsApi_AddGroupUserWithParams_Call struct {
	*mock.Call
}

// AddGroupUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddGroupUserApiParams
func (_e *ProjectsApi_Expecter) AddGroupUserWithParams(ctx any, args any) *ProjectsApi_AddGroupUserWithParams_Call {
	return &ProjectsApi_AddGroupUserWithParams_Call{Call: _e.mock.On("AddGroupUserWithParams", ctx, args)}
}

func (_c *ProjectsApi_AddGroupUserWithParams_Call) Run(run func(ctx context.Context, args *admin.AddGroupUserApiParams)) *ProjectsApi_AddGroupUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddGroupUserApiParams))
	})
	return _c
}

func (_c *ProjectsApi_AddGroupUserWithParams_Call) Return(_a0 admin.AddGroupUserApiRequest) *ProjectsApi_AddGroupUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_AddGroupUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddGroupUserApiParams) admin.AddGroupUserApiRequest) *ProjectsApi_AddGroupUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: ctx, group
func (_m *ProjectsApi) CreateGroup(ctx context.Context, group *admin.Group) admin.CreateGroupApiRequest {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 admin.CreateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Group) admin.CreateGroupApiRequest); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type ProjectsApi_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - group *admin.Group
func (_e *ProjectsApi_Expecter) CreateGroup(ctx any, group any) *ProjectsApi_CreateGroup_Call {
	return &ProjectsApi_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, group)}
}

func (_c *ProjectsApi_CreateGroup_Call) Run(run func(ctx context.Context, group *admin.Group)) *ProjectsApi_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.Group))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroup_Call) Return(_a0 admin.CreateGroupApiRequest) *ProjectsApi_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateGroup_Call) RunAndReturn(run func(context.Context, *admin.Group) admin.CreateGroupApiRequest) *ProjectsApi_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupExecute provides a mock function with given fields: r
func (_m *ProjectsApi) CreateGroupExecute(r admin.CreateGroupApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_CreateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupExecute'
type ProjectsApi_CreateGroupExecute_Call struct {
	*mock.Call
}

// CreateGroupExecute is a helper method to define mock.On call
//   - r admin.CreateGroupApiRequest
func (_e *ProjectsApi_Expecter) CreateGroupExecute(r any) *ProjectsApi_CreateGroupExecute_Call {
	return &ProjectsApi_CreateGroupExecute_Call{Call: _e.mock.On("CreateGroupExecute", r)}
}

func (_c *ProjectsApi_CreateGroupExecute_Call) Run(run func(r admin.CreateGroupApiRequest)) *ProjectsApi_CreateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroupExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_CreateGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_CreateGroupExecute_Call) RunAndReturn(run func(admin.CreateGroupApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_CreateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupInvite provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) CreateGroupInvite(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.CreateGroupInviteApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupInvite")
	}

	var r0 admin.CreateGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.CreateGroupInviteApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_CreateGroupInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupInvite'
type ProjectsApi_CreateGroupInvite_Call struct {
	*mock.Call
}

// CreateGroupInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) CreateGroupInvite(ctx any, groupId any, groupInvitationRequest any) *ProjectsApi_CreateGroupInvite_Call {
	return &ProjectsApi_CreateGroupInvite_Call{Call: _e.mock.On("CreateGroupInvite", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_CreateGroupInvite_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_CreateGroupInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroupInvite_Call) Return(_a0 admin.CreateGroupInviteApiRequest) *ProjectsApi_CreateGroupInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateGroupInvite_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.CreateGroupInviteApiRequest) *ProjectsApi_CreateGroupInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupInviteExecute provides a mock function with given fields: r
func (_m *ProjectsApi) CreateGroupInviteExecute(r admin.CreateGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupInviteExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupInviteApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupInviteApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupInviteApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_CreateGroupInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupInviteExecute'
type ProjectsApi_CreateGroupInviteExecute_Call struct {
	*mock.Call
}

// CreateGroupInviteExecute is a helper method to define mock.On call
//   - r admin.CreateGroupInviteApiRequest
func (_e *ProjectsApi_Expecter) CreateGroupInviteExecute(r any) *ProjectsApi_CreateGroupInviteExecute_Call {
	return &ProjectsApi_CreateGroupInviteExecute_Call{Call: _e.mock.On("CreateGroupInviteExecute", r)}
}

func (_c *ProjectsApi_CreateGroupInviteExecute_Call) Run(run func(r admin.CreateGroupInviteApiRequest)) *ProjectsApi_CreateGroupInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupInviteApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroupInviteExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_CreateGroupInviteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_CreateGroupInviteExecute_Call) RunAndReturn(run func(admin.CreateGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_CreateGroupInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupInviteWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) CreateGroupInviteWithParams(ctx context.Context, args *admin.CreateGroupInviteApiParams) admin.CreateGroupInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupInviteWithParams")
	}

	var r0 admin.CreateGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupInviteApiParams) admin.CreateGroupInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_CreateGroupInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupInviteWithParams'
type ProjectsApi_CreateGroupInviteWithParams_Call struct {
	*mock.Call
}

// CreateGroupInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupInviteApiParams
func (_e *ProjectsApi_Expecter) CreateGroupInviteWithParams(ctx any, args any) *ProjectsApi_CreateGroupInviteWithParams_Call {
	return &ProjectsApi_CreateGroupInviteWithParams_Call{Call: _e.mock.On("CreateGroupInviteWithParams", ctx, args)}
}

func (_c *ProjectsApi_CreateGroupInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupInviteApiParams)) *ProjectsApi_CreateGroupInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupInviteApiParams))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroupInviteWithParams_Call) Return(_a0 admin.CreateGroupInviteApiRequest) *ProjectsApi_CreateGroupInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateGroupInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupInviteApiParams) admin.CreateGroupInviteApiRequest) *ProjectsApi_CreateGroupInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) CreateGroupWithParams(ctx context.Context, args *admin.CreateGroupApiParams) admin.CreateGroupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupWithParams")
	}

	var r0 admin.CreateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupApiParams) admin.CreateGroupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_CreateGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupWithParams'
type ProjectsApi_CreateGroupWithParams_Call struct {
	*mock.Call
}

// CreateGroupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupApiParams
func (_e *ProjectsApi_Expecter) CreateGroupWithParams(ctx any, args any) *ProjectsApi_CreateGroupWithParams_Call {
	return &ProjectsApi_CreateGroupWithParams_Call{Call: _e.mock.On("CreateGroupWithParams", ctx, args)}
}

func (_c *ProjectsApi_CreateGroupWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupApiParams)) *ProjectsApi_CreateGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupApiParams))
	})
	return _c
}

func (_c *ProjectsApi_CreateGroupWithParams_Call) Return(_a0 admin.CreateGroupApiRequest) *ProjectsApi_CreateGroupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateGroupWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupApiParams) admin.CreateGroupApiRequest) *ProjectsApi_CreateGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) DeleteGroup(ctx context.Context, groupId string) admin.DeleteGroupApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 admin.DeleteGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteGroupApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type ProjectsApi_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) DeleteGroup(ctx any, groupId any) *ProjectsApi_DeleteGroup_Call {
	return &ProjectsApi_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, groupId)}
}

func (_c *ProjectsApi_DeleteGroup_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroup_Call) Return(_a0 admin.DeleteGroupApiRequest) *ProjectsApi_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroup_Call) RunAndReturn(run func(context.Context, string) admin.DeleteGroupApiRequest) *ProjectsApi_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteGroupExecute(r admin.DeleteGroupApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsApi_DeleteGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupExecute'
type ProjectsApi_DeleteGroupExecute_Call struct {
	*mock.Call
}

// DeleteGroupExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupApiRequest
func (_e *ProjectsApi_Expecter) DeleteGroupExecute(r any) *ProjectsApi_DeleteGroupExecute_Call {
	return &ProjectsApi_DeleteGroupExecute_Call{Call: _e.mock.On("DeleteGroupExecute", r)}
}

func (_c *ProjectsApi_DeleteGroupExecute_Call) Run(run func(r admin.DeleteGroupApiRequest)) *ProjectsApi_DeleteGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupExecute_Call) Return(_a0 *http.Response, _a1 error) *ProjectsApi_DeleteGroupExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectsApi_DeleteGroupExecute_Call) RunAndReturn(run func(admin.DeleteGroupApiRequest) (*http.Response, error)) *ProjectsApi_DeleteGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupInvite provides a mock function with given fields: ctx, groupId, invitationId
func (_m *ProjectsApi) DeleteGroupInvite(ctx context.Context, groupId string, invitationId string) admin.DeleteGroupInviteApiRequest {
	ret := _m.Called(ctx, groupId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupInvite")
	}

	var r0 admin.DeleteGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupInviteApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroupInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupInvite'
type ProjectsApi_DeleteGroupInvite_Call struct {
	*mock.Call
}

// DeleteGroupInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
func (_e *ProjectsApi_Expecter) DeleteGroupInvite(ctx any, groupId any, invitationId any) *ProjectsApi_DeleteGroupInvite_Call {
	return &ProjectsApi_DeleteGroupInvite_Call{Call: _e.mock.On("DeleteGroupInvite", ctx, groupId, invitationId)}
}

func (_c *ProjectsApi_DeleteGroupInvite_Call) Run(run func(ctx context.Context, groupId string, invitationId string)) *ProjectsApi_DeleteGroupInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupInvite_Call) Return(_a0 admin.DeleteGroupInviteApiRequest) *ProjectsApi_DeleteGroupInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroupInvite_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupInviteApiRequest) *ProjectsApi_DeleteGroupInvite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupInviteExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteGroupInviteExecute(r admin.DeleteGroupInviteApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupInviteExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupInviteApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupInviteApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupInviteApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsApi_DeleteGroupInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupInviteExecute'
type ProjectsApi_DeleteGroupInviteExecute_Call struct {
	*mock.Call
}

// DeleteGroupInviteExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupInviteApiRequest
func (_e *ProjectsApi_Expecter) DeleteGroupInviteExecute(r any) *ProjectsApi_DeleteGroupInviteExecute_Call {
	return &ProjectsApi_DeleteGroupInviteExecute_Call{Call: _e.mock.On("DeleteGroupInviteExecute", r)}
}

func (_c *ProjectsApi_DeleteGroupInviteExecute_Call) Run(run func(r admin.DeleteGroupInviteApiRequest)) *ProjectsApi_DeleteGroupInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupInviteApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupInviteExecute_Call) Return(_a0 *http.Response, _a1 error) *ProjectsApi_DeleteGroupInviteExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectsApi_DeleteGroupInviteExecute_Call) RunAndReturn(run func(admin.DeleteGroupInviteApiRequest) (*http.Response, error)) *ProjectsApi_DeleteGroupInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupInviteWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteGroupInviteWithParams(ctx context.Context, args *admin.DeleteGroupInviteApiParams) admin.DeleteGroupInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupInviteWithParams")
	}

	var r0 admin.DeleteGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupInviteApiParams) admin.DeleteGroupInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroupInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupInviteWithParams'
type ProjectsApi_DeleteGroupInviteWithParams_Call struct {
	*mock.Call
}

// DeleteGroupInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupInviteApiParams
func (_e *ProjectsApi_Expecter) DeleteGroupInviteWithParams(ctx any, args any) *ProjectsApi_DeleteGroupInviteWithParams_Call {
	return &ProjectsApi_DeleteGroupInviteWithParams_Call{Call: _e.mock.On("DeleteGroupInviteWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteGroupInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupInviteApiParams)) *ProjectsApi_DeleteGroupInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupInviteApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupInviteWithParams_Call) Return(_a0 admin.DeleteGroupInviteApiRequest) *ProjectsApi_DeleteGroupInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroupInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupInviteApiParams) admin.DeleteGroupInviteApiRequest) *ProjectsApi_DeleteGroupInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupLimit provides a mock function with given fields: ctx, limitName, groupId
func (_m *ProjectsApi) DeleteGroupLimit(ctx context.Context, limitName string, groupId string) admin.DeleteGroupLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupLimit")
	}

	var r0 admin.DeleteGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroupLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupLimit'
type ProjectsApi_DeleteGroupLimit_Call struct {
	*mock.Call
}

// DeleteGroupLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
func (_e *ProjectsApi_Expecter) DeleteGroupLimit(ctx any, limitName any, groupId any) *ProjectsApi_DeleteGroupLimit_Call {
	return &ProjectsApi_DeleteGroupLimit_Call{Call: _e.mock.On("DeleteGroupLimit", ctx, limitName, groupId)}
}

func (_c *ProjectsApi_DeleteGroupLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string)) *ProjectsApi_DeleteGroupLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimit_Call) Return(_a0 admin.DeleteGroupLimitApiRequest) *ProjectsApi_DeleteGroupLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimit_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupLimitApiRequest) *ProjectsApi_DeleteGroupLimit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteGroupLimitExecute(r admin.DeleteGroupLimitApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupLimitExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupLimitApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupLimitApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupLimitApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsApi_DeleteGroupLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupLimitExecute'
type ProjectsApi_DeleteGroupLimitExecute_Call struct {
	*mock.Call
}

// DeleteGroupLimitExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupLimitApiRequest
func (_e *ProjectsApi_Expecter) DeleteGroupLimitExecute(r any) *ProjectsApi_DeleteGroupLimitExecute_Call {
	return &ProjectsApi_DeleteGroupLimitExecute_Call{Call: _e.mock.On("DeleteGroupLimitExecute", r)}
}

func (_c *ProjectsApi_DeleteGroupLimitExecute_Call) Run(run func(r admin.DeleteGroupLimitApiRequest)) *ProjectsApi_DeleteGroupLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimitExecute_Call) Return(_a0 *http.Response, _a1 error) *ProjectsApi_DeleteGroupLimitExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimitExecute_Call) RunAndReturn(run func(admin.DeleteGroupLimitApiRequest) (*http.Response, error)) *ProjectsApi_DeleteGroupLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteGroupLimitWithParams(ctx context.Context, args *admin.DeleteGroupLimitApiParams) admin.DeleteGroupLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupLimitWithParams")
	}

	var r0 admin.DeleteGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupLimitApiParams) admin.DeleteGroupLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroupLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupLimitWithParams'
type ProjectsApi_DeleteGroupLimitWithParams_Call struct {
	*mock.Call
}

// DeleteGroupLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupLimitApiParams
func (_e *ProjectsApi_Expecter) DeleteGroupLimitWithParams(ctx any, args any) *ProjectsApi_DeleteGroupLimitWithParams_Call {
	return &ProjectsApi_DeleteGroupLimitWithParams_Call{Call: _e.mock.On("DeleteGroupLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteGroupLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupLimitApiParams)) *ProjectsApi_DeleteGroupLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimitWithParams_Call) Return(_a0 admin.DeleteGroupLimitApiRequest) *ProjectsApi_DeleteGroupLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroupLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupLimitApiParams) admin.DeleteGroupLimitApiRequest) *ProjectsApi_DeleteGroupLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteGroupWithParams(ctx context.Context, args *admin.DeleteGroupApiParams) admin.DeleteGroupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupWithParams")
	}

	var r0 admin.DeleteGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupApiParams) admin.DeleteGroupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupWithParams'
type ProjectsApi_DeleteGroupWithParams_Call struct {
	*mock.Call
}

// DeleteGroupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupApiParams
func (_e *ProjectsApi_Expecter) DeleteGroupWithParams(ctx any, args any) *ProjectsApi_DeleteGroupWithParams_Call {
	return &ProjectsApi_DeleteGroupWithParams_Call{Call: _e.mock.On("DeleteGroupWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteGroupWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupApiParams)) *ProjectsApi_DeleteGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteGroupWithParams_Call) Return(_a0 admin.DeleteGroupApiRequest) *ProjectsApi_DeleteGroupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteGroupWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupApiParams) admin.DeleteGroupApiRequest) *ProjectsApi_DeleteGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetGroup(ctx context.Context, groupId string) admin.GetGroupApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 admin.GetGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetGroupApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ProjectsApi_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetGroup(ctx any, groupId any) *ProjectsApi_GetGroup_Call {
	return &ProjectsApi_GetGroup_Call{Call: _e.mock.On("GetGroup", ctx, groupId)}
}

func (_c *ProjectsApi_GetGroup_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroup_Call) Return(_a0 admin.GetGroupApiRequest) *ProjectsApi_GetGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroup_Call) RunAndReturn(run func(context.Context, string) admin.GetGroupApiRequest) *ProjectsApi_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByName provides a mock function with given fields: ctx, groupName
func (_m *ProjectsApi) GetGroupByName(ctx context.Context, groupName string) admin.GetGroupByNameApiRequest {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByName")
	}

	var r0 admin.GetGroupByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetGroupByNameApiRequest); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(admin.GetGroupByNameApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByName'
type ProjectsApi_GetGroupByName_Call struct {
	*mock.Call
}

// GetGroupByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *ProjectsApi_Expecter) GetGroupByName(ctx any, groupName any) *ProjectsApi_GetGroupByName_Call {
	return &ProjectsApi_GetGroupByName_Call{Call: _e.mock.On("GetGroupByName", ctx, groupName)}
}

func (_c *ProjectsApi_GetGroupByName_Call) Run(run func(ctx context.Context, groupName string)) *ProjectsApi_GetGroupByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupByName_Call) Return(_a0 admin.GetGroupByNameApiRequest) *ProjectsApi_GetGroupByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupByName_Call) RunAndReturn(run func(context.Context, string) admin.GetGroupByNameApiRequest) *ProjectsApi_GetGroupByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByNameExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupByNameExecute(r admin.GetGroupByNameApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByNameExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupByNameApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupByNameApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByNameExecute'
type ProjectsApi_GetGroupByNameExecute_Call struct {
	*mock.Call
}

// GetGroupByNameExecute is a helper method to define mock.On call
//   - r admin.GetGroupByNameApiRequest
func (_e *ProjectsApi_Expecter) GetGroupByNameExecute(r any) *ProjectsApi_GetGroupByNameExecute_Call {
	return &ProjectsApi_GetGroupByNameExecute_Call{Call: _e.mock.On("GetGroupByNameExecute", r)}
}

func (_c *ProjectsApi_GetGroupByNameExecute_Call) Run(run func(r admin.GetGroupByNameApiRequest)) *ProjectsApi_GetGroupByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupByNameApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupByNameExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupByNameExecute_Call) RunAndReturn(run func(admin.GetGroupByNameApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_GetGroupByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByNameWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupByNameWithParams(ctx context.Context, args *admin.GetGroupByNameApiParams) admin.GetGroupByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByNameWithParams")
	}

	var r0 admin.GetGroupByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupByNameApiParams) admin.GetGroupByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupByNameApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByNameWithParams'
type ProjectsApi_GetGroupByNameWithParams_Call struct {
	*mock.Call
}

// GetGroupByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupByNameApiParams
func (_e *ProjectsApi_Expecter) GetGroupByNameWithParams(ctx any, args any) *ProjectsApi_GetGroupByNameWithParams_Call {
	return &ProjectsApi_GetGroupByNameWithParams_Call{Call: _e.mock.On("GetGroupByNameWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupByNameApiParams)) *ProjectsApi_GetGroupByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupByNameApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupByNameWithParams_Call) Return(_a0 admin.GetGroupByNameApiRequest) *ProjectsApi_GetGroupByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupByNameApiParams) admin.GetGroupByNameApiRequest) *ProjectsApi_GetGroupByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupExecute(r admin.GetGroupApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupExecute'
type ProjectsApi_GetGroupExecute_Call struct {
	*mock.Call
}

// GetGroupExecute is a helper method to define mock.On call
//   - r admin.GetGroupApiRequest
func (_e *ProjectsApi_Expecter) GetGroupExecute(r any) *ProjectsApi_GetGroupExecute_Call {
	return &ProjectsApi_GetGroupExecute_Call{Call: _e.mock.On("GetGroupExecute", r)}
}

func (_c *ProjectsApi_GetGroupExecute_Call) Run(run func(r admin.GetGroupApiRequest)) *ProjectsApi_GetGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupExecute_Call) RunAndReturn(run func(admin.GetGroupApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_GetGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupInvite provides a mock function with given fields: ctx, groupId, invitationId
func (_m *ProjectsApi) GetGroupInvite(ctx context.Context, groupId string, invitationId string) admin.GetGroupInviteApiRequest {
	ret := _m.Called(ctx, groupId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupInvite")
	}

	var r0 admin.GetGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupInviteApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupInvite'
type ProjectsApi_GetGroupInvite_Call struct {
	*mock.Call
}

// GetGroupInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
func (_e *ProjectsApi_Expecter) GetGroupInvite(ctx any, groupId any, invitationId any) *ProjectsApi_GetGroupInvite_Call {
	return &ProjectsApi_GetGroupInvite_Call{Call: _e.mock.On("GetGroupInvite", ctx, groupId, invitationId)}
}

func (_c *ProjectsApi_GetGroupInvite_Call) Run(run func(ctx context.Context, groupId string, invitationId string)) *ProjectsApi_GetGroupInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupInvite_Call) Return(_a0 admin.GetGroupInviteApiRequest) *ProjectsApi_GetGroupInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupInvite_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupInviteApiRequest) *ProjectsApi_GetGroupInvite_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupInviteExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupInviteExecute(r admin.GetGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupInviteExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupInviteApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupInviteApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupInviteApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupInviteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupInviteExecute'
type ProjectsApi_GetGroupInviteExecute_Call struct {
	*mock.Call
}

// GetGroupInviteExecute is a helper method to define mock.On call
//   - r admin.GetGroupInviteApiRequest
func (_e *ProjectsApi_Expecter) GetGroupInviteExecute(r any) *ProjectsApi_GetGroupInviteExecute_Call {
	return &ProjectsApi_GetGroupInviteExecute_Call{Call: _e.mock.On("GetGroupInviteExecute", r)}
}

func (_c *ProjectsApi_GetGroupInviteExecute_Call) Run(run func(r admin.GetGroupInviteApiRequest)) *ProjectsApi_GetGroupInviteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupInviteApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupInviteExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupInviteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupInviteExecute_Call) RunAndReturn(run func(admin.GetGroupInviteApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_GetGroupInviteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupInviteWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupInviteWithParams(ctx context.Context, args *admin.GetGroupInviteApiParams) admin.GetGroupInviteApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupInviteWithParams")
	}

	var r0 admin.GetGroupInviteApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupInviteApiParams) admin.GetGroupInviteApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupInviteApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupInviteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupInviteWithParams'
type ProjectsApi_GetGroupInviteWithParams_Call struct {
	*mock.Call
}

// GetGroupInviteWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupInviteApiParams
func (_e *ProjectsApi_Expecter) GetGroupInviteWithParams(ctx any, args any) *ProjectsApi_GetGroupInviteWithParams_Call {
	return &ProjectsApi_GetGroupInviteWithParams_Call{Call: _e.mock.On("GetGroupInviteWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupInviteWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupInviteApiParams)) *ProjectsApi_GetGroupInviteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupInviteApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupInviteWithParams_Call) Return(_a0 admin.GetGroupInviteApiRequest) *ProjectsApi_GetGroupInviteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupInviteWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupInviteApiParams) admin.GetGroupInviteApiRequest) *ProjectsApi_GetGroupInviteWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIpAddresses provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetGroupIpAddresses(ctx context.Context, groupId string) admin.GetGroupIpAddressesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIpAddresses")
	}

	var r0 admin.GetGroupIpAddressesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetGroupIpAddressesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupIpAddressesApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupIpAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIpAddresses'
type ProjectsApi_GetGroupIpAddresses_Call struct {
	*mock.Call
}

// GetGroupIpAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetGroupIpAddresses(ctx any, groupId any) *ProjectsApi_GetGroupIpAddresses_Call {
	return &ProjectsApi_GetGroupIpAddresses_Call{Call: _e.mock.On("GetGroupIpAddresses", ctx, groupId)}
}

func (_c *ProjectsApi_GetGroupIpAddresses_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetGroupIpAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddresses_Call) Return(_a0 admin.GetGroupIpAddressesApiRequest) *ProjectsApi_GetGroupIpAddresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddresses_Call) RunAndReturn(run func(context.Context, string) admin.GetGroupIpAddressesApiRequest) *ProjectsApi_GetGroupIpAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIpAddressesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupIpAddressesExecute(r admin.GetGroupIpAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIpAddressesExecute")
	}

	var r0 *admin.GroupIPAddresses
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupIpAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupIpAddressesApiRequest) *admin.GroupIPAddresses); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupIPAddresses)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupIpAddressesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupIpAddressesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupIpAddressesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIpAddressesExecute'
type ProjectsApi_GetGroupIpAddressesExecute_Call struct {
	*mock.Call
}

// GetGroupIpAddressesExecute is a helper method to define mock.On call
//   - r admin.GetGroupIpAddressesApiRequest
func (_e *ProjectsApi_Expecter) GetGroupIpAddressesExecute(r any) *ProjectsApi_GetGroupIpAddressesExecute_Call {
	return &ProjectsApi_GetGroupIpAddressesExecute_Call{Call: _e.mock.On("GetGroupIpAddressesExecute", r)}
}

func (_c *ProjectsApi_GetGroupIpAddressesExecute_Call) Run(run func(r admin.GetGroupIpAddressesApiRequest)) *ProjectsApi_GetGroupIpAddressesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupIpAddressesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddressesExecute_Call) Return(_a0 *admin.GroupIPAddresses, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupIpAddressesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddressesExecute_Call) RunAndReturn(run func(admin.GetGroupIpAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error)) *ProjectsApi_GetGroupIpAddressesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIpAddressesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupIpAddressesWithParams(ctx context.Context, args *admin.GetGroupIpAddressesApiParams) admin.GetGroupIpAddressesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIpAddressesWithParams")
	}

	var r0 admin.GetGroupIpAddressesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupIpAddressesApiParams) admin.GetGroupIpAddressesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupIpAddressesApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupIpAddressesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIpAddressesWithParams'
type ProjectsApi_GetGroupIpAddressesWithParams_Call struct {
	*mock.Call
}

// GetGroupIpAddressesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupIpAddressesApiParams
func (_e *ProjectsApi_Expecter) GetGroupIpAddressesWithParams(ctx any, args any) *ProjectsApi_GetGroupIpAddressesWithParams_Call {
	return &ProjectsApi_GetGroupIpAddressesWithParams_Call{Call: _e.mock.On("GetGroupIpAddressesWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupIpAddressesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupIpAddressesApiParams)) *ProjectsApi_GetGroupIpAddressesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupIpAddressesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddressesWithParams_Call) Return(_a0 admin.GetGroupIpAddressesApiRequest) *ProjectsApi_GetGroupIpAddressesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupIpAddressesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupIpAddressesApiParams) admin.GetGroupIpAddressesApiRequest) *ProjectsApi_GetGroupIpAddressesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupLimit provides a mock function with given fields: ctx, limitName, groupId
func (_m *ProjectsApi) GetGroupLimit(ctx context.Context, limitName string, groupId string) admin.GetGroupLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupLimit")
	}

	var r0 admin.GetGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupLimit'
type ProjectsApi_GetGroupLimit_Call struct {
	*mock.Call
}

// GetGroupLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
func (_e *ProjectsApi_Expecter) GetGroupLimit(ctx any, limitName any, groupId any) *ProjectsApi_GetGroupLimit_Call {
	return &ProjectsApi_GetGroupLimit_Call{Call: _e.mock.On("GetGroupLimit", ctx, limitName, groupId)}
}

func (_c *ProjectsApi_GetGroupLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string)) *ProjectsApi_GetGroupLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupLimit_Call) Return(_a0 admin.GetGroupLimitApiRequest) *ProjectsApi_GetGroupLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupLimit_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupLimitApiRequest) *ProjectsApi_GetGroupLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupLimitExecute(r admin.GetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupLimitExecute")
	}

	var r0 *admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupLimitApiRequest) *admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupLimitExecute'
type ProjectsApi_GetGroupLimitExecute_Call struct {
	*mock.Call
}

// GetGroupLimitExecute is a helper method to define mock.On call
//   - r admin.GetGroupLimitApiRequest
func (_e *ProjectsApi_Expecter) GetGroupLimitExecute(r any) *ProjectsApi_GetGroupLimitExecute_Call {
	return &ProjectsApi_GetGroupLimitExecute_Call{Call: _e.mock.On("GetGroupLimitExecute", r)}
}

func (_c *ProjectsApi_GetGroupLimitExecute_Call) Run(run func(r admin.GetGroupLimitApiRequest)) *ProjectsApi_GetGroupLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupLimitExecute_Call) Return(_a0 *admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupLimitExecute_Call) RunAndReturn(run func(admin.GetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_GetGroupLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupLimitWithParams(ctx context.Context, args *admin.GetGroupLimitApiParams) admin.GetGroupLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupLimitWithParams")
	}

	var r0 admin.GetGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupLimitApiParams) admin.GetGroupLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupLimitWithParams'
type ProjectsApi_GetGroupLimitWithParams_Call struct {
	*mock.Call
}

// GetGroupLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupLimitApiParams
func (_e *ProjectsApi_Expecter) GetGroupLimitWithParams(ctx any, args any) *ProjectsApi_GetGroupLimitWithParams_Call {
	return &ProjectsApi_GetGroupLimitWithParams_Call{Call: _e.mock.On("GetGroupLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupLimitApiParams)) *ProjectsApi_GetGroupLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupLimitWithParams_Call) Return(_a0 admin.GetGroupLimitApiRequest) *ProjectsApi_GetGroupLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupLimitApiParams) admin.GetGroupLimitApiRequest) *ProjectsApi_GetGroupLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettings provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetGroupSettings(ctx context.Context, groupId string) admin.GetGroupSettingsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettings")
	}

	var r0 admin.GetGroupSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetGroupSettingsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettings'
type ProjectsApi_GetGroupSettings_Call struct {
	*mock.Call
}

// GetGroupSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetGroupSettings(ctx any, groupId any) *ProjectsApi_GetGroupSettings_Call {
	return &ProjectsApi_GetGroupSettings_Call{Call: _e.mock.On("GetGroupSettings", ctx, groupId)}
}

func (_c *ProjectsApi_GetGroupSettings_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetGroupSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupSettings_Call) Return(_a0 admin.GetGroupSettingsApiRequest) *ProjectsApi_GetGroupSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupSettings_Call) RunAndReturn(run func(context.Context, string) admin.GetGroupSettingsApiRequest) *ProjectsApi_GetGroupSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettingsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetGroupSettingsExecute(r admin.GetGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettingsExecute")
	}

	var r0 *admin.GroupSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupSettingsApiRequest) *admin.GroupSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetGroupSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettingsExecute'
type ProjectsApi_GetGroupSettingsExecute_Call struct {
	*mock.Call
}

// GetGroupSettingsExecute is a helper method to define mock.On call
//   - r admin.GetGroupSettingsApiRequest
func (_e *ProjectsApi_Expecter) GetGroupSettingsExecute(r any) *ProjectsApi_GetGroupSettingsExecute_Call {
	return &ProjectsApi_GetGroupSettingsExecute_Call{Call: _e.mock.On("GetGroupSettingsExecute", r)}
}

func (_c *ProjectsApi_GetGroupSettingsExecute_Call) Run(run func(r admin.GetGroupSettingsApiRequest)) *ProjectsApi_GetGroupSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupSettingsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupSettingsExecute_Call) Return(_a0 *admin.GroupSettings, _a1 *http.Response, _a2 error) *ProjectsApi_GetGroupSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetGroupSettingsExecute_Call) RunAndReturn(run func(admin.GetGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)) *ProjectsApi_GetGroupSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupSettingsWithParams(ctx context.Context, args *admin.GetGroupSettingsApiParams) admin.GetGroupSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupSettingsWithParams")
	}

	var r0 admin.GetGroupSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupSettingsApiParams) admin.GetGroupSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupSettingsWithParams'
type ProjectsApi_GetGroupSettingsWithParams_Call struct {
	*mock.Call
}

// GetGroupSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupSettingsApiParams
func (_e *ProjectsApi_Expecter) GetGroupSettingsWithParams(ctx any, args any) *ProjectsApi_GetGroupSettingsWithParams_Call {
	return &ProjectsApi_GetGroupSettingsWithParams_Call{Call: _e.mock.On("GetGroupSettingsWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupSettingsApiParams)) *ProjectsApi_GetGroupSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupSettingsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupSettingsWithParams_Call) Return(_a0 admin.GetGroupSettingsApiRequest) *ProjectsApi_GetGroupSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupSettingsApiParams) admin.GetGroupSettingsApiRequest) *ProjectsApi_GetGroupSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetGroupWithParams(ctx context.Context, args *admin.GetGroupApiParams) admin.GetGroupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupWithParams")
	}

	var r0 admin.GetGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupApiParams) admin.GetGroupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupApiRequest)
	}

	return r0
}

// ProjectsApi_GetGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupWithParams'
type ProjectsApi_GetGroupWithParams_Call struct {
	*mock.Call
}

// GetGroupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupApiParams
func (_e *ProjectsApi_Expecter) GetGroupWithParams(ctx any, args any) *ProjectsApi_GetGroupWithParams_Call {
	return &ProjectsApi_GetGroupWithParams_Call{Call: _e.mock.On("GetGroupWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetGroupWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupApiParams)) *ProjectsApi_GetGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetGroupWithParams_Call) Return(_a0 admin.GetGroupApiRequest) *ProjectsApi_GetGroupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetGroupWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupApiParams) admin.GetGroupApiRequest) *ProjectsApi_GetGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDbVersions provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetMongoDbVersions(ctx context.Context, groupId string) admin.GetMongoDbVersionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDbVersions")
	}

	var r0 admin.GetMongoDbVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetMongoDbVersionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetMongoDbVersionsApiRequest)
	}

	return r0
}

// ProjectsApi_GetMongoDbVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDbVersions'
type ProjectsApi_GetMongoDbVersions_Call struct {
	*mock.Call
}

// GetMongoDbVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetMongoDbVersions(ctx any, groupId any) *ProjectsApi_GetMongoDbVersions_Call {
	return &ProjectsApi_GetMongoDbVersions_Call{Call: _e.mock.On("GetMongoDbVersions", ctx, groupId)}
}

func (_c *ProjectsApi_GetMongoDbVersions_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetMongoDbVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersions_Call) Return(_a0 admin.GetMongoDbVersionsApiRequest) *ProjectsApi_GetMongoDbVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersions_Call) RunAndReturn(run func(context.Context, string) admin.GetMongoDbVersionsApiRequest) *ProjectsApi_GetMongoDbVersions_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDbVersionsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetMongoDbVersionsExecute(r admin.GetMongoDbVersionsApiRequest) (*admin.PaginatedAvailableVersion, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDbVersionsExecute")
	}

	var r0 *admin.PaginatedAvailableVersion
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetMongoDbVersionsApiRequest) (*admin.PaginatedAvailableVersion, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetMongoDbVersionsApiRequest) *admin.PaginatedAvailableVersion); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAvailableVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetMongoDbVersionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetMongoDbVersionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetMongoDbVersionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDbVersionsExecute'
type ProjectsApi_GetMongoDbVersionsExecute_Call struct {
	*mock.Call
}

// GetMongoDbVersionsExecute is a helper method to define mock.On call
//   - r admin.GetMongoDbVersionsApiRequest
func (_e *ProjectsApi_Expecter) GetMongoDbVersionsExecute(r any) *ProjectsApi_GetMongoDbVersionsExecute_Call {
	return &ProjectsApi_GetMongoDbVersionsExecute_Call{Call: _e.mock.On("GetMongoDbVersionsExecute", r)}
}

func (_c *ProjectsApi_GetMongoDbVersionsExecute_Call) Run(run func(r admin.GetMongoDbVersionsApiRequest)) *ProjectsApi_GetMongoDbVersionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetMongoDbVersionsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersionsExecute_Call) Return(_a0 *admin.PaginatedAvailableVersion, _a1 *http.Response, _a2 error) *ProjectsApi_GetMongoDbVersionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersionsExecute_Call) RunAndReturn(run func(admin.GetMongoDbVersionsApiRequest) (*admin.PaginatedAvailableVersion, *http.Response, error)) *ProjectsApi_GetMongoDbVersionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDbVersionsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetMongoDbVersionsWithParams(ctx context.Context, args *admin.GetMongoDbVersionsApiParams) admin.GetMongoDbVersionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDbVersionsWithParams")
	}

	var r0 admin.GetMongoDbVersionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetMongoDbVersionsApiParams) admin.GetMongoDbVersionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetMongoDbVersionsApiRequest)
	}

	return r0
}

// ProjectsApi_GetMongoDbVersionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDbVersionsWithParams'
type ProjectsApi_GetMongoDbVersionsWithParams_Call struct {
	*mock.Call
}

// GetMongoDbVersionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetMongoDbVersionsApiParams
func (_e *ProjectsApi_Expecter) GetMongoDbVersionsWithParams(ctx any, args any) *ProjectsApi_GetMongoDbVersionsWithParams_Call {
	return &ProjectsApi_GetMongoDbVersionsWithParams_Call{Call: _e.mock.On("GetMongoDbVersionsWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetMongoDbVersionsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetMongoDbVersionsApiParams)) *ProjectsApi_GetMongoDbVersionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetMongoDbVersionsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersionsWithParams_Call) Return(_a0 admin.GetMongoDbVersionsApiRequest) *ProjectsApi_GetMongoDbVersionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetMongoDbVersionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetMongoDbVersionsApiParams) admin.GetMongoDbVersionsApiRequest) *ProjectsApi_GetMongoDbVersionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupInvites provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ListGroupInvites(ctx context.Context, groupId string) admin.ListGroupInvitesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupInvites")
	}

	var r0 admin.ListGroupInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupInvitesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupInvitesApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroupInvites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupInvites'
type ProjectsApi_ListGroupInvites_Call struct {
	*mock.Call
}

// ListGroupInvites is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ListGroupInvites(ctx any, groupId any) *ProjectsApi_ListGroupInvites_Call {
	return &ProjectsApi_ListGroupInvites_Call{Call: _e.mock.On("ListGroupInvites", ctx, groupId)}
}

func (_c *ProjectsApi_ListGroupInvites_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ListGroupInvites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupInvites_Call) Return(_a0 admin.ListGroupInvitesApiRequest) *ProjectsApi_ListGroupInvites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroupInvites_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupInvitesApiRequest) *ProjectsApi_ListGroupInvites_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupInvitesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListGroupInvitesExecute(r admin.ListGroupInvitesApiRequest) ([]admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupInvitesExecute")
	}

	var r0 []admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupInvitesApiRequest) ([]admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupInvitesApiRequest) []admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupInvitesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupInvitesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListGroupInvitesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupInvitesExecute'
type ProjectsApi_ListGroupInvitesExecute_Call struct {
	*mock.Call
}

// ListGroupInvitesExecute is a helper method to define mock.On call
//   - r admin.ListGroupInvitesApiRequest
func (_e *ProjectsApi_Expecter) ListGroupInvitesExecute(r any) *ProjectsApi_ListGroupInvitesExecute_Call {
	return &ProjectsApi_ListGroupInvitesExecute_Call{Call: _e.mock.On("ListGroupInvitesExecute", r)}
}

func (_c *ProjectsApi_ListGroupInvitesExecute_Call) Run(run func(r admin.ListGroupInvitesApiRequest)) *ProjectsApi_ListGroupInvitesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupInvitesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupInvitesExecute_Call) Return(_a0 []admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_ListGroupInvitesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListGroupInvitesExecute_Call) RunAndReturn(run func(admin.ListGroupInvitesApiRequest) ([]admin.GroupInvitation, *http.Response, error)) *ProjectsApi_ListGroupInvitesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupInvitesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListGroupInvitesWithParams(ctx context.Context, args *admin.ListGroupInvitesApiParams) admin.ListGroupInvitesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupInvitesWithParams")
	}

	var r0 admin.ListGroupInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupInvitesApiParams) admin.ListGroupInvitesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupInvitesApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroupInvitesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupInvitesWithParams'
type ProjectsApi_ListGroupInvitesWithParams_Call struct {
	*mock.Call
}

// ListGroupInvitesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupInvitesApiParams
func (_e *ProjectsApi_Expecter) ListGroupInvitesWithParams(ctx any, args any) *ProjectsApi_ListGroupInvitesWithParams_Call {
	return &ProjectsApi_ListGroupInvitesWithParams_Call{Call: _e.mock.On("ListGroupInvitesWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListGroupInvitesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupInvitesApiParams)) *ProjectsApi_ListGroupInvitesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupInvitesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupInvitesWithParams_Call) Return(_a0 admin.ListGroupInvitesApiRequest) *ProjectsApi_ListGroupInvitesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroupInvitesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupInvitesApiParams) admin.ListGroupInvitesApiRequest) *ProjectsApi_ListGroupInvitesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupLimits provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ListGroupLimits(ctx context.Context, groupId string) admin.ListGroupLimitsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupLimits")
	}

	var r0 admin.ListGroupLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupLimitsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupLimitsApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroupLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupLimits'
type ProjectsApi_ListGroupLimits_Call struct {
	*mock.Call
}

// ListGroupLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ListGroupLimits(ctx any, groupId any) *ProjectsApi_ListGroupLimits_Call {
	return &ProjectsApi_ListGroupLimits_Call{Call: _e.mock.On("ListGroupLimits", ctx, groupId)}
}

func (_c *ProjectsApi_ListGroupLimits_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ListGroupLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupLimits_Call) Return(_a0 admin.ListGroupLimitsApiRequest) *ProjectsApi_ListGroupLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroupLimits_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupLimitsApiRequest) *ProjectsApi_ListGroupLimits_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupLimitsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListGroupLimitsExecute(r admin.ListGroupLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupLimitsExecute")
	}

	var r0 []admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupLimitsApiRequest) []admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupLimitsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupLimitsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListGroupLimitsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupLimitsExecute'
type ProjectsApi_ListGroupLimitsExecute_Call struct {
	*mock.Call
}

// ListGroupLimitsExecute is a helper method to define mock.On call
//   - r admin.ListGroupLimitsApiRequest
func (_e *ProjectsApi_Expecter) ListGroupLimitsExecute(r any) *ProjectsApi_ListGroupLimitsExecute_Call {
	return &ProjectsApi_ListGroupLimitsExecute_Call{Call: _e.mock.On("ListGroupLimitsExecute", r)}
}

func (_c *ProjectsApi_ListGroupLimitsExecute_Call) Run(run func(r admin.ListGroupLimitsApiRequest)) *ProjectsApi_ListGroupLimitsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupLimitsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupLimitsExecute_Call) Return(_a0 []admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_ListGroupLimitsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListGroupLimitsExecute_Call) RunAndReturn(run func(admin.ListGroupLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_ListGroupLimitsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupLimitsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListGroupLimitsWithParams(ctx context.Context, args *admin.ListGroupLimitsApiParams) admin.ListGroupLimitsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupLimitsWithParams")
	}

	var r0 admin.ListGroupLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupLimitsApiParams) admin.ListGroupLimitsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupLimitsApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroupLimitsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupLimitsWithParams'
type ProjectsApi_ListGroupLimitsWithParams_Call struct {
	*mock.Call
}

// ListGroupLimitsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupLimitsApiParams
func (_e *ProjectsApi_Expecter) ListGroupLimitsWithParams(ctx any, args any) *ProjectsApi_ListGroupLimitsWithParams_Call {
	return &ProjectsApi_ListGroupLimitsWithParams_Call{Call: _e.mock.On("ListGroupLimitsWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListGroupLimitsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupLimitsApiParams)) *ProjectsApi_ListGroupLimitsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupLimitsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupLimitsWithParams_Call) Return(_a0 admin.ListGroupLimitsApiRequest) *ProjectsApi_ListGroupLimitsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroupLimitsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupLimitsApiParams) admin.ListGroupLimitsApiRequest) *ProjectsApi_ListGroupLimitsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: ctx
func (_m *ProjectsApi) ListGroups(ctx context.Context) admin.ListGroupsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 admin.ListGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListGroupsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListGroupsApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type ProjectsApi_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProjectsApi_Expecter) ListGroups(ctx any) *ProjectsApi_ListGroups_Call {
	return &ProjectsApi_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx)}
}

func (_c *ProjectsApi_ListGroups_Call) Run(run func(ctx context.Context)) *ProjectsApi_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProjectsApi_ListGroups_Call) Return(_a0 admin.ListGroupsApiRequest) *ProjectsApi_ListGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroups_Call) RunAndReturn(run func(context.Context) admin.ListGroupsApiRequest) *ProjectsApi_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListGroupsExecute(r admin.ListGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsExecute")
	}

	var r0 *admin.PaginatedAtlasGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupsApiRequest) *admin.PaginatedAtlasGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAtlasGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsExecute'
type ProjectsApi_ListGroupsExecute_Call struct {
	*mock.Call
}

// ListGroupsExecute is a helper method to define mock.On call
//   - r admin.ListGroupsApiRequest
func (_e *ProjectsApi_Expecter) ListGroupsExecute(r any) *ProjectsApi_ListGroupsExecute_Call {
	return &ProjectsApi_ListGroupsExecute_Call{Call: _e.mock.On("ListGroupsExecute", r)}
}

func (_c *ProjectsApi_ListGroupsExecute_Call) Run(run func(r admin.ListGroupsApiRequest)) *ProjectsApi_ListGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupsExecute_Call) Return(_a0 *admin.PaginatedAtlasGroup, _a1 *http.Response, _a2 error) *ProjectsApi_ListGroupsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListGroupsExecute_Call) RunAndReturn(run func(admin.ListGroupsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)) *ProjectsApi_ListGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListGroupsWithParams(ctx context.Context, args *admin.ListGroupsApiParams) admin.ListGroupsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsWithParams")
	}

	var r0 admin.ListGroupsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupsApiParams) admin.ListGroupsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupsApiRequest)
	}

	return r0
}

// ProjectsApi_ListGroupsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsWithParams'
type ProjectsApi_ListGroupsWithParams_Call struct {
	*mock.Call
}

// ListGroupsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupsApiParams
func (_e *ProjectsApi_Expecter) ListGroupsWithParams(ctx any, args any) *ProjectsApi_ListGroupsWithParams_Call {
	return &ProjectsApi_ListGroupsWithParams_Call{Call: _e.mock.On("ListGroupsWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListGroupsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupsApiParams)) *ProjectsApi_ListGroupsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListGroupsWithParams_Call) Return(_a0 admin.ListGroupsApiRequest) *ProjectsApi_ListGroupsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListGroupsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupsApiParams) admin.ListGroupsApiRequest) *ProjectsApi_ListGroupsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateGroup provides a mock function with given fields: ctx, groupId, groupMigrationRequest
func (_m *ProjectsApi) MigrateGroup(ctx context.Context, groupId string, groupMigrationRequest *admin.GroupMigrationRequest) admin.MigrateGroupApiRequest {
	ret := _m.Called(ctx, groupId, groupMigrationRequest)

	if len(ret) == 0 {
		panic("no return value specified for MigrateGroup")
	}

	var r0 admin.MigrateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupMigrationRequest) admin.MigrateGroupApiRequest); ok {
		r0 = rf(ctx, groupId, groupMigrationRequest)
	} else {
		r0 = ret.Get(0).(admin.MigrateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_MigrateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateGroup'
type ProjectsApi_MigrateGroup_Call struct {
	*mock.Call
}

// MigrateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupMigrationRequest *admin.GroupMigrationRequest
func (_e *ProjectsApi_Expecter) MigrateGroup(ctx any, groupId any, groupMigrationRequest any) *ProjectsApi_MigrateGroup_Call {
	return &ProjectsApi_MigrateGroup_Call{Call: _e.mock.On("MigrateGroup", ctx, groupId, groupMigrationRequest)}
}

func (_c *ProjectsApi_MigrateGroup_Call) Run(run func(ctx context.Context, groupId string, groupMigrationRequest *admin.GroupMigrationRequest)) *ProjectsApi_MigrateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupMigrationRequest))
	})
	return _c
}

func (_c *ProjectsApi_MigrateGroup_Call) Return(_a0 admin.MigrateGroupApiRequest) *ProjectsApi_MigrateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_MigrateGroup_Call) RunAndReturn(run func(context.Context, string, *admin.GroupMigrationRequest) admin.MigrateGroupApiRequest) *ProjectsApi_MigrateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateGroupExecute provides a mock function with given fields: r
func (_m *ProjectsApi) MigrateGroupExecute(r admin.MigrateGroupApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for MigrateGroupExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.MigrateGroupApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.MigrateGroupApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.MigrateGroupApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.MigrateGroupApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_MigrateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateGroupExecute'
type ProjectsApi_MigrateGroupExecute_Call struct {
	*mock.Call
}

// MigrateGroupExecute is a helper method to define mock.On call
//   - r admin.MigrateGroupApiRequest
func (_e *ProjectsApi_Expecter) MigrateGroupExecute(r any) *ProjectsApi_MigrateGroupExecute_Call {
	return &ProjectsApi_MigrateGroupExecute_Call{Call: _e.mock.On("MigrateGroupExecute", r)}
}

func (_c *ProjectsApi_MigrateGroupExecute_Call) Run(run func(r admin.MigrateGroupApiRequest)) *ProjectsApi_MigrateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.MigrateGroupApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_MigrateGroupExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_MigrateGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_MigrateGroupExecute_Call) RunAndReturn(run func(admin.MigrateGroupApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_MigrateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateGroupWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) MigrateGroupWithParams(ctx context.Context, args *admin.MigrateGroupApiParams) admin.MigrateGroupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for MigrateGroupWithParams")
	}

	var r0 admin.MigrateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.MigrateGroupApiParams) admin.MigrateGroupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.MigrateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_MigrateGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateGroupWithParams'
type ProjectsApi_MigrateGroupWithParams_Call struct {
	*mock.Call
}

// MigrateGroupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.MigrateGroupApiParams
func (_e *ProjectsApi_Expecter) MigrateGroupWithParams(ctx any, args any) *ProjectsApi_MigrateGroupWithParams_Call {
	return &ProjectsApi_MigrateGroupWithParams_Call{Call: _e.mock.On("MigrateGroupWithParams", ctx, args)}
}

func (_c *ProjectsApi_MigrateGroupWithParams_Call) Run(run func(ctx context.Context, args *admin.MigrateGroupApiParams)) *ProjectsApi_MigrateGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.MigrateGroupApiParams))
	})
	return _c
}

func (_c *ProjectsApi_MigrateGroupWithParams_Call) Return(_a0 admin.MigrateGroupApiRequest) *ProjectsApi_MigrateGroupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_MigrateGroupWithParams_Call) RunAndReturn(run func(context.Context, *admin.MigrateGroupApiParams) admin.MigrateGroupApiRequest) *ProjectsApi_MigrateGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetGroupLimit provides a mock function with given fields: ctx, limitName, groupId, dataFederationLimit
func (_m *ProjectsApi) SetGroupLimit(ctx context.Context, limitName string, groupId string, dataFederationLimit *admin.DataFederationLimit) admin.SetGroupLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId, dataFederationLimit)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupLimit")
	}

	var r0 admin.SetGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataFederationLimit) admin.SetGroupLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId, dataFederationLimit)
	} else {
		r0 = ret.Get(0).(admin.SetGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_SetGroupLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGroupLimit'
type ProjectsApi_SetGroupLimit_Call struct {
	*mock.Call
}

// SetGroupLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
//   - dataFederationLimit *admin.DataFederationLimit
func (_e *ProjectsApi_Expecter) SetGroupLimit(ctx any, limitName any, groupId any, dataFederationLimit any) *ProjectsApi_SetGroupLimit_Call {
	return &ProjectsApi_SetGroupLimit_Call{Call: _e.mock.On("SetGroupLimit", ctx, limitName, groupId, dataFederationLimit)}
}

func (_c *ProjectsApi_SetGroupLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string, dataFederationLimit *admin.DataFederationLimit)) *ProjectsApi_SetGroupLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataFederationLimit))
	})
	return _c
}

func (_c *ProjectsApi_SetGroupLimit_Call) Return(_a0 admin.SetGroupLimitApiRequest) *ProjectsApi_SetGroupLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_SetGroupLimit_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataFederationLimit) admin.SetGroupLimitApiRequest) *ProjectsApi_SetGroupLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetGroupLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) SetGroupLimitExecute(r admin.SetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupLimitExecute")
	}

	var r0 *admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.SetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SetGroupLimitApiRequest) *admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SetGroupLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.SetGroupLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_SetGroupLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGroupLimitExecute'
type ProjectsApi_SetGroupLimitExecute_Call struct {
	*mock.Call
}

// SetGroupLimitExecute is a helper method to define mock.On call
//   - r admin.SetGroupLimitApiRequest
func (_e *ProjectsApi_Expecter) SetGroupLimitExecute(r any) *ProjectsApi_SetGroupLimitExecute_Call {
	return &ProjectsApi_SetGroupLimitExecute_Call{Call: _e.mock.On("SetGroupLimitExecute", r)}
}

func (_c *ProjectsApi_SetGroupLimitExecute_Call) Run(run func(r admin.SetGroupLimitApiRequest)) *ProjectsApi_SetGroupLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SetGroupLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_SetGroupLimitExecute_Call) Return(_a0 *admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_SetGroupLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_SetGroupLimitExecute_Call) RunAndReturn(run func(admin.SetGroupLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_SetGroupLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SetGroupLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) SetGroupLimitWithParams(ctx context.Context, args *admin.SetGroupLimitApiParams) admin.SetGroupLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupLimitWithParams")
	}

	var r0 admin.SetGroupLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SetGroupLimitApiParams) admin.SetGroupLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SetGroupLimitApiRequest)
	}

	return r0
}

// ProjectsApi_SetGroupLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGroupLimitWithParams'
type ProjectsApi_SetGroupLimitWithParams_Call struct {
	*mock.Call
}

// SetGroupLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SetGroupLimitApiParams
func (_e *ProjectsApi_Expecter) SetGroupLimitWithParams(ctx any, args any) *ProjectsApi_SetGroupLimitWithParams_Call {
	return &ProjectsApi_SetGroupLimitWithParams_Call{Call: _e.mock.On("SetGroupLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_SetGroupLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.SetGroupLimitApiParams)) *ProjectsApi_SetGroupLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SetGroupLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_SetGroupLimitWithParams_Call) Return(_a0 admin.SetGroupLimitApiRequest) *ProjectsApi_SetGroupLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_SetGroupLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.SetGroupLimitApiParams) admin.SetGroupLimitApiRequest) *ProjectsApi_SetGroupLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, groupId, groupUpdate
func (_m *ProjectsApi) UpdateGroup(ctx context.Context, groupId string, groupUpdate *admin.GroupUpdate) admin.UpdateGroupApiRequest {
	ret := _m.Called(ctx, groupId, groupUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 admin.UpdateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupUpdate) admin.UpdateGroupApiRequest); ok {
		r0 = rf(ctx, groupId, groupUpdate)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type ProjectsApi_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupUpdate *admin.GroupUpdate
func (_e *ProjectsApi_Expecter) UpdateGroup(ctx any, groupId any, groupUpdate any) *ProjectsApi_UpdateGroup_Call {
	return &ProjectsApi_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, groupId, groupUpdate)}
}

func (_c *ProjectsApi_UpdateGroup_Call) Run(run func(ctx context.Context, groupId string, groupUpdate *admin.GroupUpdate)) *ProjectsApi_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupUpdate))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroup_Call) Return(_a0 admin.UpdateGroupApiRequest) *ProjectsApi_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroup_Call) RunAndReturn(run func(context.Context, string, *admin.GroupUpdate) admin.UpdateGroupApiRequest) *ProjectsApi_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateGroupExecute(r admin.UpdateGroupApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupExecute'
type ProjectsApi_UpdateGroupExecute_Call struct {
	*mock.Call
}

// UpdateGroupExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupApiRequest
func (_e *ProjectsApi_Expecter) UpdateGroupExecute(r any) *ProjectsApi_UpdateGroupExecute_Call {
	return &ProjectsApi_UpdateGroupExecute_Call{Call: _e.mock.On("UpdateGroupExecute", r)}
}

func (_c *ProjectsApi_UpdateGroupExecute_Call) Run(run func(r admin.UpdateGroupApiRequest)) *ProjectsApi_UpdateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateGroupExecute_Call) RunAndReturn(run func(admin.UpdateGroupApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_UpdateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupInvites provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) UpdateGroupInvites(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.UpdateGroupInvitesApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupInvites")
	}

	var r0 admin.UpdateGroupInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.UpdateGroupInvitesApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupInvitesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupInvites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupInvites'
type ProjectsApi_UpdateGroupInvites_Call struct {
	*mock.Call
}

// UpdateGroupInvites is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) UpdateGroupInvites(ctx any, groupId any, groupInvitationRequest any) *ProjectsApi_UpdateGroupInvites_Call {
	return &ProjectsApi_UpdateGroupInvites_Call{Call: _e.mock.On("UpdateGroupInvites", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_UpdateGroupInvites_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_UpdateGroupInvites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvites_Call) Return(_a0 admin.UpdateGroupInvitesApiRequest) *ProjectsApi_UpdateGroupInvites_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvites_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.UpdateGroupInvitesApiRequest) *ProjectsApi_UpdateGroupInvites_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupInvitesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateGroupInvitesExecute(r admin.UpdateGroupInvitesApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupInvitesExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupInvitesApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupInvitesApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupInvitesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupInvitesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateGroupInvitesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupInvitesExecute'
type ProjectsApi_UpdateGroupInvitesExecute_Call struct {
	*mock.Call
}

// UpdateGroupInvitesExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupInvitesApiRequest
func (_e *ProjectsApi_Expecter) UpdateGroupInvitesExecute(r any) *ProjectsApi_UpdateGroupInvitesExecute_Call {
	return &ProjectsApi_UpdateGroupInvitesExecute_Call{Call: _e.mock.On("UpdateGroupInvitesExecute", r)}
}

func (_c *ProjectsApi_UpdateGroupInvitesExecute_Call) Run(run func(r admin.UpdateGroupInvitesApiRequest)) *ProjectsApi_UpdateGroupInvitesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupInvitesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvitesExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateGroupInvitesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvitesExecute_Call) RunAndReturn(run func(admin.UpdateGroupInvitesApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_UpdateGroupInvitesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupInvitesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateGroupInvitesWithParams(ctx context.Context, args *admin.UpdateGroupInvitesApiParams) admin.UpdateGroupInvitesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupInvitesWithParams")
	}

	var r0 admin.UpdateGroupInvitesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupInvitesApiParams) admin.UpdateGroupInvitesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupInvitesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupInvitesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupInvitesWithParams'
type ProjectsApi_UpdateGroupInvitesWithParams_Call struct {
	*mock.Call
}

// UpdateGroupInvitesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupInvitesApiParams
func (_e *ProjectsApi_Expecter) UpdateGroupInvitesWithParams(ctx any, args any) *ProjectsApi_UpdateGroupInvitesWithParams_Call {
	return &ProjectsApi_UpdateGroupInvitesWithParams_Call{Call: _e.mock.On("UpdateGroupInvitesWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateGroupInvitesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupInvitesApiParams)) *ProjectsApi_UpdateGroupInvitesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupInvitesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvitesWithParams_Call) Return(_a0 admin.UpdateGroupInvitesApiRequest) *ProjectsApi_UpdateGroupInvitesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupInvitesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupInvitesApiParams) admin.UpdateGroupInvitesApiRequest) *ProjectsApi_UpdateGroupInvitesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupSettings provides a mock function with given fields: ctx, groupId, groupSettings
func (_m *ProjectsApi) UpdateGroupSettings(ctx context.Context, groupId string, groupSettings *admin.GroupSettings) admin.UpdateGroupSettingsApiRequest {
	ret := _m.Called(ctx, groupId, groupSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupSettings")
	}

	var r0 admin.UpdateGroupSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupSettings) admin.UpdateGroupSettingsApiRequest); ok {
		r0 = rf(ctx, groupId, groupSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupSettings'
type ProjectsApi_UpdateGroupSettings_Call struct {
	*mock.Call
}

// UpdateGroupSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupSettings *admin.GroupSettings
func (_e *ProjectsApi_Expecter) UpdateGroupSettings(ctx any, groupId any, groupSettings any) *ProjectsApi_UpdateGroupSettings_Call {
	return &ProjectsApi_UpdateGroupSettings_Call{Call: _e.mock.On("UpdateGroupSettings", ctx, groupId, groupSettings)}
}

func (_c *ProjectsApi_UpdateGroupSettings_Call) Run(run func(ctx context.Context, groupId string, groupSettings *admin.GroupSettings)) *ProjectsApi_UpdateGroupSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupSettings))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettings_Call) Return(_a0 admin.UpdateGroupSettingsApiRequest) *ProjectsApi_UpdateGroupSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettings_Call) RunAndReturn(run func(context.Context, string, *admin.GroupSettings) admin.UpdateGroupSettingsApiRequest) *ProjectsApi_UpdateGroupSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupSettingsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateGroupSettingsExecute(r admin.UpdateGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupSettingsExecute")
	}

	var r0 *admin.GroupSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupSettingsApiRequest) *admin.GroupSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateGroupSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupSettingsExecute'
type ProjectsApi_UpdateGroupSettingsExecute_Call struct {
	*mock.Call
}

// UpdateGroupSettingsExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupSettingsApiRequest
func (_e *ProjectsApi_Expecter) UpdateGroupSettingsExecute(r any) *ProjectsApi_UpdateGroupSettingsExecute_Call {
	return &ProjectsApi_UpdateGroupSettingsExecute_Call{Call: _e.mock.On("UpdateGroupSettingsExecute", r)}
}

func (_c *ProjectsApi_UpdateGroupSettingsExecute_Call) Run(run func(r admin.UpdateGroupSettingsApiRequest)) *ProjectsApi_UpdateGroupSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupSettingsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettingsExecute_Call) Return(_a0 *admin.GroupSettings, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateGroupSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettingsExecute_Call) RunAndReturn(run func(admin.UpdateGroupSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)) *ProjectsApi_UpdateGroupSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateGroupSettingsWithParams(ctx context.Context, args *admin.UpdateGroupSettingsApiParams) admin.UpdateGroupSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupSettingsWithParams")
	}

	var r0 admin.UpdateGroupSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupSettingsApiParams) admin.UpdateGroupSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupSettingsWithParams'
type ProjectsApi_UpdateGroupSettingsWithParams_Call struct {
	*mock.Call
}

// UpdateGroupSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupSettingsApiParams
func (_e *ProjectsApi_Expecter) UpdateGroupSettingsWithParams(ctx any, args any) *ProjectsApi_UpdateGroupSettingsWithParams_Call {
	return &ProjectsApi_UpdateGroupSettingsWithParams_Call{Call: _e.mock.On("UpdateGroupSettingsWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateGroupSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupSettingsApiParams)) *ProjectsApi_UpdateGroupSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupSettingsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettingsWithParams_Call) Return(_a0 admin.UpdateGroupSettingsApiRequest) *ProjectsApi_UpdateGroupSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupSettingsApiParams) admin.UpdateGroupSettingsApiRequest) *ProjectsApi_UpdateGroupSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupUserRoles provides a mock function with given fields: ctx, groupId, userId, updateGroupRolesForUser
func (_m *ProjectsApi) UpdateGroupUserRoles(ctx context.Context, groupId string, userId string, updateGroupRolesForUser *admin.UpdateGroupRolesForUser) admin.UpdateGroupUserRolesApiRequest {
	ret := _m.Called(ctx, groupId, userId, updateGroupRolesForUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupUserRoles")
	}

	var r0 admin.UpdateGroupUserRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UpdateGroupRolesForUser) admin.UpdateGroupUserRolesApiRequest); ok {
		r0 = rf(ctx, groupId, userId, updateGroupRolesForUser)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupUserRolesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupUserRoles'
type ProjectsApi_UpdateGroupUserRoles_Call struct {
	*mock.Call
}

// UpdateGroupUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
//   - updateGroupRolesForUser *admin.UpdateGroupRolesForUser
func (_e *ProjectsApi_Expecter) UpdateGroupUserRoles(ctx any, groupId any, userId any, updateGroupRolesForUser any) *ProjectsApi_UpdateGroupUserRoles_Call {
	return &ProjectsApi_UpdateGroupUserRoles_Call{Call: _e.mock.On("UpdateGroupUserRoles", ctx, groupId, userId, updateGroupRolesForUser)}
}

func (_c *ProjectsApi_UpdateGroupUserRoles_Call) Run(run func(ctx context.Context, groupId string, userId string, updateGroupRolesForUser *admin.UpdateGroupRolesForUser)) *ProjectsApi_UpdateGroupUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UpdateGroupRolesForUser))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRoles_Call) Return(_a0 admin.UpdateGroupUserRolesApiRequest) *ProjectsApi_UpdateGroupUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRoles_Call) RunAndReturn(run func(context.Context, string, string, *admin.UpdateGroupRolesForUser) admin.UpdateGroupUserRolesApiRequest) *ProjectsApi_UpdateGroupUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupUserRolesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateGroupUserRolesExecute(r admin.UpdateGroupUserRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupUserRolesExecute")
	}

	var r0 *admin.UpdateGroupRolesForUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupUserRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupUserRolesApiRequest) *admin.UpdateGroupRolesForUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UpdateGroupRolesForUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupUserRolesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupUserRolesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateGroupUserRolesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupUserRolesExecute'
type ProjectsApi_UpdateGroupUserRolesExecute_Call struct {
	*mock.Call
}

// UpdateGroupUserRolesExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupUserRolesApiRequest
func (_e *ProjectsApi_Expecter) UpdateGroupUserRolesExecute(r any) *ProjectsApi_UpdateGroupUserRolesExecute_Call {
	return &ProjectsApi_UpdateGroupUserRolesExecute_Call{Call: _e.mock.On("UpdateGroupUserRolesExecute", r)}
}

func (_c *ProjectsApi_UpdateGroupUserRolesExecute_Call) Run(run func(r admin.UpdateGroupUserRolesApiRequest)) *ProjectsApi_UpdateGroupUserRolesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupUserRolesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRolesExecute_Call) Return(_a0 *admin.UpdateGroupRolesForUser, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateGroupUserRolesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRolesExecute_Call) RunAndReturn(run func(admin.UpdateGroupUserRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error)) *ProjectsApi_UpdateGroupUserRolesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupUserRolesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateGroupUserRolesWithParams(ctx context.Context, args *admin.UpdateGroupUserRolesApiParams) admin.UpdateGroupUserRolesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupUserRolesWithParams")
	}

	var r0 admin.UpdateGroupUserRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupUserRolesApiParams) admin.UpdateGroupUserRolesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupUserRolesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupUserRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupUserRolesWithParams'
type ProjectsApi_UpdateGroupUserRolesWithParams_Call struct {
	*mock.Call
}

// UpdateGroupUserRolesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupUserRolesApiParams
func (_e *ProjectsApi_Expecter) UpdateGroupUserRolesWithParams(ctx any, args any) *ProjectsApi_UpdateGroupUserRolesWithParams_Call {
	return &ProjectsApi_UpdateGroupUserRolesWithParams_Call{Call: _e.mock.On("UpdateGroupUserRolesWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateGroupUserRolesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupUserRolesApiParams)) *ProjectsApi_UpdateGroupUserRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupUserRolesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRolesWithParams_Call) Return(_a0 admin.UpdateGroupUserRolesApiRequest) *ProjectsApi_UpdateGroupUserRolesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupUserRolesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupUserRolesApiParams) admin.UpdateGroupUserRolesApiRequest) *ProjectsApi_UpdateGroupUserRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateGroupWithParams(ctx context.Context, args *admin.UpdateGroupApiParams) admin.UpdateGroupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupWithParams")
	}

	var r0 admin.UpdateGroupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupApiParams) admin.UpdateGroupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateGroupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupWithParams'
type ProjectsApi_UpdateGroupWithParams_Call struct {
	*mock.Call
}

// UpdateGroupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupApiParams
func (_e *ProjectsApi_Expecter) UpdateGroupWithParams(ctx any, args any) *ProjectsApi_UpdateGroupWithParams_Call {
	return &ProjectsApi_UpdateGroupWithParams_Call{Call: _e.mock.On("UpdateGroupWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateGroupWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupApiParams)) *ProjectsApi_UpdateGroupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateGroupWithParams_Call) Return(_a0 admin.UpdateGroupApiRequest) *ProjectsApi_UpdateGroupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateGroupWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupApiParams) admin.UpdateGroupApiRequest) *ProjectsApi_UpdateGroupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInviteById provides a mock function with given fields: ctx, groupId, invitationId, groupInvitationUpdateRequest
func (_m *ProjectsApi) UpdateInviteById(ctx context.Context, groupId string, invitationId string, groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest) admin.UpdateInviteByIdApiRequest {
	ret := _m.Called(ctx, groupId, invitationId, groupInvitationUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInviteById")
	}

	var r0 admin.UpdateInviteByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupInvitationUpdateRequest) admin.UpdateInviteByIdApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId, groupInvitationUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateInviteByIdApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateInviteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInviteById'
type ProjectsApi_UpdateInviteById_Call struct {
	*mock.Call
}

// UpdateInviteById is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
//   - groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest
func (_e *ProjectsApi_Expecter) UpdateInviteById(ctx any, groupId any, invitationId any, groupInvitationUpdateRequest any) *ProjectsApi_UpdateInviteById_Call {
	return &ProjectsApi_UpdateInviteById_Call{Call: _e.mock.On("UpdateInviteById", ctx, groupId, invitationId, groupInvitationUpdateRequest)}
}

func (_c *ProjectsApi_UpdateInviteById_Call) Run(run func(ctx context.Context, groupId string, invitationId string, groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest)) *ProjectsApi_UpdateInviteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupInvitationUpdateRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateInviteById_Call) Return(_a0 admin.UpdateInviteByIdApiRequest) *ProjectsApi_UpdateInviteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateInviteById_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupInvitationUpdateRequest) admin.UpdateInviteByIdApiRequest) *ProjectsApi_UpdateInviteById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInviteByIdExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateInviteByIdExecute(r admin.UpdateInviteByIdApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInviteByIdExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateInviteByIdApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateInviteByIdApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateInviteByIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateInviteByIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateInviteByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInviteByIdExecute'
type ProjectsApi_UpdateInviteByIdExecute_Call struct {
	*mock.Call
}

// UpdateInviteByIdExecute is a helper method to define mock.On call
//   - r admin.UpdateInviteByIdApiRequest
func (_e *ProjectsApi_Expecter) UpdateInviteByIdExecute(r any) *ProjectsApi_UpdateInviteByIdExecute_Call {
	return &ProjectsApi_UpdateInviteByIdExecute_Call{Call: _e.mock.On("UpdateInviteByIdExecute", r)}
}

func (_c *ProjectsApi_UpdateInviteByIdExecute_Call) Run(run func(r admin.UpdateInviteByIdApiRequest)) *ProjectsApi_UpdateInviteByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateInviteByIdApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateInviteByIdExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateInviteByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateInviteByIdExecute_Call) RunAndReturn(run func(admin.UpdateInviteByIdApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_UpdateInviteByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInviteByIdWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateInviteByIdWithParams(ctx context.Context, args *admin.UpdateInviteByIdApiParams) admin.UpdateInviteByIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInviteByIdWithParams")
	}

	var r0 admin.UpdateInviteByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateInviteByIdApiParams) admin.UpdateInviteByIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateInviteByIdApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateInviteByIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInviteByIdWithParams'
type ProjectsApi_UpdateInviteByIdWithParams_Call struct {
	*mock.Call
}

// UpdateInviteByIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateInviteByIdApiParams
func (_e *ProjectsApi_Expecter) UpdateInviteByIdWithParams(ctx any, args any) *ProjectsApi_UpdateInviteByIdWithParams_Call {
	return &ProjectsApi_UpdateInviteByIdWithParams_Call{Call: _e.mock.On("UpdateInviteByIdWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateInviteByIdWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateInviteByIdApiParams)) *ProjectsApi_UpdateInviteByIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateInviteByIdApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateInviteByIdWithParams_Call) Return(_a0 admin.UpdateInviteByIdApiRequest) *ProjectsApi_UpdateInviteByIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateInviteByIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateInviteByIdApiParams) admin.UpdateInviteByIdApiRequest) *ProjectsApi_UpdateInviteByIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectsApi creates a new instance of ProjectsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectsApi {
	mock := &ProjectsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
