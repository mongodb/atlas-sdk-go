// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// NetworkPeeringApi is an autogenerated mock type for the NetworkPeeringApi type
type NetworkPeeringApi struct {
	mock.Mock
}

type NetworkPeeringApi_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkPeeringApi) EXPECT() *NetworkPeeringApi_Expecter {
	return &NetworkPeeringApi_Expecter{mock: &_m.Mock}
}

// CreateGroupContainer provides a mock function with given fields: ctx, groupId, cloudProviderContainer
func (_m *NetworkPeeringApi) CreateGroupContainer(ctx context.Context, groupId string, cloudProviderContainer *admin.CloudProviderContainer) admin.CreateGroupContainerApiRequest {
	ret := _m.Called(ctx, groupId, cloudProviderContainer)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupContainer")
	}

	var r0 admin.CreateGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.CloudProviderContainer) admin.CreateGroupContainerApiRequest); ok {
		r0 = rf(ctx, groupId, cloudProviderContainer)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_CreateGroupContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupContainer'
type NetworkPeeringApi_CreateGroupContainer_Call struct {
	*mock.Call
}

// CreateGroupContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - cloudProviderContainer *admin.CloudProviderContainer
func (_e *NetworkPeeringApi_Expecter) CreateGroupContainer(ctx any, groupId any, cloudProviderContainer any) *NetworkPeeringApi_CreateGroupContainer_Call {
	return &NetworkPeeringApi_CreateGroupContainer_Call{Call: _e.mock.On("CreateGroupContainer", ctx, groupId, cloudProviderContainer)}
}

func (_c *NetworkPeeringApi_CreateGroupContainer_Call) Run(run func(ctx context.Context, groupId string, cloudProviderContainer *admin.CloudProviderContainer)) *NetworkPeeringApi_CreateGroupContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.CloudProviderContainer))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainer_Call) Return(_a0 admin.CreateGroupContainerApiRequest) *NetworkPeeringApi_CreateGroupContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainer_Call) RunAndReturn(run func(context.Context, string, *admin.CloudProviderContainer) admin.CreateGroupContainerApiRequest) *NetworkPeeringApi_CreateGroupContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) CreateGroupContainerExecute(r admin.CreateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_CreateGroupContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupContainerExecute'
type NetworkPeeringApi_CreateGroupContainerExecute_Call struct {
	*mock.Call
}

// CreateGroupContainerExecute is a helper method to define mock.On call
//   - r admin.CreateGroupContainerApiRequest
func (_e *NetworkPeeringApi_Expecter) CreateGroupContainerExecute(r any) *NetworkPeeringApi_CreateGroupContainerExecute_Call {
	return &NetworkPeeringApi_CreateGroupContainerExecute_Call{Call: _e.mock.On("CreateGroupContainerExecute", r)}
}

func (_c *NetworkPeeringApi_CreateGroupContainerExecute_Call) Run(run func(r admin.CreateGroupContainerApiRequest)) *NetworkPeeringApi_CreateGroupContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_CreateGroupContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainerExecute_Call) RunAndReturn(run func(admin.CreateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApi_CreateGroupContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) CreateGroupContainerWithParams(ctx context.Context, args *admin.CreateGroupContainerApiParams) admin.CreateGroupContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupContainerWithParams")
	}

	var r0 admin.CreateGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupContainerApiParams) admin.CreateGroupContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_CreateGroupContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupContainerWithParams'
type NetworkPeeringApi_CreateGroupContainerWithParams_Call struct {
	*mock.Call
}

// CreateGroupContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupContainerApiParams
func (_e *NetworkPeeringApi_Expecter) CreateGroupContainerWithParams(ctx any, args any) *NetworkPeeringApi_CreateGroupContainerWithParams_Call {
	return &NetworkPeeringApi_CreateGroupContainerWithParams_Call{Call: _e.mock.On("CreateGroupContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_CreateGroupContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupContainerApiParams)) *NetworkPeeringApi_CreateGroupContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainerWithParams_Call) Return(_a0 admin.CreateGroupContainerApiRequest) *NetworkPeeringApi_CreateGroupContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupContainerApiParams) admin.CreateGroupContainerApiRequest) *NetworkPeeringApi_CreateGroupContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupPeer provides a mock function with given fields: ctx, groupId, baseNetworkPeeringConnectionSettings
func (_m *NetworkPeeringApi) CreateGroupPeer(ctx context.Context, groupId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings) admin.CreateGroupPeerApiRequest {
	ret := _m.Called(ctx, groupId, baseNetworkPeeringConnectionSettings)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupPeer")
	}

	var r0 admin.CreateGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.BaseNetworkPeeringConnectionSettings) admin.CreateGroupPeerApiRequest); ok {
		r0 = rf(ctx, groupId, baseNetworkPeeringConnectionSettings)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_CreateGroupPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupPeer'
type NetworkPeeringApi_CreateGroupPeer_Call struct {
	*mock.Call
}

// CreateGroupPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings
func (_e *NetworkPeeringApi_Expecter) CreateGroupPeer(ctx any, groupId any, baseNetworkPeeringConnectionSettings any) *NetworkPeeringApi_CreateGroupPeer_Call {
	return &NetworkPeeringApi_CreateGroupPeer_Call{Call: _e.mock.On("CreateGroupPeer", ctx, groupId, baseNetworkPeeringConnectionSettings)}
}

func (_c *NetworkPeeringApi_CreateGroupPeer_Call) Run(run func(ctx context.Context, groupId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings)) *NetworkPeeringApi_CreateGroupPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.BaseNetworkPeeringConnectionSettings))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeer_Call) Return(_a0 admin.CreateGroupPeerApiRequest) *NetworkPeeringApi_CreateGroupPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeer_Call) RunAndReturn(run func(context.Context, string, *admin.BaseNetworkPeeringConnectionSettings) admin.CreateGroupPeerApiRequest) *NetworkPeeringApi_CreateGroupPeer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupPeerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) CreateGroupPeerExecute(r admin.CreateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupPeerExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupPeerApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupPeerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupPeerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_CreateGroupPeerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupPeerExecute'
type NetworkPeeringApi_CreateGroupPeerExecute_Call struct {
	*mock.Call
}

// CreateGroupPeerExecute is a helper method to define mock.On call
//   - r admin.CreateGroupPeerApiRequest
func (_e *NetworkPeeringApi_Expecter) CreateGroupPeerExecute(r any) *NetworkPeeringApi_CreateGroupPeerExecute_Call {
	return &NetworkPeeringApi_CreateGroupPeerExecute_Call{Call: _e.mock.On("CreateGroupPeerExecute", r)}
}

func (_c *NetworkPeeringApi_CreateGroupPeerExecute_Call) Run(run func(r admin.CreateGroupPeerApiRequest)) *NetworkPeeringApi_CreateGroupPeerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupPeerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeerExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApi_CreateGroupPeerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeerExecute_Call) RunAndReturn(run func(admin.CreateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApi_CreateGroupPeerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupPeerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) CreateGroupPeerWithParams(ctx context.Context, args *admin.CreateGroupPeerApiParams) admin.CreateGroupPeerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupPeerWithParams")
	}

	var r0 admin.CreateGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupPeerApiParams) admin.CreateGroupPeerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_CreateGroupPeerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupPeerWithParams'
type NetworkPeeringApi_CreateGroupPeerWithParams_Call struct {
	*mock.Call
}

// CreateGroupPeerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupPeerApiParams
func (_e *NetworkPeeringApi_Expecter) CreateGroupPeerWithParams(ctx any, args any) *NetworkPeeringApi_CreateGroupPeerWithParams_Call {
	return &NetworkPeeringApi_CreateGroupPeerWithParams_Call{Call: _e.mock.On("CreateGroupPeerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_CreateGroupPeerWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupPeerApiParams)) *NetworkPeeringApi_CreateGroupPeerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupPeerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeerWithParams_Call) Return(_a0 admin.CreateGroupPeerApiRequest) *NetworkPeeringApi_CreateGroupPeerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_CreateGroupPeerWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupPeerApiParams) admin.CreateGroupPeerApiRequest) *NetworkPeeringApi_CreateGroupPeerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupContainer provides a mock function with given fields: ctx, groupId, containerId
func (_m *NetworkPeeringApi) DeleteGroupContainer(ctx context.Context, groupId string, containerId string) admin.DeleteGroupContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupContainer")
	}

	var r0 admin.DeleteGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DeleteGroupContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupContainer'
type NetworkPeeringApi_DeleteGroupContainer_Call struct {
	*mock.Call
}

// DeleteGroupContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
func (_e *NetworkPeeringApi_Expecter) DeleteGroupContainer(ctx any, groupId any, containerId any) *NetworkPeeringApi_DeleteGroupContainer_Call {
	return &NetworkPeeringApi_DeleteGroupContainer_Call{Call: _e.mock.On("DeleteGroupContainer", ctx, groupId, containerId)}
}

func (_c *NetworkPeeringApi_DeleteGroupContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string)) *NetworkPeeringApi_DeleteGroupContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainer_Call) Return(_a0 admin.DeleteGroupContainerApiRequest) *NetworkPeeringApi_DeleteGroupContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainer_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupContainerApiRequest) *NetworkPeeringApi_DeleteGroupContainer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) DeleteGroupContainerExecute(r admin.DeleteGroupContainerApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupContainerExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupContainerApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupContainerApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupContainerApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkPeeringApi_DeleteGroupContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupContainerExecute'
type NetworkPeeringApi_DeleteGroupContainerExecute_Call struct {
	*mock.Call
}

// DeleteGroupContainerExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupContainerApiRequest
func (_e *NetworkPeeringApi_Expecter) DeleteGroupContainerExecute(r any) *NetworkPeeringApi_DeleteGroupContainerExecute_Call {
	return &NetworkPeeringApi_DeleteGroupContainerExecute_Call{Call: _e.mock.On("DeleteGroupContainerExecute", r)}
}

func (_c *NetworkPeeringApi_DeleteGroupContainerExecute_Call) Run(run func(r admin.DeleteGroupContainerApiRequest)) *NetworkPeeringApi_DeleteGroupContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainerExecute_Call) Return(_a0 *http.Response, _a1 error) *NetworkPeeringApi_DeleteGroupContainerExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainerExecute_Call) RunAndReturn(run func(admin.DeleteGroupContainerApiRequest) (*http.Response, error)) *NetworkPeeringApi_DeleteGroupContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) DeleteGroupContainerWithParams(ctx context.Context, args *admin.DeleteGroupContainerApiParams) admin.DeleteGroupContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupContainerWithParams")
	}

	var r0 admin.DeleteGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupContainerApiParams) admin.DeleteGroupContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DeleteGroupContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupContainerWithParams'
type NetworkPeeringApi_DeleteGroupContainerWithParams_Call struct {
	*mock.Call
}

// DeleteGroupContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupContainerApiParams
func (_e *NetworkPeeringApi_Expecter) DeleteGroupContainerWithParams(ctx any, args any) *NetworkPeeringApi_DeleteGroupContainerWithParams_Call {
	return &NetworkPeeringApi_DeleteGroupContainerWithParams_Call{Call: _e.mock.On("DeleteGroupContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_DeleteGroupContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupContainerApiParams)) *NetworkPeeringApi_DeleteGroupContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainerWithParams_Call) Return(_a0 admin.DeleteGroupContainerApiRequest) *NetworkPeeringApi_DeleteGroupContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupContainerApiParams) admin.DeleteGroupContainerApiRequest) *NetworkPeeringApi_DeleteGroupContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPeer provides a mock function with given fields: ctx, groupId, peerId
func (_m *NetworkPeeringApi) DeleteGroupPeer(ctx context.Context, groupId string, peerId string) admin.DeleteGroupPeerApiRequest {
	ret := _m.Called(ctx, groupId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPeer")
	}

	var r0 admin.DeleteGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupPeerApiRequest); ok {
		r0 = rf(ctx, groupId, peerId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DeleteGroupPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPeer'
type NetworkPeeringApi_DeleteGroupPeer_Call struct {
	*mock.Call
}

// DeleteGroupPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
func (_e *NetworkPeeringApi_Expecter) DeleteGroupPeer(ctx any, groupId any, peerId any) *NetworkPeeringApi_DeleteGroupPeer_Call {
	return &NetworkPeeringApi_DeleteGroupPeer_Call{Call: _e.mock.On("DeleteGroupPeer", ctx, groupId, peerId)}
}

func (_c *NetworkPeeringApi_DeleteGroupPeer_Call) Run(run func(ctx context.Context, groupId string, peerId string)) *NetworkPeeringApi_DeleteGroupPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeer_Call) Return(_a0 admin.DeleteGroupPeerApiRequest) *NetworkPeeringApi_DeleteGroupPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeer_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupPeerApiRequest) *NetworkPeeringApi_DeleteGroupPeer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPeerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) DeleteGroupPeerExecute(r admin.DeleteGroupPeerApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPeerExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupPeerApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupPeerApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupPeerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteGroupPeerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_DeleteGroupPeerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPeerExecute'
type NetworkPeeringApi_DeleteGroupPeerExecute_Call struct {
	*mock.Call
}

// DeleteGroupPeerExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupPeerApiRequest
func (_e *NetworkPeeringApi_Expecter) DeleteGroupPeerExecute(r any) *NetworkPeeringApi_DeleteGroupPeerExecute_Call {
	return &NetworkPeeringApi_DeleteGroupPeerExecute_Call{Call: _e.mock.On("DeleteGroupPeerExecute", r)}
}

func (_c *NetworkPeeringApi_DeleteGroupPeerExecute_Call) Run(run func(r admin.DeleteGroupPeerApiRequest)) *NetworkPeeringApi_DeleteGroupPeerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupPeerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeerExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *NetworkPeeringApi_DeleteGroupPeerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeerExecute_Call) RunAndReturn(run func(admin.DeleteGroupPeerApiRequest) (any, *http.Response, error)) *NetworkPeeringApi_DeleteGroupPeerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPeerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) DeleteGroupPeerWithParams(ctx context.Context, args *admin.DeleteGroupPeerApiParams) admin.DeleteGroupPeerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPeerWithParams")
	}

	var r0 admin.DeleteGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupPeerApiParams) admin.DeleteGroupPeerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DeleteGroupPeerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPeerWithParams'
type NetworkPeeringApi_DeleteGroupPeerWithParams_Call struct {
	*mock.Call
}

// DeleteGroupPeerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupPeerApiParams
func (_e *NetworkPeeringApi_Expecter) DeleteGroupPeerWithParams(ctx any, args any) *NetworkPeeringApi_DeleteGroupPeerWithParams_Call {
	return &NetworkPeeringApi_DeleteGroupPeerWithParams_Call{Call: _e.mock.On("DeleteGroupPeerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_DeleteGroupPeerWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupPeerApiParams)) *NetworkPeeringApi_DeleteGroupPeerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupPeerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeerWithParams_Call) Return(_a0 admin.DeleteGroupPeerApiRequest) *NetworkPeeringApi_DeleteGroupPeerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DeleteGroupPeerWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupPeerApiParams) admin.DeleteGroupPeerApiRequest) *NetworkPeeringApi_DeleteGroupPeerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeering provides a mock function with given fields: ctx, groupId, privateIPMode
func (_m *NetworkPeeringApi) DisablePeering(ctx context.Context, groupId string, privateIPMode *admin.PrivateIPMode) admin.DisablePeeringApiRequest {
	ret := _m.Called(ctx, groupId, privateIPMode)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeering")
	}

	var r0 admin.DisablePeeringApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.PrivateIPMode) admin.DisablePeeringApiRequest); ok {
		r0 = rf(ctx, groupId, privateIPMode)
	} else {
		r0 = ret.Get(0).(admin.DisablePeeringApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DisablePeering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeering'
type NetworkPeeringApi_DisablePeering_Call struct {
	*mock.Call
}

// DisablePeering is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - privateIPMode *admin.PrivateIPMode
func (_e *NetworkPeeringApi_Expecter) DisablePeering(ctx any, groupId any, privateIPMode any) *NetworkPeeringApi_DisablePeering_Call {
	return &NetworkPeeringApi_DisablePeering_Call{Call: _e.mock.On("DisablePeering", ctx, groupId, privateIPMode)}
}

func (_c *NetworkPeeringApi_DisablePeering_Call) Run(run func(ctx context.Context, groupId string, privateIPMode *admin.PrivateIPMode)) *NetworkPeeringApi_DisablePeering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.PrivateIPMode))
	})
	return _c
}

func (_c *NetworkPeeringApi_DisablePeering_Call) Return(_a0 admin.DisablePeeringApiRequest) *NetworkPeeringApi_DisablePeering_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DisablePeering_Call) RunAndReturn(run func(context.Context, string, *admin.PrivateIPMode) admin.DisablePeeringApiRequest) *NetworkPeeringApi_DisablePeering_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeeringExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) DisablePeeringExecute(r admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeeringExecute")
	}

	var r0 *admin.PrivateIPMode
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DisablePeeringApiRequest) *admin.PrivateIPMode); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PrivateIPMode)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DisablePeeringApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DisablePeeringApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_DisablePeeringExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeeringExecute'
type NetworkPeeringApi_DisablePeeringExecute_Call struct {
	*mock.Call
}

// DisablePeeringExecute is a helper method to define mock.On call
//   - r admin.DisablePeeringApiRequest
func (_e *NetworkPeeringApi_Expecter) DisablePeeringExecute(r any) *NetworkPeeringApi_DisablePeeringExecute_Call {
	return &NetworkPeeringApi_DisablePeeringExecute_Call{Call: _e.mock.On("DisablePeeringExecute", r)}
}

func (_c *NetworkPeeringApi_DisablePeeringExecute_Call) Run(run func(r admin.DisablePeeringApiRequest)) *NetworkPeeringApi_DisablePeeringExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DisablePeeringApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_DisablePeeringExecute_Call) Return(_a0 *admin.PrivateIPMode, _a1 *http.Response, _a2 error) *NetworkPeeringApi_DisablePeeringExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_DisablePeeringExecute_Call) RunAndReturn(run func(admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error)) *NetworkPeeringApi_DisablePeeringExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeeringWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) DisablePeeringWithParams(ctx context.Context, args *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeeringWithParams")
	}

	var r0 admin.DisablePeeringApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DisablePeeringApiRequest)
	}

	return r0
}

// NetworkPeeringApi_DisablePeeringWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeeringWithParams'
type NetworkPeeringApi_DisablePeeringWithParams_Call struct {
	*mock.Call
}

// DisablePeeringWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DisablePeeringApiParams
func (_e *NetworkPeeringApi_Expecter) DisablePeeringWithParams(ctx any, args any) *NetworkPeeringApi_DisablePeeringWithParams_Call {
	return &NetworkPeeringApi_DisablePeeringWithParams_Call{Call: _e.mock.On("DisablePeeringWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_DisablePeeringWithParams_Call) Run(run func(ctx context.Context, args *admin.DisablePeeringApiParams)) *NetworkPeeringApi_DisablePeeringWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DisablePeeringApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_DisablePeeringWithParams_Call) Return(_a0 admin.DisablePeeringApiRequest) *NetworkPeeringApi_DisablePeeringWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_DisablePeeringWithParams_Call) RunAndReturn(run func(context.Context, *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest) *NetworkPeeringApi_DisablePeeringWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupContainer provides a mock function with given fields: ctx, groupId, containerId
func (_m *NetworkPeeringApi) GetGroupContainer(ctx context.Context, groupId string, containerId string) admin.GetGroupContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupContainer")
	}

	var r0 admin.GetGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_GetGroupContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupContainer'
type NetworkPeeringApi_GetGroupContainer_Call struct {
	*mock.Call
}

// GetGroupContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
func (_e *NetworkPeeringApi_Expecter) GetGroupContainer(ctx any, groupId any, containerId any) *NetworkPeeringApi_GetGroupContainer_Call {
	return &NetworkPeeringApi_GetGroupContainer_Call{Call: _e.mock.On("GetGroupContainer", ctx, groupId, containerId)}
}

func (_c *NetworkPeeringApi_GetGroupContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string)) *NetworkPeeringApi_GetGroupContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainer_Call) Return(_a0 admin.GetGroupContainerApiRequest) *NetworkPeeringApi_GetGroupContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainer_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupContainerApiRequest) *NetworkPeeringApi_GetGroupContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) GetGroupContainerExecute(r admin.GetGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_GetGroupContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupContainerExecute'
type NetworkPeeringApi_GetGroupContainerExecute_Call struct {
	*mock.Call
}

// GetGroupContainerExecute is a helper method to define mock.On call
//   - r admin.GetGroupContainerApiRequest
func (_e *NetworkPeeringApi_Expecter) GetGroupContainerExecute(r any) *NetworkPeeringApi_GetGroupContainerExecute_Call {
	return &NetworkPeeringApi_GetGroupContainerExecute_Call{Call: _e.mock.On("GetGroupContainerExecute", r)}
}

func (_c *NetworkPeeringApi_GetGroupContainerExecute_Call) Run(run func(r admin.GetGroupContainerApiRequest)) *NetworkPeeringApi_GetGroupContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_GetGroupContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainerExecute_Call) RunAndReturn(run func(admin.GetGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApi_GetGroupContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) GetGroupContainerWithParams(ctx context.Context, args *admin.GetGroupContainerApiParams) admin.GetGroupContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupContainerWithParams")
	}

	var r0 admin.GetGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupContainerApiParams) admin.GetGroupContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_GetGroupContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupContainerWithParams'
type NetworkPeeringApi_GetGroupContainerWithParams_Call struct {
	*mock.Call
}

// GetGroupContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupContainerApiParams
func (_e *NetworkPeeringApi_Expecter) GetGroupContainerWithParams(ctx any, args any) *NetworkPeeringApi_GetGroupContainerWithParams_Call {
	return &NetworkPeeringApi_GetGroupContainerWithParams_Call{Call: _e.mock.On("GetGroupContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_GetGroupContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupContainerApiParams)) *NetworkPeeringApi_GetGroupContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainerWithParams_Call) Return(_a0 admin.GetGroupContainerApiRequest) *NetworkPeeringApi_GetGroupContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupContainerApiParams) admin.GetGroupContainerApiRequest) *NetworkPeeringApi_GetGroupContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPeer provides a mock function with given fields: ctx, groupId, peerId
func (_m *NetworkPeeringApi) GetGroupPeer(ctx context.Context, groupId string, peerId string) admin.GetGroupPeerApiRequest {
	ret := _m.Called(ctx, groupId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPeer")
	}

	var r0 admin.GetGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupPeerApiRequest); ok {
		r0 = rf(ctx, groupId, peerId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_GetGroupPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPeer'
type NetworkPeeringApi_GetGroupPeer_Call struct {
	*mock.Call
}

// GetGroupPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
func (_e *NetworkPeeringApi_Expecter) GetGroupPeer(ctx any, groupId any, peerId any) *NetworkPeeringApi_GetGroupPeer_Call {
	return &NetworkPeeringApi_GetGroupPeer_Call{Call: _e.mock.On("GetGroupPeer", ctx, groupId, peerId)}
}

func (_c *NetworkPeeringApi_GetGroupPeer_Call) Run(run func(ctx context.Context, groupId string, peerId string)) *NetworkPeeringApi_GetGroupPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeer_Call) Return(_a0 admin.GetGroupPeerApiRequest) *NetworkPeeringApi_GetGroupPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeer_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupPeerApiRequest) *NetworkPeeringApi_GetGroupPeer_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPeerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) GetGroupPeerExecute(r admin.GetGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPeerExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupPeerApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupPeerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupPeerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_GetGroupPeerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPeerExecute'
type NetworkPeeringApi_GetGroupPeerExecute_Call struct {
	*mock.Call
}

// GetGroupPeerExecute is a helper method to define mock.On call
//   - r admin.GetGroupPeerApiRequest
func (_e *NetworkPeeringApi_Expecter) GetGroupPeerExecute(r any) *NetworkPeeringApi_GetGroupPeerExecute_Call {
	return &NetworkPeeringApi_GetGroupPeerExecute_Call{Call: _e.mock.On("GetGroupPeerExecute", r)}
}

func (_c *NetworkPeeringApi_GetGroupPeerExecute_Call) Run(run func(r admin.GetGroupPeerApiRequest)) *NetworkPeeringApi_GetGroupPeerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupPeerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeerExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApi_GetGroupPeerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeerExecute_Call) RunAndReturn(run func(admin.GetGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApi_GetGroupPeerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPeerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) GetGroupPeerWithParams(ctx context.Context, args *admin.GetGroupPeerApiParams) admin.GetGroupPeerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPeerWithParams")
	}

	var r0 admin.GetGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupPeerApiParams) admin.GetGroupPeerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_GetGroupPeerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPeerWithParams'
type NetworkPeeringApi_GetGroupPeerWithParams_Call struct {
	*mock.Call
}

// GetGroupPeerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupPeerApiParams
func (_e *NetworkPeeringApi_Expecter) GetGroupPeerWithParams(ctx any, args any) *NetworkPeeringApi_GetGroupPeerWithParams_Call {
	return &NetworkPeeringApi_GetGroupPeerWithParams_Call{Call: _e.mock.On("GetGroupPeerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_GetGroupPeerWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupPeerApiParams)) *NetworkPeeringApi_GetGroupPeerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupPeerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeerWithParams_Call) Return(_a0 admin.GetGroupPeerApiRequest) *NetworkPeeringApi_GetGroupPeerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_GetGroupPeerWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupPeerApiParams) admin.GetGroupPeerApiRequest) *NetworkPeeringApi_GetGroupPeerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainerAll provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApi) ListGroupContainerAll(ctx context.Context, groupId string) admin.ListGroupContainerAllApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainerAll")
	}

	var r0 admin.ListGroupContainerAllApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupContainerAllApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupContainerAllApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupContainerAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainerAll'
type NetworkPeeringApi_ListGroupContainerAll_Call struct {
	*mock.Call
}

// ListGroupContainerAll is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApi_Expecter) ListGroupContainerAll(ctx any, groupId any) *NetworkPeeringApi_ListGroupContainerAll_Call {
	return &NetworkPeeringApi_ListGroupContainerAll_Call{Call: _e.mock.On("ListGroupContainerAll", ctx, groupId)}
}

func (_c *NetworkPeeringApi_ListGroupContainerAll_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApi_ListGroupContainerAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAll_Call) Return(_a0 admin.ListGroupContainerAllApiRequest) *NetworkPeeringApi_ListGroupContainerAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAll_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupContainerAllApiRequest) *NetworkPeeringApi_ListGroupContainerAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainerAllExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) ListGroupContainerAllExecute(r admin.ListGroupContainerAllApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainerAllExecute")
	}

	var r0 *admin.PaginatedCloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupContainerAllApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupContainerAllApiRequest) *admin.PaginatedCloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupContainerAllApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupContainerAllApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_ListGroupContainerAllExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainerAllExecute'
type NetworkPeeringApi_ListGroupContainerAllExecute_Call struct {
	*mock.Call
}

// ListGroupContainerAllExecute is a helper method to define mock.On call
//   - r admin.ListGroupContainerAllApiRequest
func (_e *NetworkPeeringApi_Expecter) ListGroupContainerAllExecute(r any) *NetworkPeeringApi_ListGroupContainerAllExecute_Call {
	return &NetworkPeeringApi_ListGroupContainerAllExecute_Call{Call: _e.mock.On("ListGroupContainerAllExecute", r)}
}

func (_c *NetworkPeeringApi_ListGroupContainerAllExecute_Call) Run(run func(r admin.ListGroupContainerAllApiRequest)) *NetworkPeeringApi_ListGroupContainerAllExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupContainerAllApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAllExecute_Call) Return(_a0 *admin.PaginatedCloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_ListGroupContainerAllExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAllExecute_Call) RunAndReturn(run func(admin.ListGroupContainerAllApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)) *NetworkPeeringApi_ListGroupContainerAllExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainerAllWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) ListGroupContainerAllWithParams(ctx context.Context, args *admin.ListGroupContainerAllApiParams) admin.ListGroupContainerAllApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainerAllWithParams")
	}

	var r0 admin.ListGroupContainerAllApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupContainerAllApiParams) admin.ListGroupContainerAllApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupContainerAllApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupContainerAllWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainerAllWithParams'
type NetworkPeeringApi_ListGroupContainerAllWithParams_Call struct {
	*mock.Call
}

// ListGroupContainerAllWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupContainerAllApiParams
func (_e *NetworkPeeringApi_Expecter) ListGroupContainerAllWithParams(ctx any, args any) *NetworkPeeringApi_ListGroupContainerAllWithParams_Call {
	return &NetworkPeeringApi_ListGroupContainerAllWithParams_Call{Call: _e.mock.On("ListGroupContainerAllWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_ListGroupContainerAllWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupContainerAllApiParams)) *NetworkPeeringApi_ListGroupContainerAllWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupContainerAllApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAllWithParams_Call) Return(_a0 admin.ListGroupContainerAllApiRequest) *NetworkPeeringApi_ListGroupContainerAllWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainerAllWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupContainerAllApiParams) admin.ListGroupContainerAllApiRequest) *NetworkPeeringApi_ListGroupContainerAllWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainers provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApi) ListGroupContainers(ctx context.Context, groupId string) admin.ListGroupContainersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainers")
	}

	var r0 admin.ListGroupContainersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupContainersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupContainersApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainers'
type NetworkPeeringApi_ListGroupContainers_Call struct {
	*mock.Call
}

// ListGroupContainers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApi_Expecter) ListGroupContainers(ctx any, groupId any) *NetworkPeeringApi_ListGroupContainers_Call {
	return &NetworkPeeringApi_ListGroupContainers_Call{Call: _e.mock.On("ListGroupContainers", ctx, groupId)}
}

func (_c *NetworkPeeringApi_ListGroupContainers_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApi_ListGroupContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainers_Call) Return(_a0 admin.ListGroupContainersApiRequest) *NetworkPeeringApi_ListGroupContainers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainers_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupContainersApiRequest) *NetworkPeeringApi_ListGroupContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainersExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) ListGroupContainersExecute(r admin.ListGroupContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainersExecute")
	}

	var r0 *admin.PaginatedCloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupContainersApiRequest) *admin.PaginatedCloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupContainersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupContainersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_ListGroupContainersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainersExecute'
type NetworkPeeringApi_ListGroupContainersExecute_Call struct {
	*mock.Call
}

// ListGroupContainersExecute is a helper method to define mock.On call
//   - r admin.ListGroupContainersApiRequest
func (_e *NetworkPeeringApi_Expecter) ListGroupContainersExecute(r any) *NetworkPeeringApi_ListGroupContainersExecute_Call {
	return &NetworkPeeringApi_ListGroupContainersExecute_Call{Call: _e.mock.On("ListGroupContainersExecute", r)}
}

func (_c *NetworkPeeringApi_ListGroupContainersExecute_Call) Run(run func(r admin.ListGroupContainersApiRequest)) *NetworkPeeringApi_ListGroupContainersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupContainersApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainersExecute_Call) Return(_a0 *admin.PaginatedCloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_ListGroupContainersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainersExecute_Call) RunAndReturn(run func(admin.ListGroupContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)) *NetworkPeeringApi_ListGroupContainersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupContainersWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) ListGroupContainersWithParams(ctx context.Context, args *admin.ListGroupContainersApiParams) admin.ListGroupContainersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupContainersWithParams")
	}

	var r0 admin.ListGroupContainersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupContainersApiParams) admin.ListGroupContainersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupContainersApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupContainersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupContainersWithParams'
type NetworkPeeringApi_ListGroupContainersWithParams_Call struct {
	*mock.Call
}

// ListGroupContainersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupContainersApiParams
func (_e *NetworkPeeringApi_Expecter) ListGroupContainersWithParams(ctx any, args any) *NetworkPeeringApi_ListGroupContainersWithParams_Call {
	return &NetworkPeeringApi_ListGroupContainersWithParams_Call{Call: _e.mock.On("ListGroupContainersWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_ListGroupContainersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupContainersApiParams)) *NetworkPeeringApi_ListGroupContainersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupContainersApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainersWithParams_Call) Return(_a0 admin.ListGroupContainersApiRequest) *NetworkPeeringApi_ListGroupContainersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupContainersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupContainersApiParams) admin.ListGroupContainersApiRequest) *NetworkPeeringApi_ListGroupContainersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPeers provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApi) ListGroupPeers(ctx context.Context, groupId string) admin.ListGroupPeersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupPeers")
	}

	var r0 admin.ListGroupPeersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupPeersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupPeersApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPeers'
type NetworkPeeringApi_ListGroupPeers_Call struct {
	*mock.Call
}

// ListGroupPeers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApi_Expecter) ListGroupPeers(ctx any, groupId any) *NetworkPeeringApi_ListGroupPeers_Call {
	return &NetworkPeeringApi_ListGroupPeers_Call{Call: _e.mock.On("ListGroupPeers", ctx, groupId)}
}

func (_c *NetworkPeeringApi_ListGroupPeers_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApi_ListGroupPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeers_Call) Return(_a0 admin.ListGroupPeersApiRequest) *NetworkPeeringApi_ListGroupPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeers_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupPeersApiRequest) *NetworkPeeringApi_ListGroupPeers_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPeersExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) ListGroupPeersExecute(r admin.ListGroupPeersApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupPeersExecute")
	}

	var r0 *admin.PaginatedContainerPeer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupPeersApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupPeersApiRequest) *admin.PaginatedContainerPeer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedContainerPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupPeersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupPeersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_ListGroupPeersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPeersExecute'
type NetworkPeeringApi_ListGroupPeersExecute_Call struct {
	*mock.Call
}

// ListGroupPeersExecute is a helper method to define mock.On call
//   - r admin.ListGroupPeersApiRequest
func (_e *NetworkPeeringApi_Expecter) ListGroupPeersExecute(r any) *NetworkPeeringApi_ListGroupPeersExecute_Call {
	return &NetworkPeeringApi_ListGroupPeersExecute_Call{Call: _e.mock.On("ListGroupPeersExecute", r)}
}

func (_c *NetworkPeeringApi_ListGroupPeersExecute_Call) Run(run func(r admin.ListGroupPeersApiRequest)) *NetworkPeeringApi_ListGroupPeersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupPeersApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeersExecute_Call) Return(_a0 *admin.PaginatedContainerPeer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_ListGroupPeersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeersExecute_Call) RunAndReturn(run func(admin.ListGroupPeersApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error)) *NetworkPeeringApi_ListGroupPeersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPeersWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) ListGroupPeersWithParams(ctx context.Context, args *admin.ListGroupPeersApiParams) admin.ListGroupPeersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupPeersWithParams")
	}

	var r0 admin.ListGroupPeersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupPeersApiParams) admin.ListGroupPeersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupPeersApiRequest)
	}

	return r0
}

// NetworkPeeringApi_ListGroupPeersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPeersWithParams'
type NetworkPeeringApi_ListGroupPeersWithParams_Call struct {
	*mock.Call
}

// ListGroupPeersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupPeersApiParams
func (_e *NetworkPeeringApi_Expecter) ListGroupPeersWithParams(ctx any, args any) *NetworkPeeringApi_ListGroupPeersWithParams_Call {
	return &NetworkPeeringApi_ListGroupPeersWithParams_Call{Call: _e.mock.On("ListGroupPeersWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_ListGroupPeersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupPeersApiParams)) *NetworkPeeringApi_ListGroupPeersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupPeersApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeersWithParams_Call) Return(_a0 admin.ListGroupPeersApiRequest) *NetworkPeeringApi_ListGroupPeersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_ListGroupPeersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupPeersApiParams) admin.ListGroupPeersApiRequest) *NetworkPeeringApi_ListGroupPeersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupContainer provides a mock function with given fields: ctx, groupId, containerId, cloudProviderContainer
func (_m *NetworkPeeringApi) UpdateGroupContainer(ctx context.Context, groupId string, containerId string, cloudProviderContainer *admin.CloudProviderContainer) admin.UpdateGroupContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId, cloudProviderContainer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupContainer")
	}

	var r0 admin.UpdateGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.CloudProviderContainer) admin.UpdateGroupContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId, cloudProviderContainer)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_UpdateGroupContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupContainer'
type NetworkPeeringApi_UpdateGroupContainer_Call struct {
	*mock.Call
}

// UpdateGroupContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
//   - cloudProviderContainer *admin.CloudProviderContainer
func (_e *NetworkPeeringApi_Expecter) UpdateGroupContainer(ctx any, groupId any, containerId any, cloudProviderContainer any) *NetworkPeeringApi_UpdateGroupContainer_Call {
	return &NetworkPeeringApi_UpdateGroupContainer_Call{Call: _e.mock.On("UpdateGroupContainer", ctx, groupId, containerId, cloudProviderContainer)}
}

func (_c *NetworkPeeringApi_UpdateGroupContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string, cloudProviderContainer *admin.CloudProviderContainer)) *NetworkPeeringApi_UpdateGroupContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.CloudProviderContainer))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainer_Call) Return(_a0 admin.UpdateGroupContainerApiRequest) *NetworkPeeringApi_UpdateGroupContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainer_Call) RunAndReturn(run func(context.Context, string, string, *admin.CloudProviderContainer) admin.UpdateGroupContainerApiRequest) *NetworkPeeringApi_UpdateGroupContainer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) UpdateGroupContainerExecute(r admin.UpdateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_UpdateGroupContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupContainerExecute'
type NetworkPeeringApi_UpdateGroupContainerExecute_Call struct {
	*mock.Call
}

// UpdateGroupContainerExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupContainerApiRequest
func (_e *NetworkPeeringApi_Expecter) UpdateGroupContainerExecute(r any) *NetworkPeeringApi_UpdateGroupContainerExecute_Call {
	return &NetworkPeeringApi_UpdateGroupContainerExecute_Call{Call: _e.mock.On("UpdateGroupContainerExecute", r)}
}

func (_c *NetworkPeeringApi_UpdateGroupContainerExecute_Call) Run(run func(r admin.UpdateGroupContainerApiRequest)) *NetworkPeeringApi_UpdateGroupContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApi_UpdateGroupContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainerExecute_Call) RunAndReturn(run func(admin.UpdateGroupContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApi_UpdateGroupContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) UpdateGroupContainerWithParams(ctx context.Context, args *admin.UpdateGroupContainerApiParams) admin.UpdateGroupContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupContainerWithParams")
	}

	var r0 admin.UpdateGroupContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupContainerApiParams) admin.UpdateGroupContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_UpdateGroupContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupContainerWithParams'
type NetworkPeeringApi_UpdateGroupContainerWithParams_Call struct {
	*mock.Call
}

// UpdateGroupContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupContainerApiParams
func (_e *NetworkPeeringApi_Expecter) UpdateGroupContainerWithParams(ctx any, args any) *NetworkPeeringApi_UpdateGroupContainerWithParams_Call {
	return &NetworkPeeringApi_UpdateGroupContainerWithParams_Call{Call: _e.mock.On("UpdateGroupContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_UpdateGroupContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupContainerApiParams)) *NetworkPeeringApi_UpdateGroupContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainerWithParams_Call) Return(_a0 admin.UpdateGroupContainerApiRequest) *NetworkPeeringApi_UpdateGroupContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupContainerApiParams) admin.UpdateGroupContainerApiRequest) *NetworkPeeringApi_UpdateGroupContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupPeer provides a mock function with given fields: ctx, groupId, peerId, baseNetworkPeeringConnectionSettings
func (_m *NetworkPeeringApi) UpdateGroupPeer(ctx context.Context, groupId string, peerId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings) admin.UpdateGroupPeerApiRequest {
	ret := _m.Called(ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupPeer")
	}

	var r0 admin.UpdateGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.BaseNetworkPeeringConnectionSettings) admin.UpdateGroupPeerApiRequest); ok {
		r0 = rf(ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_UpdateGroupPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupPeer'
type NetworkPeeringApi_UpdateGroupPeer_Call struct {
	*mock.Call
}

// UpdateGroupPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
//   - baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings
func (_e *NetworkPeeringApi_Expecter) UpdateGroupPeer(ctx any, groupId any, peerId any, baseNetworkPeeringConnectionSettings any) *NetworkPeeringApi_UpdateGroupPeer_Call {
	return &NetworkPeeringApi_UpdateGroupPeer_Call{Call: _e.mock.On("UpdateGroupPeer", ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)}
}

func (_c *NetworkPeeringApi_UpdateGroupPeer_Call) Run(run func(ctx context.Context, groupId string, peerId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings)) *NetworkPeeringApi_UpdateGroupPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.BaseNetworkPeeringConnectionSettings))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeer_Call) Return(_a0 admin.UpdateGroupPeerApiRequest) *NetworkPeeringApi_UpdateGroupPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeer_Call) RunAndReturn(run func(context.Context, string, string, *admin.BaseNetworkPeeringConnectionSettings) admin.UpdateGroupPeerApiRequest) *NetworkPeeringApi_UpdateGroupPeer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupPeerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) UpdateGroupPeerExecute(r admin.UpdateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupPeerExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupPeerApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupPeerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupPeerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_UpdateGroupPeerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupPeerExecute'
type NetworkPeeringApi_UpdateGroupPeerExecute_Call struct {
	*mock.Call
}

// UpdateGroupPeerExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupPeerApiRequest
func (_e *NetworkPeeringApi_Expecter) UpdateGroupPeerExecute(r any) *NetworkPeeringApi_UpdateGroupPeerExecute_Call {
	return &NetworkPeeringApi_UpdateGroupPeerExecute_Call{Call: _e.mock.On("UpdateGroupPeerExecute", r)}
}

func (_c *NetworkPeeringApi_UpdateGroupPeerExecute_Call) Run(run func(r admin.UpdateGroupPeerApiRequest)) *NetworkPeeringApi_UpdateGroupPeerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupPeerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeerExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApi_UpdateGroupPeerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeerExecute_Call) RunAndReturn(run func(admin.UpdateGroupPeerApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApi_UpdateGroupPeerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupPeerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) UpdateGroupPeerWithParams(ctx context.Context, args *admin.UpdateGroupPeerApiParams) admin.UpdateGroupPeerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupPeerWithParams")
	}

	var r0 admin.UpdateGroupPeerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupPeerApiParams) admin.UpdateGroupPeerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupPeerApiRequest)
	}

	return r0
}

// NetworkPeeringApi_UpdateGroupPeerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupPeerWithParams'
type NetworkPeeringApi_UpdateGroupPeerWithParams_Call struct {
	*mock.Call
}

// UpdateGroupPeerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupPeerApiParams
func (_e *NetworkPeeringApi_Expecter) UpdateGroupPeerWithParams(ctx any, args any) *NetworkPeeringApi_UpdateGroupPeerWithParams_Call {
	return &NetworkPeeringApi_UpdateGroupPeerWithParams_Call{Call: _e.mock.On("UpdateGroupPeerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_UpdateGroupPeerWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupPeerApiParams)) *NetworkPeeringApi_UpdateGroupPeerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupPeerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeerWithParams_Call) Return(_a0 admin.UpdateGroupPeerApiRequest) *NetworkPeeringApi_UpdateGroupPeerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_UpdateGroupPeerWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupPeerApiParams) admin.UpdateGroupPeerApiRequest) *NetworkPeeringApi_UpdateGroupPeerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPrivateIpMode provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApi) VerifyPrivateIpMode(ctx context.Context, groupId string) admin.VerifyPrivateIpModeApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPrivateIpMode")
	}

	var r0 admin.VerifyPrivateIpModeApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.VerifyPrivateIpModeApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.VerifyPrivateIpModeApiRequest)
	}

	return r0
}

// NetworkPeeringApi_VerifyPrivateIpMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPrivateIpMode'
type NetworkPeeringApi_VerifyPrivateIpMode_Call struct {
	*mock.Call
}

// VerifyPrivateIpMode is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApi_Expecter) VerifyPrivateIpMode(ctx any, groupId any) *NetworkPeeringApi_VerifyPrivateIpMode_Call {
	return &NetworkPeeringApi_VerifyPrivateIpMode_Call{Call: _e.mock.On("VerifyPrivateIpMode", ctx, groupId)}
}

func (_c *NetworkPeeringApi_VerifyPrivateIpMode_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApi_VerifyPrivateIpMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpMode_Call) Return(_a0 admin.VerifyPrivateIpModeApiRequest) *NetworkPeeringApi_VerifyPrivateIpMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpMode_Call) RunAndReturn(run func(context.Context, string) admin.VerifyPrivateIpModeApiRequest) *NetworkPeeringApi_VerifyPrivateIpMode_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPrivateIpModeExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApi) VerifyPrivateIpModeExecute(r admin.VerifyPrivateIpModeApiRequest) (*admin.PrivateIPMode, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPrivateIpModeExecute")
	}

	var r0 *admin.PrivateIPMode
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.VerifyPrivateIpModeApiRequest) (*admin.PrivateIPMode, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.VerifyPrivateIpModeApiRequest) *admin.PrivateIPMode); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PrivateIPMode)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.VerifyPrivateIpModeApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.VerifyPrivateIpModeApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApi_VerifyPrivateIpModeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPrivateIpModeExecute'
type NetworkPeeringApi_VerifyPrivateIpModeExecute_Call struct {
	*mock.Call
}

// VerifyPrivateIpModeExecute is a helper method to define mock.On call
//   - r admin.VerifyPrivateIpModeApiRequest
func (_e *NetworkPeeringApi_Expecter) VerifyPrivateIpModeExecute(r any) *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call {
	return &NetworkPeeringApi_VerifyPrivateIpModeExecute_Call{Call: _e.mock.On("VerifyPrivateIpModeExecute", r)}
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call) Run(run func(r admin.VerifyPrivateIpModeApiRequest)) *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.VerifyPrivateIpModeApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call) Return(_a0 *admin.PrivateIPMode, _a1 *http.Response, _a2 error) *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call) RunAndReturn(run func(admin.VerifyPrivateIpModeApiRequest) (*admin.PrivateIPMode, *http.Response, error)) *NetworkPeeringApi_VerifyPrivateIpModeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPrivateIpModeWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApi) VerifyPrivateIpModeWithParams(ctx context.Context, args *admin.VerifyPrivateIpModeApiParams) admin.VerifyPrivateIpModeApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPrivateIpModeWithParams")
	}

	var r0 admin.VerifyPrivateIpModeApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.VerifyPrivateIpModeApiParams) admin.VerifyPrivateIpModeApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.VerifyPrivateIpModeApiRequest)
	}

	return r0
}

// NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPrivateIpModeWithParams'
type NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call struct {
	*mock.Call
}

// VerifyPrivateIpModeWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.VerifyPrivateIpModeApiParams
func (_e *NetworkPeeringApi_Expecter) VerifyPrivateIpModeWithParams(ctx any, args any) *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call {
	return &NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call{Call: _e.mock.On("VerifyPrivateIpModeWithParams", ctx, args)}
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call) Run(run func(ctx context.Context, args *admin.VerifyPrivateIpModeApiParams)) *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.VerifyPrivateIpModeApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call) Return(_a0 admin.VerifyPrivateIpModeApiRequest) *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call) RunAndReturn(run func(context.Context, *admin.VerifyPrivateIpModeApiParams) admin.VerifyPrivateIpModeApiRequest) *NetworkPeeringApi_VerifyPrivateIpModeWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkPeeringApi creates a new instance of NetworkPeeringApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkPeeringApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkPeeringApi {
	mock := &NetworkPeeringApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
