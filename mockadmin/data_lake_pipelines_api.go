// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// DataLakePipelinesApi is an autogenerated mock type for the DataLakePipelinesApi type
type DataLakePipelinesApi struct {
	mock.Mock
}

type DataLakePipelinesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DataLakePipelinesApi) EXPECT() *DataLakePipelinesApi_Expecter {
	return &DataLakePipelinesApi_Expecter{mock: &_m.Mock}
}

// CreatePipeline provides a mock function with given fields: ctx, groupId, dataLakeIngestionPipeline
func (_m *DataLakePipelinesApi) CreatePipeline(ctx context.Context, groupId string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest {
	ret := _m.Called(ctx, groupId, dataLakeIngestionPipeline)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 admin.CreatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, dataLakeIngestionPipeline)
	} else {
		r0 = ret.Get(0).(admin.CreatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_CreatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipeline'
type DataLakePipelinesApi_CreatePipeline_Call struct {
	*mock.Call
}

// CreatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline
func (_e *DataLakePipelinesApi_Expecter) CreatePipeline(ctx any, groupId any, dataLakeIngestionPipeline any) *DataLakePipelinesApi_CreatePipeline_Call {
	return &DataLakePipelinesApi_CreatePipeline_Call{Call: _e.mock.On("CreatePipeline", ctx, groupId, dataLakeIngestionPipeline)}
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) Run(run func(ctx context.Context, groupId string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline)) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.DataLakeIngestionPipeline))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) Return(_a0 admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) RunAndReturn(run func(context.Context, string, *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) CreatePipelineExecute(r admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_CreatePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipelineExecute'
type DataLakePipelinesApi_CreatePipelineExecute_Call struct {
	*mock.Call
}

// CreatePipelineExecute is a helper method to define mock.On call
//   - r admin.CreatePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) CreatePipelineExecute(r any) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	return &DataLakePipelinesApi_CreatePipelineExecute_Call{Call: _e.mock.On("CreatePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) Run(run func(r admin.CreatePipelineApiRequest)) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) RunAndReturn(run func(admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) CreatePipelineWithParams(ctx context.Context, args *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipelineWithParams")
	}

	var r0 admin.CreatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_CreatePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipelineWithParams'
type DataLakePipelinesApi_CreatePipelineWithParams_Call struct {
	*mock.Call
}

// CreatePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) CreatePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	return &DataLakePipelinesApi_CreatePipelineWithParams_Call{Call: _e.mock.On("CreatePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePipelineApiParams)) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) Return(_a0 admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) DeletePipeline(ctx context.Context, groupId string, pipelineName string) admin.DeletePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 admin.DeletePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipeline'
type DataLakePipelinesApi_DeletePipeline_Call struct {
	*mock.Call
}

// DeletePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) DeletePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_DeletePipeline_Call {
	return &DataLakePipelinesApi_DeletePipeline_Call{Call: _e.mock.On("DeletePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) Return(_a0 admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) DeletePipelineExecute(r admin.DeletePipelineApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeletePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_DeletePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineExecute'
type DataLakePipelinesApi_DeletePipelineExecute_Call struct {
	*mock.Call
}

// DeletePipelineExecute is a helper method to define mock.On call
//   - r admin.DeletePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineExecute(r any) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	return &DataLakePipelinesApi_DeletePipelineExecute_Call{Call: _e.mock.On("DeletePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) Run(run func(r admin.DeletePipelineApiRequest)) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) RunAndReturn(run func(admin.DeletePipelineApiRequest) (any, *http.Response, error)) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRunDataset provides a mock function with given fields: ctx, groupId, pipelineName, pipelineRunId
func (_m *DataLakePipelinesApi) DeletePipelineRunDataset(ctx context.Context, groupId string, pipelineName string, pipelineRunId string) admin.DeletePipelineRunDatasetApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, pipelineRunId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRunDataset")
	}

	var r0 admin.DeletePipelineRunDatasetApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeletePipelineRunDatasetApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, pipelineRunId)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineRunDatasetApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineRunDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRunDataset'
type DataLakePipelinesApi_DeletePipelineRunDataset_Call struct {
	*mock.Call
}

// DeletePipelineRunDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - pipelineRunId string
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRunDataset(ctx any, groupId any, pipelineName any, pipelineRunId any) *DataLakePipelinesApi_DeletePipelineRunDataset_Call {
	return &DataLakePipelinesApi_DeletePipelineRunDataset_Call{Call: _e.mock.On("DeletePipelineRunDataset", ctx, groupId, pipelineName, pipelineRunId)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDataset_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, pipelineRunId string)) *DataLakePipelinesApi_DeletePipelineRunDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDataset_Call) Return(_a0 admin.DeletePipelineRunDatasetApiRequest) *DataLakePipelinesApi_DeletePipelineRunDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDataset_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeletePipelineRunDatasetApiRequest) *DataLakePipelinesApi_DeletePipelineRunDataset_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRunDatasetExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) DeletePipelineRunDatasetExecute(r admin.DeletePipelineRunDatasetApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRunDatasetExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineRunDatasetApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineRunDatasetApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePipelineRunDatasetApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeletePipelineRunDatasetApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRunDatasetExecute'
type DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call struct {
	*mock.Call
}

// DeletePipelineRunDatasetExecute is a helper method to define mock.On call
//   - r admin.DeletePipelineRunDatasetApiRequest
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRunDatasetExecute(r any) *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call {
	return &DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call{Call: _e.mock.On("DeletePipelineRunDatasetExecute", r)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call) Run(run func(r admin.DeletePipelineRunDatasetApiRequest)) *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePipelineRunDatasetApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call) RunAndReturn(run func(admin.DeletePipelineRunDatasetApiRequest) (any, *http.Response, error)) *DataLakePipelinesApi_DeletePipelineRunDatasetExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRunDatasetWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) DeletePipelineRunDatasetWithParams(ctx context.Context, args *admin.DeletePipelineRunDatasetApiParams) admin.DeletePipelineRunDatasetApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRunDatasetWithParams")
	}

	var r0 admin.DeletePipelineRunDatasetApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePipelineRunDatasetApiParams) admin.DeletePipelineRunDatasetApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineRunDatasetApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRunDatasetWithParams'
type DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call struct {
	*mock.Call
}

// DeletePipelineRunDatasetWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePipelineRunDatasetApiParams
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRunDatasetWithParams(ctx any, args any) *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call {
	return &DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call{Call: _e.mock.On("DeletePipelineRunDatasetWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePipelineRunDatasetApiParams)) *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePipelineRunDatasetApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call) Return(_a0 admin.DeletePipelineRunDatasetApiRequest) *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePipelineRunDatasetApiParams) admin.DeletePipelineRunDatasetApiRequest) *DataLakePipelinesApi_DeletePipelineRunDatasetWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) DeletePipelineWithParams(ctx context.Context, args *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineWithParams")
	}

	var r0 admin.DeletePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineWithParams'
type DataLakePipelinesApi_DeletePipelineWithParams_Call struct {
	*mock.Call
}

// DeletePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	return &DataLakePipelinesApi_DeletePipelineWithParams_Call{Call: _e.mock.On("DeletePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePipelineApiParams)) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) Return(_a0 admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) GetPipeline(ctx context.Context, groupId string, pipelineName string) admin.GetPipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 admin.GetPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipeline'
type DataLakePipelinesApi_GetPipeline_Call struct {
	*mock.Call
}

// GetPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) GetPipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_GetPipeline_Call {
	return &DataLakePipelinesApi_GetPipeline_Call{Call: _e.mock.On("GetPipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) Return(_a0 admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetPipelineExecute(r admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetPipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineExecute'
type DataLakePipelinesApi_GetPipelineExecute_Call struct {
	*mock.Call
}

// GetPipelineExecute is a helper method to define mock.On call
//   - r admin.GetPipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetPipelineExecute(r any) *DataLakePipelinesApi_GetPipelineExecute_Call {
	return &DataLakePipelinesApi_GetPipelineExecute_Call{Call: _e.mock.On("GetPipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) Run(run func(r admin.GetPipelineApiRequest)) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) RunAndReturn(run func(admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRun provides a mock function with given fields: ctx, groupId, pipelineName, pipelineRunId
func (_m *DataLakePipelinesApi) GetPipelineRun(ctx context.Context, groupId string, pipelineName string, pipelineRunId string) admin.GetPipelineRunApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, pipelineRunId)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRun")
	}

	var r0 admin.GetPipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetPipelineRunApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, pipelineRunId)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRun'
type DataLakePipelinesApi_GetPipelineRun_Call struct {
	*mock.Call
}

// GetPipelineRun is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - pipelineRunId string
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRun(ctx any, groupId any, pipelineName any, pipelineRunId any) *DataLakePipelinesApi_GetPipelineRun_Call {
	return &DataLakePipelinesApi_GetPipelineRun_Call{Call: _e.mock.On("GetPipelineRun", ctx, groupId, pipelineName, pipelineRunId)}
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, pipelineRunId string)) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) Return(_a0 admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRunExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetPipelineRunExecute(r admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRunExecute")
	}

	var r0 *admin.IngestionPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPipelineRunApiRequest) *admin.IngestionPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.IngestionPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPipelineRunApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPipelineRunApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetPipelineRunExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRunExecute'
type DataLakePipelinesApi_GetPipelineRunExecute_Call struct {
	*mock.Call
}

// GetPipelineRunExecute is a helper method to define mock.On call
//   - r admin.GetPipelineRunApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRunExecute(r any) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	return &DataLakePipelinesApi_GetPipelineRunExecute_Call{Call: _e.mock.On("GetPipelineRunExecute", r)}
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) Run(run func(r admin.GetPipelineRunApiRequest)) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPipelineRunApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) Return(_a0 *admin.IngestionPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) RunAndReturn(run func(admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRunWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetPipelineRunWithParams(ctx context.Context, args *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRunWithParams")
	}

	var r0 admin.GetPipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineRunWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRunWithParams'
type DataLakePipelinesApi_GetPipelineRunWithParams_Call struct {
	*mock.Call
}

// GetPipelineRunWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPipelineRunApiParams
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRunWithParams(ctx any, args any) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	return &DataLakePipelinesApi_GetPipelineRunWithParams_Call{Call: _e.mock.On("GetPipelineRunWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPipelineRunApiParams)) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPipelineRunApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) Return(_a0 admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetPipelineWithParams(ctx context.Context, args *admin.GetPipelineApiParams) admin.GetPipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineWithParams")
	}

	var r0 admin.GetPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPipelineApiParams) admin.GetPipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineWithParams'
type DataLakePipelinesApi_GetPipelineWithParams_Call struct {
	*mock.Call
}

// GetPipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) GetPipelineWithParams(ctx any, args any) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	return &DataLakePipelinesApi_GetPipelineWithParams_Call{Call: _e.mock.On("GetPipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPipelineApiParams)) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) Return(_a0 admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPipelineApiParams) admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRuns provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ListPipelineRuns(ctx context.Context, groupId string, pipelineName string) admin.ListPipelineRunsApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRuns")
	}

	var r0 admin.ListPipelineRunsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPipelineRunsApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineRunsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRuns'
type DataLakePipelinesApi_ListPipelineRuns_Call struct {
	*mock.Call
}

// ListPipelineRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRuns(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ListPipelineRuns_Call {
	return &DataLakePipelinesApi_ListPipelineRuns_Call{Call: _e.mock.On("ListPipelineRuns", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) Return(_a0 admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRunsExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelineRunsExecute(r admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRunsExecute")
	}

	var r0 *admin.PaginatedPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelineRunsApiRequest) *admin.PaginatedPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelineRunsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelineRunsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelineRunsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRunsExecute'
type DataLakePipelinesApi_ListPipelineRunsExecute_Call struct {
	*mock.Call
}

// ListPipelineRunsExecute is a helper method to define mock.On call
//   - r admin.ListPipelineRunsApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRunsExecute(r any) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	return &DataLakePipelinesApi_ListPipelineRunsExecute_Call{Call: _e.mock.On("ListPipelineRunsExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) Run(run func(r admin.ListPipelineRunsApiRequest)) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelineRunsApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) Return(_a0 *admin.PaginatedPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) RunAndReturn(run func(admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error)) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRunsWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelineRunsWithParams(ctx context.Context, args *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRunsWithParams")
	}

	var r0 admin.ListPipelineRunsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineRunsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineRunsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRunsWithParams'
type DataLakePipelinesApi_ListPipelineRunsWithParams_Call struct {
	*mock.Call
}

// ListPipelineRunsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelineRunsApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRunsWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	return &DataLakePipelinesApi_ListPipelineRunsWithParams_Call{Call: _e.mock.On("ListPipelineRunsWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelineRunsApiParams)) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelineRunsApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) Return(_a0 admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSchedules provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ListPipelineSchedules(ctx context.Context, groupId string, pipelineName string) admin.ListPipelineSchedulesApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSchedules")
	}

	var r0 admin.ListPipelineSchedulesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPipelineSchedulesApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineSchedulesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSchedules'
type DataLakePipelinesApi_ListPipelineSchedules_Call struct {
	*mock.Call
}

// ListPipelineSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSchedules(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ListPipelineSchedules_Call {
	return &DataLakePipelinesApi_ListPipelineSchedules_Call{Call: _e.mock.On("ListPipelineSchedules", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ListPipelineSchedules_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ListPipelineSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedules_Call) Return(_a0 admin.ListPipelineSchedulesApiRequest) *DataLakePipelinesApi_ListPipelineSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedules_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPipelineSchedulesApiRequest) *DataLakePipelinesApi_ListPipelineSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSchedulesExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelineSchedulesExecute(r admin.ListPipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSchedulesExecute")
	}

	var r0 []admin.DiskBackupApiPolicyItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelineSchedulesApiRequest) []admin.DiskBackupApiPolicyItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DiskBackupApiPolicyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelineSchedulesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelineSchedulesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelineSchedulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSchedulesExecute'
type DataLakePipelinesApi_ListPipelineSchedulesExecute_Call struct {
	*mock.Call
}

// ListPipelineSchedulesExecute is a helper method to define mock.On call
//   - r admin.ListPipelineSchedulesApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSchedulesExecute(r any) *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call {
	return &DataLakePipelinesApi_ListPipelineSchedulesExecute_Call{Call: _e.mock.On("ListPipelineSchedulesExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call) Run(run func(r admin.ListPipelineSchedulesApiRequest)) *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelineSchedulesApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call) Return(_a0 []admin.DiskBackupApiPolicyItem, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call) RunAndReturn(run func(admin.ListPipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error)) *DataLakePipelinesApi_ListPipelineSchedulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSchedulesWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelineSchedulesWithParams(ctx context.Context, args *admin.ListPipelineSchedulesApiParams) admin.ListPipelineSchedulesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSchedulesWithParams")
	}

	var r0 admin.ListPipelineSchedulesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelineSchedulesApiParams) admin.ListPipelineSchedulesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineSchedulesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSchedulesWithParams'
type DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call struct {
	*mock.Call
}

// ListPipelineSchedulesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelineSchedulesApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSchedulesWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call {
	return &DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call{Call: _e.mock.On("ListPipelineSchedulesWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelineSchedulesApiParams)) *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelineSchedulesApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call) Return(_a0 admin.ListPipelineSchedulesApiRequest) *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelineSchedulesApiParams) admin.ListPipelineSchedulesApiRequest) *DataLakePipelinesApi_ListPipelineSchedulesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSnapshots provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ListPipelineSnapshots(ctx context.Context, groupId string, pipelineName string) admin.ListPipelineSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSnapshots")
	}

	var r0 admin.ListPipelineSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPipelineSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineSnapshotsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSnapshots'
type DataLakePipelinesApi_ListPipelineSnapshots_Call struct {
	*mock.Call
}

// ListPipelineSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSnapshots(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ListPipelineSnapshots_Call {
	return &DataLakePipelinesApi_ListPipelineSnapshots_Call{Call: _e.mock.On("ListPipelineSnapshots", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshots_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ListPipelineSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshots_Call) Return(_a0 admin.ListPipelineSnapshotsApiRequest) *DataLakePipelinesApi_ListPipelineSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPipelineSnapshotsApiRequest) *DataLakePipelinesApi_ListPipelineSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSnapshotsExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelineSnapshotsExecute(r admin.ListPipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSnapshotsExecute")
	}

	var r0 *admin.PaginatedBackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelineSnapshotsApiRequest) *admin.PaginatedBackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedBackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelineSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelineSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSnapshotsExecute'
type DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call struct {
	*mock.Call
}

// ListPipelineSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListPipelineSnapshotsApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSnapshotsExecute(r any) *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call {
	return &DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call{Call: _e.mock.On("ListPipelineSnapshotsExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call) Run(run func(r admin.ListPipelineSnapshotsApiRequest)) *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelineSnapshotsApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call) Return(_a0 *admin.PaginatedBackupSnapshot, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call) RunAndReturn(run func(admin.ListPipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error)) *DataLakePipelinesApi_ListPipelineSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelineSnapshotsWithParams(ctx context.Context, args *admin.ListPipelineSnapshotsApiParams) admin.ListPipelineSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineSnapshotsWithParams")
	}

	var r0 admin.ListPipelineSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelineSnapshotsApiParams) admin.ListPipelineSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineSnapshotsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineSnapshotsWithParams'
type DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListPipelineSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelineSnapshotsApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelineSnapshotsWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call {
	return &DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call{Call: _e.mock.On("ListPipelineSnapshotsWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelineSnapshotsApiParams)) *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelineSnapshotsApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call) Return(_a0 admin.ListPipelineSnapshotsApiRequest) *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelineSnapshotsApiParams) admin.ListPipelineSnapshotsApiRequest) *DataLakePipelinesApi_ListPipelineSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields: ctx, groupId
func (_m *DataLakePipelinesApi) ListPipelines(ctx context.Context, groupId string) admin.ListPipelinesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 admin.ListPipelinesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPipelinesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPipelinesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type DataLakePipelinesApi_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *DataLakePipelinesApi_Expecter) ListPipelines(ctx any, groupId any) *DataLakePipelinesApi_ListPipelines_Call {
	return &DataLakePipelinesApi_ListPipelines_Call{Call: _e.mock.On("ListPipelines", ctx, groupId)}
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) Run(run func(ctx context.Context, groupId string)) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) Return(_a0 admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) RunAndReturn(run func(context.Context, string) admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelinesExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelinesExecute(r admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelinesExecute")
	}

	var r0 []admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelinesApiRequest) []admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelinesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelinesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelinesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelinesExecute'
type DataLakePipelinesApi_ListPipelinesExecute_Call struct {
	*mock.Call
}

// ListPipelinesExecute is a helper method to define mock.On call
//   - r admin.ListPipelinesApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelinesExecute(r any) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	return &DataLakePipelinesApi_ListPipelinesExecute_Call{Call: _e.mock.On("ListPipelinesExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) Run(run func(r admin.ListPipelinesApiRequest)) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelinesApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) Return(_a0 []admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) RunAndReturn(run func(admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelinesWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelinesWithParams(ctx context.Context, args *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelinesWithParams")
	}

	var r0 admin.ListPipelinesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelinesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelinesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelinesWithParams'
type DataLakePipelinesApi_ListPipelinesWithParams_Call struct {
	*mock.Call
}

// ListPipelinesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelinesApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelinesWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	return &DataLakePipelinesApi_ListPipelinesWithParams_Call{Call: _e.mock.On("ListPipelinesWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelinesApiParams)) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelinesApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) Return(_a0 admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) PausePipeline(ctx context.Context, groupId string, pipelineName string) admin.PausePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for PausePipeline")
	}

	var r0 admin.PausePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.PausePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.PausePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_PausePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipeline'
type DataLakePipelinesApi_PausePipeline_Call struct {
	*mock.Call
}

// PausePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) PausePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_PausePipeline_Call {
	return &DataLakePipelinesApi_PausePipeline_Call{Call: _e.mock.On("PausePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) Return(_a0 admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) PausePipelineExecute(r admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PausePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PausePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PausePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.PausePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_PausePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipelineExecute'
type DataLakePipelinesApi_PausePipelineExecute_Call struct {
	*mock.Call
}

// PausePipelineExecute is a helper method to define mock.On call
//   - r admin.PausePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) PausePipelineExecute(r any) *DataLakePipelinesApi_PausePipelineExecute_Call {
	return &DataLakePipelinesApi_PausePipelineExecute_Call{Call: _e.mock.On("PausePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) Run(run func(r admin.PausePipelineApiRequest)) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PausePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) RunAndReturn(run func(admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) PausePipelineWithParams(ctx context.Context, args *admin.PausePipelineApiParams) admin.PausePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PausePipelineWithParams")
	}

	var r0 admin.PausePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PausePipelineApiParams) admin.PausePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PausePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_PausePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipelineWithParams'
type DataLakePipelinesApi_PausePipelineWithParams_Call struct {
	*mock.Call
}

// PausePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PausePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) PausePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	return &DataLakePipelinesApi_PausePipelineWithParams_Call{Call: _e.mock.On("PausePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.PausePipelineApiParams)) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PausePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) Return(_a0 admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.PausePipelineApiParams) admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ResumePipeline(ctx context.Context, groupId string, pipelineName string) admin.ResumePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipeline")
	}

	var r0 admin.ResumePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ResumePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ResumePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ResumePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipeline'
type DataLakePipelinesApi_ResumePipeline_Call struct {
	*mock.Call
}

// ResumePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ResumePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ResumePipeline_Call {
	return &DataLakePipelinesApi_ResumePipeline_Call{Call: _e.mock.On("ResumePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) Return(_a0 admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ResumePipelineExecute(r admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ResumePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ResumePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ResumePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ResumePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipelineExecute'
type DataLakePipelinesApi_ResumePipelineExecute_Call struct {
	*mock.Call
}

// ResumePipelineExecute is a helper method to define mock.On call
//   - r admin.ResumePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) ResumePipelineExecute(r any) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	return &DataLakePipelinesApi_ResumePipelineExecute_Call{Call: _e.mock.On("ResumePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) Run(run func(r admin.ResumePipelineApiRequest)) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ResumePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) RunAndReturn(run func(admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ResumePipelineWithParams(ctx context.Context, args *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipelineWithParams")
	}

	var r0 admin.ResumePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ResumePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ResumePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipelineWithParams'
type DataLakePipelinesApi_ResumePipelineWithParams_Call struct {
	*mock.Call
}

// ResumePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ResumePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) ResumePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	return &DataLakePipelinesApi_ResumePipelineWithParams_Call{Call: _e.mock.On("ResumePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.ResumePipelineApiParams)) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResumePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) Return(_a0 admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerSnapshotIngestion provides a mock function with given fields: ctx, groupId, pipelineName, triggerIngestionPipelineRequest
func (_m *DataLakePipelinesApi) TriggerSnapshotIngestion(ctx context.Context, groupId string, pipelineName string, triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest) admin.TriggerSnapshotIngestionApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, triggerIngestionPipelineRequest)

	if len(ret) == 0 {
		panic("no return value specified for TriggerSnapshotIngestion")
	}

	var r0 admin.TriggerSnapshotIngestionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TriggerIngestionPipelineRequest) admin.TriggerSnapshotIngestionApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, triggerIngestionPipelineRequest)
	} else {
		r0 = ret.Get(0).(admin.TriggerSnapshotIngestionApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_TriggerSnapshotIngestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerSnapshotIngestion'
type DataLakePipelinesApi_TriggerSnapshotIngestion_Call struct {
	*mock.Call
}

// TriggerSnapshotIngestion is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest
func (_e *DataLakePipelinesApi_Expecter) TriggerSnapshotIngestion(ctx any, groupId any, pipelineName any, triggerIngestionPipelineRequest any) *DataLakePipelinesApi_TriggerSnapshotIngestion_Call {
	return &DataLakePipelinesApi_TriggerSnapshotIngestion_Call{Call: _e.mock.On("TriggerSnapshotIngestion", ctx, groupId, pipelineName, triggerIngestionPipelineRequest)}
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestion_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest)) *DataLakePipelinesApi_TriggerSnapshotIngestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TriggerIngestionPipelineRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestion_Call) Return(_a0 admin.TriggerSnapshotIngestionApiRequest) *DataLakePipelinesApi_TriggerSnapshotIngestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestion_Call) RunAndReturn(run func(context.Context, string, string, *admin.TriggerIngestionPipelineRequest) admin.TriggerSnapshotIngestionApiRequest) *DataLakePipelinesApi_TriggerSnapshotIngestion_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerSnapshotIngestionExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) TriggerSnapshotIngestionExecute(r admin.TriggerSnapshotIngestionApiRequest) (*admin.IngestionPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TriggerSnapshotIngestionExecute")
	}

	var r0 *admin.IngestionPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.TriggerSnapshotIngestionApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.TriggerSnapshotIngestionApiRequest) *admin.IngestionPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.IngestionPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.TriggerSnapshotIngestionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.TriggerSnapshotIngestionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerSnapshotIngestionExecute'
type DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call struct {
	*mock.Call
}

// TriggerSnapshotIngestionExecute is a helper method to define mock.On call
//   - r admin.TriggerSnapshotIngestionApiRequest
func (_e *DataLakePipelinesApi_Expecter) TriggerSnapshotIngestionExecute(r any) *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call {
	return &DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call{Call: _e.mock.On("TriggerSnapshotIngestionExecute", r)}
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call) Run(run func(r admin.TriggerSnapshotIngestionApiRequest)) *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.TriggerSnapshotIngestionApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call) Return(_a0 *admin.IngestionPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call) RunAndReturn(run func(admin.TriggerSnapshotIngestionApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)) *DataLakePipelinesApi_TriggerSnapshotIngestionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerSnapshotIngestionWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) TriggerSnapshotIngestionWithParams(ctx context.Context, args *admin.TriggerSnapshotIngestionApiParams) admin.TriggerSnapshotIngestionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for TriggerSnapshotIngestionWithParams")
	}

	var r0 admin.TriggerSnapshotIngestionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TriggerSnapshotIngestionApiParams) admin.TriggerSnapshotIngestionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.TriggerSnapshotIngestionApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerSnapshotIngestionWithParams'
type DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call struct {
	*mock.Call
}

// TriggerSnapshotIngestionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.TriggerSnapshotIngestionApiParams
func (_e *DataLakePipelinesApi_Expecter) TriggerSnapshotIngestionWithParams(ctx any, args any) *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call {
	return &DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call{Call: _e.mock.On("TriggerSnapshotIngestionWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call) Run(run func(ctx context.Context, args *admin.TriggerSnapshotIngestionApiParams)) *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TriggerSnapshotIngestionApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call) Return(_a0 admin.TriggerSnapshotIngestionApiRequest) *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call) RunAndReturn(run func(context.Context, *admin.TriggerSnapshotIngestionApiParams) admin.TriggerSnapshotIngestionApiRequest) *DataLakePipelinesApi_TriggerSnapshotIngestionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipeline provides a mock function with given fields: ctx, groupId, pipelineName, dataLakeIngestionPipeline
func (_m *DataLakePipelinesApi) UpdatePipeline(ctx context.Context, groupId string, pipelineName string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, dataLakeIngestionPipeline)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 admin.UpdatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, dataLakeIngestionPipeline)
	} else {
		r0 = ret.Get(0).(admin.UpdatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_UpdatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipeline'
type DataLakePipelinesApi_UpdatePipeline_Call struct {
	*mock.Call
}

// UpdatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline
func (_e *DataLakePipelinesApi_Expecter) UpdatePipeline(ctx any, groupId any, pipelineName any, dataLakeIngestionPipeline any) *DataLakePipelinesApi_UpdatePipeline_Call {
	return &DataLakePipelinesApi_UpdatePipeline_Call{Call: _e.mock.On("UpdatePipeline", ctx, groupId, pipelineName, dataLakeIngestionPipeline)}
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline)) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataLakeIngestionPipeline))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) Return(_a0 admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) UpdatePipelineExecute(r admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdatePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdatePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdatePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_UpdatePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipelineExecute'
type DataLakePipelinesApi_UpdatePipelineExecute_Call struct {
	*mock.Call
}

// UpdatePipelineExecute is a helper method to define mock.On call
//   - r admin.UpdatePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) UpdatePipelineExecute(r any) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	return &DataLakePipelinesApi_UpdatePipelineExecute_Call{Call: _e.mock.On("UpdatePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) Run(run func(r admin.UpdatePipelineApiRequest)) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdatePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) RunAndReturn(run func(admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) UpdatePipelineWithParams(ctx context.Context, args *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineWithParams")
	}

	var r0 admin.UpdatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_UpdatePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipelineWithParams'
type DataLakePipelinesApi_UpdatePipelineWithParams_Call struct {
	*mock.Call
}

// UpdatePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdatePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) UpdatePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	return &DataLakePipelinesApi_UpdatePipelineWithParams_Call{Call: _e.mock.On("UpdatePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdatePipelineApiParams)) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdatePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) Return(_a0 admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataLakePipelinesApi creates a new instance of DataLakePipelinesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataLakePipelinesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataLakePipelinesApi {
	mock := &DataLakePipelinesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
