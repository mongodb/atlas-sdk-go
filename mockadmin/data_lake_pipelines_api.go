// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// DataLakePipelinesApi is an autogenerated mock type for the DataLakePipelinesApi type
type DataLakePipelinesApi struct {
	mock.Mock
}

type DataLakePipelinesApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DataLakePipelinesApi) EXPECT() *DataLakePipelinesApi_Expecter {
	return &DataLakePipelinesApi_Expecter{mock: &_m.Mock}
}

// CreatePipeline provides a mock function with given fields: ctx, groupId, dataLakeIngestionPipeline
func (_m *DataLakePipelinesApi) CreatePipeline(ctx context.Context, groupId string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest {
	ret := _m.Called(ctx, groupId, dataLakeIngestionPipeline)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 admin.CreatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, dataLakeIngestionPipeline)
	} else {
		r0 = ret.Get(0).(admin.CreatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_CreatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipeline'
type DataLakePipelinesApi_CreatePipeline_Call struct {
	*mock.Call
}

// CreatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline
func (_e *DataLakePipelinesApi_Expecter) CreatePipeline(ctx any, groupId any, dataLakeIngestionPipeline any) *DataLakePipelinesApi_CreatePipeline_Call {
	return &DataLakePipelinesApi_CreatePipeline_Call{Call: _e.mock.On("CreatePipeline", ctx, groupId, dataLakeIngestionPipeline)}
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) Run(run func(ctx context.Context, groupId string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline)) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.DataLakeIngestionPipeline))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) Return(_a0 admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipeline_Call) RunAndReturn(run func(context.Context, string, *admin.DataLakeIngestionPipeline) admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) CreatePipelineExecute(r admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_CreatePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipelineExecute'
type DataLakePipelinesApi_CreatePipelineExecute_Call struct {
	*mock.Call
}

// CreatePipelineExecute is a helper method to define mock.On call
//   - r admin.CreatePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) CreatePipelineExecute(r any) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	return &DataLakePipelinesApi_CreatePipelineExecute_Call{Call: _e.mock.On("CreatePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) Run(run func(r admin.CreatePipelineApiRequest)) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineExecute_Call) RunAndReturn(run func(admin.CreatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_CreatePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) CreatePipelineWithParams(ctx context.Context, args *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipelineWithParams")
	}

	var r0 admin.CreatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_CreatePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipelineWithParams'
type DataLakePipelinesApi_CreatePipelineWithParams_Call struct {
	*mock.Call
}

// CreatePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) CreatePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	return &DataLakePipelinesApi_CreatePipelineWithParams_Call{Call: _e.mock.On("CreatePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePipelineApiParams)) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) Return(_a0 admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_CreatePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePipelineApiParams) admin.CreatePipelineApiRequest) *DataLakePipelinesApi_CreatePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) DeletePipeline(ctx context.Context, groupId string, pipelineName string) admin.DeletePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 admin.DeletePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipeline'
type DataLakePipelinesApi_DeletePipeline_Call struct {
	*mock.Call
}

// DeletePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) DeletePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_DeletePipeline_Call {
	return &DataLakePipelinesApi_DeletePipeline_Call{Call: _e.mock.On("DeletePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) Return(_a0 admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) DeletePipelineExecute(r admin.DeletePipelineApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePipelineApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataLakePipelinesApi_DeletePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineExecute'
type DataLakePipelinesApi_DeletePipelineExecute_Call struct {
	*mock.Call
}

// DeletePipelineExecute is a helper method to define mock.On call
//   - r admin.DeletePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineExecute(r any) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	return &DataLakePipelinesApi_DeletePipelineExecute_Call{Call: _e.mock.On("DeletePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) Run(run func(r admin.DeletePipelineApiRequest)) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) Return(_a0 *http.Response, _a1 error) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineExecute_Call) RunAndReturn(run func(admin.DeletePipelineApiRequest) (*http.Response, error)) *DataLakePipelinesApi_DeletePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRun provides a mock function with given fields: ctx, groupId, pipelineName, pipelineRunId
func (_m *DataLakePipelinesApi) DeletePipelineRun(ctx context.Context, groupId string, pipelineName string, pipelineRunId string) admin.DeletePipelineRunApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, pipelineRunId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRun")
	}

	var r0 admin.DeletePipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeletePipelineRunApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, pipelineRunId)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRun'
type DataLakePipelinesApi_DeletePipelineRun_Call struct {
	*mock.Call
}

// DeletePipelineRun is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - pipelineRunId string
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRun(ctx any, groupId any, pipelineName any, pipelineRunId any) *DataLakePipelinesApi_DeletePipelineRun_Call {
	return &DataLakePipelinesApi_DeletePipelineRun_Call{Call: _e.mock.On("DeletePipelineRun", ctx, groupId, pipelineName, pipelineRunId)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRun_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, pipelineRunId string)) *DataLakePipelinesApi_DeletePipelineRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRun_Call) Return(_a0 admin.DeletePipelineRunApiRequest) *DataLakePipelinesApi_DeletePipelineRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRun_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeletePipelineRunApiRequest) *DataLakePipelinesApi_DeletePipelineRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRunExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) DeletePipelineRunExecute(r admin.DeletePipelineRunApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRunExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineRunApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePipelineRunApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePipelineRunApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeletePipelineRunApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_DeletePipelineRunExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRunExecute'
type DataLakePipelinesApi_DeletePipelineRunExecute_Call struct {
	*mock.Call
}

// DeletePipelineRunExecute is a helper method to define mock.On call
//   - r admin.DeletePipelineRunApiRequest
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRunExecute(r any) *DataLakePipelinesApi_DeletePipelineRunExecute_Call {
	return &DataLakePipelinesApi_DeletePipelineRunExecute_Call{Call: _e.mock.On("DeletePipelineRunExecute", r)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRunExecute_Call) Run(run func(r admin.DeletePipelineRunApiRequest)) *DataLakePipelinesApi_DeletePipelineRunExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePipelineRunApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_DeletePipelineRunExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunExecute_Call) RunAndReturn(run func(admin.DeletePipelineRunApiRequest) (any, *http.Response, error)) *DataLakePipelinesApi_DeletePipelineRunExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineRunWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) DeletePipelineRunWithParams(ctx context.Context, args *admin.DeletePipelineRunApiParams) admin.DeletePipelineRunApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineRunWithParams")
	}

	var r0 admin.DeletePipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePipelineRunApiParams) admin.DeletePipelineRunApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineRunWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineRunWithParams'
type DataLakePipelinesApi_DeletePipelineRunWithParams_Call struct {
	*mock.Call
}

// DeletePipelineRunWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePipelineRunApiParams
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineRunWithParams(ctx any, args any) *DataLakePipelinesApi_DeletePipelineRunWithParams_Call {
	return &DataLakePipelinesApi_DeletePipelineRunWithParams_Call{Call: _e.mock.On("DeletePipelineRunWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_DeletePipelineRunWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePipelineRunApiParams)) *DataLakePipelinesApi_DeletePipelineRunWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePipelineRunApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunWithParams_Call) Return(_a0 admin.DeletePipelineRunApiRequest) *DataLakePipelinesApi_DeletePipelineRunWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineRunWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePipelineRunApiParams) admin.DeletePipelineRunApiRequest) *DataLakePipelinesApi_DeletePipelineRunWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) DeletePipelineWithParams(ctx context.Context, args *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipelineWithParams")
	}

	var r0 admin.DeletePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_DeletePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipelineWithParams'
type DataLakePipelinesApi_DeletePipelineWithParams_Call struct {
	*mock.Call
}

// DeletePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) DeletePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	return &DataLakePipelinesApi_DeletePipelineWithParams_Call{Call: _e.mock.On("DeletePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePipelineApiParams)) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) Return(_a0 admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_DeletePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePipelineApiParams) admin.DeletePipelineApiRequest) *DataLakePipelinesApi_DeletePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSchedules provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) GetAvailablePipelineSchedules(ctx context.Context, groupId string, pipelineName string) admin.GetAvailablePipelineSchedulesApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSchedules")
	}

	var r0 admin.GetAvailablePipelineSchedulesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAvailablePipelineSchedulesApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.GetAvailablePipelineSchedulesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetAvailablePipelineSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSchedules'
type DataLakePipelinesApi_GetAvailablePipelineSchedules_Call struct {
	*mock.Call
}

// GetAvailablePipelineSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSchedules(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSchedules_Call{Call: _e.mock.On("GetAvailablePipelineSchedules", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call) Return(_a0 admin.GetAvailablePipelineSchedulesApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAvailablePipelineSchedulesApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSchedulesExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetAvailablePipelineSchedulesExecute(r admin.GetAvailablePipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSchedulesExecute")
	}

	var r0 []admin.DiskBackupApiPolicyItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAvailablePipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAvailablePipelineSchedulesApiRequest) []admin.DiskBackupApiPolicyItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DiskBackupApiPolicyItem)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAvailablePipelineSchedulesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAvailablePipelineSchedulesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSchedulesExecute'
type DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call struct {
	*mock.Call
}

// GetAvailablePipelineSchedulesExecute is a helper method to define mock.On call
//   - r admin.GetAvailablePipelineSchedulesApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSchedulesExecute(r any) *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call{Call: _e.mock.On("GetAvailablePipelineSchedulesExecute", r)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call) Run(run func(r admin.GetAvailablePipelineSchedulesApiRequest)) *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAvailablePipelineSchedulesApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call) Return(_a0 []admin.DiskBackupApiPolicyItem, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call) RunAndReturn(run func(admin.GetAvailablePipelineSchedulesApiRequest) ([]admin.DiskBackupApiPolicyItem, *http.Response, error)) *DataLakePipelinesApi_GetAvailablePipelineSchedulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSchedulesWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetAvailablePipelineSchedulesWithParams(ctx context.Context, args *admin.GetAvailablePipelineSchedulesApiParams) admin.GetAvailablePipelineSchedulesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSchedulesWithParams")
	}

	var r0 admin.GetAvailablePipelineSchedulesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAvailablePipelineSchedulesApiParams) admin.GetAvailablePipelineSchedulesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAvailablePipelineSchedulesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSchedulesWithParams'
type DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call struct {
	*mock.Call
}

// GetAvailablePipelineSchedulesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAvailablePipelineSchedulesApiParams
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSchedulesWithParams(ctx any, args any) *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call{Call: _e.mock.On("GetAvailablePipelineSchedulesWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAvailablePipelineSchedulesApiParams)) *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAvailablePipelineSchedulesApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call) Return(_a0 admin.GetAvailablePipelineSchedulesApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAvailablePipelineSchedulesApiParams) admin.GetAvailablePipelineSchedulesApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSchedulesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSnapshots provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) GetAvailablePipelineSnapshots(ctx context.Context, groupId string, pipelineName string) admin.GetAvailablePipelineSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSnapshots")
	}

	var r0 admin.GetAvailablePipelineSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAvailablePipelineSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.GetAvailablePipelineSnapshotsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSnapshots'
type DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call struct {
	*mock.Call
}

// GetAvailablePipelineSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSnapshots(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call{Call: _e.mock.On("GetAvailablePipelineSnapshots", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call) Return(_a0 admin.GetAvailablePipelineSnapshotsApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAvailablePipelineSnapshotsApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSnapshotsExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetAvailablePipelineSnapshotsExecute(r admin.GetAvailablePipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSnapshotsExecute")
	}

	var r0 *admin.PaginatedBackupSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAvailablePipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAvailablePipelineSnapshotsApiRequest) *admin.PaginatedBackupSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedBackupSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAvailablePipelineSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAvailablePipelineSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSnapshotsExecute'
type DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call struct {
	*mock.Call
}

// GetAvailablePipelineSnapshotsExecute is a helper method to define mock.On call
//   - r admin.GetAvailablePipelineSnapshotsApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSnapshotsExecute(r any) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call{Call: _e.mock.On("GetAvailablePipelineSnapshotsExecute", r)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call) Run(run func(r admin.GetAvailablePipelineSnapshotsApiRequest)) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAvailablePipelineSnapshotsApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call) Return(_a0 *admin.PaginatedBackupSnapshot, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call) RunAndReturn(run func(admin.GetAvailablePipelineSnapshotsApiRequest) (*admin.PaginatedBackupSnapshot, *http.Response, error)) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePipelineSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetAvailablePipelineSnapshotsWithParams(ctx context.Context, args *admin.GetAvailablePipelineSnapshotsApiParams) admin.GetAvailablePipelineSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePipelineSnapshotsWithParams")
	}

	var r0 admin.GetAvailablePipelineSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAvailablePipelineSnapshotsApiParams) admin.GetAvailablePipelineSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAvailablePipelineSnapshotsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePipelineSnapshotsWithParams'
type DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call struct {
	*mock.Call
}

// GetAvailablePipelineSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAvailablePipelineSnapshotsApiParams
func (_e *DataLakePipelinesApi_Expecter) GetAvailablePipelineSnapshotsWithParams(ctx any, args any) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call {
	return &DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call{Call: _e.mock.On("GetAvailablePipelineSnapshotsWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAvailablePipelineSnapshotsApiParams)) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAvailablePipelineSnapshotsApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call) Return(_a0 admin.GetAvailablePipelineSnapshotsApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAvailablePipelineSnapshotsApiParams) admin.GetAvailablePipelineSnapshotsApiRequest) *DataLakePipelinesApi_GetAvailablePipelineSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) GetPipeline(ctx context.Context, groupId string, pipelineName string) admin.GetPipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 admin.GetPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipeline'
type DataLakePipelinesApi_GetPipeline_Call struct {
	*mock.Call
}

// GetPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) GetPipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_GetPipeline_Call {
	return &DataLakePipelinesApi_GetPipeline_Call{Call: _e.mock.On("GetPipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) Return(_a0 admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetPipelineExecute(r admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetPipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineExecute'
type DataLakePipelinesApi_GetPipelineExecute_Call struct {
	*mock.Call
}

// GetPipelineExecute is a helper method to define mock.On call
//   - r admin.GetPipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetPipelineExecute(r any) *DataLakePipelinesApi_GetPipelineExecute_Call {
	return &DataLakePipelinesApi_GetPipelineExecute_Call{Call: _e.mock.On("GetPipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) Run(run func(r admin.GetPipelineApiRequest)) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineExecute_Call) RunAndReturn(run func(admin.GetPipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_GetPipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRun provides a mock function with given fields: ctx, groupId, pipelineName, pipelineRunId
func (_m *DataLakePipelinesApi) GetPipelineRun(ctx context.Context, groupId string, pipelineName string, pipelineRunId string) admin.GetPipelineRunApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, pipelineRunId)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRun")
	}

	var r0 admin.GetPipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetPipelineRunApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, pipelineRunId)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRun'
type DataLakePipelinesApi_GetPipelineRun_Call struct {
	*mock.Call
}

// GetPipelineRun is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - pipelineRunId string
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRun(ctx any, groupId any, pipelineName any, pipelineRunId any) *DataLakePipelinesApi_GetPipelineRun_Call {
	return &DataLakePipelinesApi_GetPipelineRun_Call{Call: _e.mock.On("GetPipelineRun", ctx, groupId, pipelineName, pipelineRunId)}
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, pipelineRunId string)) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) Return(_a0 admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRun_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRunExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) GetPipelineRunExecute(r admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRunExecute")
	}

	var r0 *admin.IngestionPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPipelineRunApiRequest) *admin.IngestionPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.IngestionPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPipelineRunApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPipelineRunApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_GetPipelineRunExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRunExecute'
type DataLakePipelinesApi_GetPipelineRunExecute_Call struct {
	*mock.Call
}

// GetPipelineRunExecute is a helper method to define mock.On call
//   - r admin.GetPipelineRunApiRequest
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRunExecute(r any) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	return &DataLakePipelinesApi_GetPipelineRunExecute_Call{Call: _e.mock.On("GetPipelineRunExecute", r)}
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) Run(run func(r admin.GetPipelineRunApiRequest)) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPipelineRunApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) Return(_a0 *admin.IngestionPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunExecute_Call) RunAndReturn(run func(admin.GetPipelineRunApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)) *DataLakePipelinesApi_GetPipelineRunExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineRunWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetPipelineRunWithParams(ctx context.Context, args *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineRunWithParams")
	}

	var r0 admin.GetPipelineRunApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineRunApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineRunWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineRunWithParams'
type DataLakePipelinesApi_GetPipelineRunWithParams_Call struct {
	*mock.Call
}

// GetPipelineRunWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPipelineRunApiParams
func (_e *DataLakePipelinesApi_Expecter) GetPipelineRunWithParams(ctx any, args any) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	return &DataLakePipelinesApi_GetPipelineRunWithParams_Call{Call: _e.mock.On("GetPipelineRunWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPipelineRunApiParams)) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPipelineRunApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) Return(_a0 admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineRunWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPipelineRunApiParams) admin.GetPipelineRunApiRequest) *DataLakePipelinesApi_GetPipelineRunWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) GetPipelineWithParams(ctx context.Context, args *admin.GetPipelineApiParams) admin.GetPipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineWithParams")
	}

	var r0 admin.GetPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPipelineApiParams) admin.GetPipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_GetPipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineWithParams'
type DataLakePipelinesApi_GetPipelineWithParams_Call struct {
	*mock.Call
}

// GetPipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) GetPipelineWithParams(ctx any, args any) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	return &DataLakePipelinesApi_GetPipelineWithParams_Call{Call: _e.mock.On("GetPipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPipelineApiParams)) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) Return(_a0 admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_GetPipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPipelineApiParams) admin.GetPipelineApiRequest) *DataLakePipelinesApi_GetPipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRuns provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ListPipelineRuns(ctx context.Context, groupId string, pipelineName string) admin.ListPipelineRunsApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRuns")
	}

	var r0 admin.ListPipelineRunsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPipelineRunsApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineRunsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRuns'
type DataLakePipelinesApi_ListPipelineRuns_Call struct {
	*mock.Call
}

// ListPipelineRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRuns(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ListPipelineRuns_Call {
	return &DataLakePipelinesApi_ListPipelineRuns_Call{Call: _e.mock.On("ListPipelineRuns", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) Return(_a0 admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRuns_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRunsExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelineRunsExecute(r admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRunsExecute")
	}

	var r0 *admin.PaginatedPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelineRunsApiRequest) *admin.PaginatedPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelineRunsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelineRunsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelineRunsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRunsExecute'
type DataLakePipelinesApi_ListPipelineRunsExecute_Call struct {
	*mock.Call
}

// ListPipelineRunsExecute is a helper method to define mock.On call
//   - r admin.ListPipelineRunsApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRunsExecute(r any) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	return &DataLakePipelinesApi_ListPipelineRunsExecute_Call{Call: _e.mock.On("ListPipelineRunsExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) Run(run func(r admin.ListPipelineRunsApiRequest)) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelineRunsApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) Return(_a0 *admin.PaginatedPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsExecute_Call) RunAndReturn(run func(admin.ListPipelineRunsApiRequest) (*admin.PaginatedPipelineRun, *http.Response, error)) *DataLakePipelinesApi_ListPipelineRunsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineRunsWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelineRunsWithParams(ctx context.Context, args *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineRunsWithParams")
	}

	var r0 admin.ListPipelineRunsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelineRunsApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelineRunsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineRunsWithParams'
type DataLakePipelinesApi_ListPipelineRunsWithParams_Call struct {
	*mock.Call
}

// ListPipelineRunsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelineRunsApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelineRunsWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	return &DataLakePipelinesApi_ListPipelineRunsWithParams_Call{Call: _e.mock.On("ListPipelineRunsWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelineRunsApiParams)) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelineRunsApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) Return(_a0 admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelineRunsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelineRunsApiParams) admin.ListPipelineRunsApiRequest) *DataLakePipelinesApi_ListPipelineRunsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields: ctx, groupId
func (_m *DataLakePipelinesApi) ListPipelines(ctx context.Context, groupId string) admin.ListPipelinesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 admin.ListPipelinesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPipelinesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPipelinesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type DataLakePipelinesApi_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *DataLakePipelinesApi_Expecter) ListPipelines(ctx any, groupId any) *DataLakePipelinesApi_ListPipelines_Call {
	return &DataLakePipelinesApi_ListPipelines_Call{Call: _e.mock.On("ListPipelines", ctx, groupId)}
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) Run(run func(ctx context.Context, groupId string)) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) Return(_a0 admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelines_Call) RunAndReturn(run func(context.Context, string) admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelinesExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ListPipelinesExecute(r admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelinesExecute")
	}

	var r0 []admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPipelinesApiRequest) []admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPipelinesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPipelinesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ListPipelinesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelinesExecute'
type DataLakePipelinesApi_ListPipelinesExecute_Call struct {
	*mock.Call
}

// ListPipelinesExecute is a helper method to define mock.On call
//   - r admin.ListPipelinesApiRequest
func (_e *DataLakePipelinesApi_Expecter) ListPipelinesExecute(r any) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	return &DataLakePipelinesApi_ListPipelinesExecute_Call{Call: _e.mock.On("ListPipelinesExecute", r)}
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) Run(run func(r admin.ListPipelinesApiRequest)) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPipelinesApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) Return(_a0 []admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesExecute_Call) RunAndReturn(run func(admin.ListPipelinesApiRequest) ([]admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_ListPipelinesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelinesWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ListPipelinesWithParams(ctx context.Context, args *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelinesWithParams")
	}

	var r0 admin.ListPipelinesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPipelinesApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ListPipelinesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelinesWithParams'
type DataLakePipelinesApi_ListPipelinesWithParams_Call struct {
	*mock.Call
}

// ListPipelinesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPipelinesApiParams
func (_e *DataLakePipelinesApi_Expecter) ListPipelinesWithParams(ctx any, args any) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	return &DataLakePipelinesApi_ListPipelinesWithParams_Call{Call: _e.mock.On("ListPipelinesWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPipelinesApiParams)) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPipelinesApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) Return(_a0 admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ListPipelinesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPipelinesApiParams) admin.ListPipelinesApiRequest) *DataLakePipelinesApi_ListPipelinesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) PausePipeline(ctx context.Context, groupId string, pipelineName string) admin.PausePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for PausePipeline")
	}

	var r0 admin.PausePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.PausePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.PausePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_PausePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipeline'
type DataLakePipelinesApi_PausePipeline_Call struct {
	*mock.Call
}

// PausePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) PausePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_PausePipeline_Call {
	return &DataLakePipelinesApi_PausePipeline_Call{Call: _e.mock.On("PausePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) Return(_a0 admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) PausePipelineExecute(r admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PausePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PausePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PausePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.PausePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_PausePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipelineExecute'
type DataLakePipelinesApi_PausePipelineExecute_Call struct {
	*mock.Call
}

// PausePipelineExecute is a helper method to define mock.On call
//   - r admin.PausePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) PausePipelineExecute(r any) *DataLakePipelinesApi_PausePipelineExecute_Call {
	return &DataLakePipelinesApi_PausePipelineExecute_Call{Call: _e.mock.On("PausePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) Run(run func(r admin.PausePipelineApiRequest)) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PausePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineExecute_Call) RunAndReturn(run func(admin.PausePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_PausePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PausePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) PausePipelineWithParams(ctx context.Context, args *admin.PausePipelineApiParams) admin.PausePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PausePipelineWithParams")
	}

	var r0 admin.PausePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PausePipelineApiParams) admin.PausePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PausePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_PausePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PausePipelineWithParams'
type DataLakePipelinesApi_PausePipelineWithParams_Call struct {
	*mock.Call
}

// PausePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PausePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) PausePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	return &DataLakePipelinesApi_PausePipelineWithParams_Call{Call: _e.mock.On("PausePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.PausePipelineApiParams)) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PausePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) Return(_a0 admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_PausePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.PausePipelineApiParams) admin.PausePipelineApiRequest) *DataLakePipelinesApi_PausePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipeline provides a mock function with given fields: ctx, groupId, pipelineName
func (_m *DataLakePipelinesApi) ResumePipeline(ctx context.Context, groupId string, pipelineName string) admin.ResumePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipeline")
	}

	var r0 admin.ResumePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ResumePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName)
	} else {
		r0 = ret.Get(0).(admin.ResumePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ResumePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipeline'
type DataLakePipelinesApi_ResumePipeline_Call struct {
	*mock.Call
}

// ResumePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
func (_e *DataLakePipelinesApi_Expecter) ResumePipeline(ctx any, groupId any, pipelineName any) *DataLakePipelinesApi_ResumePipeline_Call {
	return &DataLakePipelinesApi_ResumePipeline_Call{Call: _e.mock.On("ResumePipeline", ctx, groupId, pipelineName)}
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string)) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) Return(_a0 admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipeline_Call) RunAndReturn(run func(context.Context, string, string) admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) ResumePipelineExecute(r admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ResumePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ResumePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ResumePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_ResumePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipelineExecute'
type DataLakePipelinesApi_ResumePipelineExecute_Call struct {
	*mock.Call
}

// ResumePipelineExecute is a helper method to define mock.On call
//   - r admin.ResumePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) ResumePipelineExecute(r any) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	return &DataLakePipelinesApi_ResumePipelineExecute_Call{Call: _e.mock.On("ResumePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) Run(run func(r admin.ResumePipelineApiRequest)) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ResumePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineExecute_Call) RunAndReturn(run func(admin.ResumePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_ResumePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ResumePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) ResumePipelineWithParams(ctx context.Context, args *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ResumePipelineWithParams")
	}

	var r0 admin.ResumePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ResumePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_ResumePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumePipelineWithParams'
type DataLakePipelinesApi_ResumePipelineWithParams_Call struct {
	*mock.Call
}

// ResumePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ResumePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) ResumePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	return &DataLakePipelinesApi_ResumePipelineWithParams_Call{Call: _e.mock.On("ResumePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.ResumePipelineApiParams)) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResumePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) Return(_a0 admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_ResumePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.ResumePipelineApiParams) admin.ResumePipelineApiRequest) *DataLakePipelinesApi_ResumePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerPipeline provides a mock function with given fields: ctx, groupId, pipelineName, triggerIngestionPipelineRequest
func (_m *DataLakePipelinesApi) TriggerPipeline(ctx context.Context, groupId string, pipelineName string, triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest) admin.TriggerPipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, triggerIngestionPipelineRequest)

	if len(ret) == 0 {
		panic("no return value specified for TriggerPipeline")
	}

	var r0 admin.TriggerPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TriggerIngestionPipelineRequest) admin.TriggerPipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, triggerIngestionPipelineRequest)
	} else {
		r0 = ret.Get(0).(admin.TriggerPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_TriggerPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerPipeline'
type DataLakePipelinesApi_TriggerPipeline_Call struct {
	*mock.Call
}

// TriggerPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest
func (_e *DataLakePipelinesApi_Expecter) TriggerPipeline(ctx any, groupId any, pipelineName any, triggerIngestionPipelineRequest any) *DataLakePipelinesApi_TriggerPipeline_Call {
	return &DataLakePipelinesApi_TriggerPipeline_Call{Call: _e.mock.On("TriggerPipeline", ctx, groupId, pipelineName, triggerIngestionPipelineRequest)}
}

func (_c *DataLakePipelinesApi_TriggerPipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, triggerIngestionPipelineRequest *admin.TriggerIngestionPipelineRequest)) *DataLakePipelinesApi_TriggerPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TriggerIngestionPipelineRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipeline_Call) Return(_a0 admin.TriggerPipelineApiRequest) *DataLakePipelinesApi_TriggerPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipeline_Call) RunAndReturn(run func(context.Context, string, string, *admin.TriggerIngestionPipelineRequest) admin.TriggerPipelineApiRequest) *DataLakePipelinesApi_TriggerPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerPipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) TriggerPipelineExecute(r admin.TriggerPipelineApiRequest) (*admin.IngestionPipelineRun, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TriggerPipelineExecute")
	}

	var r0 *admin.IngestionPipelineRun
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.TriggerPipelineApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.TriggerPipelineApiRequest) *admin.IngestionPipelineRun); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.IngestionPipelineRun)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.TriggerPipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.TriggerPipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_TriggerPipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerPipelineExecute'
type DataLakePipelinesApi_TriggerPipelineExecute_Call struct {
	*mock.Call
}

// TriggerPipelineExecute is a helper method to define mock.On call
//   - r admin.TriggerPipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) TriggerPipelineExecute(r any) *DataLakePipelinesApi_TriggerPipelineExecute_Call {
	return &DataLakePipelinesApi_TriggerPipelineExecute_Call{Call: _e.mock.On("TriggerPipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_TriggerPipelineExecute_Call) Run(run func(r admin.TriggerPipelineApiRequest)) *DataLakePipelinesApi_TriggerPipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.TriggerPipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipelineExecute_Call) Return(_a0 *admin.IngestionPipelineRun, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_TriggerPipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipelineExecute_Call) RunAndReturn(run func(admin.TriggerPipelineApiRequest) (*admin.IngestionPipelineRun, *http.Response, error)) *DataLakePipelinesApi_TriggerPipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerPipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) TriggerPipelineWithParams(ctx context.Context, args *admin.TriggerPipelineApiParams) admin.TriggerPipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for TriggerPipelineWithParams")
	}

	var r0 admin.TriggerPipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TriggerPipelineApiParams) admin.TriggerPipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.TriggerPipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_TriggerPipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerPipelineWithParams'
type DataLakePipelinesApi_TriggerPipelineWithParams_Call struct {
	*mock.Call
}

// TriggerPipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.TriggerPipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) TriggerPipelineWithParams(ctx any, args any) *DataLakePipelinesApi_TriggerPipelineWithParams_Call {
	return &DataLakePipelinesApi_TriggerPipelineWithParams_Call{Call: _e.mock.On("TriggerPipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_TriggerPipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.TriggerPipelineApiParams)) *DataLakePipelinesApi_TriggerPipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TriggerPipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipelineWithParams_Call) Return(_a0 admin.TriggerPipelineApiRequest) *DataLakePipelinesApi_TriggerPipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_TriggerPipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.TriggerPipelineApiParams) admin.TriggerPipelineApiRequest) *DataLakePipelinesApi_TriggerPipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipeline provides a mock function with given fields: ctx, groupId, pipelineName, dataLakeIngestionPipeline
func (_m *DataLakePipelinesApi) UpdatePipeline(ctx context.Context, groupId string, pipelineName string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest {
	ret := _m.Called(ctx, groupId, pipelineName, dataLakeIngestionPipeline)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 admin.UpdatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest); ok {
		r0 = rf(ctx, groupId, pipelineName, dataLakeIngestionPipeline)
	} else {
		r0 = ret.Get(0).(admin.UpdatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_UpdatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipeline'
type DataLakePipelinesApi_UpdatePipeline_Call struct {
	*mock.Call
}

// UpdatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pipelineName string
//   - dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline
func (_e *DataLakePipelinesApi_Expecter) UpdatePipeline(ctx any, groupId any, pipelineName any, dataLakeIngestionPipeline any) *DataLakePipelinesApi_UpdatePipeline_Call {
	return &DataLakePipelinesApi_UpdatePipeline_Call{Call: _e.mock.On("UpdatePipeline", ctx, groupId, pipelineName, dataLakeIngestionPipeline)}
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) Run(run func(ctx context.Context, groupId string, pipelineName string, dataLakeIngestionPipeline *admin.DataLakeIngestionPipeline)) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataLakeIngestionPipeline))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) Return(_a0 admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipeline_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataLakeIngestionPipeline) admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipelineExecute provides a mock function with given fields: r
func (_m *DataLakePipelinesApi) UpdatePipelineExecute(r admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineExecute")
	}

	var r0 *admin.DataLakeIngestionPipeline
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdatePipelineApiRequest) *admin.DataLakeIngestionPipeline); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataLakeIngestionPipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdatePipelineApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdatePipelineApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DataLakePipelinesApi_UpdatePipelineExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipelineExecute'
type DataLakePipelinesApi_UpdatePipelineExecute_Call struct {
	*mock.Call
}

// UpdatePipelineExecute is a helper method to define mock.On call
//   - r admin.UpdatePipelineApiRequest
func (_e *DataLakePipelinesApi_Expecter) UpdatePipelineExecute(r any) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	return &DataLakePipelinesApi_UpdatePipelineExecute_Call{Call: _e.mock.On("UpdatePipelineExecute", r)}
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) Run(run func(r admin.UpdatePipelineApiRequest)) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdatePipelineApiRequest))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) Return(_a0 *admin.DataLakeIngestionPipeline, _a1 *http.Response, _a2 error) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineExecute_Call) RunAndReturn(run func(admin.UpdatePipelineApiRequest) (*admin.DataLakeIngestionPipeline, *http.Response, error)) *DataLakePipelinesApi_UpdatePipelineExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipelineWithParams provides a mock function with given fields: ctx, args
func (_m *DataLakePipelinesApi) UpdatePipelineWithParams(ctx context.Context, args *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineWithParams")
	}

	var r0 admin.UpdatePipelineApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdatePipelineApiRequest)
	}

	return r0
}

// DataLakePipelinesApi_UpdatePipelineWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipelineWithParams'
type DataLakePipelinesApi_UpdatePipelineWithParams_Call struct {
	*mock.Call
}

// UpdatePipelineWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdatePipelineApiParams
func (_e *DataLakePipelinesApi_Expecter) UpdatePipelineWithParams(ctx any, args any) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	return &DataLakePipelinesApi_UpdatePipelineWithParams_Call{Call: _e.mock.On("UpdatePipelineWithParams", ctx, args)}
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdatePipelineApiParams)) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdatePipelineApiParams))
	})
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) Return(_a0 admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataLakePipelinesApi_UpdatePipelineWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdatePipelineApiParams) admin.UpdatePipelineApiRequest) *DataLakePipelinesApi_UpdatePipelineWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataLakePipelinesApi creates a new instance of DataLakePipelinesApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataLakePipelinesApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataLakePipelinesApi {
	mock := &DataLakePipelinesApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
