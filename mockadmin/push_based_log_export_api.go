// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// PushBasedLogExportApi is an autogenerated mock type for the PushBasedLogExportApi type
type PushBasedLogExportApi struct {
	mock.Mock
}

type PushBasedLogExportApi_Expecter struct {
	mock *mock.Mock
}

func (_m *PushBasedLogExportApi) EXPECT() *PushBasedLogExportApi_Expecter {
	return &PushBasedLogExportApi_Expecter{mock: &_m.Mock}
}

// CreateLogExport provides a mock function with given fields: ctx, groupId, createPushBasedLogExportProjectRequest
func (_m *PushBasedLogExportApi) CreateLogExport(ctx context.Context, groupId string, createPushBasedLogExportProjectRequest *admin.CreatePushBasedLogExportProjectRequest) admin.CreateLogExportApiRequest {
	ret := _m.Called(ctx, groupId, createPushBasedLogExportProjectRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogExport")
	}

	var r0 admin.CreateLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.CreatePushBasedLogExportProjectRequest) admin.CreateLogExportApiRequest); ok {
		r0 = rf(ctx, groupId, createPushBasedLogExportProjectRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_CreateLogExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogExport'
type PushBasedLogExportApi_CreateLogExport_Call struct {
	*mock.Call
}

// CreateLogExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - createPushBasedLogExportProjectRequest *admin.CreatePushBasedLogExportProjectRequest
func (_e *PushBasedLogExportApi_Expecter) CreateLogExport(ctx any, groupId any, createPushBasedLogExportProjectRequest any) *PushBasedLogExportApi_CreateLogExport_Call {
	return &PushBasedLogExportApi_CreateLogExport_Call{Call: _e.mock.On("CreateLogExport", ctx, groupId, createPushBasedLogExportProjectRequest)}
}

func (_c *PushBasedLogExportApi_CreateLogExport_Call) Run(run func(ctx context.Context, groupId string, createPushBasedLogExportProjectRequest *admin.CreatePushBasedLogExportProjectRequest)) *PushBasedLogExportApi_CreateLogExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.CreatePushBasedLogExportProjectRequest))
	})
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExport_Call) Return(_a0 admin.CreateLogExportApiRequest) *PushBasedLogExportApi_CreateLogExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExport_Call) RunAndReturn(run func(context.Context, string, *admin.CreatePushBasedLogExportProjectRequest) admin.CreateLogExportApiRequest) *PushBasedLogExportApi_CreateLogExport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogExportExecute provides a mock function with given fields: r
func (_m *PushBasedLogExportApi) CreateLogExportExecute(r admin.CreateLogExportApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogExportExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.CreateLogExportApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateLogExportApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateLogExportApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushBasedLogExportApi_CreateLogExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogExportExecute'
type PushBasedLogExportApi_CreateLogExportExecute_Call struct {
	*mock.Call
}

// CreateLogExportExecute is a helper method to define mock.On call
//   - r admin.CreateLogExportApiRequest
func (_e *PushBasedLogExportApi_Expecter) CreateLogExportExecute(r any) *PushBasedLogExportApi_CreateLogExportExecute_Call {
	return &PushBasedLogExportApi_CreateLogExportExecute_Call{Call: _e.mock.On("CreateLogExportExecute", r)}
}

func (_c *PushBasedLogExportApi_CreateLogExportExecute_Call) Run(run func(r admin.CreateLogExportApiRequest)) *PushBasedLogExportApi_CreateLogExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateLogExportApiRequest))
	})
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExportExecute_Call) Return(_a0 *http.Response, _a1 error) *PushBasedLogExportApi_CreateLogExportExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExportExecute_Call) RunAndReturn(run func(admin.CreateLogExportApiRequest) (*http.Response, error)) *PushBasedLogExportApi_CreateLogExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogExportWithParams provides a mock function with given fields: ctx, args
func (_m *PushBasedLogExportApi) CreateLogExportWithParams(ctx context.Context, args *admin.CreateLogExportApiParams) admin.CreateLogExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogExportWithParams")
	}

	var r0 admin.CreateLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateLogExportApiParams) admin.CreateLogExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_CreateLogExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogExportWithParams'
type PushBasedLogExportApi_CreateLogExportWithParams_Call struct {
	*mock.Call
}

// CreateLogExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateLogExportApiParams
func (_e *PushBasedLogExportApi_Expecter) CreateLogExportWithParams(ctx any, args any) *PushBasedLogExportApi_CreateLogExportWithParams_Call {
	return &PushBasedLogExportApi_CreateLogExportWithParams_Call{Call: _e.mock.On("CreateLogExportWithParams", ctx, args)}
}

func (_c *PushBasedLogExportApi_CreateLogExportWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateLogExportApiParams)) *PushBasedLogExportApi_CreateLogExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateLogExportApiParams))
	})
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExportWithParams_Call) Return(_a0 admin.CreateLogExportApiRequest) *PushBasedLogExportApi_CreateLogExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_CreateLogExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateLogExportApiParams) admin.CreateLogExportApiRequest) *PushBasedLogExportApi_CreateLogExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogExport provides a mock function with given fields: ctx, groupId
func (_m *PushBasedLogExportApi) DeleteLogExport(ctx context.Context, groupId string) admin.DeleteLogExportApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogExport")
	}

	var r0 admin.DeleteLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteLogExportApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_DeleteLogExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogExport'
type PushBasedLogExportApi_DeleteLogExport_Call struct {
	*mock.Call
}

// DeleteLogExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *PushBasedLogExportApi_Expecter) DeleteLogExport(ctx any, groupId any) *PushBasedLogExportApi_DeleteLogExport_Call {
	return &PushBasedLogExportApi_DeleteLogExport_Call{Call: _e.mock.On("DeleteLogExport", ctx, groupId)}
}

func (_c *PushBasedLogExportApi_DeleteLogExport_Call) Run(run func(ctx context.Context, groupId string)) *PushBasedLogExportApi_DeleteLogExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExport_Call) Return(_a0 admin.DeleteLogExportApiRequest) *PushBasedLogExportApi_DeleteLogExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExport_Call) RunAndReturn(run func(context.Context, string) admin.DeleteLogExportApiRequest) *PushBasedLogExportApi_DeleteLogExport_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogExportExecute provides a mock function with given fields: r
func (_m *PushBasedLogExportApi) DeleteLogExportExecute(r admin.DeleteLogExportApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogExportExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteLogExportApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteLogExportApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteLogExportApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushBasedLogExportApi_DeleteLogExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogExportExecute'
type PushBasedLogExportApi_DeleteLogExportExecute_Call struct {
	*mock.Call
}

// DeleteLogExportExecute is a helper method to define mock.On call
//   - r admin.DeleteLogExportApiRequest
func (_e *PushBasedLogExportApi_Expecter) DeleteLogExportExecute(r any) *PushBasedLogExportApi_DeleteLogExportExecute_Call {
	return &PushBasedLogExportApi_DeleteLogExportExecute_Call{Call: _e.mock.On("DeleteLogExportExecute", r)}
}

func (_c *PushBasedLogExportApi_DeleteLogExportExecute_Call) Run(run func(r admin.DeleteLogExportApiRequest)) *PushBasedLogExportApi_DeleteLogExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteLogExportApiRequest))
	})
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExportExecute_Call) Return(_a0 *http.Response, _a1 error) *PushBasedLogExportApi_DeleteLogExportExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExportExecute_Call) RunAndReturn(run func(admin.DeleteLogExportApiRequest) (*http.Response, error)) *PushBasedLogExportApi_DeleteLogExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogExportWithParams provides a mock function with given fields: ctx, args
func (_m *PushBasedLogExportApi) DeleteLogExportWithParams(ctx context.Context, args *admin.DeleteLogExportApiParams) admin.DeleteLogExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogExportWithParams")
	}

	var r0 admin.DeleteLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteLogExportApiParams) admin.DeleteLogExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_DeleteLogExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogExportWithParams'
type PushBasedLogExportApi_DeleteLogExportWithParams_Call struct {
	*mock.Call
}

// DeleteLogExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteLogExportApiParams
func (_e *PushBasedLogExportApi_Expecter) DeleteLogExportWithParams(ctx any, args any) *PushBasedLogExportApi_DeleteLogExportWithParams_Call {
	return &PushBasedLogExportApi_DeleteLogExportWithParams_Call{Call: _e.mock.On("DeleteLogExportWithParams", ctx, args)}
}

func (_c *PushBasedLogExportApi_DeleteLogExportWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteLogExportApiParams)) *PushBasedLogExportApi_DeleteLogExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteLogExportApiParams))
	})
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExportWithParams_Call) Return(_a0 admin.DeleteLogExportApiRequest) *PushBasedLogExportApi_DeleteLogExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_DeleteLogExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteLogExportApiParams) admin.DeleteLogExportApiRequest) *PushBasedLogExportApi_DeleteLogExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogExport provides a mock function with given fields: ctx, groupId
func (_m *PushBasedLogExportApi) GetLogExport(ctx context.Context, groupId string) admin.GetLogExportApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetLogExport")
	}

	var r0 admin.GetLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetLogExportApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_GetLogExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogExport'
type PushBasedLogExportApi_GetLogExport_Call struct {
	*mock.Call
}

// GetLogExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *PushBasedLogExportApi_Expecter) GetLogExport(ctx any, groupId any) *PushBasedLogExportApi_GetLogExport_Call {
	return &PushBasedLogExportApi_GetLogExport_Call{Call: _e.mock.On("GetLogExport", ctx, groupId)}
}

func (_c *PushBasedLogExportApi_GetLogExport_Call) Run(run func(ctx context.Context, groupId string)) *PushBasedLogExportApi_GetLogExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExport_Call) Return(_a0 admin.GetLogExportApiRequest) *PushBasedLogExportApi_GetLogExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExport_Call) RunAndReturn(run func(context.Context, string) admin.GetLogExportApiRequest) *PushBasedLogExportApi_GetLogExport_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogExportExecute provides a mock function with given fields: r
func (_m *PushBasedLogExportApi) GetLogExportExecute(r admin.GetLogExportApiRequest) (*admin.PushBasedLogExportProject, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLogExportExecute")
	}

	var r0 *admin.PushBasedLogExportProject
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetLogExportApiRequest) (*admin.PushBasedLogExportProject, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetLogExportApiRequest) *admin.PushBasedLogExportProject); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PushBasedLogExportProject)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetLogExportApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetLogExportApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PushBasedLogExportApi_GetLogExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogExportExecute'
type PushBasedLogExportApi_GetLogExportExecute_Call struct {
	*mock.Call
}

// GetLogExportExecute is a helper method to define mock.On call
//   - r admin.GetLogExportApiRequest
func (_e *PushBasedLogExportApi_Expecter) GetLogExportExecute(r any) *PushBasedLogExportApi_GetLogExportExecute_Call {
	return &PushBasedLogExportApi_GetLogExportExecute_Call{Call: _e.mock.On("GetLogExportExecute", r)}
}

func (_c *PushBasedLogExportApi_GetLogExportExecute_Call) Run(run func(r admin.GetLogExportApiRequest)) *PushBasedLogExportApi_GetLogExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetLogExportApiRequest))
	})
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExportExecute_Call) Return(_a0 *admin.PushBasedLogExportProject, _a1 *http.Response, _a2 error) *PushBasedLogExportApi_GetLogExportExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExportExecute_Call) RunAndReturn(run func(admin.GetLogExportApiRequest) (*admin.PushBasedLogExportProject, *http.Response, error)) *PushBasedLogExportApi_GetLogExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogExportWithParams provides a mock function with given fields: ctx, args
func (_m *PushBasedLogExportApi) GetLogExportWithParams(ctx context.Context, args *admin.GetLogExportApiParams) admin.GetLogExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetLogExportWithParams")
	}

	var r0 admin.GetLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetLogExportApiParams) admin.GetLogExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_GetLogExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogExportWithParams'
type PushBasedLogExportApi_GetLogExportWithParams_Call struct {
	*mock.Call
}

// GetLogExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetLogExportApiParams
func (_e *PushBasedLogExportApi_Expecter) GetLogExportWithParams(ctx any, args any) *PushBasedLogExportApi_GetLogExportWithParams_Call {
	return &PushBasedLogExportApi_GetLogExportWithParams_Call{Call: _e.mock.On("GetLogExportWithParams", ctx, args)}
}

func (_c *PushBasedLogExportApi_GetLogExportWithParams_Call) Run(run func(ctx context.Context, args *admin.GetLogExportApiParams)) *PushBasedLogExportApi_GetLogExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetLogExportApiParams))
	})
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExportWithParams_Call) Return(_a0 admin.GetLogExportApiRequest) *PushBasedLogExportApi_GetLogExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_GetLogExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetLogExportApiParams) admin.GetLogExportApiRequest) *PushBasedLogExportApi_GetLogExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogExport provides a mock function with given fields: ctx, groupId, pushBasedLogExportProject
func (_m *PushBasedLogExportApi) UpdateLogExport(ctx context.Context, groupId string, pushBasedLogExportProject *admin.PushBasedLogExportProject) admin.UpdateLogExportApiRequest {
	ret := _m.Called(ctx, groupId, pushBasedLogExportProject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogExport")
	}

	var r0 admin.UpdateLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.PushBasedLogExportProject) admin.UpdateLogExportApiRequest); ok {
		r0 = rf(ctx, groupId, pushBasedLogExportProject)
	} else {
		r0 = ret.Get(0).(admin.UpdateLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_UpdateLogExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogExport'
type PushBasedLogExportApi_UpdateLogExport_Call struct {
	*mock.Call
}

// UpdateLogExport is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - pushBasedLogExportProject *admin.PushBasedLogExportProject
func (_e *PushBasedLogExportApi_Expecter) UpdateLogExport(ctx any, groupId any, pushBasedLogExportProject any) *PushBasedLogExportApi_UpdateLogExport_Call {
	return &PushBasedLogExportApi_UpdateLogExport_Call{Call: _e.mock.On("UpdateLogExport", ctx, groupId, pushBasedLogExportProject)}
}

func (_c *PushBasedLogExportApi_UpdateLogExport_Call) Run(run func(ctx context.Context, groupId string, pushBasedLogExportProject *admin.PushBasedLogExportProject)) *PushBasedLogExportApi_UpdateLogExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.PushBasedLogExportProject))
	})
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExport_Call) Return(_a0 admin.UpdateLogExportApiRequest) *PushBasedLogExportApi_UpdateLogExport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExport_Call) RunAndReturn(run func(context.Context, string, *admin.PushBasedLogExportProject) admin.UpdateLogExportApiRequest) *PushBasedLogExportApi_UpdateLogExport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogExportExecute provides a mock function with given fields: r
func (_m *PushBasedLogExportApi) UpdateLogExportExecute(r admin.UpdateLogExportApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogExportExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.UpdateLogExportApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateLogExportApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateLogExportApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushBasedLogExportApi_UpdateLogExportExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogExportExecute'
type PushBasedLogExportApi_UpdateLogExportExecute_Call struct {
	*mock.Call
}

// UpdateLogExportExecute is a helper method to define mock.On call
//   - r admin.UpdateLogExportApiRequest
func (_e *PushBasedLogExportApi_Expecter) UpdateLogExportExecute(r any) *PushBasedLogExportApi_UpdateLogExportExecute_Call {
	return &PushBasedLogExportApi_UpdateLogExportExecute_Call{Call: _e.mock.On("UpdateLogExportExecute", r)}
}

func (_c *PushBasedLogExportApi_UpdateLogExportExecute_Call) Run(run func(r admin.UpdateLogExportApiRequest)) *PushBasedLogExportApi_UpdateLogExportExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateLogExportApiRequest))
	})
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExportExecute_Call) Return(_a0 *http.Response, _a1 error) *PushBasedLogExportApi_UpdateLogExportExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExportExecute_Call) RunAndReturn(run func(admin.UpdateLogExportApiRequest) (*http.Response, error)) *PushBasedLogExportApi_UpdateLogExportExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogExportWithParams provides a mock function with given fields: ctx, args
func (_m *PushBasedLogExportApi) UpdateLogExportWithParams(ctx context.Context, args *admin.UpdateLogExportApiParams) admin.UpdateLogExportApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogExportWithParams")
	}

	var r0 admin.UpdateLogExportApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateLogExportApiParams) admin.UpdateLogExportApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateLogExportApiRequest)
	}

	return r0
}

// PushBasedLogExportApi_UpdateLogExportWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogExportWithParams'
type PushBasedLogExportApi_UpdateLogExportWithParams_Call struct {
	*mock.Call
}

// UpdateLogExportWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateLogExportApiParams
func (_e *PushBasedLogExportApi_Expecter) UpdateLogExportWithParams(ctx any, args any) *PushBasedLogExportApi_UpdateLogExportWithParams_Call {
	return &PushBasedLogExportApi_UpdateLogExportWithParams_Call{Call: _e.mock.On("UpdateLogExportWithParams", ctx, args)}
}

func (_c *PushBasedLogExportApi_UpdateLogExportWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateLogExportApiParams)) *PushBasedLogExportApi_UpdateLogExportWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateLogExportApiParams))
	})
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExportWithParams_Call) Return(_a0 admin.UpdateLogExportApiRequest) *PushBasedLogExportApi_UpdateLogExportWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PushBasedLogExportApi_UpdateLogExportWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateLogExportApiParams) admin.UpdateLogExportApiRequest) *PushBasedLogExportApi_UpdateLogExportWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewPushBasedLogExportApi creates a new instance of PushBasedLogExportApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPushBasedLogExportApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *PushBasedLogExportApi {
	mock := &PushBasedLogExportApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
