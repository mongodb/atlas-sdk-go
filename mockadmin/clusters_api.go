// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ClustersApi is an autogenerated mock type for the ClustersApi type
type ClustersApi struct {
	mock.Mock
}

type ClustersApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ClustersApi) EXPECT() *ClustersApi_Expecter {
	return &ClustersApi_Expecter{mock: &_m.Mock}
}

// AutoScalingConfiguration provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) AutoScalingConfiguration(ctx context.Context, groupId string, clusterName string) admin.AutoScalingConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for AutoScalingConfiguration")
	}

	var r0 admin.AutoScalingConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.AutoScalingConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.AutoScalingConfigurationApiRequest)
	}

	return r0
}

// ClustersApi_AutoScalingConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoScalingConfiguration'
type ClustersApi_AutoScalingConfiguration_Call struct {
	*mock.Call
}

// AutoScalingConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) AutoScalingConfiguration(ctx any, groupId any, clusterName any) *ClustersApi_AutoScalingConfiguration_Call {
	return &ClustersApi_AutoScalingConfiguration_Call{Call: _e.mock.On("AutoScalingConfiguration", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_AutoScalingConfiguration_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_AutoScalingConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_AutoScalingConfiguration_Call) Return(_a0 admin.AutoScalingConfigurationApiRequest) *ClustersApi_AutoScalingConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_AutoScalingConfiguration_Call) RunAndReturn(run func(context.Context, string, string) admin.AutoScalingConfigurationApiRequest) *ClustersApi_AutoScalingConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// AutoScalingConfigurationExecute provides a mock function with given fields: r
func (_m *ClustersApi) AutoScalingConfigurationExecute(r admin.AutoScalingConfigurationApiRequest) (*admin.ClusterDescriptionAutoScalingModeConfiguration, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AutoScalingConfigurationExecute")
	}

	var r0 *admin.ClusterDescriptionAutoScalingModeConfiguration
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AutoScalingConfigurationApiRequest) (*admin.ClusterDescriptionAutoScalingModeConfiguration, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AutoScalingConfigurationApiRequest) *admin.ClusterDescriptionAutoScalingModeConfiguration); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescriptionAutoScalingModeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AutoScalingConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AutoScalingConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_AutoScalingConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoScalingConfigurationExecute'
type ClustersApi_AutoScalingConfigurationExecute_Call struct {
	*mock.Call
}

// AutoScalingConfigurationExecute is a helper method to define mock.On call
//   - r admin.AutoScalingConfigurationApiRequest
func (_e *ClustersApi_Expecter) AutoScalingConfigurationExecute(r any) *ClustersApi_AutoScalingConfigurationExecute_Call {
	return &ClustersApi_AutoScalingConfigurationExecute_Call{Call: _e.mock.On("AutoScalingConfigurationExecute", r)}
}

func (_c *ClustersApi_AutoScalingConfigurationExecute_Call) Run(run func(r admin.AutoScalingConfigurationApiRequest)) *ClustersApi_AutoScalingConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AutoScalingConfigurationApiRequest))
	})
	return _c
}

func (_c *ClustersApi_AutoScalingConfigurationExecute_Call) Return(_a0 *admin.ClusterDescriptionAutoScalingModeConfiguration, _a1 *http.Response, _a2 error) *ClustersApi_AutoScalingConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_AutoScalingConfigurationExecute_Call) RunAndReturn(run func(admin.AutoScalingConfigurationApiRequest) (*admin.ClusterDescriptionAutoScalingModeConfiguration, *http.Response, error)) *ClustersApi_AutoScalingConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AutoScalingConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) AutoScalingConfigurationWithParams(ctx context.Context, args *admin.AutoScalingConfigurationApiParams) admin.AutoScalingConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AutoScalingConfigurationWithParams")
	}

	var r0 admin.AutoScalingConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AutoScalingConfigurationApiParams) admin.AutoScalingConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AutoScalingConfigurationApiRequest)
	}

	return r0
}

// ClustersApi_AutoScalingConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoScalingConfigurationWithParams'
type ClustersApi_AutoScalingConfigurationWithParams_Call struct {
	*mock.Call
}

// AutoScalingConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AutoScalingConfigurationApiParams
func (_e *ClustersApi_Expecter) AutoScalingConfigurationWithParams(ctx any, args any) *ClustersApi_AutoScalingConfigurationWithParams_Call {
	return &ClustersApi_AutoScalingConfigurationWithParams_Call{Call: _e.mock.On("AutoScalingConfigurationWithParams", ctx, args)}
}

func (_c *ClustersApi_AutoScalingConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.AutoScalingConfigurationApiParams)) *ClustersApi_AutoScalingConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AutoScalingConfigurationApiParams))
	})
	return _c
}

func (_c *ClustersApi_AutoScalingConfigurationWithParams_Call) Return(_a0 admin.AutoScalingConfigurationApiRequest) *ClustersApi_AutoScalingConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_AutoScalingConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.AutoScalingConfigurationApiParams) admin.AutoScalingConfigurationApiRequest) *ClustersApi_AutoScalingConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCluster provides a mock function with given fields: ctx, groupId, clusterDescription20240805
func (_m *ClustersApi) CreateCluster(ctx context.Context, groupId string, clusterDescription20240805 *admin.ClusterDescription20240805) admin.CreateClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterDescription20240805)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 admin.CreateClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ClusterDescription20240805) admin.CreateClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterDescription20240805)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterApiRequest)
	}

	return r0
}

// ClustersApi_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type ClustersApi_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterDescription20240805 *admin.ClusterDescription20240805
func (_e *ClustersApi_Expecter) CreateCluster(ctx any, groupId any, clusterDescription20240805 any) *ClustersApi_CreateCluster_Call {
	return &ClustersApi_CreateCluster_Call{Call: _e.mock.On("CreateCluster", ctx, groupId, clusterDescription20240805)}
}

func (_c *ClustersApi_CreateCluster_Call) Run(run func(ctx context.Context, groupId string, clusterDescription20240805 *admin.ClusterDescription20240805)) *ClustersApi_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ClusterDescription20240805))
	})
	return _c
}

func (_c *ClustersApi_CreateCluster_Call) Return(_a0 admin.CreateClusterApiRequest) *ClustersApi_CreateCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_CreateCluster_Call) RunAndReturn(run func(context.Context, string, *admin.ClusterDescription20240805) admin.CreateClusterApiRequest) *ClustersApi_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterExecute provides a mock function with given fields: r
func (_m *ClustersApi) CreateClusterExecute(r admin.CreateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterExecute")
	}

	var r0 *admin.ClusterDescription20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateClusterApiRequest) *admin.ClusterDescription20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescription20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_CreateClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterExecute'
type ClustersApi_CreateClusterExecute_Call struct {
	*mock.Call
}

// CreateClusterExecute is a helper method to define mock.On call
//   - r admin.CreateClusterApiRequest
func (_e *ClustersApi_Expecter) CreateClusterExecute(r any) *ClustersApi_CreateClusterExecute_Call {
	return &ClustersApi_CreateClusterExecute_Call{Call: _e.mock.On("CreateClusterExecute", r)}
}

func (_c *ClustersApi_CreateClusterExecute_Call) Run(run func(r admin.CreateClusterApiRequest)) *ClustersApi_CreateClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateClusterApiRequest))
	})
	return _c
}

func (_c *ClustersApi_CreateClusterExecute_Call) Return(_a0 *admin.ClusterDescription20240805, _a1 *http.Response, _a2 error) *ClustersApi_CreateClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_CreateClusterExecute_Call) RunAndReturn(run func(admin.CreateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)) *ClustersApi_CreateClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) CreateClusterWithParams(ctx context.Context, args *admin.CreateClusterApiParams) admin.CreateClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterWithParams")
	}

	var r0 admin.CreateClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateClusterApiParams) admin.CreateClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterApiRequest)
	}

	return r0
}

// ClustersApi_CreateClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterWithParams'
type ClustersApi_CreateClusterWithParams_Call struct {
	*mock.Call
}

// CreateClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateClusterApiParams
func (_e *ClustersApi_Expecter) CreateClusterWithParams(ctx any, args any) *ClustersApi_CreateClusterWithParams_Call {
	return &ClustersApi_CreateClusterWithParams_Call{Call: _e.mock.On("CreateClusterWithParams", ctx, args)}
}

func (_c *ClustersApi_CreateClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateClusterApiParams)) *ClustersApi_CreateClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateClusterApiParams))
	})
	return _c
}

func (_c *ClustersApi_CreateClusterWithParams_Call) Return(_a0 admin.CreateClusterApiRequest) *ClustersApi_CreateClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_CreateClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateClusterApiParams) admin.CreateClusterApiRequest) *ClustersApi_CreateClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) DeleteCluster(ctx context.Context, groupId string, clusterName string) admin.DeleteClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 admin.DeleteClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterApiRequest)
	}

	return r0
}

// ClustersApi_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type ClustersApi_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) DeleteCluster(ctx any, groupId any, clusterName any) *ClustersApi_DeleteCluster_Call {
	return &ClustersApi_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_DeleteCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_DeleteCluster_Call) Return(_a0 admin.DeleteClusterApiRequest) *ClustersApi_DeleteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_DeleteCluster_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteClusterApiRequest) *ClustersApi_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterExecute provides a mock function with given fields: r
func (_m *ClustersApi) DeleteClusterExecute(r admin.DeleteClusterApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_DeleteClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterExecute'
type ClustersApi_DeleteClusterExecute_Call struct {
	*mock.Call
}

// DeleteClusterExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterApiRequest
func (_e *ClustersApi_Expecter) DeleteClusterExecute(r any) *ClustersApi_DeleteClusterExecute_Call {
	return &ClustersApi_DeleteClusterExecute_Call{Call: _e.mock.On("DeleteClusterExecute", r)}
}

func (_c *ClustersApi_DeleteClusterExecute_Call) Run(run func(r admin.DeleteClusterApiRequest)) *ClustersApi_DeleteClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterApiRequest))
	})
	return _c
}

func (_c *ClustersApi_DeleteClusterExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_DeleteClusterExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_DeleteClusterExecute_Call) RunAndReturn(run func(admin.DeleteClusterApiRequest) (*http.Response, error)) *ClustersApi_DeleteClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) DeleteClusterWithParams(ctx context.Context, args *admin.DeleteClusterApiParams) admin.DeleteClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterWithParams")
	}

	var r0 admin.DeleteClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterApiParams) admin.DeleteClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterApiRequest)
	}

	return r0
}

// ClustersApi_DeleteClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterWithParams'
type ClustersApi_DeleteClusterWithParams_Call struct {
	*mock.Call
}

// DeleteClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterApiParams
func (_e *ClustersApi_Expecter) DeleteClusterWithParams(ctx any, args any) *ClustersApi_DeleteClusterWithParams_Call {
	return &ClustersApi_DeleteClusterWithParams_Call{Call: _e.mock.On("DeleteClusterWithParams", ctx, args)}
}

func (_c *ClustersApi_DeleteClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterApiParams)) *ClustersApi_DeleteClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterApiParams))
	})
	return _c
}

func (_c *ClustersApi_DeleteClusterWithParams_Call) Return(_a0 admin.DeleteClusterApiRequest) *ClustersApi_DeleteClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_DeleteClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterApiParams) admin.DeleteClusterApiRequest) *ClustersApi_DeleteClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) GetCluster(ctx context.Context, groupId string, clusterName string) admin.GetClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 admin.GetClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetClusterApiRequest)
	}

	return r0
}

// ClustersApi_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ClustersApi_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) GetCluster(ctx any, groupId any, clusterName any) *ClustersApi_GetCluster_Call {
	return &ClustersApi_GetCluster_Call{Call: _e.mock.On("GetCluster", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_GetCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_GetCluster_Call) Return(_a0 admin.GetClusterApiRequest) *ClustersApi_GetCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetCluster_Call) RunAndReturn(run func(context.Context, string, string) admin.GetClusterApiRequest) *ClustersApi_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterExecute provides a mock function with given fields: r
func (_m *ClustersApi) GetClusterExecute(r admin.GetClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterExecute")
	}

	var r0 *admin.ClusterDescription20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterApiRequest) *admin.ClusterDescription20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescription20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_GetClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterExecute'
type ClustersApi_GetClusterExecute_Call struct {
	*mock.Call
}

// GetClusterExecute is a helper method to define mock.On call
//   - r admin.GetClusterApiRequest
func (_e *ClustersApi_Expecter) GetClusterExecute(r any) *ClustersApi_GetClusterExecute_Call {
	return &ClustersApi_GetClusterExecute_Call{Call: _e.mock.On("GetClusterExecute", r)}
}

func (_c *ClustersApi_GetClusterExecute_Call) Run(run func(r admin.GetClusterApiRequest)) *ClustersApi_GetClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterApiRequest))
	})
	return _c
}

func (_c *ClustersApi_GetClusterExecute_Call) Return(_a0 *admin.ClusterDescription20240805, _a1 *http.Response, _a2 error) *ClustersApi_GetClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_GetClusterExecute_Call) RunAndReturn(run func(admin.GetClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)) *ClustersApi_GetClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterStatus provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) GetClusterStatus(ctx context.Context, groupId string, clusterName string) admin.GetClusterStatusApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterStatus")
	}

	var r0 admin.GetClusterStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetClusterStatusApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetClusterStatusApiRequest)
	}

	return r0
}

// ClustersApi_GetClusterStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterStatus'
type ClustersApi_GetClusterStatus_Call struct {
	*mock.Call
}

// GetClusterStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) GetClusterStatus(ctx any, groupId any, clusterName any) *ClustersApi_GetClusterStatus_Call {
	return &ClustersApi_GetClusterStatus_Call{Call: _e.mock.On("GetClusterStatus", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_GetClusterStatus_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_GetClusterStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_GetClusterStatus_Call) Return(_a0 admin.GetClusterStatusApiRequest) *ClustersApi_GetClusterStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetClusterStatus_Call) RunAndReturn(run func(context.Context, string, string) admin.GetClusterStatusApiRequest) *ClustersApi_GetClusterStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterStatusExecute provides a mock function with given fields: r
func (_m *ClustersApi) GetClusterStatusExecute(r admin.GetClusterStatusApiRequest) (*admin.ClusterStatus, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterStatusExecute")
	}

	var r0 *admin.ClusterStatus
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterStatusApiRequest) (*admin.ClusterStatus, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterStatusApiRequest) *admin.ClusterStatus); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterStatusApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterStatusApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_GetClusterStatusExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterStatusExecute'
type ClustersApi_GetClusterStatusExecute_Call struct {
	*mock.Call
}

// GetClusterStatusExecute is a helper method to define mock.On call
//   - r admin.GetClusterStatusApiRequest
func (_e *ClustersApi_Expecter) GetClusterStatusExecute(r any) *ClustersApi_GetClusterStatusExecute_Call {
	return &ClustersApi_GetClusterStatusExecute_Call{Call: _e.mock.On("GetClusterStatusExecute", r)}
}

func (_c *ClustersApi_GetClusterStatusExecute_Call) Run(run func(r admin.GetClusterStatusApiRequest)) *ClustersApi_GetClusterStatusExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterStatusApiRequest))
	})
	return _c
}

func (_c *ClustersApi_GetClusterStatusExecute_Call) Return(_a0 *admin.ClusterStatus, _a1 *http.Response, _a2 error) *ClustersApi_GetClusterStatusExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_GetClusterStatusExecute_Call) RunAndReturn(run func(admin.GetClusterStatusApiRequest) (*admin.ClusterStatus, *http.Response, error)) *ClustersApi_GetClusterStatusExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterStatusWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) GetClusterStatusWithParams(ctx context.Context, args *admin.GetClusterStatusApiParams) admin.GetClusterStatusApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterStatusWithParams")
	}

	var r0 admin.GetClusterStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterStatusApiParams) admin.GetClusterStatusApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterStatusApiRequest)
	}

	return r0
}

// ClustersApi_GetClusterStatusWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterStatusWithParams'
type ClustersApi_GetClusterStatusWithParams_Call struct {
	*mock.Call
}

// GetClusterStatusWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterStatusApiParams
func (_e *ClustersApi_Expecter) GetClusterStatusWithParams(ctx any, args any) *ClustersApi_GetClusterStatusWithParams_Call {
	return &ClustersApi_GetClusterStatusWithParams_Call{Call: _e.mock.On("GetClusterStatusWithParams", ctx, args)}
}

func (_c *ClustersApi_GetClusterStatusWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterStatusApiParams)) *ClustersApi_GetClusterStatusWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterStatusApiParams))
	})
	return _c
}

func (_c *ClustersApi_GetClusterStatusWithParams_Call) Return(_a0 admin.GetClusterStatusApiRequest) *ClustersApi_GetClusterStatusWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetClusterStatusWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterStatusApiParams) admin.GetClusterStatusApiRequest) *ClustersApi_GetClusterStatusWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) GetClusterWithParams(ctx context.Context, args *admin.GetClusterApiParams) admin.GetClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterWithParams")
	}

	var r0 admin.GetClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterApiParams) admin.GetClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterApiRequest)
	}

	return r0
}

// ClustersApi_GetClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterWithParams'
type ClustersApi_GetClusterWithParams_Call struct {
	*mock.Call
}

// GetClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterApiParams
func (_e *ClustersApi_Expecter) GetClusterWithParams(ctx any, args any) *ClustersApi_GetClusterWithParams_Call {
	return &ClustersApi_GetClusterWithParams_Call{Call: _e.mock.On("GetClusterWithParams", ctx, args)}
}

func (_c *ClustersApi_GetClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterApiParams)) *ClustersApi_GetClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterApiParams))
	})
	return _c
}

func (_c *ClustersApi_GetClusterWithParams_Call) Return(_a0 admin.GetClusterApiRequest) *ClustersApi_GetClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterApiParams) admin.GetClusterApiRequest) *ClustersApi_GetClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessArgs provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) GetProcessArgs(ctx context.Context, groupId string, clusterName string) admin.GetProcessArgsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessArgs")
	}

	var r0 admin.GetProcessArgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProcessArgsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetProcessArgsApiRequest)
	}

	return r0
}

// ClustersApi_GetProcessArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessArgs'
type ClustersApi_GetProcessArgs_Call struct {
	*mock.Call
}

// GetProcessArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) GetProcessArgs(ctx any, groupId any, clusterName any) *ClustersApi_GetProcessArgs_Call {
	return &ClustersApi_GetProcessArgs_Call{Call: _e.mock.On("GetProcessArgs", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_GetProcessArgs_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_GetProcessArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_GetProcessArgs_Call) Return(_a0 admin.GetProcessArgsApiRequest) *ClustersApi_GetProcessArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetProcessArgs_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProcessArgsApiRequest) *ClustersApi_GetProcessArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessArgsExecute provides a mock function with given fields: r
func (_m *ClustersApi) GetProcessArgsExecute(r admin.GetProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessArgsExecute")
	}

	var r0 *admin.ClusterDescriptionProcessArgs20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProcessArgsApiRequest) *admin.ClusterDescriptionProcessArgs20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescriptionProcessArgs20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProcessArgsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProcessArgsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_GetProcessArgsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessArgsExecute'
type ClustersApi_GetProcessArgsExecute_Call struct {
	*mock.Call
}

// GetProcessArgsExecute is a helper method to define mock.On call
//   - r admin.GetProcessArgsApiRequest
func (_e *ClustersApi_Expecter) GetProcessArgsExecute(r any) *ClustersApi_GetProcessArgsExecute_Call {
	return &ClustersApi_GetProcessArgsExecute_Call{Call: _e.mock.On("GetProcessArgsExecute", r)}
}

func (_c *ClustersApi_GetProcessArgsExecute_Call) Run(run func(r admin.GetProcessArgsApiRequest)) *ClustersApi_GetProcessArgsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProcessArgsApiRequest))
	})
	return _c
}

func (_c *ClustersApi_GetProcessArgsExecute_Call) Return(_a0 *admin.ClusterDescriptionProcessArgs20240805, _a1 *http.Response, _a2 error) *ClustersApi_GetProcessArgsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_GetProcessArgsExecute_Call) RunAndReturn(run func(admin.GetProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error)) *ClustersApi_GetProcessArgsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessArgsWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) GetProcessArgsWithParams(ctx context.Context, args *admin.GetProcessArgsApiParams) admin.GetProcessArgsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessArgsWithParams")
	}

	var r0 admin.GetProcessArgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProcessArgsApiParams) admin.GetProcessArgsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProcessArgsApiRequest)
	}

	return r0
}

// ClustersApi_GetProcessArgsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessArgsWithParams'
type ClustersApi_GetProcessArgsWithParams_Call struct {
	*mock.Call
}

// GetProcessArgsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProcessArgsApiParams
func (_e *ClustersApi_Expecter) GetProcessArgsWithParams(ctx any, args any) *ClustersApi_GetProcessArgsWithParams_Call {
	return &ClustersApi_GetProcessArgsWithParams_Call{Call: _e.mock.On("GetProcessArgsWithParams", ctx, args)}
}

func (_c *ClustersApi_GetProcessArgsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProcessArgsApiParams)) *ClustersApi_GetProcessArgsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProcessArgsApiParams))
	})
	return _c
}

func (_c *ClustersApi_GetProcessArgsWithParams_Call) Return(_a0 admin.GetProcessArgsApiRequest) *ClustersApi_GetProcessArgsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetProcessArgsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProcessArgsApiParams) admin.GetProcessArgsApiRequest) *ClustersApi_GetProcessArgsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetSampleDatasetLoad provides a mock function with given fields: ctx, groupId, sampleDatasetId
func (_m *ClustersApi) GetSampleDatasetLoad(ctx context.Context, groupId string, sampleDatasetId string) admin.GetSampleDatasetLoadApiRequest {
	ret := _m.Called(ctx, groupId, sampleDatasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetSampleDatasetLoad")
	}

	var r0 admin.GetSampleDatasetLoadApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetSampleDatasetLoadApiRequest); ok {
		r0 = rf(ctx, groupId, sampleDatasetId)
	} else {
		r0 = ret.Get(0).(admin.GetSampleDatasetLoadApiRequest)
	}

	return r0
}

// ClustersApi_GetSampleDatasetLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSampleDatasetLoad'
type ClustersApi_GetSampleDatasetLoad_Call struct {
	*mock.Call
}

// GetSampleDatasetLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - sampleDatasetId string
func (_e *ClustersApi_Expecter) GetSampleDatasetLoad(ctx any, groupId any, sampleDatasetId any) *ClustersApi_GetSampleDatasetLoad_Call {
	return &ClustersApi_GetSampleDatasetLoad_Call{Call: _e.mock.On("GetSampleDatasetLoad", ctx, groupId, sampleDatasetId)}
}

func (_c *ClustersApi_GetSampleDatasetLoad_Call) Run(run func(ctx context.Context, groupId string, sampleDatasetId string)) *ClustersApi_GetSampleDatasetLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoad_Call) Return(_a0 admin.GetSampleDatasetLoadApiRequest) *ClustersApi_GetSampleDatasetLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoad_Call) RunAndReturn(run func(context.Context, string, string) admin.GetSampleDatasetLoadApiRequest) *ClustersApi_GetSampleDatasetLoad_Call {
	_c.Call.Return(run)
	return _c
}

// GetSampleDatasetLoadExecute provides a mock function with given fields: r
func (_m *ClustersApi) GetSampleDatasetLoadExecute(r admin.GetSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetSampleDatasetLoadExecute")
	}

	var r0 *admin.SampleDatasetStatus
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetSampleDatasetLoadApiRequest) *admin.SampleDatasetStatus); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SampleDatasetStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetSampleDatasetLoadApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetSampleDatasetLoadApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_GetSampleDatasetLoadExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSampleDatasetLoadExecute'
type ClustersApi_GetSampleDatasetLoadExecute_Call struct {
	*mock.Call
}

// GetSampleDatasetLoadExecute is a helper method to define mock.On call
//   - r admin.GetSampleDatasetLoadApiRequest
func (_e *ClustersApi_Expecter) GetSampleDatasetLoadExecute(r any) *ClustersApi_GetSampleDatasetLoadExecute_Call {
	return &ClustersApi_GetSampleDatasetLoadExecute_Call{Call: _e.mock.On("GetSampleDatasetLoadExecute", r)}
}

func (_c *ClustersApi_GetSampleDatasetLoadExecute_Call) Run(run func(r admin.GetSampleDatasetLoadApiRequest)) *ClustersApi_GetSampleDatasetLoadExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetSampleDatasetLoadApiRequest))
	})
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoadExecute_Call) Return(_a0 *admin.SampleDatasetStatus, _a1 *http.Response, _a2 error) *ClustersApi_GetSampleDatasetLoadExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoadExecute_Call) RunAndReturn(run func(admin.GetSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error)) *ClustersApi_GetSampleDatasetLoadExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSampleDatasetLoadWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) GetSampleDatasetLoadWithParams(ctx context.Context, args *admin.GetSampleDatasetLoadApiParams) admin.GetSampleDatasetLoadApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetSampleDatasetLoadWithParams")
	}

	var r0 admin.GetSampleDatasetLoadApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetSampleDatasetLoadApiParams) admin.GetSampleDatasetLoadApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetSampleDatasetLoadApiRequest)
	}

	return r0
}

// ClustersApi_GetSampleDatasetLoadWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSampleDatasetLoadWithParams'
type ClustersApi_GetSampleDatasetLoadWithParams_Call struct {
	*mock.Call
}

// GetSampleDatasetLoadWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetSampleDatasetLoadApiParams
func (_e *ClustersApi_Expecter) GetSampleDatasetLoadWithParams(ctx any, args any) *ClustersApi_GetSampleDatasetLoadWithParams_Call {
	return &ClustersApi_GetSampleDatasetLoadWithParams_Call{Call: _e.mock.On("GetSampleDatasetLoadWithParams", ctx, args)}
}

func (_c *ClustersApi_GetSampleDatasetLoadWithParams_Call) Run(run func(ctx context.Context, args *admin.GetSampleDatasetLoadApiParams)) *ClustersApi_GetSampleDatasetLoadWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetSampleDatasetLoadApiParams))
	})
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoadWithParams_Call) Return(_a0 admin.GetSampleDatasetLoadApiRequest) *ClustersApi_GetSampleDatasetLoadWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GetSampleDatasetLoadWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetSampleDatasetLoadApiParams) admin.GetSampleDatasetLoadApiRequest) *ClustersApi_GetSampleDatasetLoadWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GrantMongoEmployeeAccess provides a mock function with given fields: ctx, groupId, clusterName, employeeAccessGrant
func (_m *ClustersApi) GrantMongoEmployeeAccess(ctx context.Context, groupId string, clusterName string, employeeAccessGrant *admin.EmployeeAccessGrant) admin.GrantMongoEmployeeAccessApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, employeeAccessGrant)

	if len(ret) == 0 {
		panic("no return value specified for GrantMongoEmployeeAccess")
	}

	var r0 admin.GrantMongoEmployeeAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.EmployeeAccessGrant) admin.GrantMongoEmployeeAccessApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, employeeAccessGrant)
	} else {
		r0 = ret.Get(0).(admin.GrantMongoEmployeeAccessApiRequest)
	}

	return r0
}

// ClustersApi_GrantMongoEmployeeAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantMongoEmployeeAccess'
type ClustersApi_GrantMongoEmployeeAccess_Call struct {
	*mock.Call
}

// GrantMongoEmployeeAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - employeeAccessGrant *admin.EmployeeAccessGrant
func (_e *ClustersApi_Expecter) GrantMongoEmployeeAccess(ctx any, groupId any, clusterName any, employeeAccessGrant any) *ClustersApi_GrantMongoEmployeeAccess_Call {
	return &ClustersApi_GrantMongoEmployeeAccess_Call{Call: _e.mock.On("GrantMongoEmployeeAccess", ctx, groupId, clusterName, employeeAccessGrant)}
}

func (_c *ClustersApi_GrantMongoEmployeeAccess_Call) Run(run func(ctx context.Context, groupId string, clusterName string, employeeAccessGrant *admin.EmployeeAccessGrant)) *ClustersApi_GrantMongoEmployeeAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.EmployeeAccessGrant))
	})
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccess_Call) Return(_a0 admin.GrantMongoEmployeeAccessApiRequest) *ClustersApi_GrantMongoEmployeeAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccess_Call) RunAndReturn(run func(context.Context, string, string, *admin.EmployeeAccessGrant) admin.GrantMongoEmployeeAccessApiRequest) *ClustersApi_GrantMongoEmployeeAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantMongoEmployeeAccessExecute provides a mock function with given fields: r
func (_m *ClustersApi) GrantMongoEmployeeAccessExecute(r admin.GrantMongoEmployeeAccessApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GrantMongoEmployeeAccessExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.GrantMongoEmployeeAccessApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GrantMongoEmployeeAccessApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GrantMongoEmployeeAccessApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_GrantMongoEmployeeAccessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantMongoEmployeeAccessExecute'
type ClustersApi_GrantMongoEmployeeAccessExecute_Call struct {
	*mock.Call
}

// GrantMongoEmployeeAccessExecute is a helper method to define mock.On call
//   - r admin.GrantMongoEmployeeAccessApiRequest
func (_e *ClustersApi_Expecter) GrantMongoEmployeeAccessExecute(r any) *ClustersApi_GrantMongoEmployeeAccessExecute_Call {
	return &ClustersApi_GrantMongoEmployeeAccessExecute_Call{Call: _e.mock.On("GrantMongoEmployeeAccessExecute", r)}
}

func (_c *ClustersApi_GrantMongoEmployeeAccessExecute_Call) Run(run func(r admin.GrantMongoEmployeeAccessApiRequest)) *ClustersApi_GrantMongoEmployeeAccessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GrantMongoEmployeeAccessApiRequest))
	})
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccessExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_GrantMongoEmployeeAccessExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccessExecute_Call) RunAndReturn(run func(admin.GrantMongoEmployeeAccessApiRequest) (*http.Response, error)) *ClustersApi_GrantMongoEmployeeAccessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GrantMongoEmployeeAccessWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) GrantMongoEmployeeAccessWithParams(ctx context.Context, args *admin.GrantMongoEmployeeAccessApiParams) admin.GrantMongoEmployeeAccessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GrantMongoEmployeeAccessWithParams")
	}

	var r0 admin.GrantMongoEmployeeAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GrantMongoEmployeeAccessApiParams) admin.GrantMongoEmployeeAccessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GrantMongoEmployeeAccessApiRequest)
	}

	return r0
}

// ClustersApi_GrantMongoEmployeeAccessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantMongoEmployeeAccessWithParams'
type ClustersApi_GrantMongoEmployeeAccessWithParams_Call struct {
	*mock.Call
}

// GrantMongoEmployeeAccessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GrantMongoEmployeeAccessApiParams
func (_e *ClustersApi_Expecter) GrantMongoEmployeeAccessWithParams(ctx any, args any) *ClustersApi_GrantMongoEmployeeAccessWithParams_Call {
	return &ClustersApi_GrantMongoEmployeeAccessWithParams_Call{Call: _e.mock.On("GrantMongoEmployeeAccessWithParams", ctx, args)}
}

func (_c *ClustersApi_GrantMongoEmployeeAccessWithParams_Call) Run(run func(ctx context.Context, args *admin.GrantMongoEmployeeAccessApiParams)) *ClustersApi_GrantMongoEmployeeAccessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GrantMongoEmployeeAccessApiParams))
	})
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccessWithParams_Call) Return(_a0 admin.GrantMongoEmployeeAccessApiRequest) *ClustersApi_GrantMongoEmployeeAccessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_GrantMongoEmployeeAccessWithParams_Call) RunAndReturn(run func(context.Context, *admin.GrantMongoEmployeeAccessApiParams) admin.GrantMongoEmployeeAccessApiRequest) *ClustersApi_GrantMongoEmployeeAccessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterDetails provides a mock function with given fields: ctx
func (_m *ClustersApi) ListClusterDetails(ctx context.Context) admin.ListClusterDetailsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterDetails")
	}

	var r0 admin.ListClusterDetailsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListClusterDetailsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListClusterDetailsApiRequest)
	}

	return r0
}

// ClustersApi_ListClusterDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterDetails'
type ClustersApi_ListClusterDetails_Call struct {
	*mock.Call
}

// ListClusterDetails is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClustersApi_Expecter) ListClusterDetails(ctx any) *ClustersApi_ListClusterDetails_Call {
	return &ClustersApi_ListClusterDetails_Call{Call: _e.mock.On("ListClusterDetails", ctx)}
}

func (_c *ClustersApi_ListClusterDetails_Call) Run(run func(ctx context.Context)) *ClustersApi_ListClusterDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClustersApi_ListClusterDetails_Call) Return(_a0 admin.ListClusterDetailsApiRequest) *ClustersApi_ListClusterDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClusterDetails_Call) RunAndReturn(run func(context.Context) admin.ListClusterDetailsApiRequest) *ClustersApi_ListClusterDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterDetailsExecute provides a mock function with given fields: r
func (_m *ClustersApi) ListClusterDetailsExecute(r admin.ListClusterDetailsApiRequest) (*admin.PaginatedOrgGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterDetailsExecute")
	}

	var r0 *admin.PaginatedOrgGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterDetailsApiRequest) (*admin.PaginatedOrgGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterDetailsApiRequest) *admin.PaginatedOrgGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterDetailsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterDetailsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_ListClusterDetailsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterDetailsExecute'
type ClustersApi_ListClusterDetailsExecute_Call struct {
	*mock.Call
}

// ListClusterDetailsExecute is a helper method to define mock.On call
//   - r admin.ListClusterDetailsApiRequest
func (_e *ClustersApi_Expecter) ListClusterDetailsExecute(r any) *ClustersApi_ListClusterDetailsExecute_Call {
	return &ClustersApi_ListClusterDetailsExecute_Call{Call: _e.mock.On("ListClusterDetailsExecute", r)}
}

func (_c *ClustersApi_ListClusterDetailsExecute_Call) Run(run func(r admin.ListClusterDetailsApiRequest)) *ClustersApi_ListClusterDetailsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterDetailsApiRequest))
	})
	return _c
}

func (_c *ClustersApi_ListClusterDetailsExecute_Call) Return(_a0 *admin.PaginatedOrgGroup, _a1 *http.Response, _a2 error) *ClustersApi_ListClusterDetailsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_ListClusterDetailsExecute_Call) RunAndReturn(run func(admin.ListClusterDetailsApiRequest) (*admin.PaginatedOrgGroup, *http.Response, error)) *ClustersApi_ListClusterDetailsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterDetailsWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) ListClusterDetailsWithParams(ctx context.Context, args *admin.ListClusterDetailsApiParams) admin.ListClusterDetailsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterDetailsWithParams")
	}

	var r0 admin.ListClusterDetailsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterDetailsApiParams) admin.ListClusterDetailsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterDetailsApiRequest)
	}

	return r0
}

// ClustersApi_ListClusterDetailsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterDetailsWithParams'
type ClustersApi_ListClusterDetailsWithParams_Call struct {
	*mock.Call
}

// ListClusterDetailsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterDetailsApiParams
func (_e *ClustersApi_Expecter) ListClusterDetailsWithParams(ctx any, args any) *ClustersApi_ListClusterDetailsWithParams_Call {
	return &ClustersApi_ListClusterDetailsWithParams_Call{Call: _e.mock.On("ListClusterDetailsWithParams", ctx, args)}
}

func (_c *ClustersApi_ListClusterDetailsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterDetailsApiParams)) *ClustersApi_ListClusterDetailsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterDetailsApiParams))
	})
	return _c
}

func (_c *ClustersApi_ListClusterDetailsWithParams_Call) Return(_a0 admin.ListClusterDetailsApiRequest) *ClustersApi_ListClusterDetailsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClusterDetailsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterDetailsApiParams) admin.ListClusterDetailsApiRequest) *ClustersApi_ListClusterDetailsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterProviderRegions provides a mock function with given fields: ctx, groupId
func (_m *ClustersApi) ListClusterProviderRegions(ctx context.Context, groupId string) admin.ListClusterProviderRegionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterProviderRegions")
	}

	var r0 admin.ListClusterProviderRegionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListClusterProviderRegionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListClusterProviderRegionsApiRequest)
	}

	return r0
}

// ClustersApi_ListClusterProviderRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterProviderRegions'
type ClustersApi_ListClusterProviderRegions_Call struct {
	*mock.Call
}

// ListClusterProviderRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ClustersApi_Expecter) ListClusterProviderRegions(ctx any, groupId any) *ClustersApi_ListClusterProviderRegions_Call {
	return &ClustersApi_ListClusterProviderRegions_Call{Call: _e.mock.On("ListClusterProviderRegions", ctx, groupId)}
}

func (_c *ClustersApi_ListClusterProviderRegions_Call) Run(run func(ctx context.Context, groupId string)) *ClustersApi_ListClusterProviderRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegions_Call) Return(_a0 admin.ListClusterProviderRegionsApiRequest) *ClustersApi_ListClusterProviderRegions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegions_Call) RunAndReturn(run func(context.Context, string) admin.ListClusterProviderRegionsApiRequest) *ClustersApi_ListClusterProviderRegions_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterProviderRegionsExecute provides a mock function with given fields: r
func (_m *ClustersApi) ListClusterProviderRegionsExecute(r admin.ListClusterProviderRegionsApiRequest) (*admin.PaginatedApiAtlasProviderRegions, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterProviderRegionsExecute")
	}

	var r0 *admin.PaginatedApiAtlasProviderRegions
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterProviderRegionsApiRequest) (*admin.PaginatedApiAtlasProviderRegions, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterProviderRegionsApiRequest) *admin.PaginatedApiAtlasProviderRegions); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasProviderRegions)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterProviderRegionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterProviderRegionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_ListClusterProviderRegionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterProviderRegionsExecute'
type ClustersApi_ListClusterProviderRegionsExecute_Call struct {
	*mock.Call
}

// ListClusterProviderRegionsExecute is a helper method to define mock.On call
//   - r admin.ListClusterProviderRegionsApiRequest
func (_e *ClustersApi_Expecter) ListClusterProviderRegionsExecute(r any) *ClustersApi_ListClusterProviderRegionsExecute_Call {
	return &ClustersApi_ListClusterProviderRegionsExecute_Call{Call: _e.mock.On("ListClusterProviderRegionsExecute", r)}
}

func (_c *ClustersApi_ListClusterProviderRegionsExecute_Call) Run(run func(r admin.ListClusterProviderRegionsApiRequest)) *ClustersApi_ListClusterProviderRegionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterProviderRegionsApiRequest))
	})
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegionsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasProviderRegions, _a1 *http.Response, _a2 error) *ClustersApi_ListClusterProviderRegionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegionsExecute_Call) RunAndReturn(run func(admin.ListClusterProviderRegionsApiRequest) (*admin.PaginatedApiAtlasProviderRegions, *http.Response, error)) *ClustersApi_ListClusterProviderRegionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterProviderRegionsWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) ListClusterProviderRegionsWithParams(ctx context.Context, args *admin.ListClusterProviderRegionsApiParams) admin.ListClusterProviderRegionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterProviderRegionsWithParams")
	}

	var r0 admin.ListClusterProviderRegionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterProviderRegionsApiParams) admin.ListClusterProviderRegionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterProviderRegionsApiRequest)
	}

	return r0
}

// ClustersApi_ListClusterProviderRegionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterProviderRegionsWithParams'
type ClustersApi_ListClusterProviderRegionsWithParams_Call struct {
	*mock.Call
}

// ListClusterProviderRegionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterProviderRegionsApiParams
func (_e *ClustersApi_Expecter) ListClusterProviderRegionsWithParams(ctx any, args any) *ClustersApi_ListClusterProviderRegionsWithParams_Call {
	return &ClustersApi_ListClusterProviderRegionsWithParams_Call{Call: _e.mock.On("ListClusterProviderRegionsWithParams", ctx, args)}
}

func (_c *ClustersApi_ListClusterProviderRegionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterProviderRegionsApiParams)) *ClustersApi_ListClusterProviderRegionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterProviderRegionsApiParams))
	})
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegionsWithParams_Call) Return(_a0 admin.ListClusterProviderRegionsApiRequest) *ClustersApi_ListClusterProviderRegionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClusterProviderRegionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterProviderRegionsApiParams) admin.ListClusterProviderRegionsApiRequest) *ClustersApi_ListClusterProviderRegionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields: ctx, groupId
func (_m *ClustersApi) ListClusters(ctx context.Context, groupId string) admin.ListClustersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 admin.ListClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListClustersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListClustersApiRequest)
	}

	return r0
}

// ClustersApi_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type ClustersApi_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ClustersApi_Expecter) ListClusters(ctx any, groupId any) *ClustersApi_ListClusters_Call {
	return &ClustersApi_ListClusters_Call{Call: _e.mock.On("ListClusters", ctx, groupId)}
}

func (_c *ClustersApi_ListClusters_Call) Run(run func(ctx context.Context, groupId string)) *ClustersApi_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClustersApi_ListClusters_Call) Return(_a0 admin.ListClustersApiRequest) *ClustersApi_ListClusters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClusters_Call) RunAndReturn(run func(context.Context, string) admin.ListClustersApiRequest) *ClustersApi_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListClustersExecute provides a mock function with given fields: r
func (_m *ClustersApi) ListClustersExecute(r admin.ListClustersApiRequest) (*admin.PaginatedClusterDescription20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersExecute")
	}

	var r0 *admin.PaginatedClusterDescription20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClustersApiRequest) (*admin.PaginatedClusterDescription20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClustersApiRequest) *admin.PaginatedClusterDescription20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedClusterDescription20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClustersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClustersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_ListClustersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersExecute'
type ClustersApi_ListClustersExecute_Call struct {
	*mock.Call
}

// ListClustersExecute is a helper method to define mock.On call
//   - r admin.ListClustersApiRequest
func (_e *ClustersApi_Expecter) ListClustersExecute(r any) *ClustersApi_ListClustersExecute_Call {
	return &ClustersApi_ListClustersExecute_Call{Call: _e.mock.On("ListClustersExecute", r)}
}

func (_c *ClustersApi_ListClustersExecute_Call) Run(run func(r admin.ListClustersApiRequest)) *ClustersApi_ListClustersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClustersApiRequest))
	})
	return _c
}

func (_c *ClustersApi_ListClustersExecute_Call) Return(_a0 *admin.PaginatedClusterDescription20240805, _a1 *http.Response, _a2 error) *ClustersApi_ListClustersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_ListClustersExecute_Call) RunAndReturn(run func(admin.ListClustersApiRequest) (*admin.PaginatedClusterDescription20240805, *http.Response, error)) *ClustersApi_ListClustersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClustersWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) ListClustersWithParams(ctx context.Context, args *admin.ListClustersApiParams) admin.ListClustersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersWithParams")
	}

	var r0 admin.ListClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClustersApiParams) admin.ListClustersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClustersApiRequest)
	}

	return r0
}

// ClustersApi_ListClustersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersWithParams'
type ClustersApi_ListClustersWithParams_Call struct {
	*mock.Call
}

// ListClustersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClustersApiParams
func (_e *ClustersApi_Expecter) ListClustersWithParams(ctx any, args any) *ClustersApi_ListClustersWithParams_Call {
	return &ClustersApi_ListClustersWithParams_Call{Call: _e.mock.On("ListClustersWithParams", ctx, args)}
}

func (_c *ClustersApi_ListClustersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClustersApiParams)) *ClustersApi_ListClustersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClustersApiParams))
	})
	return _c
}

func (_c *ClustersApi_ListClustersWithParams_Call) Return(_a0 admin.ListClustersApiRequest) *ClustersApi_ListClustersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_ListClustersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClustersApiParams) admin.ListClustersApiRequest) *ClustersApi_ListClustersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// PinFeatureCompatibilityVersion provides a mock function with given fields: ctx, groupId, clusterName, pinFCV
func (_m *ClustersApi) PinFeatureCompatibilityVersion(ctx context.Context, groupId string, clusterName string, pinFCV *admin.PinFCV) admin.PinFeatureCompatibilityVersionApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, pinFCV)

	if len(ret) == 0 {
		panic("no return value specified for PinFeatureCompatibilityVersion")
	}

	var r0 admin.PinFeatureCompatibilityVersionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.PinFCV) admin.PinFeatureCompatibilityVersionApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, pinFCV)
	} else {
		r0 = ret.Get(0).(admin.PinFeatureCompatibilityVersionApiRequest)
	}

	return r0
}

// ClustersApi_PinFeatureCompatibilityVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinFeatureCompatibilityVersion'
type ClustersApi_PinFeatureCompatibilityVersion_Call struct {
	*mock.Call
}

// PinFeatureCompatibilityVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - pinFCV *admin.PinFCV
func (_e *ClustersApi_Expecter) PinFeatureCompatibilityVersion(ctx any, groupId any, clusterName any, pinFCV any) *ClustersApi_PinFeatureCompatibilityVersion_Call {
	return &ClustersApi_PinFeatureCompatibilityVersion_Call{Call: _e.mock.On("PinFeatureCompatibilityVersion", ctx, groupId, clusterName, pinFCV)}
}

func (_c *ClustersApi_PinFeatureCompatibilityVersion_Call) Run(run func(ctx context.Context, groupId string, clusterName string, pinFCV *admin.PinFCV)) *ClustersApi_PinFeatureCompatibilityVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.PinFCV))
	})
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersion_Call) Return(_a0 admin.PinFeatureCompatibilityVersionApiRequest) *ClustersApi_PinFeatureCompatibilityVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersion_Call) RunAndReturn(run func(context.Context, string, string, *admin.PinFCV) admin.PinFeatureCompatibilityVersionApiRequest) *ClustersApi_PinFeatureCompatibilityVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PinFeatureCompatibilityVersionExecute provides a mock function with given fields: r
func (_m *ClustersApi) PinFeatureCompatibilityVersionExecute(r admin.PinFeatureCompatibilityVersionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PinFeatureCompatibilityVersionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.PinFeatureCompatibilityVersionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.PinFeatureCompatibilityVersionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.PinFeatureCompatibilityVersionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_PinFeatureCompatibilityVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinFeatureCompatibilityVersionExecute'
type ClustersApi_PinFeatureCompatibilityVersionExecute_Call struct {
	*mock.Call
}

// PinFeatureCompatibilityVersionExecute is a helper method to define mock.On call
//   - r admin.PinFeatureCompatibilityVersionApiRequest
func (_e *ClustersApi_Expecter) PinFeatureCompatibilityVersionExecute(r any) *ClustersApi_PinFeatureCompatibilityVersionExecute_Call {
	return &ClustersApi_PinFeatureCompatibilityVersionExecute_Call{Call: _e.mock.On("PinFeatureCompatibilityVersionExecute", r)}
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionExecute_Call) Run(run func(r admin.PinFeatureCompatibilityVersionApiRequest)) *ClustersApi_PinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.PinFeatureCompatibilityVersionApiRequest))
	})
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_PinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionExecute_Call) RunAndReturn(run func(admin.PinFeatureCompatibilityVersionApiRequest) (*http.Response, error)) *ClustersApi_PinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PinFeatureCompatibilityVersionWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) PinFeatureCompatibilityVersionWithParams(ctx context.Context, args *admin.PinFeatureCompatibilityVersionApiParams) admin.PinFeatureCompatibilityVersionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for PinFeatureCompatibilityVersionWithParams")
	}

	var r0 admin.PinFeatureCompatibilityVersionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.PinFeatureCompatibilityVersionApiParams) admin.PinFeatureCompatibilityVersionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.PinFeatureCompatibilityVersionApiRequest)
	}

	return r0
}

// ClustersApi_PinFeatureCompatibilityVersionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinFeatureCompatibilityVersionWithParams'
type ClustersApi_PinFeatureCompatibilityVersionWithParams_Call struct {
	*mock.Call
}

// PinFeatureCompatibilityVersionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.PinFeatureCompatibilityVersionApiParams
func (_e *ClustersApi_Expecter) PinFeatureCompatibilityVersionWithParams(ctx any, args any) *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call {
	return &ClustersApi_PinFeatureCompatibilityVersionWithParams_Call{Call: _e.mock.On("PinFeatureCompatibilityVersionWithParams", ctx, args)}
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call) Run(run func(ctx context.Context, args *admin.PinFeatureCompatibilityVersionApiParams)) *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.PinFeatureCompatibilityVersionApiParams))
	})
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call) Return(_a0 admin.PinFeatureCompatibilityVersionApiRequest) *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call) RunAndReturn(run func(context.Context, *admin.PinFeatureCompatibilityVersionApiParams) admin.PinFeatureCompatibilityVersionApiRequest) *ClustersApi_PinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RequestSampleDatasetLoad provides a mock function with given fields: ctx, groupId, name
func (_m *ClustersApi) RequestSampleDatasetLoad(ctx context.Context, groupId string, name string) admin.RequestSampleDatasetLoadApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for RequestSampleDatasetLoad")
	}

	var r0 admin.RequestSampleDatasetLoadApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RequestSampleDatasetLoadApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.RequestSampleDatasetLoadApiRequest)
	}

	return r0
}

// ClustersApi_RequestSampleDatasetLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSampleDatasetLoad'
type ClustersApi_RequestSampleDatasetLoad_Call struct {
	*mock.Call
}

// RequestSampleDatasetLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *ClustersApi_Expecter) RequestSampleDatasetLoad(ctx any, groupId any, name any) *ClustersApi_RequestSampleDatasetLoad_Call {
	return &ClustersApi_RequestSampleDatasetLoad_Call{Call: _e.mock.On("RequestSampleDatasetLoad", ctx, groupId, name)}
}

func (_c *ClustersApi_RequestSampleDatasetLoad_Call) Run(run func(ctx context.Context, groupId string, name string)) *ClustersApi_RequestSampleDatasetLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoad_Call) Return(_a0 admin.RequestSampleDatasetLoadApiRequest) *ClustersApi_RequestSampleDatasetLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoad_Call) RunAndReturn(run func(context.Context, string, string) admin.RequestSampleDatasetLoadApiRequest) *ClustersApi_RequestSampleDatasetLoad_Call {
	_c.Call.Return(run)
	return _c
}

// RequestSampleDatasetLoadExecute provides a mock function with given fields: r
func (_m *ClustersApi) RequestSampleDatasetLoadExecute(r admin.RequestSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RequestSampleDatasetLoadExecute")
	}

	var r0 *admin.SampleDatasetStatus
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RequestSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RequestSampleDatasetLoadApiRequest) *admin.SampleDatasetStatus); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SampleDatasetStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RequestSampleDatasetLoadApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RequestSampleDatasetLoadApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_RequestSampleDatasetLoadExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSampleDatasetLoadExecute'
type ClustersApi_RequestSampleDatasetLoadExecute_Call struct {
	*mock.Call
}

// RequestSampleDatasetLoadExecute is a helper method to define mock.On call
//   - r admin.RequestSampleDatasetLoadApiRequest
func (_e *ClustersApi_Expecter) RequestSampleDatasetLoadExecute(r any) *ClustersApi_RequestSampleDatasetLoadExecute_Call {
	return &ClustersApi_RequestSampleDatasetLoadExecute_Call{Call: _e.mock.On("RequestSampleDatasetLoadExecute", r)}
}

func (_c *ClustersApi_RequestSampleDatasetLoadExecute_Call) Run(run func(r admin.RequestSampleDatasetLoadApiRequest)) *ClustersApi_RequestSampleDatasetLoadExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RequestSampleDatasetLoadApiRequest))
	})
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoadExecute_Call) Return(_a0 *admin.SampleDatasetStatus, _a1 *http.Response, _a2 error) *ClustersApi_RequestSampleDatasetLoadExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoadExecute_Call) RunAndReturn(run func(admin.RequestSampleDatasetLoadApiRequest) (*admin.SampleDatasetStatus, *http.Response, error)) *ClustersApi_RequestSampleDatasetLoadExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RequestSampleDatasetLoadWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) RequestSampleDatasetLoadWithParams(ctx context.Context, args *admin.RequestSampleDatasetLoadApiParams) admin.RequestSampleDatasetLoadApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RequestSampleDatasetLoadWithParams")
	}

	var r0 admin.RequestSampleDatasetLoadApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RequestSampleDatasetLoadApiParams) admin.RequestSampleDatasetLoadApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RequestSampleDatasetLoadApiRequest)
	}

	return r0
}

// ClustersApi_RequestSampleDatasetLoadWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSampleDatasetLoadWithParams'
type ClustersApi_RequestSampleDatasetLoadWithParams_Call struct {
	*mock.Call
}

// RequestSampleDatasetLoadWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RequestSampleDatasetLoadApiParams
func (_e *ClustersApi_Expecter) RequestSampleDatasetLoadWithParams(ctx any, args any) *ClustersApi_RequestSampleDatasetLoadWithParams_Call {
	return &ClustersApi_RequestSampleDatasetLoadWithParams_Call{Call: _e.mock.On("RequestSampleDatasetLoadWithParams", ctx, args)}
}

func (_c *ClustersApi_RequestSampleDatasetLoadWithParams_Call) Run(run func(ctx context.Context, args *admin.RequestSampleDatasetLoadApiParams)) *ClustersApi_RequestSampleDatasetLoadWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RequestSampleDatasetLoadApiParams))
	})
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoadWithParams_Call) Return(_a0 admin.RequestSampleDatasetLoadApiRequest) *ClustersApi_RequestSampleDatasetLoadWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RequestSampleDatasetLoadWithParams_Call) RunAndReturn(run func(context.Context, *admin.RequestSampleDatasetLoadApiParams) admin.RequestSampleDatasetLoadApiRequest) *ClustersApi_RequestSampleDatasetLoadWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RestartPrimaries provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) RestartPrimaries(ctx context.Context, groupId string, clusterName string) admin.RestartPrimariesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for RestartPrimaries")
	}

	var r0 admin.RestartPrimariesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RestartPrimariesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.RestartPrimariesApiRequest)
	}

	return r0
}

// ClustersApi_RestartPrimaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartPrimaries'
type ClustersApi_RestartPrimaries_Call struct {
	*mock.Call
}

// RestartPrimaries is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) RestartPrimaries(ctx any, groupId any, clusterName any) *ClustersApi_RestartPrimaries_Call {
	return &ClustersApi_RestartPrimaries_Call{Call: _e.mock.On("RestartPrimaries", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_RestartPrimaries_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_RestartPrimaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_RestartPrimaries_Call) Return(_a0 admin.RestartPrimariesApiRequest) *ClustersApi_RestartPrimaries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RestartPrimaries_Call) RunAndReturn(run func(context.Context, string, string) admin.RestartPrimariesApiRequest) *ClustersApi_RestartPrimaries_Call {
	_c.Call.Return(run)
	return _c
}

// RestartPrimariesExecute provides a mock function with given fields: r
func (_m *ClustersApi) RestartPrimariesExecute(r admin.RestartPrimariesApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RestartPrimariesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RestartPrimariesApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RestartPrimariesApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RestartPrimariesApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_RestartPrimariesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartPrimariesExecute'
type ClustersApi_RestartPrimariesExecute_Call struct {
	*mock.Call
}

// RestartPrimariesExecute is a helper method to define mock.On call
//   - r admin.RestartPrimariesApiRequest
func (_e *ClustersApi_Expecter) RestartPrimariesExecute(r any) *ClustersApi_RestartPrimariesExecute_Call {
	return &ClustersApi_RestartPrimariesExecute_Call{Call: _e.mock.On("RestartPrimariesExecute", r)}
}

func (_c *ClustersApi_RestartPrimariesExecute_Call) Run(run func(r admin.RestartPrimariesApiRequest)) *ClustersApi_RestartPrimariesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RestartPrimariesApiRequest))
	})
	return _c
}

func (_c *ClustersApi_RestartPrimariesExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_RestartPrimariesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_RestartPrimariesExecute_Call) RunAndReturn(run func(admin.RestartPrimariesApiRequest) (*http.Response, error)) *ClustersApi_RestartPrimariesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RestartPrimariesWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) RestartPrimariesWithParams(ctx context.Context, args *admin.RestartPrimariesApiParams) admin.RestartPrimariesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RestartPrimariesWithParams")
	}

	var r0 admin.RestartPrimariesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RestartPrimariesApiParams) admin.RestartPrimariesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RestartPrimariesApiRequest)
	}

	return r0
}

// ClustersApi_RestartPrimariesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartPrimariesWithParams'
type ClustersApi_RestartPrimariesWithParams_Call struct {
	*mock.Call
}

// RestartPrimariesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RestartPrimariesApiParams
func (_e *ClustersApi_Expecter) RestartPrimariesWithParams(ctx any, args any) *ClustersApi_RestartPrimariesWithParams_Call {
	return &ClustersApi_RestartPrimariesWithParams_Call{Call: _e.mock.On("RestartPrimariesWithParams", ctx, args)}
}

func (_c *ClustersApi_RestartPrimariesWithParams_Call) Run(run func(ctx context.Context, args *admin.RestartPrimariesApiParams)) *ClustersApi_RestartPrimariesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RestartPrimariesApiParams))
	})
	return _c
}

func (_c *ClustersApi_RestartPrimariesWithParams_Call) Return(_a0 admin.RestartPrimariesApiRequest) *ClustersApi_RestartPrimariesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RestartPrimariesWithParams_Call) RunAndReturn(run func(context.Context, *admin.RestartPrimariesApiParams) admin.RestartPrimariesApiRequest) *ClustersApi_RestartPrimariesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeMongoEmployeeAccess provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) RevokeMongoEmployeeAccess(ctx context.Context, groupId string, clusterName string) admin.RevokeMongoEmployeeAccessApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for RevokeMongoEmployeeAccess")
	}

	var r0 admin.RevokeMongoEmployeeAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RevokeMongoEmployeeAccessApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.RevokeMongoEmployeeAccessApiRequest)
	}

	return r0
}

// ClustersApi_RevokeMongoEmployeeAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeMongoEmployeeAccess'
type ClustersApi_RevokeMongoEmployeeAccess_Call struct {
	*mock.Call
}

// RevokeMongoEmployeeAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) RevokeMongoEmployeeAccess(ctx any, groupId any, clusterName any) *ClustersApi_RevokeMongoEmployeeAccess_Call {
	return &ClustersApi_RevokeMongoEmployeeAccess_Call{Call: _e.mock.On("RevokeMongoEmployeeAccess", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_RevokeMongoEmployeeAccess_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_RevokeMongoEmployeeAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccess_Call) Return(_a0 admin.RevokeMongoEmployeeAccessApiRequest) *ClustersApi_RevokeMongoEmployeeAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccess_Call) RunAndReturn(run func(context.Context, string, string) admin.RevokeMongoEmployeeAccessApiRequest) *ClustersApi_RevokeMongoEmployeeAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeMongoEmployeeAccessExecute provides a mock function with given fields: r
func (_m *ClustersApi) RevokeMongoEmployeeAccessExecute(r admin.RevokeMongoEmployeeAccessApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RevokeMongoEmployeeAccessExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RevokeMongoEmployeeAccessApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RevokeMongoEmployeeAccessApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RevokeMongoEmployeeAccessApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_RevokeMongoEmployeeAccessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeMongoEmployeeAccessExecute'
type ClustersApi_RevokeMongoEmployeeAccessExecute_Call struct {
	*mock.Call
}

// RevokeMongoEmployeeAccessExecute is a helper method to define mock.On call
//   - r admin.RevokeMongoEmployeeAccessApiRequest
func (_e *ClustersApi_Expecter) RevokeMongoEmployeeAccessExecute(r any) *ClustersApi_RevokeMongoEmployeeAccessExecute_Call {
	return &ClustersApi_RevokeMongoEmployeeAccessExecute_Call{Call: _e.mock.On("RevokeMongoEmployeeAccessExecute", r)}
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessExecute_Call) Run(run func(r admin.RevokeMongoEmployeeAccessApiRequest)) *ClustersApi_RevokeMongoEmployeeAccessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RevokeMongoEmployeeAccessApiRequest))
	})
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_RevokeMongoEmployeeAccessExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessExecute_Call) RunAndReturn(run func(admin.RevokeMongoEmployeeAccessApiRequest) (*http.Response, error)) *ClustersApi_RevokeMongoEmployeeAccessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeMongoEmployeeAccessWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) RevokeMongoEmployeeAccessWithParams(ctx context.Context, args *admin.RevokeMongoEmployeeAccessApiParams) admin.RevokeMongoEmployeeAccessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RevokeMongoEmployeeAccessWithParams")
	}

	var r0 admin.RevokeMongoEmployeeAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RevokeMongoEmployeeAccessApiParams) admin.RevokeMongoEmployeeAccessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RevokeMongoEmployeeAccessApiRequest)
	}

	return r0
}

// ClustersApi_RevokeMongoEmployeeAccessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeMongoEmployeeAccessWithParams'
type ClustersApi_RevokeMongoEmployeeAccessWithParams_Call struct {
	*mock.Call
}

// RevokeMongoEmployeeAccessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RevokeMongoEmployeeAccessApiParams
func (_e *ClustersApi_Expecter) RevokeMongoEmployeeAccessWithParams(ctx any, args any) *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call {
	return &ClustersApi_RevokeMongoEmployeeAccessWithParams_Call{Call: _e.mock.On("RevokeMongoEmployeeAccessWithParams", ctx, args)}
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call) Run(run func(ctx context.Context, args *admin.RevokeMongoEmployeeAccessApiParams)) *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RevokeMongoEmployeeAccessApiParams))
	})
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call) Return(_a0 admin.RevokeMongoEmployeeAccessApiRequest) *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call) RunAndReturn(run func(context.Context, *admin.RevokeMongoEmployeeAccessApiParams) admin.RevokeMongoEmployeeAccessApiRequest) *ClustersApi_RevokeMongoEmployeeAccessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinFeatureCompatibilityVersion provides a mock function with given fields: ctx, groupId, clusterName
func (_m *ClustersApi) UnpinFeatureCompatibilityVersion(ctx context.Context, groupId string, clusterName string) admin.UnpinFeatureCompatibilityVersionApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for UnpinFeatureCompatibilityVersion")
	}

	var r0 admin.UnpinFeatureCompatibilityVersionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.UnpinFeatureCompatibilityVersionApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.UnpinFeatureCompatibilityVersionApiRequest)
	}

	return r0
}

// ClustersApi_UnpinFeatureCompatibilityVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinFeatureCompatibilityVersion'
type ClustersApi_UnpinFeatureCompatibilityVersion_Call struct {
	*mock.Call
}

// UnpinFeatureCompatibilityVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *ClustersApi_Expecter) UnpinFeatureCompatibilityVersion(ctx any, groupId any, clusterName any) *ClustersApi_UnpinFeatureCompatibilityVersion_Call {
	return &ClustersApi_UnpinFeatureCompatibilityVersion_Call{Call: _e.mock.On("UnpinFeatureCompatibilityVersion", ctx, groupId, clusterName)}
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersion_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *ClustersApi_UnpinFeatureCompatibilityVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersion_Call) Return(_a0 admin.UnpinFeatureCompatibilityVersionApiRequest) *ClustersApi_UnpinFeatureCompatibilityVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersion_Call) RunAndReturn(run func(context.Context, string, string) admin.UnpinFeatureCompatibilityVersionApiRequest) *ClustersApi_UnpinFeatureCompatibilityVersion_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinFeatureCompatibilityVersionExecute provides a mock function with given fields: r
func (_m *ClustersApi) UnpinFeatureCompatibilityVersionExecute(r admin.UnpinFeatureCompatibilityVersionApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnpinFeatureCompatibilityVersionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.UnpinFeatureCompatibilityVersionApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UnpinFeatureCompatibilityVersionApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UnpinFeatureCompatibilityVersionApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinFeatureCompatibilityVersionExecute'
type ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call struct {
	*mock.Call
}

// UnpinFeatureCompatibilityVersionExecute is a helper method to define mock.On call
//   - r admin.UnpinFeatureCompatibilityVersionApiRequest
func (_e *ClustersApi_Expecter) UnpinFeatureCompatibilityVersionExecute(r any) *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call {
	return &ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call{Call: _e.mock.On("UnpinFeatureCompatibilityVersionExecute", r)}
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call) Run(run func(r admin.UnpinFeatureCompatibilityVersionApiRequest)) *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UnpinFeatureCompatibilityVersionApiRequest))
	})
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call) Return(_a0 *http.Response, _a1 error) *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call) RunAndReturn(run func(admin.UnpinFeatureCompatibilityVersionApiRequest) (*http.Response, error)) *ClustersApi_UnpinFeatureCompatibilityVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinFeatureCompatibilityVersionWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) UnpinFeatureCompatibilityVersionWithParams(ctx context.Context, args *admin.UnpinFeatureCompatibilityVersionApiParams) admin.UnpinFeatureCompatibilityVersionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UnpinFeatureCompatibilityVersionWithParams")
	}

	var r0 admin.UnpinFeatureCompatibilityVersionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UnpinFeatureCompatibilityVersionApiParams) admin.UnpinFeatureCompatibilityVersionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UnpinFeatureCompatibilityVersionApiRequest)
	}

	return r0
}

// ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinFeatureCompatibilityVersionWithParams'
type ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call struct {
	*mock.Call
}

// UnpinFeatureCompatibilityVersionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UnpinFeatureCompatibilityVersionApiParams
func (_e *ClustersApi_Expecter) UnpinFeatureCompatibilityVersionWithParams(ctx any, args any) *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call {
	return &ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call{Call: _e.mock.On("UnpinFeatureCompatibilityVersionWithParams", ctx, args)}
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call) Run(run func(ctx context.Context, args *admin.UnpinFeatureCompatibilityVersionApiParams)) *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UnpinFeatureCompatibilityVersionApiParams))
	})
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call) Return(_a0 admin.UnpinFeatureCompatibilityVersionApiRequest) *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call) RunAndReturn(run func(context.Context, *admin.UnpinFeatureCompatibilityVersionApiParams) admin.UnpinFeatureCompatibilityVersionApiRequest) *ClustersApi_UnpinFeatureCompatibilityVersionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCluster provides a mock function with given fields: ctx, groupId, clusterName, clusterDescription20240805
func (_m *ClustersApi) UpdateCluster(ctx context.Context, groupId string, clusterName string, clusterDescription20240805 *admin.ClusterDescription20240805) admin.UpdateClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterDescription20240805)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 admin.UpdateClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ClusterDescription20240805) admin.UpdateClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterDescription20240805)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterApiRequest)
	}

	return r0
}

// ClustersApi_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type ClustersApi_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterDescription20240805 *admin.ClusterDescription20240805
func (_e *ClustersApi_Expecter) UpdateCluster(ctx any, groupId any, clusterName any, clusterDescription20240805 any) *ClustersApi_UpdateCluster_Call {
	return &ClustersApi_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", ctx, groupId, clusterName, clusterDescription20240805)}
}

func (_c *ClustersApi_UpdateCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterDescription20240805 *admin.ClusterDescription20240805)) *ClustersApi_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ClusterDescription20240805))
	})
	return _c
}

func (_c *ClustersApi_UpdateCluster_Call) Return(_a0 admin.UpdateClusterApiRequest) *ClustersApi_UpdateCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpdateCluster_Call) RunAndReturn(run func(context.Context, string, string, *admin.ClusterDescription20240805) admin.UpdateClusterApiRequest) *ClustersApi_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterExecute provides a mock function with given fields: r
func (_m *ClustersApi) UpdateClusterExecute(r admin.UpdateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterExecute")
	}

	var r0 *admin.ClusterDescription20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterApiRequest) *admin.ClusterDescription20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescription20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_UpdateClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterExecute'
type ClustersApi_UpdateClusterExecute_Call struct {
	*mock.Call
}

// UpdateClusterExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterApiRequest
func (_e *ClustersApi_Expecter) UpdateClusterExecute(r any) *ClustersApi_UpdateClusterExecute_Call {
	return &ClustersApi_UpdateClusterExecute_Call{Call: _e.mock.On("UpdateClusterExecute", r)}
}

func (_c *ClustersApi_UpdateClusterExecute_Call) Run(run func(r admin.UpdateClusterApiRequest)) *ClustersApi_UpdateClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterApiRequest))
	})
	return _c
}

func (_c *ClustersApi_UpdateClusterExecute_Call) Return(_a0 *admin.ClusterDescription20240805, _a1 *http.Response, _a2 error) *ClustersApi_UpdateClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_UpdateClusterExecute_Call) RunAndReturn(run func(admin.UpdateClusterApiRequest) (*admin.ClusterDescription20240805, *http.Response, error)) *ClustersApi_UpdateClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) UpdateClusterWithParams(ctx context.Context, args *admin.UpdateClusterApiParams) admin.UpdateClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterWithParams")
	}

	var r0 admin.UpdateClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterApiParams) admin.UpdateClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterApiRequest)
	}

	return r0
}

// ClustersApi_UpdateClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterWithParams'
type ClustersApi_UpdateClusterWithParams_Call struct {
	*mock.Call
}

// UpdateClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterApiParams
func (_e *ClustersApi_Expecter) UpdateClusterWithParams(ctx any, args any) *ClustersApi_UpdateClusterWithParams_Call {
	return &ClustersApi_UpdateClusterWithParams_Call{Call: _e.mock.On("UpdateClusterWithParams", ctx, args)}
}

func (_c *ClustersApi_UpdateClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterApiParams)) *ClustersApi_UpdateClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterApiParams))
	})
	return _c
}

func (_c *ClustersApi_UpdateClusterWithParams_Call) Return(_a0 admin.UpdateClusterApiRequest) *ClustersApi_UpdateClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpdateClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterApiParams) admin.UpdateClusterApiRequest) *ClustersApi_UpdateClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessArgs provides a mock function with given fields: ctx, groupId, clusterName, clusterDescriptionProcessArgs20240805
func (_m *ClustersApi) UpdateProcessArgs(ctx context.Context, groupId string, clusterName string, clusterDescriptionProcessArgs20240805 *admin.ClusterDescriptionProcessArgs20240805) admin.UpdateProcessArgsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterDescriptionProcessArgs20240805)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessArgs")
	}

	var r0 admin.UpdateProcessArgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ClusterDescriptionProcessArgs20240805) admin.UpdateProcessArgsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterDescriptionProcessArgs20240805)
	} else {
		r0 = ret.Get(0).(admin.UpdateProcessArgsApiRequest)
	}

	return r0
}

// ClustersApi_UpdateProcessArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessArgs'
type ClustersApi_UpdateProcessArgs_Call struct {
	*mock.Call
}

// UpdateProcessArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterDescriptionProcessArgs20240805 *admin.ClusterDescriptionProcessArgs20240805
func (_e *ClustersApi_Expecter) UpdateProcessArgs(ctx any, groupId any, clusterName any, clusterDescriptionProcessArgs20240805 any) *ClustersApi_UpdateProcessArgs_Call {
	return &ClustersApi_UpdateProcessArgs_Call{Call: _e.mock.On("UpdateProcessArgs", ctx, groupId, clusterName, clusterDescriptionProcessArgs20240805)}
}

func (_c *ClustersApi_UpdateProcessArgs_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterDescriptionProcessArgs20240805 *admin.ClusterDescriptionProcessArgs20240805)) *ClustersApi_UpdateProcessArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ClusterDescriptionProcessArgs20240805))
	})
	return _c
}

func (_c *ClustersApi_UpdateProcessArgs_Call) Return(_a0 admin.UpdateProcessArgsApiRequest) *ClustersApi_UpdateProcessArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpdateProcessArgs_Call) RunAndReturn(run func(context.Context, string, string, *admin.ClusterDescriptionProcessArgs20240805) admin.UpdateProcessArgsApiRequest) *ClustersApi_UpdateProcessArgs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessArgsExecute provides a mock function with given fields: r
func (_m *ClustersApi) UpdateProcessArgsExecute(r admin.UpdateProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessArgsExecute")
	}

	var r0 *admin.ClusterDescriptionProcessArgs20240805
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProcessArgsApiRequest) *admin.ClusterDescriptionProcessArgs20240805); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterDescriptionProcessArgs20240805)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProcessArgsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProcessArgsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_UpdateProcessArgsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessArgsExecute'
type ClustersApi_UpdateProcessArgsExecute_Call struct {
	*mock.Call
}

// UpdateProcessArgsExecute is a helper method to define mock.On call
//   - r admin.UpdateProcessArgsApiRequest
func (_e *ClustersApi_Expecter) UpdateProcessArgsExecute(r any) *ClustersApi_UpdateProcessArgsExecute_Call {
	return &ClustersApi_UpdateProcessArgsExecute_Call{Call: _e.mock.On("UpdateProcessArgsExecute", r)}
}

func (_c *ClustersApi_UpdateProcessArgsExecute_Call) Run(run func(r admin.UpdateProcessArgsApiRequest)) *ClustersApi_UpdateProcessArgsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProcessArgsApiRequest))
	})
	return _c
}

func (_c *ClustersApi_UpdateProcessArgsExecute_Call) Return(_a0 *admin.ClusterDescriptionProcessArgs20240805, _a1 *http.Response, _a2 error) *ClustersApi_UpdateProcessArgsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_UpdateProcessArgsExecute_Call) RunAndReturn(run func(admin.UpdateProcessArgsApiRequest) (*admin.ClusterDescriptionProcessArgs20240805, *http.Response, error)) *ClustersApi_UpdateProcessArgsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessArgsWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) UpdateProcessArgsWithParams(ctx context.Context, args *admin.UpdateProcessArgsApiParams) admin.UpdateProcessArgsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessArgsWithParams")
	}

	var r0 admin.UpdateProcessArgsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProcessArgsApiParams) admin.UpdateProcessArgsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProcessArgsApiRequest)
	}

	return r0
}

// ClustersApi_UpdateProcessArgsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessArgsWithParams'
type ClustersApi_UpdateProcessArgsWithParams_Call struct {
	*mock.Call
}

// UpdateProcessArgsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProcessArgsApiParams
func (_e *ClustersApi_Expecter) UpdateProcessArgsWithParams(ctx any, args any) *ClustersApi_UpdateProcessArgsWithParams_Call {
	return &ClustersApi_UpdateProcessArgsWithParams_Call{Call: _e.mock.On("UpdateProcessArgsWithParams", ctx, args)}
}

func (_c *ClustersApi_UpdateProcessArgsWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProcessArgsApiParams)) *ClustersApi_UpdateProcessArgsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProcessArgsApiParams))
	})
	return _c
}

func (_c *ClustersApi_UpdateProcessArgsWithParams_Call) Return(_a0 admin.UpdateProcessArgsApiRequest) *ClustersApi_UpdateProcessArgsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpdateProcessArgsWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProcessArgsApiParams) admin.UpdateProcessArgsApiRequest) *ClustersApi_UpdateProcessArgsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeClusterToServerless provides a mock function with given fields: ctx, groupId, serverlessInstanceDescription
func (_m *ClustersApi) UpgradeClusterToServerless(ctx context.Context, groupId string, serverlessInstanceDescription *admin.ServerlessInstanceDescription) admin.UpgradeClusterToServerlessApiRequest {
	ret := _m.Called(ctx, groupId, serverlessInstanceDescription)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeClusterToServerless")
	}

	var r0 admin.UpgradeClusterToServerlessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.ServerlessInstanceDescription) admin.UpgradeClusterToServerlessApiRequest); ok {
		r0 = rf(ctx, groupId, serverlessInstanceDescription)
	} else {
		r0 = ret.Get(0).(admin.UpgradeClusterToServerlessApiRequest)
	}

	return r0
}

// ClustersApi_UpgradeClusterToServerless_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeClusterToServerless'
type ClustersApi_UpgradeClusterToServerless_Call struct {
	*mock.Call
}

// UpgradeClusterToServerless is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - serverlessInstanceDescription *admin.ServerlessInstanceDescription
func (_e *ClustersApi_Expecter) UpgradeClusterToServerless(ctx any, groupId any, serverlessInstanceDescription any) *ClustersApi_UpgradeClusterToServerless_Call {
	return &ClustersApi_UpgradeClusterToServerless_Call{Call: _e.mock.On("UpgradeClusterToServerless", ctx, groupId, serverlessInstanceDescription)}
}

func (_c *ClustersApi_UpgradeClusterToServerless_Call) Run(run func(ctx context.Context, groupId string, serverlessInstanceDescription *admin.ServerlessInstanceDescription)) *ClustersApi_UpgradeClusterToServerless_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.ServerlessInstanceDescription))
	})
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerless_Call) Return(_a0 admin.UpgradeClusterToServerlessApiRequest) *ClustersApi_UpgradeClusterToServerless_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerless_Call) RunAndReturn(run func(context.Context, string, *admin.ServerlessInstanceDescription) admin.UpgradeClusterToServerlessApiRequest) *ClustersApi_UpgradeClusterToServerless_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeClusterToServerlessExecute provides a mock function with given fields: r
func (_m *ClustersApi) UpgradeClusterToServerlessExecute(r admin.UpgradeClusterToServerlessApiRequest) (*admin.ServerlessInstanceDescription, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeClusterToServerlessExecute")
	}

	var r0 *admin.ServerlessInstanceDescription
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpgradeClusterToServerlessApiRequest) (*admin.ServerlessInstanceDescription, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpgradeClusterToServerlessApiRequest) *admin.ServerlessInstanceDescription); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServerlessInstanceDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpgradeClusterToServerlessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpgradeClusterToServerlessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_UpgradeClusterToServerlessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeClusterToServerlessExecute'
type ClustersApi_UpgradeClusterToServerlessExecute_Call struct {
	*mock.Call
}

// UpgradeClusterToServerlessExecute is a helper method to define mock.On call
//   - r admin.UpgradeClusterToServerlessApiRequest
func (_e *ClustersApi_Expecter) UpgradeClusterToServerlessExecute(r any) *ClustersApi_UpgradeClusterToServerlessExecute_Call {
	return &ClustersApi_UpgradeClusterToServerlessExecute_Call{Call: _e.mock.On("UpgradeClusterToServerlessExecute", r)}
}

func (_c *ClustersApi_UpgradeClusterToServerlessExecute_Call) Run(run func(r admin.UpgradeClusterToServerlessApiRequest)) *ClustersApi_UpgradeClusterToServerlessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpgradeClusterToServerlessApiRequest))
	})
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerlessExecute_Call) Return(_a0 *admin.ServerlessInstanceDescription, _a1 *http.Response, _a2 error) *ClustersApi_UpgradeClusterToServerlessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerlessExecute_Call) RunAndReturn(run func(admin.UpgradeClusterToServerlessApiRequest) (*admin.ServerlessInstanceDescription, *http.Response, error)) *ClustersApi_UpgradeClusterToServerlessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeClusterToServerlessWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) UpgradeClusterToServerlessWithParams(ctx context.Context, args *admin.UpgradeClusterToServerlessApiParams) admin.UpgradeClusterToServerlessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeClusterToServerlessWithParams")
	}

	var r0 admin.UpgradeClusterToServerlessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpgradeClusterToServerlessApiParams) admin.UpgradeClusterToServerlessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpgradeClusterToServerlessApiRequest)
	}

	return r0
}

// ClustersApi_UpgradeClusterToServerlessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeClusterToServerlessWithParams'
type ClustersApi_UpgradeClusterToServerlessWithParams_Call struct {
	*mock.Call
}

// UpgradeClusterToServerlessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpgradeClusterToServerlessApiParams
func (_e *ClustersApi_Expecter) UpgradeClusterToServerlessWithParams(ctx any, args any) *ClustersApi_UpgradeClusterToServerlessWithParams_Call {
	return &ClustersApi_UpgradeClusterToServerlessWithParams_Call{Call: _e.mock.On("UpgradeClusterToServerlessWithParams", ctx, args)}
}

func (_c *ClustersApi_UpgradeClusterToServerlessWithParams_Call) Run(run func(ctx context.Context, args *admin.UpgradeClusterToServerlessApiParams)) *ClustersApi_UpgradeClusterToServerlessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpgradeClusterToServerlessApiParams))
	})
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerlessWithParams_Call) Return(_a0 admin.UpgradeClusterToServerlessApiRequest) *ClustersApi_UpgradeClusterToServerlessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpgradeClusterToServerlessWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpgradeClusterToServerlessApiParams) admin.UpgradeClusterToServerlessApiRequest) *ClustersApi_UpgradeClusterToServerlessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeTenantUpgrade provides a mock function with given fields: ctx, groupId, legacyAtlasTenantClusterUpgradeRequest
func (_m *ClustersApi) UpgradeTenantUpgrade(ctx context.Context, groupId string, legacyAtlasTenantClusterUpgradeRequest *admin.LegacyAtlasTenantClusterUpgradeRequest) admin.UpgradeTenantUpgradeApiRequest {
	ret := _m.Called(ctx, groupId, legacyAtlasTenantClusterUpgradeRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeTenantUpgrade")
	}

	var r0 admin.UpgradeTenantUpgradeApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.LegacyAtlasTenantClusterUpgradeRequest) admin.UpgradeTenantUpgradeApiRequest); ok {
		r0 = rf(ctx, groupId, legacyAtlasTenantClusterUpgradeRequest)
	} else {
		r0 = ret.Get(0).(admin.UpgradeTenantUpgradeApiRequest)
	}

	return r0
}

// ClustersApi_UpgradeTenantUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeTenantUpgrade'
type ClustersApi_UpgradeTenantUpgrade_Call struct {
	*mock.Call
}

// UpgradeTenantUpgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - legacyAtlasTenantClusterUpgradeRequest *admin.LegacyAtlasTenantClusterUpgradeRequest
func (_e *ClustersApi_Expecter) UpgradeTenantUpgrade(ctx any, groupId any, legacyAtlasTenantClusterUpgradeRequest any) *ClustersApi_UpgradeTenantUpgrade_Call {
	return &ClustersApi_UpgradeTenantUpgrade_Call{Call: _e.mock.On("UpgradeTenantUpgrade", ctx, groupId, legacyAtlasTenantClusterUpgradeRequest)}
}

func (_c *ClustersApi_UpgradeTenantUpgrade_Call) Run(run func(ctx context.Context, groupId string, legacyAtlasTenantClusterUpgradeRequest *admin.LegacyAtlasTenantClusterUpgradeRequest)) *ClustersApi_UpgradeTenantUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.LegacyAtlasTenantClusterUpgradeRequest))
	})
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgrade_Call) Return(_a0 admin.UpgradeTenantUpgradeApiRequest) *ClustersApi_UpgradeTenantUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgrade_Call) RunAndReturn(run func(context.Context, string, *admin.LegacyAtlasTenantClusterUpgradeRequest) admin.UpgradeTenantUpgradeApiRequest) *ClustersApi_UpgradeTenantUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeTenantUpgradeExecute provides a mock function with given fields: r
func (_m *ClustersApi) UpgradeTenantUpgradeExecute(r admin.UpgradeTenantUpgradeApiRequest) (*admin.LegacyAtlasCluster, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeTenantUpgradeExecute")
	}

	var r0 *admin.LegacyAtlasCluster
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpgradeTenantUpgradeApiRequest) (*admin.LegacyAtlasCluster, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpgradeTenantUpgradeApiRequest) *admin.LegacyAtlasCluster); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LegacyAtlasCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpgradeTenantUpgradeApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpgradeTenantUpgradeApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClustersApi_UpgradeTenantUpgradeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeTenantUpgradeExecute'
type ClustersApi_UpgradeTenantUpgradeExecute_Call struct {
	*mock.Call
}

// UpgradeTenantUpgradeExecute is a helper method to define mock.On call
//   - r admin.UpgradeTenantUpgradeApiRequest
func (_e *ClustersApi_Expecter) UpgradeTenantUpgradeExecute(r any) *ClustersApi_UpgradeTenantUpgradeExecute_Call {
	return &ClustersApi_UpgradeTenantUpgradeExecute_Call{Call: _e.mock.On("UpgradeTenantUpgradeExecute", r)}
}

func (_c *ClustersApi_UpgradeTenantUpgradeExecute_Call) Run(run func(r admin.UpgradeTenantUpgradeApiRequest)) *ClustersApi_UpgradeTenantUpgradeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpgradeTenantUpgradeApiRequest))
	})
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgradeExecute_Call) Return(_a0 *admin.LegacyAtlasCluster, _a1 *http.Response, _a2 error) *ClustersApi_UpgradeTenantUpgradeExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgradeExecute_Call) RunAndReturn(run func(admin.UpgradeTenantUpgradeApiRequest) (*admin.LegacyAtlasCluster, *http.Response, error)) *ClustersApi_UpgradeTenantUpgradeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeTenantUpgradeWithParams provides a mock function with given fields: ctx, args
func (_m *ClustersApi) UpgradeTenantUpgradeWithParams(ctx context.Context, args *admin.UpgradeTenantUpgradeApiParams) admin.UpgradeTenantUpgradeApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeTenantUpgradeWithParams")
	}

	var r0 admin.UpgradeTenantUpgradeApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpgradeTenantUpgradeApiParams) admin.UpgradeTenantUpgradeApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpgradeTenantUpgradeApiRequest)
	}

	return r0
}

// ClustersApi_UpgradeTenantUpgradeWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeTenantUpgradeWithParams'
type ClustersApi_UpgradeTenantUpgradeWithParams_Call struct {
	*mock.Call
}

// UpgradeTenantUpgradeWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpgradeTenantUpgradeApiParams
func (_e *ClustersApi_Expecter) UpgradeTenantUpgradeWithParams(ctx any, args any) *ClustersApi_UpgradeTenantUpgradeWithParams_Call {
	return &ClustersApi_UpgradeTenantUpgradeWithParams_Call{Call: _e.mock.On("UpgradeTenantUpgradeWithParams", ctx, args)}
}

func (_c *ClustersApi_UpgradeTenantUpgradeWithParams_Call) Run(run func(ctx context.Context, args *admin.UpgradeTenantUpgradeApiParams)) *ClustersApi_UpgradeTenantUpgradeWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpgradeTenantUpgradeApiParams))
	})
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgradeWithParams_Call) Return(_a0 admin.UpgradeTenantUpgradeApiRequest) *ClustersApi_UpgradeTenantUpgradeWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClustersApi_UpgradeTenantUpgradeWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpgradeTenantUpgradeApiParams) admin.UpgradeTenantUpgradeApiRequest) *ClustersApi_UpgradeTenantUpgradeWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewClustersApi creates a new instance of ClustersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClustersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClustersApi {
	mock := &ClustersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
