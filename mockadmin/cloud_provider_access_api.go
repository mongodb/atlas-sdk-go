// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CloudProviderAccessApi is an autogenerated mock type for the CloudProviderAccessApi type
type CloudProviderAccessApi struct {
	mock.Mock
}

type CloudProviderAccessApi_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudProviderAccessApi) EXPECT() *CloudProviderAccessApi_Expecter {
	return &CloudProviderAccessApi_Expecter{mock: &_m.Mock}
}

// AuthorizeProviderAccessRole provides a mock function with given fields: ctx, groupId, roleId, cloudProviderAccessRoleRequestUpdate
func (_m *CloudProviderAccessApi) AuthorizeProviderAccessRole(ctx context.Context, groupId string, roleId string, cloudProviderAccessRoleRequestUpdate *admin.CloudProviderAccessRoleRequestUpdate) admin.AuthorizeProviderAccessRoleApiRequest {
	ret := _m.Called(ctx, groupId, roleId, cloudProviderAccessRoleRequestUpdate)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeProviderAccessRole")
	}

	var r0 admin.AuthorizeProviderAccessRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.CloudProviderAccessRoleRequestUpdate) admin.AuthorizeProviderAccessRoleApiRequest); ok {
		r0 = rf(ctx, groupId, roleId, cloudProviderAccessRoleRequestUpdate)
	} else {
		r0 = ret.Get(0).(admin.AuthorizeProviderAccessRoleApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_AuthorizeProviderAccessRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeProviderAccessRole'
type CloudProviderAccessApi_AuthorizeProviderAccessRole_Call struct {
	*mock.Call
}

// AuthorizeProviderAccessRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - roleId string
//   - cloudProviderAccessRoleRequestUpdate *admin.CloudProviderAccessRoleRequestUpdate
func (_e *CloudProviderAccessApi_Expecter) AuthorizeProviderAccessRole(ctx any, groupId any, roleId any, cloudProviderAccessRoleRequestUpdate any) *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call {
	return &CloudProviderAccessApi_AuthorizeProviderAccessRole_Call{Call: _e.mock.On("AuthorizeProviderAccessRole", ctx, groupId, roleId, cloudProviderAccessRoleRequestUpdate)}
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call) Run(run func(ctx context.Context, groupId string, roleId string, cloudProviderAccessRoleRequestUpdate *admin.CloudProviderAccessRoleRequestUpdate)) *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.CloudProviderAccessRoleRequestUpdate))
	})
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call) Return(_a0 admin.AuthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.CloudProviderAccessRoleRequestUpdate) admin.AuthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_AuthorizeProviderAccessRole_Call {
	_c.Call.Return(run)
	return _c
}

// AuthorizeProviderAccessRoleExecute provides a mock function with given fields: r
func (_m *CloudProviderAccessApi) AuthorizeProviderAccessRoleExecute(r admin.AuthorizeProviderAccessRoleApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeProviderAccessRoleExecute")
	}

	var r0 *admin.CloudProviderAccessRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AuthorizeProviderAccessRoleApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AuthorizeProviderAccessRoleApiRequest) *admin.CloudProviderAccessRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderAccessRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AuthorizeProviderAccessRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AuthorizeProviderAccessRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeProviderAccessRoleExecute'
type CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call struct {
	*mock.Call
}

// AuthorizeProviderAccessRoleExecute is a helper method to define mock.On call
//   - r admin.AuthorizeProviderAccessRoleApiRequest
func (_e *CloudProviderAccessApi_Expecter) AuthorizeProviderAccessRoleExecute(r any) *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call {
	return &CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call{Call: _e.mock.On("AuthorizeProviderAccessRoleExecute", r)}
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call) Run(run func(r admin.AuthorizeProviderAccessRoleApiRequest)) *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AuthorizeProviderAccessRoleApiRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call) Return(_a0 *admin.CloudProviderAccessRole, _a1 *http.Response, _a2 error) *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call) RunAndReturn(run func(admin.AuthorizeProviderAccessRoleApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)) *CloudProviderAccessApi_AuthorizeProviderAccessRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AuthorizeProviderAccessRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CloudProviderAccessApi) AuthorizeProviderAccessRoleWithParams(ctx context.Context, args *admin.AuthorizeProviderAccessRoleApiParams) admin.AuthorizeProviderAccessRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeProviderAccessRoleWithParams")
	}

	var r0 admin.AuthorizeProviderAccessRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AuthorizeProviderAccessRoleApiParams) admin.AuthorizeProviderAccessRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AuthorizeProviderAccessRoleApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeProviderAccessRoleWithParams'
type CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call struct {
	*mock.Call
}

// AuthorizeProviderAccessRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AuthorizeProviderAccessRoleApiParams
func (_e *CloudProviderAccessApi_Expecter) AuthorizeProviderAccessRoleWithParams(ctx any, args any) *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call {
	return &CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call{Call: _e.mock.On("AuthorizeProviderAccessRoleWithParams", ctx, args)}
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.AuthorizeProviderAccessRoleApiParams)) *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AuthorizeProviderAccessRoleApiParams))
	})
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call) Return(_a0 admin.AuthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.AuthorizeProviderAccessRoleApiParams) admin.AuthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_AuthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCloudProviderAccess provides a mock function with given fields: ctx, groupId, cloudProviderAccessRoleRequest
func (_m *CloudProviderAccessApi) CreateCloudProviderAccess(ctx context.Context, groupId string, cloudProviderAccessRoleRequest *admin.CloudProviderAccessRoleRequest) admin.CreateCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, groupId, cloudProviderAccessRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudProviderAccess")
	}

	var r0 admin.CreateCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.CloudProviderAccessRoleRequest) admin.CreateCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, groupId, cloudProviderAccessRoleRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_CreateCloudProviderAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCloudProviderAccess'
type CloudProviderAccessApi_CreateCloudProviderAccess_Call struct {
	*mock.Call
}

// CreateCloudProviderAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - cloudProviderAccessRoleRequest *admin.CloudProviderAccessRoleRequest
func (_e *CloudProviderAccessApi_Expecter) CreateCloudProviderAccess(ctx any, groupId any, cloudProviderAccessRoleRequest any) *CloudProviderAccessApi_CreateCloudProviderAccess_Call {
	return &CloudProviderAccessApi_CreateCloudProviderAccess_Call{Call: _e.mock.On("CreateCloudProviderAccess", ctx, groupId, cloudProviderAccessRoleRequest)}
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccess_Call) Run(run func(ctx context.Context, groupId string, cloudProviderAccessRoleRequest *admin.CloudProviderAccessRoleRequest)) *CloudProviderAccessApi_CreateCloudProviderAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.CloudProviderAccessRoleRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccess_Call) Return(_a0 admin.CreateCloudProviderAccessApiRequest) *CloudProviderAccessApi_CreateCloudProviderAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccess_Call) RunAndReturn(run func(context.Context, string, *admin.CloudProviderAccessRoleRequest) admin.CreateCloudProviderAccessApiRequest) *CloudProviderAccessApi_CreateCloudProviderAccess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCloudProviderAccessExecute provides a mock function with given fields: r
func (_m *CloudProviderAccessApi) CreateCloudProviderAccessExecute(r admin.CreateCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudProviderAccessExecute")
	}

	var r0 *admin.CloudProviderAccessRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateCloudProviderAccessApiRequest) *admin.CloudProviderAccessRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderAccessRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateCloudProviderAccessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateCloudProviderAccessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCloudProviderAccessExecute'
type CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call struct {
	*mock.Call
}

// CreateCloudProviderAccessExecute is a helper method to define mock.On call
//   - r admin.CreateCloudProviderAccessApiRequest
func (_e *CloudProviderAccessApi_Expecter) CreateCloudProviderAccessExecute(r any) *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call {
	return &CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call{Call: _e.mock.On("CreateCloudProviderAccessExecute", r)}
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call) Run(run func(r admin.CreateCloudProviderAccessApiRequest)) *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateCloudProviderAccessApiRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call) Return(_a0 *admin.CloudProviderAccessRole, _a1 *http.Response, _a2 error) *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call) RunAndReturn(run func(admin.CreateCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)) *CloudProviderAccessApi_CreateCloudProviderAccessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCloudProviderAccessWithParams provides a mock function with given fields: ctx, args
func (_m *CloudProviderAccessApi) CreateCloudProviderAccessWithParams(ctx context.Context, args *admin.CreateCloudProviderAccessApiParams) admin.CreateCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudProviderAccessWithParams")
	}

	var r0 admin.CreateCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateCloudProviderAccessApiParams) admin.CreateCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCloudProviderAccessWithParams'
type CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call struct {
	*mock.Call
}

// CreateCloudProviderAccessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateCloudProviderAccessApiParams
func (_e *CloudProviderAccessApi_Expecter) CreateCloudProviderAccessWithParams(ctx any, args any) *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call {
	return &CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call{Call: _e.mock.On("CreateCloudProviderAccessWithParams", ctx, args)}
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateCloudProviderAccessApiParams)) *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateCloudProviderAccessApiParams))
	})
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call) Return(_a0 admin.CreateCloudProviderAccessApiRequest) *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateCloudProviderAccessApiParams) admin.CreateCloudProviderAccessApiRequest) *CloudProviderAccessApi_CreateCloudProviderAccessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeauthorizeProviderAccessRole provides a mock function with given fields: ctx, groupId, cloudProvider, roleId
func (_m *CloudProviderAccessApi) DeauthorizeProviderAccessRole(ctx context.Context, groupId string, cloudProvider string, roleId string) admin.DeauthorizeProviderAccessRoleApiRequest {
	ret := _m.Called(ctx, groupId, cloudProvider, roleId)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeProviderAccessRole")
	}

	var r0 admin.DeauthorizeProviderAccessRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeauthorizeProviderAccessRoleApiRequest); ok {
		r0 = rf(ctx, groupId, cloudProvider, roleId)
	} else {
		r0 = ret.Get(0).(admin.DeauthorizeProviderAccessRoleApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeauthorizeProviderAccessRole'
type CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call struct {
	*mock.Call
}

// DeauthorizeProviderAccessRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - cloudProvider string
//   - roleId string
func (_e *CloudProviderAccessApi_Expecter) DeauthorizeProviderAccessRole(ctx any, groupId any, cloudProvider any, roleId any) *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call {
	return &CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call{Call: _e.mock.On("DeauthorizeProviderAccessRole", ctx, groupId, cloudProvider, roleId)}
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call) Run(run func(ctx context.Context, groupId string, cloudProvider string, roleId string)) *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call) Return(_a0 admin.DeauthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeauthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_DeauthorizeProviderAccessRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeauthorizeProviderAccessRoleExecute provides a mock function with given fields: r
func (_m *CloudProviderAccessApi) DeauthorizeProviderAccessRoleExecute(r admin.DeauthorizeProviderAccessRoleApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeProviderAccessRoleExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeauthorizeProviderAccessRoleApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeauthorizeProviderAccessRoleApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeauthorizeProviderAccessRoleApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeauthorizeProviderAccessRoleExecute'
type CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call struct {
	*mock.Call
}

// DeauthorizeProviderAccessRoleExecute is a helper method to define mock.On call
//   - r admin.DeauthorizeProviderAccessRoleApiRequest
func (_e *CloudProviderAccessApi_Expecter) DeauthorizeProviderAccessRoleExecute(r any) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call {
	return &CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call{Call: _e.mock.On("DeauthorizeProviderAccessRoleExecute", r)}
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call) Run(run func(r admin.DeauthorizeProviderAccessRoleApiRequest)) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeauthorizeProviderAccessRoleApiRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call) Return(_a0 *http.Response, _a1 error) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call) RunAndReturn(run func(admin.DeauthorizeProviderAccessRoleApiRequest) (*http.Response, error)) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeauthorizeProviderAccessRoleWithParams provides a mock function with given fields: ctx, args
func (_m *CloudProviderAccessApi) DeauthorizeProviderAccessRoleWithParams(ctx context.Context, args *admin.DeauthorizeProviderAccessRoleApiParams) admin.DeauthorizeProviderAccessRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeProviderAccessRoleWithParams")
	}

	var r0 admin.DeauthorizeProviderAccessRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeauthorizeProviderAccessRoleApiParams) admin.DeauthorizeProviderAccessRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeauthorizeProviderAccessRoleApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeauthorizeProviderAccessRoleWithParams'
type CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call struct {
	*mock.Call
}

// DeauthorizeProviderAccessRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeauthorizeProviderAccessRoleApiParams
func (_e *CloudProviderAccessApi_Expecter) DeauthorizeProviderAccessRoleWithParams(ctx any, args any) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call {
	return &CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call{Call: _e.mock.On("DeauthorizeProviderAccessRoleWithParams", ctx, args)}
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.DeauthorizeProviderAccessRoleApiParams)) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeauthorizeProviderAccessRoleApiParams))
	})
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call) Return(_a0 admin.DeauthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeauthorizeProviderAccessRoleApiParams) admin.DeauthorizeProviderAccessRoleApiRequest) *CloudProviderAccessApi_DeauthorizeProviderAccessRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloudProviderAccess provides a mock function with given fields: ctx, groupId, roleId
func (_m *CloudProviderAccessApi) GetCloudProviderAccess(ctx context.Context, groupId string, roleId string) admin.GetCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, groupId, roleId)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudProviderAccess")
	}

	var r0 admin.GetCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, groupId, roleId)
	} else {
		r0 = ret.Get(0).(admin.GetCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_GetCloudProviderAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloudProviderAccess'
type CloudProviderAccessApi_GetCloudProviderAccess_Call struct {
	*mock.Call
}

// GetCloudProviderAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - roleId string
func (_e *CloudProviderAccessApi_Expecter) GetCloudProviderAccess(ctx any, groupId any, roleId any) *CloudProviderAccessApi_GetCloudProviderAccess_Call {
	return &CloudProviderAccessApi_GetCloudProviderAccess_Call{Call: _e.mock.On("GetCloudProviderAccess", ctx, groupId, roleId)}
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccess_Call) Run(run func(ctx context.Context, groupId string, roleId string)) *CloudProviderAccessApi_GetCloudProviderAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccess_Call) Return(_a0 admin.GetCloudProviderAccessApiRequest) *CloudProviderAccessApi_GetCloudProviderAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccess_Call) RunAndReturn(run func(context.Context, string, string) admin.GetCloudProviderAccessApiRequest) *CloudProviderAccessApi_GetCloudProviderAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloudProviderAccessExecute provides a mock function with given fields: r
func (_m *CloudProviderAccessApi) GetCloudProviderAccessExecute(r admin.GetCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudProviderAccessExecute")
	}

	var r0 *admin.CloudProviderAccessRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetCloudProviderAccessApiRequest) *admin.CloudProviderAccessRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderAccessRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetCloudProviderAccessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetCloudProviderAccessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudProviderAccessApi_GetCloudProviderAccessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloudProviderAccessExecute'
type CloudProviderAccessApi_GetCloudProviderAccessExecute_Call struct {
	*mock.Call
}

// GetCloudProviderAccessExecute is a helper method to define mock.On call
//   - r admin.GetCloudProviderAccessApiRequest
func (_e *CloudProviderAccessApi_Expecter) GetCloudProviderAccessExecute(r any) *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call {
	return &CloudProviderAccessApi_GetCloudProviderAccessExecute_Call{Call: _e.mock.On("GetCloudProviderAccessExecute", r)}
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call) Run(run func(r admin.GetCloudProviderAccessApiRequest)) *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetCloudProviderAccessApiRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call) Return(_a0 *admin.CloudProviderAccessRole, _a1 *http.Response, _a2 error) *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call) RunAndReturn(run func(admin.GetCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRole, *http.Response, error)) *CloudProviderAccessApi_GetCloudProviderAccessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloudProviderAccessWithParams provides a mock function with given fields: ctx, args
func (_m *CloudProviderAccessApi) GetCloudProviderAccessWithParams(ctx context.Context, args *admin.GetCloudProviderAccessApiParams) admin.GetCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudProviderAccessWithParams")
	}

	var r0 admin.GetCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetCloudProviderAccessApiParams) admin.GetCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloudProviderAccessWithParams'
type CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call struct {
	*mock.Call
}

// GetCloudProviderAccessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetCloudProviderAccessApiParams
func (_e *CloudProviderAccessApi_Expecter) GetCloudProviderAccessWithParams(ctx any, args any) *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call {
	return &CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call{Call: _e.mock.On("GetCloudProviderAccessWithParams", ctx, args)}
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call) Run(run func(ctx context.Context, args *admin.GetCloudProviderAccessApiParams)) *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetCloudProviderAccessApiParams))
	})
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call) Return(_a0 admin.GetCloudProviderAccessApiRequest) *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetCloudProviderAccessApiParams) admin.GetCloudProviderAccessApiRequest) *CloudProviderAccessApi_GetCloudProviderAccessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListCloudProviderAccess provides a mock function with given fields: ctx, groupId
func (_m *CloudProviderAccessApi) ListCloudProviderAccess(ctx context.Context, groupId string) admin.ListCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudProviderAccess")
	}

	var r0 admin.ListCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_ListCloudProviderAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCloudProviderAccess'
type CloudProviderAccessApi_ListCloudProviderAccess_Call struct {
	*mock.Call
}

// ListCloudProviderAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *CloudProviderAccessApi_Expecter) ListCloudProviderAccess(ctx any, groupId any) *CloudProviderAccessApi_ListCloudProviderAccess_Call {
	return &CloudProviderAccessApi_ListCloudProviderAccess_Call{Call: _e.mock.On("ListCloudProviderAccess", ctx, groupId)}
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccess_Call) Run(run func(ctx context.Context, groupId string)) *CloudProviderAccessApi_ListCloudProviderAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccess_Call) Return(_a0 admin.ListCloudProviderAccessApiRequest) *CloudProviderAccessApi_ListCloudProviderAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccess_Call) RunAndReturn(run func(context.Context, string) admin.ListCloudProviderAccessApiRequest) *CloudProviderAccessApi_ListCloudProviderAccess_Call {
	_c.Call.Return(run)
	return _c
}

// ListCloudProviderAccessExecute provides a mock function with given fields: r
func (_m *CloudProviderAccessApi) ListCloudProviderAccessExecute(r admin.ListCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRoles, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudProviderAccessExecute")
	}

	var r0 *admin.CloudProviderAccessRoles
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRoles, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListCloudProviderAccessApiRequest) *admin.CloudProviderAccessRoles); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderAccessRoles)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListCloudProviderAccessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListCloudProviderAccessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloudProviderAccessApi_ListCloudProviderAccessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCloudProviderAccessExecute'
type CloudProviderAccessApi_ListCloudProviderAccessExecute_Call struct {
	*mock.Call
}

// ListCloudProviderAccessExecute is a helper method to define mock.On call
//   - r admin.ListCloudProviderAccessApiRequest
func (_e *CloudProviderAccessApi_Expecter) ListCloudProviderAccessExecute(r any) *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call {
	return &CloudProviderAccessApi_ListCloudProviderAccessExecute_Call{Call: _e.mock.On("ListCloudProviderAccessExecute", r)}
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call) Run(run func(r admin.ListCloudProviderAccessApiRequest)) *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListCloudProviderAccessApiRequest))
	})
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call) Return(_a0 *admin.CloudProviderAccessRoles, _a1 *http.Response, _a2 error) *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call) RunAndReturn(run func(admin.ListCloudProviderAccessApiRequest) (*admin.CloudProviderAccessRoles, *http.Response, error)) *CloudProviderAccessApi_ListCloudProviderAccessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListCloudProviderAccessWithParams provides a mock function with given fields: ctx, args
func (_m *CloudProviderAccessApi) ListCloudProviderAccessWithParams(ctx context.Context, args *admin.ListCloudProviderAccessApiParams) admin.ListCloudProviderAccessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudProviderAccessWithParams")
	}

	var r0 admin.ListCloudProviderAccessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListCloudProviderAccessApiParams) admin.ListCloudProviderAccessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListCloudProviderAccessApiRequest)
	}

	return r0
}

// CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCloudProviderAccessWithParams'
type CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call struct {
	*mock.Call
}

// ListCloudProviderAccessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListCloudProviderAccessApiParams
func (_e *CloudProviderAccessApi_Expecter) ListCloudProviderAccessWithParams(ctx any, args any) *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call {
	return &CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call{Call: _e.mock.On("ListCloudProviderAccessWithParams", ctx, args)}
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call) Run(run func(ctx context.Context, args *admin.ListCloudProviderAccessApiParams)) *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListCloudProviderAccessApiParams))
	})
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call) Return(_a0 admin.ListCloudProviderAccessApiRequest) *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListCloudProviderAccessApiParams) admin.ListCloudProviderAccessApiRequest) *CloudProviderAccessApi_ListCloudProviderAccessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudProviderAccessApi creates a new instance of CloudProviderAccessApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudProviderAccessApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudProviderAccessApi {
	mock := &CloudProviderAccessApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
