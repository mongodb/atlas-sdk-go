// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// PerformanceAdvisorApi is an autogenerated mock type for the PerformanceAdvisorApi type
type PerformanceAdvisorApi struct {
	mock.Mock
}

type PerformanceAdvisorApi_Expecter struct {
	mock *mock.Mock
}

func (_m *PerformanceAdvisorApi) EXPECT() *PerformanceAdvisorApi_Expecter {
	return &PerformanceAdvisorApi_Expecter{mock: &_m.Mock}
}

// DisableManagedSlowMs provides a mock function with given fields: ctx, groupId
func (_m *PerformanceAdvisorApi) DisableManagedSlowMs(ctx context.Context, groupId string) admin.DisableManagedSlowMsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DisableManagedSlowMs")
	}

	var r0 admin.DisableManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DisableManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DisableManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_DisableManagedSlowMs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableManagedSlowMs'
type PerformanceAdvisorApi_DisableManagedSlowMs_Call struct {
	*mock.Call
}

// DisableManagedSlowMs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *PerformanceAdvisorApi_Expecter) DisableManagedSlowMs(ctx any, groupId any) *PerformanceAdvisorApi_DisableManagedSlowMs_Call {
	return &PerformanceAdvisorApi_DisableManagedSlowMs_Call{Call: _e.mock.On("DisableManagedSlowMs", ctx, groupId)}
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMs_Call) Run(run func(ctx context.Context, groupId string)) *PerformanceAdvisorApi_DisableManagedSlowMs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMs_Call) Return(_a0 admin.DisableManagedSlowMsApiRequest) *PerformanceAdvisorApi_DisableManagedSlowMs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMs_Call) RunAndReturn(run func(context.Context, string) admin.DisableManagedSlowMsApiRequest) *PerformanceAdvisorApi_DisableManagedSlowMs_Call {
	_c.Call.Return(run)
	return _c
}

// DisableManagedSlowMsExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) DisableManagedSlowMsExecute(r admin.DisableManagedSlowMsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DisableManagedSlowMsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DisableManagedSlowMsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DisableManagedSlowMsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DisableManagedSlowMsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableManagedSlowMsExecute'
type PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call struct {
	*mock.Call
}

// DisableManagedSlowMsExecute is a helper method to define mock.On call
//   - r admin.DisableManagedSlowMsApiRequest
func (_e *PerformanceAdvisorApi_Expecter) DisableManagedSlowMsExecute(r any) *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call {
	return &PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call{Call: _e.mock.On("DisableManagedSlowMsExecute", r)}
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call) Run(run func(r admin.DisableManagedSlowMsApiRequest)) *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DisableManagedSlowMsApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call) Return(_a0 *http.Response, _a1 error) *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call) RunAndReturn(run func(admin.DisableManagedSlowMsApiRequest) (*http.Response, error)) *PerformanceAdvisorApi_DisableManagedSlowMsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DisableManagedSlowMsWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) DisableManagedSlowMsWithParams(ctx context.Context, args *admin.DisableManagedSlowMsApiParams) admin.DisableManagedSlowMsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DisableManagedSlowMsWithParams")
	}

	var r0 admin.DisableManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DisableManagedSlowMsApiParams) admin.DisableManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DisableManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableManagedSlowMsWithParams'
type PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call struct {
	*mock.Call
}

// DisableManagedSlowMsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DisableManagedSlowMsApiParams
func (_e *PerformanceAdvisorApi_Expecter) DisableManagedSlowMsWithParams(ctx any, args any) *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call {
	return &PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call{Call: _e.mock.On("DisableManagedSlowMsWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call) Run(run func(ctx context.Context, args *admin.DisableManagedSlowMsApiParams)) *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DisableManagedSlowMsApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call) Return(_a0 admin.DisableManagedSlowMsApiRequest) *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call) RunAndReturn(run func(context.Context, *admin.DisableManagedSlowMsApiParams) admin.DisableManagedSlowMsApiRequest) *PerformanceAdvisorApi_DisableManagedSlowMsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// EnableManagedSlowMs provides a mock function with given fields: ctx, groupId
func (_m *PerformanceAdvisorApi) EnableManagedSlowMs(ctx context.Context, groupId string) admin.EnableManagedSlowMsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for EnableManagedSlowMs")
	}

	var r0 admin.EnableManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.EnableManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.EnableManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_EnableManagedSlowMs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableManagedSlowMs'
type PerformanceAdvisorApi_EnableManagedSlowMs_Call struct {
	*mock.Call
}

// EnableManagedSlowMs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *PerformanceAdvisorApi_Expecter) EnableManagedSlowMs(ctx any, groupId any) *PerformanceAdvisorApi_EnableManagedSlowMs_Call {
	return &PerformanceAdvisorApi_EnableManagedSlowMs_Call{Call: _e.mock.On("EnableManagedSlowMs", ctx, groupId)}
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMs_Call) Run(run func(ctx context.Context, groupId string)) *PerformanceAdvisorApi_EnableManagedSlowMs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMs_Call) Return(_a0 admin.EnableManagedSlowMsApiRequest) *PerformanceAdvisorApi_EnableManagedSlowMs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMs_Call) RunAndReturn(run func(context.Context, string) admin.EnableManagedSlowMsApiRequest) *PerformanceAdvisorApi_EnableManagedSlowMs_Call {
	_c.Call.Return(run)
	return _c
}

// EnableManagedSlowMsExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) EnableManagedSlowMsExecute(r admin.EnableManagedSlowMsApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for EnableManagedSlowMsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.EnableManagedSlowMsApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.EnableManagedSlowMsApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.EnableManagedSlowMsApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableManagedSlowMsExecute'
type PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call struct {
	*mock.Call
}

// EnableManagedSlowMsExecute is a helper method to define mock.On call
//   - r admin.EnableManagedSlowMsApiRequest
func (_e *PerformanceAdvisorApi_Expecter) EnableManagedSlowMsExecute(r any) *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call {
	return &PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call{Call: _e.mock.On("EnableManagedSlowMsExecute", r)}
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call) Run(run func(r admin.EnableManagedSlowMsApiRequest)) *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.EnableManagedSlowMsApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call) Return(_a0 *http.Response, _a1 error) *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call) RunAndReturn(run func(admin.EnableManagedSlowMsApiRequest) (*http.Response, error)) *PerformanceAdvisorApi_EnableManagedSlowMsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// EnableManagedSlowMsWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) EnableManagedSlowMsWithParams(ctx context.Context, args *admin.EnableManagedSlowMsApiParams) admin.EnableManagedSlowMsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for EnableManagedSlowMsWithParams")
	}

	var r0 admin.EnableManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.EnableManagedSlowMsApiParams) admin.EnableManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.EnableManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableManagedSlowMsWithParams'
type PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call struct {
	*mock.Call
}

// EnableManagedSlowMsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.EnableManagedSlowMsApiParams
func (_e *PerformanceAdvisorApi_Expecter) EnableManagedSlowMsWithParams(ctx any, args any) *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call {
	return &PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call{Call: _e.mock.On("EnableManagedSlowMsWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call) Run(run func(ctx context.Context, args *admin.EnableManagedSlowMsApiParams)) *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.EnableManagedSlowMsApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call) Return(_a0 admin.EnableManagedSlowMsApiRequest) *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call) RunAndReturn(run func(context.Context, *admin.EnableManagedSlowMsApiParams) admin.EnableManagedSlowMsApiRequest) *PerformanceAdvisorApi_EnableManagedSlowMsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedSlowMs provides a mock function with given fields: ctx, groupId
func (_m *PerformanceAdvisorApi) GetManagedSlowMs(ctx context.Context, groupId string) admin.GetManagedSlowMsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedSlowMs")
	}

	var r0 admin.GetManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_GetManagedSlowMs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedSlowMs'
type PerformanceAdvisorApi_GetManagedSlowMs_Call struct {
	*mock.Call
}

// GetManagedSlowMs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *PerformanceAdvisorApi_Expecter) GetManagedSlowMs(ctx any, groupId any) *PerformanceAdvisorApi_GetManagedSlowMs_Call {
	return &PerformanceAdvisorApi_GetManagedSlowMs_Call{Call: _e.mock.On("GetManagedSlowMs", ctx, groupId)}
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMs_Call) Run(run func(ctx context.Context, groupId string)) *PerformanceAdvisorApi_GetManagedSlowMs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMs_Call) Return(_a0 admin.GetManagedSlowMsApiRequest) *PerformanceAdvisorApi_GetManagedSlowMs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMs_Call) RunAndReturn(run func(context.Context, string) admin.GetManagedSlowMsApiRequest) *PerformanceAdvisorApi_GetManagedSlowMs_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedSlowMsExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) GetManagedSlowMsExecute(r admin.GetManagedSlowMsApiRequest) (bool, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedSlowMsExecute")
	}

	var r0 bool
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetManagedSlowMsApiRequest) (bool, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetManagedSlowMsApiRequest) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(admin.GetManagedSlowMsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetManagedSlowMsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_GetManagedSlowMsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedSlowMsExecute'
type PerformanceAdvisorApi_GetManagedSlowMsExecute_Call struct {
	*mock.Call
}

// GetManagedSlowMsExecute is a helper method to define mock.On call
//   - r admin.GetManagedSlowMsApiRequest
func (_e *PerformanceAdvisorApi_Expecter) GetManagedSlowMsExecute(r any) *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call {
	return &PerformanceAdvisorApi_GetManagedSlowMsExecute_Call{Call: _e.mock.On("GetManagedSlowMsExecute", r)}
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call) Run(run func(r admin.GetManagedSlowMsApiRequest)) *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetManagedSlowMsApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call) Return(_a0 bool, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call) RunAndReturn(run func(admin.GetManagedSlowMsApiRequest) (bool, *http.Response, error)) *PerformanceAdvisorApi_GetManagedSlowMsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedSlowMsWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) GetManagedSlowMsWithParams(ctx context.Context, args *admin.GetManagedSlowMsApiParams) admin.GetManagedSlowMsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedSlowMsWithParams")
	}

	var r0 admin.GetManagedSlowMsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetManagedSlowMsApiParams) admin.GetManagedSlowMsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetManagedSlowMsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedSlowMsWithParams'
type PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call struct {
	*mock.Call
}

// GetManagedSlowMsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetManagedSlowMsApiParams
func (_e *PerformanceAdvisorApi_Expecter) GetManagedSlowMsWithParams(ctx any, args any) *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call {
	return &PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call{Call: _e.mock.On("GetManagedSlowMsWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetManagedSlowMsApiParams)) *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetManagedSlowMsApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call) Return(_a0 admin.GetManagedSlowMsApiRequest) *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetManagedSlowMsApiParams) admin.GetManagedSlowMsApiRequest) *PerformanceAdvisorApi_GetManagedSlowMsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessAutoIndexing provides a mock function with given fields: ctx, groupId, clusterName
func (_m *PerformanceAdvisorApi) GetServerlessAutoIndexing(ctx context.Context, groupId string, clusterName string) admin.GetServerlessAutoIndexingApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessAutoIndexing")
	}

	var r0 admin.GetServerlessAutoIndexingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetServerlessAutoIndexingApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessAutoIndexingApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_GetServerlessAutoIndexing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessAutoIndexing'
type PerformanceAdvisorApi_GetServerlessAutoIndexing_Call struct {
	*mock.Call
}

// GetServerlessAutoIndexing is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *PerformanceAdvisorApi_Expecter) GetServerlessAutoIndexing(ctx any, groupId any, clusterName any) *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call {
	return &PerformanceAdvisorApi_GetServerlessAutoIndexing_Call{Call: _e.mock.On("GetServerlessAutoIndexing", ctx, groupId, clusterName)}
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call) Return(_a0 admin.GetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call) RunAndReturn(run func(context.Context, string, string) admin.GetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_GetServerlessAutoIndexing_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessAutoIndexingExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) GetServerlessAutoIndexingExecute(r admin.GetServerlessAutoIndexingApiRequest) (bool, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessAutoIndexingExecute")
	}

	var r0 bool
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetServerlessAutoIndexingApiRequest) (bool, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetServerlessAutoIndexingApiRequest) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(admin.GetServerlessAutoIndexingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetServerlessAutoIndexingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessAutoIndexingExecute'
type PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call struct {
	*mock.Call
}

// GetServerlessAutoIndexingExecute is a helper method to define mock.On call
//   - r admin.GetServerlessAutoIndexingApiRequest
func (_e *PerformanceAdvisorApi_Expecter) GetServerlessAutoIndexingExecute(r any) *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call {
	return &PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call{Call: _e.mock.On("GetServerlessAutoIndexingExecute", r)}
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call) Run(run func(r admin.GetServerlessAutoIndexingApiRequest)) *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetServerlessAutoIndexingApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call) Return(_a0 bool, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call) RunAndReturn(run func(admin.GetServerlessAutoIndexingApiRequest) (bool, *http.Response, error)) *PerformanceAdvisorApi_GetServerlessAutoIndexingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessAutoIndexingWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) GetServerlessAutoIndexingWithParams(ctx context.Context, args *admin.GetServerlessAutoIndexingApiParams) admin.GetServerlessAutoIndexingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessAutoIndexingWithParams")
	}

	var r0 admin.GetServerlessAutoIndexingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServerlessAutoIndexingApiParams) admin.GetServerlessAutoIndexingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetServerlessAutoIndexingApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessAutoIndexingWithParams'
type PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call struct {
	*mock.Call
}

// GetServerlessAutoIndexingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetServerlessAutoIndexingApiParams
func (_e *PerformanceAdvisorApi_Expecter) GetServerlessAutoIndexingWithParams(ctx any, args any) *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call {
	return &PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call{Call: _e.mock.On("GetServerlessAutoIndexingWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call) Run(run func(ctx context.Context, args *admin.GetServerlessAutoIndexingApiParams)) *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetServerlessAutoIndexingApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call) Return(_a0 admin.GetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetServerlessAutoIndexingApiParams) admin.GetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_GetServerlessAutoIndexingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSuggestedIndexes provides a mock function with given fields: ctx, groupId, clusterName
func (_m *PerformanceAdvisorApi) ListClusterSuggestedIndexes(ctx context.Context, groupId string, clusterName string) admin.ListClusterSuggestedIndexesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSuggestedIndexes")
	}

	var r0 admin.ListClusterSuggestedIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterSuggestedIndexesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSuggestedIndexesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSuggestedIndexes'
type PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call struct {
	*mock.Call
}

// ListClusterSuggestedIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *PerformanceAdvisorApi_Expecter) ListClusterSuggestedIndexes(ctx any, groupId any, clusterName any) *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call {
	return &PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call{Call: _e.mock.On("ListClusterSuggestedIndexes", ctx, groupId, clusterName)}
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call) Return(_a0 admin.ListClusterSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListClusterSuggestedIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSuggestedIndexesExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListClusterSuggestedIndexesExecute(r admin.ListClusterSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSuggestedIndexesExecute")
	}

	var r0 *admin.PerformanceAdvisorResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterSuggestedIndexesApiRequest) *admin.PerformanceAdvisorResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PerformanceAdvisorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterSuggestedIndexesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterSuggestedIndexesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSuggestedIndexesExecute'
type PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call struct {
	*mock.Call
}

// ListClusterSuggestedIndexesExecute is a helper method to define mock.On call
//   - r admin.ListClusterSuggestedIndexesApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListClusterSuggestedIndexesExecute(r any) *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call {
	return &PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call{Call: _e.mock.On("ListClusterSuggestedIndexesExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call) Run(run func(r admin.ListClusterSuggestedIndexesApiRequest)) *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterSuggestedIndexesApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call) Return(_a0 *admin.PerformanceAdvisorResponse, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call) RunAndReturn(run func(admin.ListClusterSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error)) *PerformanceAdvisorApi_ListClusterSuggestedIndexesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSuggestedIndexesWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListClusterSuggestedIndexesWithParams(ctx context.Context, args *admin.ListClusterSuggestedIndexesApiParams) admin.ListClusterSuggestedIndexesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSuggestedIndexesWithParams")
	}

	var r0 admin.ListClusterSuggestedIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterSuggestedIndexesApiParams) admin.ListClusterSuggestedIndexesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSuggestedIndexesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSuggestedIndexesWithParams'
type PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call struct {
	*mock.Call
}

// ListClusterSuggestedIndexesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterSuggestedIndexesApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListClusterSuggestedIndexesWithParams(ctx any, args any) *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call {
	return &PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call{Call: _e.mock.On("ListClusterSuggestedIndexesWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterSuggestedIndexesApiParams)) *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterSuggestedIndexesApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call) Return(_a0 admin.ListClusterSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterSuggestedIndexesApiParams) admin.ListClusterSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListClusterSuggestedIndexesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListDropIndexSuggestions provides a mock function with given fields: ctx, groupId, clusterName
func (_m *PerformanceAdvisorApi) ListDropIndexSuggestions(ctx context.Context, groupId string, clusterName string) admin.ListDropIndexSuggestionsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListDropIndexSuggestions")
	}

	var r0 admin.ListDropIndexSuggestionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListDropIndexSuggestionsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListDropIndexSuggestionsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListDropIndexSuggestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDropIndexSuggestions'
type PerformanceAdvisorApi_ListDropIndexSuggestions_Call struct {
	*mock.Call
}

// ListDropIndexSuggestions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *PerformanceAdvisorApi_Expecter) ListDropIndexSuggestions(ctx any, groupId any, clusterName any) *PerformanceAdvisorApi_ListDropIndexSuggestions_Call {
	return &PerformanceAdvisorApi_ListDropIndexSuggestions_Call{Call: _e.mock.On("ListDropIndexSuggestions", ctx, groupId, clusterName)}
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestions_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *PerformanceAdvisorApi_ListDropIndexSuggestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestions_Call) Return(_a0 admin.ListDropIndexSuggestionsApiRequest) *PerformanceAdvisorApi_ListDropIndexSuggestions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestions_Call) RunAndReturn(run func(context.Context, string, string) admin.ListDropIndexSuggestionsApiRequest) *PerformanceAdvisorApi_ListDropIndexSuggestions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDropIndexSuggestionsExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListDropIndexSuggestionsExecute(r admin.ListDropIndexSuggestionsApiRequest) (*admin.DropIndexSuggestionsResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListDropIndexSuggestionsExecute")
	}

	var r0 *admin.DropIndexSuggestionsResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListDropIndexSuggestionsApiRequest) (*admin.DropIndexSuggestionsResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListDropIndexSuggestionsApiRequest) *admin.DropIndexSuggestionsResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DropIndexSuggestionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListDropIndexSuggestionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListDropIndexSuggestionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDropIndexSuggestionsExecute'
type PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call struct {
	*mock.Call
}

// ListDropIndexSuggestionsExecute is a helper method to define mock.On call
//   - r admin.ListDropIndexSuggestionsApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListDropIndexSuggestionsExecute(r any) *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call {
	return &PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call{Call: _e.mock.On("ListDropIndexSuggestionsExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call) Run(run func(r admin.ListDropIndexSuggestionsApiRequest)) *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListDropIndexSuggestionsApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call) Return(_a0 *admin.DropIndexSuggestionsResponse, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call) RunAndReturn(run func(admin.ListDropIndexSuggestionsApiRequest) (*admin.DropIndexSuggestionsResponse, *http.Response, error)) *PerformanceAdvisorApi_ListDropIndexSuggestionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListDropIndexSuggestionsWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListDropIndexSuggestionsWithParams(ctx context.Context, args *admin.ListDropIndexSuggestionsApiParams) admin.ListDropIndexSuggestionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListDropIndexSuggestionsWithParams")
	}

	var r0 admin.ListDropIndexSuggestionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListDropIndexSuggestionsApiParams) admin.ListDropIndexSuggestionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListDropIndexSuggestionsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDropIndexSuggestionsWithParams'
type PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call struct {
	*mock.Call
}

// ListDropIndexSuggestionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListDropIndexSuggestionsApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListDropIndexSuggestionsWithParams(ctx any, args any) *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call {
	return &PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call{Call: _e.mock.On("ListDropIndexSuggestionsWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListDropIndexSuggestionsApiParams)) *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListDropIndexSuggestionsApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call) Return(_a0 admin.ListDropIndexSuggestionsApiRequest) *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListDropIndexSuggestionsApiParams) admin.ListDropIndexSuggestionsApiRequest) *PerformanceAdvisorApi_ListDropIndexSuggestionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPerformanceAdvisorNamespaces provides a mock function with given fields: ctx, groupId, processId
func (_m *PerformanceAdvisorApi) ListPerformanceAdvisorNamespaces(ctx context.Context, groupId string, processId string) admin.ListPerformanceAdvisorNamespacesApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListPerformanceAdvisorNamespaces")
	}

	var r0 admin.ListPerformanceAdvisorNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListPerformanceAdvisorNamespacesApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListPerformanceAdvisorNamespacesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPerformanceAdvisorNamespaces'
type PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call struct {
	*mock.Call
}

// ListPerformanceAdvisorNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *PerformanceAdvisorApi_Expecter) ListPerformanceAdvisorNamespaces(ctx any, groupId any, processId any) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call {
	return &PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call{Call: _e.mock.On("ListPerformanceAdvisorNamespaces", ctx, groupId, processId)}
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call) Run(run func(ctx context.Context, groupId string, processId string)) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call) Return(_a0 admin.ListPerformanceAdvisorNamespacesApiRequest) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call) RunAndReturn(run func(context.Context, string, string) admin.ListPerformanceAdvisorNamespacesApiRequest) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListPerformanceAdvisorNamespacesExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListPerformanceAdvisorNamespacesExecute(r admin.ListPerformanceAdvisorNamespacesApiRequest) (*admin.Namespaces, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPerformanceAdvisorNamespacesExecute")
	}

	var r0 *admin.Namespaces
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPerformanceAdvisorNamespacesApiRequest) (*admin.Namespaces, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPerformanceAdvisorNamespacesApiRequest) *admin.Namespaces); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Namespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPerformanceAdvisorNamespacesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPerformanceAdvisorNamespacesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPerformanceAdvisorNamespacesExecute'
type PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call struct {
	*mock.Call
}

// ListPerformanceAdvisorNamespacesExecute is a helper method to define mock.On call
//   - r admin.ListPerformanceAdvisorNamespacesApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListPerformanceAdvisorNamespacesExecute(r any) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call {
	return &PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call{Call: _e.mock.On("ListPerformanceAdvisorNamespacesExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call) Run(run func(r admin.ListPerformanceAdvisorNamespacesApiRequest)) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPerformanceAdvisorNamespacesApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call) Return(_a0 *admin.Namespaces, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call) RunAndReturn(run func(admin.ListPerformanceAdvisorNamespacesApiRequest) (*admin.Namespaces, *http.Response, error)) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPerformanceAdvisorNamespacesWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListPerformanceAdvisorNamespacesWithParams(ctx context.Context, args *admin.ListPerformanceAdvisorNamespacesApiParams) admin.ListPerformanceAdvisorNamespacesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPerformanceAdvisorNamespacesWithParams")
	}

	var r0 admin.ListPerformanceAdvisorNamespacesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPerformanceAdvisorNamespacesApiParams) admin.ListPerformanceAdvisorNamespacesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPerformanceAdvisorNamespacesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPerformanceAdvisorNamespacesWithParams'
type PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call struct {
	*mock.Call
}

// ListPerformanceAdvisorNamespacesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPerformanceAdvisorNamespacesApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListPerformanceAdvisorNamespacesWithParams(ctx any, args any) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call {
	return &PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call{Call: _e.mock.On("ListPerformanceAdvisorNamespacesWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPerformanceAdvisorNamespacesApiParams)) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPerformanceAdvisorNamespacesApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call) Return(_a0 admin.ListPerformanceAdvisorNamespacesApiRequest) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPerformanceAdvisorNamespacesApiParams) admin.ListPerformanceAdvisorNamespacesApiRequest) *PerformanceAdvisorApi_ListPerformanceAdvisorNamespacesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchemaAdvice provides a mock function with given fields: ctx, groupId, clusterName
func (_m *PerformanceAdvisorApi) ListSchemaAdvice(ctx context.Context, groupId string, clusterName string) admin.ListSchemaAdviceApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemaAdvice")
	}

	var r0 admin.ListSchemaAdviceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListSchemaAdviceApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListSchemaAdviceApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSchemaAdvice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchemaAdvice'
type PerformanceAdvisorApi_ListSchemaAdvice_Call struct {
	*mock.Call
}

// ListSchemaAdvice is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *PerformanceAdvisorApi_Expecter) ListSchemaAdvice(ctx any, groupId any, clusterName any) *PerformanceAdvisorApi_ListSchemaAdvice_Call {
	return &PerformanceAdvisorApi_ListSchemaAdvice_Call{Call: _e.mock.On("ListSchemaAdvice", ctx, groupId, clusterName)}
}

func (_c *PerformanceAdvisorApi_ListSchemaAdvice_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *PerformanceAdvisorApi_ListSchemaAdvice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdvice_Call) Return(_a0 admin.ListSchemaAdviceApiRequest) *PerformanceAdvisorApi_ListSchemaAdvice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdvice_Call) RunAndReturn(run func(context.Context, string, string) admin.ListSchemaAdviceApiRequest) *PerformanceAdvisorApi_ListSchemaAdvice_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchemaAdviceExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListSchemaAdviceExecute(r admin.ListSchemaAdviceApiRequest) (*admin.SchemaAdvisorResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemaAdviceExecute")
	}

	var r0 *admin.SchemaAdvisorResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListSchemaAdviceApiRequest) (*admin.SchemaAdvisorResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListSchemaAdviceApiRequest) *admin.SchemaAdvisorResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SchemaAdvisorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListSchemaAdviceApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListSchemaAdviceApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListSchemaAdviceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchemaAdviceExecute'
type PerformanceAdvisorApi_ListSchemaAdviceExecute_Call struct {
	*mock.Call
}

// ListSchemaAdviceExecute is a helper method to define mock.On call
//   - r admin.ListSchemaAdviceApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListSchemaAdviceExecute(r any) *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call {
	return &PerformanceAdvisorApi_ListSchemaAdviceExecute_Call{Call: _e.mock.On("ListSchemaAdviceExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call) Run(run func(r admin.ListSchemaAdviceApiRequest)) *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListSchemaAdviceApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call) Return(_a0 *admin.SchemaAdvisorResponse, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call) RunAndReturn(run func(admin.ListSchemaAdviceApiRequest) (*admin.SchemaAdvisorResponse, *http.Response, error)) *PerformanceAdvisorApi_ListSchemaAdviceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchemaAdviceWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListSchemaAdviceWithParams(ctx context.Context, args *admin.ListSchemaAdviceApiParams) admin.ListSchemaAdviceApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemaAdviceWithParams")
	}

	var r0 admin.ListSchemaAdviceApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListSchemaAdviceApiParams) admin.ListSchemaAdviceApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListSchemaAdviceApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchemaAdviceWithParams'
type PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call struct {
	*mock.Call
}

// ListSchemaAdviceWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListSchemaAdviceApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListSchemaAdviceWithParams(ctx any, args any) *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call {
	return &PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call{Call: _e.mock.On("ListSchemaAdviceWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call) Run(run func(ctx context.Context, args *admin.ListSchemaAdviceApiParams)) *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListSchemaAdviceApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call) Return(_a0 admin.ListSchemaAdviceApiRequest) *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListSchemaAdviceApiParams) admin.ListSchemaAdviceApiRequest) *PerformanceAdvisorApi_ListSchemaAdviceWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListSlowQueryLogs provides a mock function with given fields: ctx, groupId, processId
func (_m *PerformanceAdvisorApi) ListSlowQueryLogs(ctx context.Context, groupId string, processId string) admin.ListSlowQueryLogsApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListSlowQueryLogs")
	}

	var r0 admin.ListSlowQueryLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListSlowQueryLogsApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListSlowQueryLogsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSlowQueryLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSlowQueryLogs'
type PerformanceAdvisorApi_ListSlowQueryLogs_Call struct {
	*mock.Call
}

// ListSlowQueryLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *PerformanceAdvisorApi_Expecter) ListSlowQueryLogs(ctx any, groupId any, processId any) *PerformanceAdvisorApi_ListSlowQueryLogs_Call {
	return &PerformanceAdvisorApi_ListSlowQueryLogs_Call{Call: _e.mock.On("ListSlowQueryLogs", ctx, groupId, processId)}
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogs_Call) Run(run func(ctx context.Context, groupId string, processId string)) *PerformanceAdvisorApi_ListSlowQueryLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogs_Call) Return(_a0 admin.ListSlowQueryLogsApiRequest) *PerformanceAdvisorApi_ListSlowQueryLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogs_Call) RunAndReturn(run func(context.Context, string, string) admin.ListSlowQueryLogsApiRequest) *PerformanceAdvisorApi_ListSlowQueryLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ListSlowQueryLogsExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListSlowQueryLogsExecute(r admin.ListSlowQueryLogsApiRequest) (*admin.PerformanceAdvisorSlowQueryList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListSlowQueryLogsExecute")
	}

	var r0 *admin.PerformanceAdvisorSlowQueryList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListSlowQueryLogsApiRequest) (*admin.PerformanceAdvisorSlowQueryList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListSlowQueryLogsApiRequest) *admin.PerformanceAdvisorSlowQueryList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PerformanceAdvisorSlowQueryList)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListSlowQueryLogsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListSlowQueryLogsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSlowQueryLogsExecute'
type PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call struct {
	*mock.Call
}

// ListSlowQueryLogsExecute is a helper method to define mock.On call
//   - r admin.ListSlowQueryLogsApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListSlowQueryLogsExecute(r any) *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call {
	return &PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call{Call: _e.mock.On("ListSlowQueryLogsExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call) Run(run func(r admin.ListSlowQueryLogsApiRequest)) *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListSlowQueryLogsApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call) Return(_a0 *admin.PerformanceAdvisorSlowQueryList, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call) RunAndReturn(run func(admin.ListSlowQueryLogsApiRequest) (*admin.PerformanceAdvisorSlowQueryList, *http.Response, error)) *PerformanceAdvisorApi_ListSlowQueryLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListSlowQueryLogsWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListSlowQueryLogsWithParams(ctx context.Context, args *admin.ListSlowQueryLogsApiParams) admin.ListSlowQueryLogsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListSlowQueryLogsWithParams")
	}

	var r0 admin.ListSlowQueryLogsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListSlowQueryLogsApiParams) admin.ListSlowQueryLogsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListSlowQueryLogsApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSlowQueryLogsWithParams'
type PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call struct {
	*mock.Call
}

// ListSlowQueryLogsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListSlowQueryLogsApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListSlowQueryLogsWithParams(ctx any, args any) *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call {
	return &PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call{Call: _e.mock.On("ListSlowQueryLogsWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListSlowQueryLogsApiParams)) *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListSlowQueryLogsApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call) Return(_a0 admin.ListSlowQueryLogsApiRequest) *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListSlowQueryLogsApiParams) admin.ListSlowQueryLogsApiRequest) *PerformanceAdvisorApi_ListSlowQueryLogsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuggestedIndexes provides a mock function with given fields: ctx, groupId, processId
func (_m *PerformanceAdvisorApi) ListSuggestedIndexes(ctx context.Context, groupId string, processId string) admin.ListSuggestedIndexesApiRequest {
	ret := _m.Called(ctx, groupId, processId)

	if len(ret) == 0 {
		panic("no return value specified for ListSuggestedIndexes")
	}

	var r0 admin.ListSuggestedIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListSuggestedIndexesApiRequest); ok {
		r0 = rf(ctx, groupId, processId)
	} else {
		r0 = ret.Get(0).(admin.ListSuggestedIndexesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSuggestedIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuggestedIndexes'
type PerformanceAdvisorApi_ListSuggestedIndexes_Call struct {
	*mock.Call
}

// ListSuggestedIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - processId string
func (_e *PerformanceAdvisorApi_Expecter) ListSuggestedIndexes(ctx any, groupId any, processId any) *PerformanceAdvisorApi_ListSuggestedIndexes_Call {
	return &PerformanceAdvisorApi_ListSuggestedIndexes_Call{Call: _e.mock.On("ListSuggestedIndexes", ctx, groupId, processId)}
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexes_Call) Run(run func(ctx context.Context, groupId string, processId string)) *PerformanceAdvisorApi_ListSuggestedIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexes_Call) Return(_a0 admin.ListSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListSuggestedIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexes_Call) RunAndReturn(run func(context.Context, string, string) admin.ListSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListSuggestedIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuggestedIndexesExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) ListSuggestedIndexesExecute(r admin.ListSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListSuggestedIndexesExecute")
	}

	var r0 *admin.PerformanceAdvisorResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListSuggestedIndexesApiRequest) *admin.PerformanceAdvisorResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PerformanceAdvisorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListSuggestedIndexesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListSuggestedIndexesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuggestedIndexesExecute'
type PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call struct {
	*mock.Call
}

// ListSuggestedIndexesExecute is a helper method to define mock.On call
//   - r admin.ListSuggestedIndexesApiRequest
func (_e *PerformanceAdvisorApi_Expecter) ListSuggestedIndexesExecute(r any) *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call {
	return &PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call{Call: _e.mock.On("ListSuggestedIndexesExecute", r)}
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call) Run(run func(r admin.ListSuggestedIndexesApiRequest)) *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListSuggestedIndexesApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call) Return(_a0 *admin.PerformanceAdvisorResponse, _a1 *http.Response, _a2 error) *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call) RunAndReturn(run func(admin.ListSuggestedIndexesApiRequest) (*admin.PerformanceAdvisorResponse, *http.Response, error)) *PerformanceAdvisorApi_ListSuggestedIndexesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuggestedIndexesWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) ListSuggestedIndexesWithParams(ctx context.Context, args *admin.ListSuggestedIndexesApiParams) admin.ListSuggestedIndexesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListSuggestedIndexesWithParams")
	}

	var r0 admin.ListSuggestedIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListSuggestedIndexesApiParams) admin.ListSuggestedIndexesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListSuggestedIndexesApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuggestedIndexesWithParams'
type PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call struct {
	*mock.Call
}

// ListSuggestedIndexesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListSuggestedIndexesApiParams
func (_e *PerformanceAdvisorApi_Expecter) ListSuggestedIndexesWithParams(ctx any, args any) *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call {
	return &PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call{Call: _e.mock.On("ListSuggestedIndexesWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListSuggestedIndexesApiParams)) *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListSuggestedIndexesApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call) Return(_a0 admin.ListSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListSuggestedIndexesApiParams) admin.ListSuggestedIndexesApiRequest) *PerformanceAdvisorApi_ListSuggestedIndexesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetServerlessAutoIndexing provides a mock function with given fields: ctx, groupId, clusterName
func (_m *PerformanceAdvisorApi) SetServerlessAutoIndexing(ctx context.Context, groupId string, clusterName string) admin.SetServerlessAutoIndexingApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for SetServerlessAutoIndexing")
	}

	var r0 admin.SetServerlessAutoIndexingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.SetServerlessAutoIndexingApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.SetServerlessAutoIndexingApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_SetServerlessAutoIndexing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetServerlessAutoIndexing'
type PerformanceAdvisorApi_SetServerlessAutoIndexing_Call struct {
	*mock.Call
}

// SetServerlessAutoIndexing is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *PerformanceAdvisorApi_Expecter) SetServerlessAutoIndexing(ctx any, groupId any, clusterName any) *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call {
	return &PerformanceAdvisorApi_SetServerlessAutoIndexing_Call{Call: _e.mock.On("SetServerlessAutoIndexing", ctx, groupId, clusterName)}
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call) Return(_a0 admin.SetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call) RunAndReturn(run func(context.Context, string, string) admin.SetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_SetServerlessAutoIndexing_Call {
	_c.Call.Return(run)
	return _c
}

// SetServerlessAutoIndexingExecute provides a mock function with given fields: r
func (_m *PerformanceAdvisorApi) SetServerlessAutoIndexingExecute(r admin.SetServerlessAutoIndexingApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetServerlessAutoIndexingExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.SetServerlessAutoIndexingApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SetServerlessAutoIndexingApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SetServerlessAutoIndexingApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetServerlessAutoIndexingExecute'
type PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call struct {
	*mock.Call
}

// SetServerlessAutoIndexingExecute is a helper method to define mock.On call
//   - r admin.SetServerlessAutoIndexingApiRequest
func (_e *PerformanceAdvisorApi_Expecter) SetServerlessAutoIndexingExecute(r any) *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call {
	return &PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call{Call: _e.mock.On("SetServerlessAutoIndexingExecute", r)}
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call) Run(run func(r admin.SetServerlessAutoIndexingApiRequest)) *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SetServerlessAutoIndexingApiRequest))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call) Return(_a0 *http.Response, _a1 error) *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call) RunAndReturn(run func(admin.SetServerlessAutoIndexingApiRequest) (*http.Response, error)) *PerformanceAdvisorApi_SetServerlessAutoIndexingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SetServerlessAutoIndexingWithParams provides a mock function with given fields: ctx, args
func (_m *PerformanceAdvisorApi) SetServerlessAutoIndexingWithParams(ctx context.Context, args *admin.SetServerlessAutoIndexingApiParams) admin.SetServerlessAutoIndexingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SetServerlessAutoIndexingWithParams")
	}

	var r0 admin.SetServerlessAutoIndexingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SetServerlessAutoIndexingApiParams) admin.SetServerlessAutoIndexingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SetServerlessAutoIndexingApiRequest)
	}

	return r0
}

// PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetServerlessAutoIndexingWithParams'
type PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call struct {
	*mock.Call
}

// SetServerlessAutoIndexingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SetServerlessAutoIndexingApiParams
func (_e *PerformanceAdvisorApi_Expecter) SetServerlessAutoIndexingWithParams(ctx any, args any) *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call {
	return &PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call{Call: _e.mock.On("SetServerlessAutoIndexingWithParams", ctx, args)}
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call) Run(run func(ctx context.Context, args *admin.SetServerlessAutoIndexingApiParams)) *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SetServerlessAutoIndexingApiParams))
	})
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call) Return(_a0 admin.SetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call) RunAndReturn(run func(context.Context, *admin.SetServerlessAutoIndexingApiParams) admin.SetServerlessAutoIndexingApiRequest) *PerformanceAdvisorApi_SetServerlessAutoIndexingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewPerformanceAdvisorApi creates a new instance of PerformanceAdvisorApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPerformanceAdvisorApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *PerformanceAdvisorApi {
	mock := &PerformanceAdvisorApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
