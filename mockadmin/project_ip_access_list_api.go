// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ProjectIPAccessListApi is an autogenerated mock type for the ProjectIPAccessListApi type
type ProjectIPAccessListApi struct {
	mock.Mock
}

type ProjectIPAccessListApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectIPAccessListApi) EXPECT() *ProjectIPAccessListApi_Expecter {
	return &ProjectIPAccessListApi_Expecter{mock: &_m.Mock}
}

// CreateAccessListEntry provides a mock function with given fields: ctx, groupId, networkPermissionEntry
func (_m *ProjectIPAccessListApi) CreateAccessListEntry(ctx context.Context, groupId string, networkPermissionEntry *[]admin.NetworkPermissionEntry) admin.CreateAccessListEntryApiRequest {
	ret := _m.Called(ctx, groupId, networkPermissionEntry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessListEntry")
	}

	var r0 admin.CreateAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]admin.NetworkPermissionEntry) admin.CreateAccessListEntryApiRequest); ok {
		r0 = rf(ctx, groupId, networkPermissionEntry)
	} else {
		r0 = ret.Get(0).(admin.CreateAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_CreateAccessListEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessListEntry'
type ProjectIPAccessListApi_CreateAccessListEntry_Call struct {
	*mock.Call
}

// CreateAccessListEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - networkPermissionEntry *[]admin.NetworkPermissionEntry
func (_e *ProjectIPAccessListApi_Expecter) CreateAccessListEntry(ctx any, groupId any, networkPermissionEntry any) *ProjectIPAccessListApi_CreateAccessListEntry_Call {
	return &ProjectIPAccessListApi_CreateAccessListEntry_Call{Call: _e.mock.On("CreateAccessListEntry", ctx, groupId, networkPermissionEntry)}
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntry_Call) Run(run func(ctx context.Context, groupId string, networkPermissionEntry *[]admin.NetworkPermissionEntry)) *ProjectIPAccessListApi_CreateAccessListEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*[]admin.NetworkPermissionEntry))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntry_Call) Return(_a0 admin.CreateAccessListEntryApiRequest) *ProjectIPAccessListApi_CreateAccessListEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntry_Call) RunAndReturn(run func(context.Context, string, *[]admin.NetworkPermissionEntry) admin.CreateAccessListEntryApiRequest) *ProjectIPAccessListApi_CreateAccessListEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessListEntryExecute provides a mock function with given fields: r
func (_m *ProjectIPAccessListApi) CreateAccessListEntryExecute(r admin.CreateAccessListEntryApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessListEntryExecute")
	}

	var r0 *admin.PaginatedNetworkAccess
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAccessListEntryApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAccessListEntryApiRequest) *admin.PaginatedNetworkAccess); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedNetworkAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAccessListEntryApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAccessListEntryApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectIPAccessListApi_CreateAccessListEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessListEntryExecute'
type ProjectIPAccessListApi_CreateAccessListEntryExecute_Call struct {
	*mock.Call
}

// CreateAccessListEntryExecute is a helper method to define mock.On call
//   - r admin.CreateAccessListEntryApiRequest
func (_e *ProjectIPAccessListApi_Expecter) CreateAccessListEntryExecute(r any) *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call {
	return &ProjectIPAccessListApi_CreateAccessListEntryExecute_Call{Call: _e.mock.On("CreateAccessListEntryExecute", r)}
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call) Run(run func(r admin.CreateAccessListEntryApiRequest)) *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAccessListEntryApiRequest))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call) Return(_a0 *admin.PaginatedNetworkAccess, _a1 *http.Response, _a2 error) *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call) RunAndReturn(run func(admin.CreateAccessListEntryApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error)) *ProjectIPAccessListApi_CreateAccessListEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessListEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectIPAccessListApi) CreateAccessListEntryWithParams(ctx context.Context, args *admin.CreateAccessListEntryApiParams) admin.CreateAccessListEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessListEntryWithParams")
	}

	var r0 admin.CreateAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAccessListEntryApiParams) admin.CreateAccessListEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessListEntryWithParams'
type ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call struct {
	*mock.Call
}

// CreateAccessListEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAccessListEntryApiParams
func (_e *ProjectIPAccessListApi_Expecter) CreateAccessListEntryWithParams(ctx any, args any) *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call {
	return &ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call{Call: _e.mock.On("CreateAccessListEntryWithParams", ctx, args)}
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAccessListEntryApiParams)) *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAccessListEntryApiParams))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call) Return(_a0 admin.CreateAccessListEntryApiRequest) *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAccessListEntryApiParams) admin.CreateAccessListEntryApiRequest) *ProjectIPAccessListApi_CreateAccessListEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessListEntry provides a mock function with given fields: ctx, groupId, entryValue
func (_m *ProjectIPAccessListApi) DeleteAccessListEntry(ctx context.Context, groupId string, entryValue string) admin.DeleteAccessListEntryApiRequest {
	ret := _m.Called(ctx, groupId, entryValue)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessListEntry")
	}

	var r0 admin.DeleteAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteAccessListEntryApiRequest); ok {
		r0 = rf(ctx, groupId, entryValue)
	} else {
		r0 = ret.Get(0).(admin.DeleteAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_DeleteAccessListEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessListEntry'
type ProjectIPAccessListApi_DeleteAccessListEntry_Call struct {
	*mock.Call
}

// DeleteAccessListEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - entryValue string
func (_e *ProjectIPAccessListApi_Expecter) DeleteAccessListEntry(ctx any, groupId any, entryValue any) *ProjectIPAccessListApi_DeleteAccessListEntry_Call {
	return &ProjectIPAccessListApi_DeleteAccessListEntry_Call{Call: _e.mock.On("DeleteAccessListEntry", ctx, groupId, entryValue)}
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntry_Call) Run(run func(ctx context.Context, groupId string, entryValue string)) *ProjectIPAccessListApi_DeleteAccessListEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntry_Call) Return(_a0 admin.DeleteAccessListEntryApiRequest) *ProjectIPAccessListApi_DeleteAccessListEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntry_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteAccessListEntryApiRequest) *ProjectIPAccessListApi_DeleteAccessListEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessListEntryExecute provides a mock function with given fields: r
func (_m *ProjectIPAccessListApi) DeleteAccessListEntryExecute(r admin.DeleteAccessListEntryApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessListEntryExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAccessListEntryApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAccessListEntryApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAccessListEntryApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessListEntryExecute'
type ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call struct {
	*mock.Call
}

// DeleteAccessListEntryExecute is a helper method to define mock.On call
//   - r admin.DeleteAccessListEntryApiRequest
func (_e *ProjectIPAccessListApi_Expecter) DeleteAccessListEntryExecute(r any) *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call {
	return &ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call{Call: _e.mock.On("DeleteAccessListEntryExecute", r)}
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call) Run(run func(r admin.DeleteAccessListEntryApiRequest)) *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAccessListEntryApiRequest))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call) Return(_a0 *http.Response, _a1 error) *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call) RunAndReturn(run func(admin.DeleteAccessListEntryApiRequest) (*http.Response, error)) *ProjectIPAccessListApi_DeleteAccessListEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessListEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectIPAccessListApi) DeleteAccessListEntryWithParams(ctx context.Context, args *admin.DeleteAccessListEntryApiParams) admin.DeleteAccessListEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessListEntryWithParams")
	}

	var r0 admin.DeleteAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAccessListEntryApiParams) admin.DeleteAccessListEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessListEntryWithParams'
type ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call struct {
	*mock.Call
}

// DeleteAccessListEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAccessListEntryApiParams
func (_e *ProjectIPAccessListApi_Expecter) DeleteAccessListEntryWithParams(ctx any, args any) *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call {
	return &ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call{Call: _e.mock.On("DeleteAccessListEntryWithParams", ctx, args)}
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAccessListEntryApiParams)) *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAccessListEntryApiParams))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call) Return(_a0 admin.DeleteAccessListEntryApiRequest) *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAccessListEntryApiParams) admin.DeleteAccessListEntryApiRequest) *ProjectIPAccessListApi_DeleteAccessListEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListEntry provides a mock function with given fields: ctx, groupId, entryValue
func (_m *ProjectIPAccessListApi) GetAccessListEntry(ctx context.Context, groupId string, entryValue string) admin.GetAccessListEntryApiRequest {
	ret := _m.Called(ctx, groupId, entryValue)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListEntry")
	}

	var r0 admin.GetAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAccessListEntryApiRequest); ok {
		r0 = rf(ctx, groupId, entryValue)
	} else {
		r0 = ret.Get(0).(admin.GetAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_GetAccessListEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListEntry'
type ProjectIPAccessListApi_GetAccessListEntry_Call struct {
	*mock.Call
}

// GetAccessListEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - entryValue string
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListEntry(ctx any, groupId any, entryValue any) *ProjectIPAccessListApi_GetAccessListEntry_Call {
	return &ProjectIPAccessListApi_GetAccessListEntry_Call{Call: _e.mock.On("GetAccessListEntry", ctx, groupId, entryValue)}
}

func (_c *ProjectIPAccessListApi_GetAccessListEntry_Call) Run(run func(ctx context.Context, groupId string, entryValue string)) *ProjectIPAccessListApi_GetAccessListEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntry_Call) Return(_a0 admin.GetAccessListEntryApiRequest) *ProjectIPAccessListApi_GetAccessListEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntry_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAccessListEntryApiRequest) *ProjectIPAccessListApi_GetAccessListEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListEntryExecute provides a mock function with given fields: r
func (_m *ProjectIPAccessListApi) GetAccessListEntryExecute(r admin.GetAccessListEntryApiRequest) (*admin.NetworkPermissionEntry, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListEntryExecute")
	}

	var r0 *admin.NetworkPermissionEntry
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAccessListEntryApiRequest) (*admin.NetworkPermissionEntry, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAccessListEntryApiRequest) *admin.NetworkPermissionEntry); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NetworkPermissionEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAccessListEntryApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAccessListEntryApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectIPAccessListApi_GetAccessListEntryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListEntryExecute'
type ProjectIPAccessListApi_GetAccessListEntryExecute_Call struct {
	*mock.Call
}

// GetAccessListEntryExecute is a helper method to define mock.On call
//   - r admin.GetAccessListEntryApiRequest
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListEntryExecute(r any) *ProjectIPAccessListApi_GetAccessListEntryExecute_Call {
	return &ProjectIPAccessListApi_GetAccessListEntryExecute_Call{Call: _e.mock.On("GetAccessListEntryExecute", r)}
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryExecute_Call) Run(run func(r admin.GetAccessListEntryApiRequest)) *ProjectIPAccessListApi_GetAccessListEntryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAccessListEntryApiRequest))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryExecute_Call) Return(_a0 *admin.NetworkPermissionEntry, _a1 *http.Response, _a2 error) *ProjectIPAccessListApi_GetAccessListEntryExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryExecute_Call) RunAndReturn(run func(admin.GetAccessListEntryApiRequest) (*admin.NetworkPermissionEntry, *http.Response, error)) *ProjectIPAccessListApi_GetAccessListEntryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListEntryWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectIPAccessListApi) GetAccessListEntryWithParams(ctx context.Context, args *admin.GetAccessListEntryApiParams) admin.GetAccessListEntryApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListEntryWithParams")
	}

	var r0 admin.GetAccessListEntryApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAccessListEntryApiParams) admin.GetAccessListEntryApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAccessListEntryApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_GetAccessListEntryWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListEntryWithParams'
type ProjectIPAccessListApi_GetAccessListEntryWithParams_Call struct {
	*mock.Call
}

// GetAccessListEntryWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAccessListEntryApiParams
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListEntryWithParams(ctx any, args any) *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call {
	return &ProjectIPAccessListApi_GetAccessListEntryWithParams_Call{Call: _e.mock.On("GetAccessListEntryWithParams", ctx, args)}
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAccessListEntryApiParams)) *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAccessListEntryApiParams))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call) Return(_a0 admin.GetAccessListEntryApiRequest) *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAccessListEntryApiParams) admin.GetAccessListEntryApiRequest) *ProjectIPAccessListApi_GetAccessListEntryWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListStatus provides a mock function with given fields: ctx, groupId, entryValue
func (_m *ProjectIPAccessListApi) GetAccessListStatus(ctx context.Context, groupId string, entryValue string) admin.GetAccessListStatusApiRequest {
	ret := _m.Called(ctx, groupId, entryValue)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListStatus")
	}

	var r0 admin.GetAccessListStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAccessListStatusApiRequest); ok {
		r0 = rf(ctx, groupId, entryValue)
	} else {
		r0 = ret.Get(0).(admin.GetAccessListStatusApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_GetAccessListStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListStatus'
type ProjectIPAccessListApi_GetAccessListStatus_Call struct {
	*mock.Call
}

// GetAccessListStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - entryValue string
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListStatus(ctx any, groupId any, entryValue any) *ProjectIPAccessListApi_GetAccessListStatus_Call {
	return &ProjectIPAccessListApi_GetAccessListStatus_Call{Call: _e.mock.On("GetAccessListStatus", ctx, groupId, entryValue)}
}

func (_c *ProjectIPAccessListApi_GetAccessListStatus_Call) Run(run func(ctx context.Context, groupId string, entryValue string)) *ProjectIPAccessListApi_GetAccessListStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatus_Call) Return(_a0 admin.GetAccessListStatusApiRequest) *ProjectIPAccessListApi_GetAccessListStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatus_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAccessListStatusApiRequest) *ProjectIPAccessListApi_GetAccessListStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListStatusExecute provides a mock function with given fields: r
func (_m *ProjectIPAccessListApi) GetAccessListStatusExecute(r admin.GetAccessListStatusApiRequest) (*admin.NetworkPermissionEntryStatus, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListStatusExecute")
	}

	var r0 *admin.NetworkPermissionEntryStatus
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAccessListStatusApiRequest) (*admin.NetworkPermissionEntryStatus, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAccessListStatusApiRequest) *admin.NetworkPermissionEntryStatus); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NetworkPermissionEntryStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAccessListStatusApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAccessListStatusApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectIPAccessListApi_GetAccessListStatusExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListStatusExecute'
type ProjectIPAccessListApi_GetAccessListStatusExecute_Call struct {
	*mock.Call
}

// GetAccessListStatusExecute is a helper method to define mock.On call
//   - r admin.GetAccessListStatusApiRequest
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListStatusExecute(r any) *ProjectIPAccessListApi_GetAccessListStatusExecute_Call {
	return &ProjectIPAccessListApi_GetAccessListStatusExecute_Call{Call: _e.mock.On("GetAccessListStatusExecute", r)}
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusExecute_Call) Run(run func(r admin.GetAccessListStatusApiRequest)) *ProjectIPAccessListApi_GetAccessListStatusExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAccessListStatusApiRequest))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusExecute_Call) Return(_a0 *admin.NetworkPermissionEntryStatus, _a1 *http.Response, _a2 error) *ProjectIPAccessListApi_GetAccessListStatusExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusExecute_Call) RunAndReturn(run func(admin.GetAccessListStatusApiRequest) (*admin.NetworkPermissionEntryStatus, *http.Response, error)) *ProjectIPAccessListApi_GetAccessListStatusExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessListStatusWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectIPAccessListApi) GetAccessListStatusWithParams(ctx context.Context, args *admin.GetAccessListStatusApiParams) admin.GetAccessListStatusApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessListStatusWithParams")
	}

	var r0 admin.GetAccessListStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAccessListStatusApiParams) admin.GetAccessListStatusApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAccessListStatusApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_GetAccessListStatusWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessListStatusWithParams'
type ProjectIPAccessListApi_GetAccessListStatusWithParams_Call struct {
	*mock.Call
}

// GetAccessListStatusWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAccessListStatusApiParams
func (_e *ProjectIPAccessListApi_Expecter) GetAccessListStatusWithParams(ctx any, args any) *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call {
	return &ProjectIPAccessListApi_GetAccessListStatusWithParams_Call{Call: _e.mock.On("GetAccessListStatusWithParams", ctx, args)}
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAccessListStatusApiParams)) *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAccessListStatusApiParams))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call) Return(_a0 admin.GetAccessListStatusApiRequest) *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAccessListStatusApiParams) admin.GetAccessListStatusApiRequest) *ProjectIPAccessListApi_GetAccessListStatusWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessListEntries provides a mock function with given fields: ctx, groupId
func (_m *ProjectIPAccessListApi) ListAccessListEntries(ctx context.Context, groupId string) admin.ListAccessListEntriesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessListEntries")
	}

	var r0 admin.ListAccessListEntriesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListAccessListEntriesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListAccessListEntriesApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_ListAccessListEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessListEntries'
type ProjectIPAccessListApi_ListAccessListEntries_Call struct {
	*mock.Call
}

// ListAccessListEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectIPAccessListApi_Expecter) ListAccessListEntries(ctx any, groupId any) *ProjectIPAccessListApi_ListAccessListEntries_Call {
	return &ProjectIPAccessListApi_ListAccessListEntries_Call{Call: _e.mock.On("ListAccessListEntries", ctx, groupId)}
}

func (_c *ProjectIPAccessListApi_ListAccessListEntries_Call) Run(run func(ctx context.Context, groupId string)) *ProjectIPAccessListApi_ListAccessListEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntries_Call) Return(_a0 admin.ListAccessListEntriesApiRequest) *ProjectIPAccessListApi_ListAccessListEntries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntries_Call) RunAndReturn(run func(context.Context, string) admin.ListAccessListEntriesApiRequest) *ProjectIPAccessListApi_ListAccessListEntries_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessListEntriesExecute provides a mock function with given fields: r
func (_m *ProjectIPAccessListApi) ListAccessListEntriesExecute(r admin.ListAccessListEntriesApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessListEntriesExecute")
	}

	var r0 *admin.PaginatedNetworkAccess
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAccessListEntriesApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAccessListEntriesApiRequest) *admin.PaginatedNetworkAccess); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedNetworkAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAccessListEntriesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAccessListEntriesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectIPAccessListApi_ListAccessListEntriesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessListEntriesExecute'
type ProjectIPAccessListApi_ListAccessListEntriesExecute_Call struct {
	*mock.Call
}

// ListAccessListEntriesExecute is a helper method to define mock.On call
//   - r admin.ListAccessListEntriesApiRequest
func (_e *ProjectIPAccessListApi_Expecter) ListAccessListEntriesExecute(r any) *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call {
	return &ProjectIPAccessListApi_ListAccessListEntriesExecute_Call{Call: _e.mock.On("ListAccessListEntriesExecute", r)}
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call) Run(run func(r admin.ListAccessListEntriesApiRequest)) *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAccessListEntriesApiRequest))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call) Return(_a0 *admin.PaginatedNetworkAccess, _a1 *http.Response, _a2 error) *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call) RunAndReturn(run func(admin.ListAccessListEntriesApiRequest) (*admin.PaginatedNetworkAccess, *http.Response, error)) *ProjectIPAccessListApi_ListAccessListEntriesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessListEntriesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectIPAccessListApi) ListAccessListEntriesWithParams(ctx context.Context, args *admin.ListAccessListEntriesApiParams) admin.ListAccessListEntriesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessListEntriesWithParams")
	}

	var r0 admin.ListAccessListEntriesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAccessListEntriesApiParams) admin.ListAccessListEntriesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAccessListEntriesApiRequest)
	}

	return r0
}

// ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessListEntriesWithParams'
type ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call struct {
	*mock.Call
}

// ListAccessListEntriesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAccessListEntriesApiParams
func (_e *ProjectIPAccessListApi_Expecter) ListAccessListEntriesWithParams(ctx any, args any) *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call {
	return &ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call{Call: _e.mock.On("ListAccessListEntriesWithParams", ctx, args)}
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAccessListEntriesApiParams)) *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAccessListEntriesApiParams))
	})
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call) Return(_a0 admin.ListAccessListEntriesApiRequest) *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAccessListEntriesApiParams) admin.ListAccessListEntriesApiRequest) *ProjectIPAccessListApi_ListAccessListEntriesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectIPAccessListApi creates a new instance of ProjectIPAccessListApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectIPAccessListApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectIPAccessListApi {
	mock := &ProjectIPAccessListApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
