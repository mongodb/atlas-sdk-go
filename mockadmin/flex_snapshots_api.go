// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// FlexSnapshotsApi is an autogenerated mock type for the FlexSnapshotsApi type
type FlexSnapshotsApi struct {
	mock.Mock
}

type FlexSnapshotsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *FlexSnapshotsApi) EXPECT() *FlexSnapshotsApi_Expecter {
	return &FlexSnapshotsApi_Expecter{mock: &_m.Mock}
}

// DownloadFlexBackup provides a mock function with given fields: ctx, name, groupId, flexBackupSnapshotDownloadCreate20241113
func (_m *FlexSnapshotsApi) DownloadFlexBackup(ctx context.Context, name string, groupId string, flexBackupSnapshotDownloadCreate20241113 *admin.FlexBackupSnapshotDownloadCreate20241113) admin.DownloadFlexBackupApiRequest {
	ret := _m.Called(ctx, name, groupId, flexBackupSnapshotDownloadCreate20241113)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFlexBackup")
	}

	var r0 admin.DownloadFlexBackupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.FlexBackupSnapshotDownloadCreate20241113) admin.DownloadFlexBackupApiRequest); ok {
		r0 = rf(ctx, name, groupId, flexBackupSnapshotDownloadCreate20241113)
	} else {
		r0 = ret.Get(0).(admin.DownloadFlexBackupApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_DownloadFlexBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFlexBackup'
type FlexSnapshotsApi_DownloadFlexBackup_Call struct {
	*mock.Call
}

// DownloadFlexBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - groupId string
//   - flexBackupSnapshotDownloadCreate20241113 *admin.FlexBackupSnapshotDownloadCreate20241113
func (_e *FlexSnapshotsApi_Expecter) DownloadFlexBackup(ctx any, name any, groupId any, flexBackupSnapshotDownloadCreate20241113 any) *FlexSnapshotsApi_DownloadFlexBackup_Call {
	return &FlexSnapshotsApi_DownloadFlexBackup_Call{Call: _e.mock.On("DownloadFlexBackup", ctx, name, groupId, flexBackupSnapshotDownloadCreate20241113)}
}

func (_c *FlexSnapshotsApi_DownloadFlexBackup_Call) Run(run func(ctx context.Context, name string, groupId string, flexBackupSnapshotDownloadCreate20241113 *admin.FlexBackupSnapshotDownloadCreate20241113)) *FlexSnapshotsApi_DownloadFlexBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.FlexBackupSnapshotDownloadCreate20241113))
	})
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackup_Call) Return(_a0 admin.DownloadFlexBackupApiRequest) *FlexSnapshotsApi_DownloadFlexBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackup_Call) RunAndReturn(run func(context.Context, string, string, *admin.FlexBackupSnapshotDownloadCreate20241113) admin.DownloadFlexBackupApiRequest) *FlexSnapshotsApi_DownloadFlexBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFlexBackupExecute provides a mock function with given fields: r
func (_m *FlexSnapshotsApi) DownloadFlexBackupExecute(r admin.DownloadFlexBackupApiRequest) (*admin.FlexBackupRestoreJob20241113, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFlexBackupExecute")
	}

	var r0 *admin.FlexBackupRestoreJob20241113
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadFlexBackupApiRequest) (*admin.FlexBackupRestoreJob20241113, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadFlexBackupApiRequest) *admin.FlexBackupRestoreJob20241113); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexBackupRestoreJob20241113)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadFlexBackupApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadFlexBackupApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexSnapshotsApi_DownloadFlexBackupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFlexBackupExecute'
type FlexSnapshotsApi_DownloadFlexBackupExecute_Call struct {
	*mock.Call
}

// DownloadFlexBackupExecute is a helper method to define mock.On call
//   - r admin.DownloadFlexBackupApiRequest
func (_e *FlexSnapshotsApi_Expecter) DownloadFlexBackupExecute(r any) *FlexSnapshotsApi_DownloadFlexBackupExecute_Call {
	return &FlexSnapshotsApi_DownloadFlexBackupExecute_Call{Call: _e.mock.On("DownloadFlexBackupExecute", r)}
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupExecute_Call) Run(run func(r admin.DownloadFlexBackupApiRequest)) *FlexSnapshotsApi_DownloadFlexBackupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadFlexBackupApiRequest))
	})
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupExecute_Call) Return(_a0 *admin.FlexBackupRestoreJob20241113, _a1 *http.Response, _a2 error) *FlexSnapshotsApi_DownloadFlexBackupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupExecute_Call) RunAndReturn(run func(admin.DownloadFlexBackupApiRequest) (*admin.FlexBackupRestoreJob20241113, *http.Response, error)) *FlexSnapshotsApi_DownloadFlexBackupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFlexBackupWithParams provides a mock function with given fields: ctx, args
func (_m *FlexSnapshotsApi) DownloadFlexBackupWithParams(ctx context.Context, args *admin.DownloadFlexBackupApiParams) admin.DownloadFlexBackupApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFlexBackupWithParams")
	}

	var r0 admin.DownloadFlexBackupApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadFlexBackupApiParams) admin.DownloadFlexBackupApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadFlexBackupApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_DownloadFlexBackupWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFlexBackupWithParams'
type FlexSnapshotsApi_DownloadFlexBackupWithParams_Call struct {
	*mock.Call
}

// DownloadFlexBackupWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadFlexBackupApiParams
func (_e *FlexSnapshotsApi_Expecter) DownloadFlexBackupWithParams(ctx any, args any) *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call {
	return &FlexSnapshotsApi_DownloadFlexBackupWithParams_Call{Call: _e.mock.On("DownloadFlexBackupWithParams", ctx, args)}
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadFlexBackupApiParams)) *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadFlexBackupApiParams))
	})
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call) Return(_a0 admin.DownloadFlexBackupApiRequest) *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadFlexBackupApiParams) admin.DownloadFlexBackupApiRequest) *FlexSnapshotsApi_DownloadFlexBackupWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexBackupSnapshot provides a mock function with given fields: ctx, groupId, name, snapshotId
func (_m *FlexSnapshotsApi) GetFlexBackupSnapshot(ctx context.Context, groupId string, name string, snapshotId string) admin.GetFlexBackupSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, name, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexBackupSnapshot")
	}

	var r0 admin.GetFlexBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetFlexBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, name, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetFlexBackupSnapshotApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_GetFlexBackupSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexBackupSnapshot'
type FlexSnapshotsApi_GetFlexBackupSnapshot_Call struct {
	*mock.Call
}

// GetFlexBackupSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
//   - snapshotId string
func (_e *FlexSnapshotsApi_Expecter) GetFlexBackupSnapshot(ctx any, groupId any, name any, snapshotId any) *FlexSnapshotsApi_GetFlexBackupSnapshot_Call {
	return &FlexSnapshotsApi_GetFlexBackupSnapshot_Call{Call: _e.mock.On("GetFlexBackupSnapshot", ctx, groupId, name, snapshotId)}
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshot_Call) Run(run func(ctx context.Context, groupId string, name string, snapshotId string)) *FlexSnapshotsApi_GetFlexBackupSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshot_Call) Return(_a0 admin.GetFlexBackupSnapshotApiRequest) *FlexSnapshotsApi_GetFlexBackupSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetFlexBackupSnapshotApiRequest) *FlexSnapshotsApi_GetFlexBackupSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexBackupSnapshotExecute provides a mock function with given fields: r
func (_m *FlexSnapshotsApi) GetFlexBackupSnapshotExecute(r admin.GetFlexBackupSnapshotApiRequest) (*admin.FlexBackupSnapshot20241113, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexBackupSnapshotExecute")
	}

	var r0 *admin.FlexBackupSnapshot20241113
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetFlexBackupSnapshotApiRequest) (*admin.FlexBackupSnapshot20241113, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetFlexBackupSnapshotApiRequest) *admin.FlexBackupSnapshot20241113); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexBackupSnapshot20241113)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetFlexBackupSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetFlexBackupSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexBackupSnapshotExecute'
type FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call struct {
	*mock.Call
}

// GetFlexBackupSnapshotExecute is a helper method to define mock.On call
//   - r admin.GetFlexBackupSnapshotApiRequest
func (_e *FlexSnapshotsApi_Expecter) GetFlexBackupSnapshotExecute(r any) *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call {
	return &FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call{Call: _e.mock.On("GetFlexBackupSnapshotExecute", r)}
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call) Run(run func(r admin.GetFlexBackupSnapshotApiRequest)) *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetFlexBackupSnapshotApiRequest))
	})
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call) Return(_a0 *admin.FlexBackupSnapshot20241113, _a1 *http.Response, _a2 error) *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call) RunAndReturn(run func(admin.GetFlexBackupSnapshotApiRequest) (*admin.FlexBackupSnapshot20241113, *http.Response, error)) *FlexSnapshotsApi_GetFlexBackupSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexBackupSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *FlexSnapshotsApi) GetFlexBackupSnapshotWithParams(ctx context.Context, args *admin.GetFlexBackupSnapshotApiParams) admin.GetFlexBackupSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexBackupSnapshotWithParams")
	}

	var r0 admin.GetFlexBackupSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetFlexBackupSnapshotApiParams) admin.GetFlexBackupSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetFlexBackupSnapshotApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexBackupSnapshotWithParams'
type FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call struct {
	*mock.Call
}

// GetFlexBackupSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetFlexBackupSnapshotApiParams
func (_e *FlexSnapshotsApi_Expecter) GetFlexBackupSnapshotWithParams(ctx any, args any) *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call {
	return &FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call{Call: _e.mock.On("GetFlexBackupSnapshotWithParams", ctx, args)}
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.GetFlexBackupSnapshotApiParams)) *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetFlexBackupSnapshotApiParams))
	})
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call) Return(_a0 admin.GetFlexBackupSnapshotApiRequest) *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetFlexBackupSnapshotApiParams) admin.GetFlexBackupSnapshotApiRequest) *FlexSnapshotsApi_GetFlexBackupSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexBackupSnapshots provides a mock function with given fields: ctx, groupId, name
func (_m *FlexSnapshotsApi) ListFlexBackupSnapshots(ctx context.Context, groupId string, name string) admin.ListFlexBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexBackupSnapshots")
	}

	var r0 admin.ListFlexBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListFlexBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.ListFlexBackupSnapshotsApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_ListFlexBackupSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexBackupSnapshots'
type FlexSnapshotsApi_ListFlexBackupSnapshots_Call struct {
	*mock.Call
}

// ListFlexBackupSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *FlexSnapshotsApi_Expecter) ListFlexBackupSnapshots(ctx any, groupId any, name any) *FlexSnapshotsApi_ListFlexBackupSnapshots_Call {
	return &FlexSnapshotsApi_ListFlexBackupSnapshots_Call{Call: _e.mock.On("ListFlexBackupSnapshots", ctx, groupId, name)}
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshots_Call) Run(run func(ctx context.Context, groupId string, name string)) *FlexSnapshotsApi_ListFlexBackupSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshots_Call) Return(_a0 admin.ListFlexBackupSnapshotsApiRequest) *FlexSnapshotsApi_ListFlexBackupSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListFlexBackupSnapshotsApiRequest) *FlexSnapshotsApi_ListFlexBackupSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexBackupSnapshotsExecute provides a mock function with given fields: r
func (_m *FlexSnapshotsApi) ListFlexBackupSnapshotsExecute(r admin.ListFlexBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasFlexBackupSnapshot20241113, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexBackupSnapshotsExecute")
	}

	var r0 *admin.PaginatedApiAtlasFlexBackupSnapshot20241113
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListFlexBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasFlexBackupSnapshot20241113, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListFlexBackupSnapshotsApiRequest) *admin.PaginatedApiAtlasFlexBackupSnapshot20241113); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAtlasFlexBackupSnapshot20241113)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListFlexBackupSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListFlexBackupSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexBackupSnapshotsExecute'
type FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call struct {
	*mock.Call
}

// ListFlexBackupSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListFlexBackupSnapshotsApiRequest
func (_e *FlexSnapshotsApi_Expecter) ListFlexBackupSnapshotsExecute(r any) *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call {
	return &FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call{Call: _e.mock.On("ListFlexBackupSnapshotsExecute", r)}
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call) Run(run func(r admin.ListFlexBackupSnapshotsApiRequest)) *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListFlexBackupSnapshotsApiRequest))
	})
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call) Return(_a0 *admin.PaginatedApiAtlasFlexBackupSnapshot20241113, _a1 *http.Response, _a2 error) *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call) RunAndReturn(run func(admin.ListFlexBackupSnapshotsApiRequest) (*admin.PaginatedApiAtlasFlexBackupSnapshot20241113, *http.Response, error)) *FlexSnapshotsApi_ListFlexBackupSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexBackupSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *FlexSnapshotsApi) ListFlexBackupSnapshotsWithParams(ctx context.Context, args *admin.ListFlexBackupSnapshotsApiParams) admin.ListFlexBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexBackupSnapshotsWithParams")
	}

	var r0 admin.ListFlexBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListFlexBackupSnapshotsApiParams) admin.ListFlexBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListFlexBackupSnapshotsApiRequest)
	}

	return r0
}

// FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexBackupSnapshotsWithParams'
type FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListFlexBackupSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListFlexBackupSnapshotsApiParams
func (_e *FlexSnapshotsApi_Expecter) ListFlexBackupSnapshotsWithParams(ctx any, args any) *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call {
	return &FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call{Call: _e.mock.On("ListFlexBackupSnapshotsWithParams", ctx, args)}
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListFlexBackupSnapshotsApiParams)) *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListFlexBackupSnapshotsApiParams))
	})
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call) Return(_a0 admin.ListFlexBackupSnapshotsApiRequest) *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListFlexBackupSnapshotsApiParams) admin.ListFlexBackupSnapshotsApiRequest) *FlexSnapshotsApi_ListFlexBackupSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlexSnapshotsApi creates a new instance of FlexSnapshotsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlexSnapshotsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlexSnapshotsApi {
	mock := &FlexSnapshotsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
