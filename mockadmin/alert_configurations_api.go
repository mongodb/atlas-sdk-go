// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AlertConfigurationsApi is an autogenerated mock type for the AlertConfigurationsApi type
type AlertConfigurationsApi struct {
	mock.Mock
}

type AlertConfigurationsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertConfigurationsApi) EXPECT() *AlertConfigurationsApi_Expecter {
	return &AlertConfigurationsApi_Expecter{mock: &_m.Mock}
}

// CreateAlertConfig provides a mock function with given fields: ctx, groupId, groupAlertsConfig
func (_m *AlertConfigurationsApi) CreateAlertConfig(ctx context.Context, groupId string, groupAlertsConfig *admin.GroupAlertsConfig) admin.CreateAlertConfigApiRequest {
	ret := _m.Called(ctx, groupId, groupAlertsConfig)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfig")
	}

	var r0 admin.CreateAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupAlertsConfig) admin.CreateAlertConfigApiRequest); ok {
		r0 = rf(ctx, groupId, groupAlertsConfig)
	} else {
		r0 = ret.Get(0).(admin.CreateAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_CreateAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfig'
type AlertConfigurationsApi_CreateAlertConfig_Call struct {
	*mock.Call
}

// CreateAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupAlertsConfig *admin.GroupAlertsConfig
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfig(ctx any, groupId any, groupAlertsConfig any) *AlertConfigurationsApi_CreateAlertConfig_Call {
	return &AlertConfigurationsApi_CreateAlertConfig_Call{Call: _e.mock.On("CreateAlertConfig", ctx, groupId, groupAlertsConfig)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfig_Call) Run(run func(ctx context.Context, groupId string, groupAlertsConfig *admin.GroupAlertsConfig)) *AlertConfigurationsApi_CreateAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupAlertsConfig))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfig_Call) Return(_a0 admin.CreateAlertConfigApiRequest) *AlertConfigurationsApi_CreateAlertConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfig_Call) RunAndReturn(run func(context.Context, string, *admin.GroupAlertsConfig) admin.CreateAlertConfigApiRequest) *AlertConfigurationsApi_CreateAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlertConfigExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) CreateAlertConfigExecute(r admin.CreateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfigExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAlertConfigApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAlertConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAlertConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_CreateAlertConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfigExecute'
type AlertConfigurationsApi_CreateAlertConfigExecute_Call struct {
	*mock.Call
}

// CreateAlertConfigExecute is a helper method to define mock.On call
//   - r admin.CreateAlertConfigApiRequest
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfigExecute(r any) *AlertConfigurationsApi_CreateAlertConfigExecute_Call {
	return &AlertConfigurationsApi_CreateAlertConfigExecute_Call{Call: _e.mock.On("CreateAlertConfigExecute", r)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfigExecute_Call) Run(run func(r admin.CreateAlertConfigApiRequest)) *AlertConfigurationsApi_CreateAlertConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAlertConfigApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_CreateAlertConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigExecute_Call) RunAndReturn(run func(admin.CreateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_CreateAlertConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlertConfigWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) CreateAlertConfigWithParams(ctx context.Context, args *admin.CreateAlertConfigApiParams) admin.CreateAlertConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfigWithParams")
	}

	var r0 admin.CreateAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAlertConfigApiParams) admin.CreateAlertConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_CreateAlertConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfigWithParams'
type AlertConfigurationsApi_CreateAlertConfigWithParams_Call struct {
	*mock.Call
}

// CreateAlertConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAlertConfigApiParams
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfigWithParams(ctx any, args any) *AlertConfigurationsApi_CreateAlertConfigWithParams_Call {
	return &AlertConfigurationsApi_CreateAlertConfigWithParams_Call{Call: _e.mock.On("CreateAlertConfigWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAlertConfigApiParams)) *AlertConfigurationsApi_CreateAlertConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAlertConfigApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigWithParams_Call) Return(_a0 admin.CreateAlertConfigApiRequest) *AlertConfigurationsApi_CreateAlertConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAlertConfigApiParams) admin.CreateAlertConfigApiRequest) *AlertConfigurationsApi_CreateAlertConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfig provides a mock function with given fields: ctx, groupId, alertConfigId
func (_m *AlertConfigurationsApi) DeleteAlertConfig(ctx context.Context, groupId string, alertConfigId string) admin.DeleteAlertConfigApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfig")
	}

	var r0 admin.DeleteAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteAlertConfigApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId)
	} else {
		r0 = ret.Get(0).(admin.DeleteAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_DeleteAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfig'
type AlertConfigurationsApi_DeleteAlertConfig_Call struct {
	*mock.Call
}

// DeleteAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfig(ctx any, groupId any, alertConfigId any) *AlertConfigurationsApi_DeleteAlertConfig_Call {
	return &AlertConfigurationsApi_DeleteAlertConfig_Call{Call: _e.mock.On("DeleteAlertConfig", ctx, groupId, alertConfigId)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfig_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string)) *AlertConfigurationsApi_DeleteAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfig_Call) Return(_a0 admin.DeleteAlertConfigApiRequest) *AlertConfigurationsApi_DeleteAlertConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfig_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteAlertConfigApiRequest) *AlertConfigurationsApi_DeleteAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfigExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) DeleteAlertConfigExecute(r admin.DeleteAlertConfigApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfigExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAlertConfigApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAlertConfigApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAlertConfigApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertConfigurationsApi_DeleteAlertConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfigExecute'
type AlertConfigurationsApi_DeleteAlertConfigExecute_Call struct {
	*mock.Call
}

// DeleteAlertConfigExecute is a helper method to define mock.On call
//   - r admin.DeleteAlertConfigApiRequest
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfigExecute(r any) *AlertConfigurationsApi_DeleteAlertConfigExecute_Call {
	return &AlertConfigurationsApi_DeleteAlertConfigExecute_Call{Call: _e.mock.On("DeleteAlertConfigExecute", r)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigExecute_Call) Run(run func(r admin.DeleteAlertConfigApiRequest)) *AlertConfigurationsApi_DeleteAlertConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAlertConfigApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigExecute_Call) Return(_a0 *http.Response, _a1 error) *AlertConfigurationsApi_DeleteAlertConfigExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigExecute_Call) RunAndReturn(run func(admin.DeleteAlertConfigApiRequest) (*http.Response, error)) *AlertConfigurationsApi_DeleteAlertConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfigWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) DeleteAlertConfigWithParams(ctx context.Context, args *admin.DeleteAlertConfigApiParams) admin.DeleteAlertConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfigWithParams")
	}

	var r0 admin.DeleteAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAlertConfigApiParams) admin.DeleteAlertConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_DeleteAlertConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfigWithParams'
type AlertConfigurationsApi_DeleteAlertConfigWithParams_Call struct {
	*mock.Call
}

// DeleteAlertConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAlertConfigApiParams
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfigWithParams(ctx any, args any) *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call {
	return &AlertConfigurationsApi_DeleteAlertConfigWithParams_Call{Call: _e.mock.On("DeleteAlertConfigWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAlertConfigApiParams)) *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAlertConfigApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call) Return(_a0 admin.DeleteAlertConfigApiRequest) *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAlertConfigApiParams) admin.DeleteAlertConfigApiRequest) *AlertConfigurationsApi_DeleteAlertConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfig provides a mock function with given fields: ctx, groupId, alertConfigId
func (_m *AlertConfigurationsApi) GetAlertConfig(ctx context.Context, groupId string, alertConfigId string) admin.GetAlertConfigApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfig")
	}

	var r0 admin.GetAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAlertConfigApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfig'
type AlertConfigurationsApi_GetAlertConfig_Call struct {
	*mock.Call
}

// GetAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfig(ctx any, groupId any, alertConfigId any) *AlertConfigurationsApi_GetAlertConfig_Call {
	return &AlertConfigurationsApi_GetAlertConfig_Call{Call: _e.mock.On("GetAlertConfig", ctx, groupId, alertConfigId)}
}

func (_c *AlertConfigurationsApi_GetAlertConfig_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string)) *AlertConfigurationsApi_GetAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfig_Call) Return(_a0 admin.GetAlertConfigApiRequest) *AlertConfigurationsApi_GetAlertConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfig_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAlertConfigApiRequest) *AlertConfigurationsApi_GetAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) GetAlertConfigExecute(r admin.GetAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAlertConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAlertConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_GetAlertConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigExecute'
type AlertConfigurationsApi_GetAlertConfigExecute_Call struct {
	*mock.Call
}

// GetAlertConfigExecute is a helper method to define mock.On call
//   - r admin.GetAlertConfigApiRequest
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigExecute(r any) *AlertConfigurationsApi_GetAlertConfigExecute_Call {
	return &AlertConfigurationsApi_GetAlertConfigExecute_Call{Call: _e.mock.On("GetAlertConfigExecute", r)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigExecute_Call) Run(run func(r admin.GetAlertConfigApiRequest)) *AlertConfigurationsApi_GetAlertConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAlertConfigApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_GetAlertConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigExecute_Call) RunAndReturn(run func(admin.GetAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_GetAlertConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) GetAlertConfigWithParams(ctx context.Context, args *admin.GetAlertConfigApiParams) admin.GetAlertConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigWithParams")
	}

	var r0 admin.GetAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAlertConfigApiParams) admin.GetAlertConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigWithParams'
type AlertConfigurationsApi_GetAlertConfigWithParams_Call struct {
	*mock.Call
}

// GetAlertConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAlertConfigApiParams
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigWithParams(ctx any, args any) *AlertConfigurationsApi_GetAlertConfigWithParams_Call {
	return &AlertConfigurationsApi_GetAlertConfigWithParams_Call{Call: _e.mock.On("GetAlertConfigWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAlertConfigApiParams)) *AlertConfigurationsApi_GetAlertConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAlertConfigApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigWithParams_Call) Return(_a0 admin.GetAlertConfigApiRequest) *AlertConfigurationsApi_GetAlertConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAlertConfigApiParams) admin.GetAlertConfigApiRequest) *AlertConfigurationsApi_GetAlertConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigs provides a mock function with given fields: ctx, groupId, alertId
func (_m *AlertConfigurationsApi) GetAlertConfigs(ctx context.Context, groupId string, alertId string) admin.GetAlertConfigsApiRequest {
	ret := _m.Called(ctx, groupId, alertId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigs")
	}

	var r0 admin.GetAlertConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAlertConfigsApiRequest); ok {
		r0 = rf(ctx, groupId, alertId)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigs'
type AlertConfigurationsApi_GetAlertConfigs_Call struct {
	*mock.Call
}

// GetAlertConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertId string
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigs(ctx any, groupId any, alertId any) *AlertConfigurationsApi_GetAlertConfigs_Call {
	return &AlertConfigurationsApi_GetAlertConfigs_Call{Call: _e.mock.On("GetAlertConfigs", ctx, groupId, alertId)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigs_Call) Run(run func(ctx context.Context, groupId string, alertId string)) *AlertConfigurationsApi_GetAlertConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigs_Call) Return(_a0 admin.GetAlertConfigsApiRequest) *AlertConfigurationsApi_GetAlertConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigs_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAlertConfigsApiRequest) *AlertConfigurationsApi_GetAlertConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigsExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) GetAlertConfigsExecute(r admin.GetAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigsExecute")
	}

	var r0 *admin.PaginatedAlertConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigsApiRequest) *admin.PaginatedAlertConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAlertConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAlertConfigsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAlertConfigsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_GetAlertConfigsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigsExecute'
type AlertConfigurationsApi_GetAlertConfigsExecute_Call struct {
	*mock.Call
}

// GetAlertConfigsExecute is a helper method to define mock.On call
//   - r admin.GetAlertConfigsApiRequest
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigsExecute(r any) *AlertConfigurationsApi_GetAlertConfigsExecute_Call {
	return &AlertConfigurationsApi_GetAlertConfigsExecute_Call{Call: _e.mock.On("GetAlertConfigsExecute", r)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigsExecute_Call) Run(run func(r admin.GetAlertConfigsApiRequest)) *AlertConfigurationsApi_GetAlertConfigsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAlertConfigsApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigsExecute_Call) Return(_a0 *admin.PaginatedAlertConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_GetAlertConfigsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigsExecute_Call) RunAndReturn(run func(admin.GetAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)) *AlertConfigurationsApi_GetAlertConfigsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigsWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) GetAlertConfigsWithParams(ctx context.Context, args *admin.GetAlertConfigsApiParams) admin.GetAlertConfigsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigsWithParams")
	}

	var r0 admin.GetAlertConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAlertConfigsApiParams) admin.GetAlertConfigsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfigsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigsWithParams'
type AlertConfigurationsApi_GetAlertConfigsWithParams_Call struct {
	*mock.Call
}

// GetAlertConfigsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAlertConfigsApiParams
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigsWithParams(ctx any, args any) *AlertConfigurationsApi_GetAlertConfigsWithParams_Call {
	return &AlertConfigurationsApi_GetAlertConfigsWithParams_Call{Call: _e.mock.On("GetAlertConfigsWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAlertConfigsApiParams)) *AlertConfigurationsApi_GetAlertConfigsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAlertConfigsApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigsWithParams_Call) Return(_a0 admin.GetAlertConfigsApiRequest) *AlertConfigurationsApi_GetAlertConfigsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAlertConfigsApiParams) admin.GetAlertConfigsApiRequest) *AlertConfigurationsApi_GetAlertConfigsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigs provides a mock function with given fields: ctx, groupId
func (_m *AlertConfigurationsApi) ListAlertConfigs(ctx context.Context, groupId string) admin.ListAlertConfigsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigs")
	}

	var r0 admin.ListAlertConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListAlertConfigsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigs'
type AlertConfigurationsApi_ListAlertConfigs_Call struct {
	*mock.Call
}

// ListAlertConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigs(ctx any, groupId any) *AlertConfigurationsApi_ListAlertConfigs_Call {
	return &AlertConfigurationsApi_ListAlertConfigs_Call{Call: _e.mock.On("ListAlertConfigs", ctx, groupId)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigs_Call) Run(run func(ctx context.Context, groupId string)) *AlertConfigurationsApi_ListAlertConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigs_Call) Return(_a0 admin.ListAlertConfigsApiRequest) *AlertConfigurationsApi_ListAlertConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigs_Call) RunAndReturn(run func(context.Context, string) admin.ListAlertConfigsApiRequest) *AlertConfigurationsApi_ListAlertConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigsExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ListAlertConfigsExecute(r admin.ListAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigsExecute")
	}

	var r0 *admin.PaginatedAlertConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigsApiRequest) *admin.PaginatedAlertConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAlertConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAlertConfigsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAlertConfigsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ListAlertConfigsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigsExecute'
type AlertConfigurationsApi_ListAlertConfigsExecute_Call struct {
	*mock.Call
}

// ListAlertConfigsExecute is a helper method to define mock.On call
//   - r admin.ListAlertConfigsApiRequest
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigsExecute(r any) *AlertConfigurationsApi_ListAlertConfigsExecute_Call {
	return &AlertConfigurationsApi_ListAlertConfigsExecute_Call{Call: _e.mock.On("ListAlertConfigsExecute", r)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigsExecute_Call) Run(run func(r admin.ListAlertConfigsApiRequest)) *AlertConfigurationsApi_ListAlertConfigsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAlertConfigsApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigsExecute_Call) Return(_a0 *admin.PaginatedAlertConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ListAlertConfigsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigsExecute_Call) RunAndReturn(run func(admin.ListAlertConfigsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)) *AlertConfigurationsApi_ListAlertConfigsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigsWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ListAlertConfigsWithParams(ctx context.Context, args *admin.ListAlertConfigsApiParams) admin.ListAlertConfigsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigsWithParams")
	}

	var r0 admin.ListAlertConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAlertConfigsApiParams) admin.ListAlertConfigsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigsWithParams'
type AlertConfigurationsApi_ListAlertConfigsWithParams_Call struct {
	*mock.Call
}

// ListAlertConfigsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAlertConfigsApiParams
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigsWithParams(ctx any, args any) *AlertConfigurationsApi_ListAlertConfigsWithParams_Call {
	return &AlertConfigurationsApi_ListAlertConfigsWithParams_Call{Call: _e.mock.On("ListAlertConfigsWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAlertConfigsApiParams)) *AlertConfigurationsApi_ListAlertConfigsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAlertConfigsApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigsWithParams_Call) Return(_a0 admin.ListAlertConfigsApiRequest) *AlertConfigurationsApi_ListAlertConfigsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAlertConfigsApiParams) admin.ListAlertConfigsApiRequest) *AlertConfigurationsApi_ListAlertConfigsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatcherFieldNames provides a mock function with given fields: ctx
func (_m *AlertConfigurationsApi) ListMatcherFieldNames(ctx context.Context) admin.ListMatcherFieldNamesApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListMatcherFieldNames")
	}

	var r0 admin.ListMatcherFieldNamesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListMatcherFieldNamesApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListMatcherFieldNamesApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListMatcherFieldNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatcherFieldNames'
type AlertConfigurationsApi_ListMatcherFieldNames_Call struct {
	*mock.Call
}

// ListMatcherFieldNames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AlertConfigurationsApi_Expecter) ListMatcherFieldNames(ctx any) *AlertConfigurationsApi_ListMatcherFieldNames_Call {
	return &AlertConfigurationsApi_ListMatcherFieldNames_Call{Call: _e.mock.On("ListMatcherFieldNames", ctx)}
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNames_Call) Run(run func(ctx context.Context)) *AlertConfigurationsApi_ListMatcherFieldNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNames_Call) Return(_a0 admin.ListMatcherFieldNamesApiRequest) *AlertConfigurationsApi_ListMatcherFieldNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNames_Call) RunAndReturn(run func(context.Context) admin.ListMatcherFieldNamesApiRequest) *AlertConfigurationsApi_ListMatcherFieldNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatcherFieldNamesExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ListMatcherFieldNamesExecute(r admin.ListMatcherFieldNamesApiRequest) ([]string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListMatcherFieldNamesExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListMatcherFieldNamesApiRequest) ([]string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListMatcherFieldNamesApiRequest) []string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListMatcherFieldNamesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListMatcherFieldNamesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatcherFieldNamesExecute'
type AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call struct {
	*mock.Call
}

// ListMatcherFieldNamesExecute is a helper method to define mock.On call
//   - r admin.ListMatcherFieldNamesApiRequest
func (_e *AlertConfigurationsApi_Expecter) ListMatcherFieldNamesExecute(r any) *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call {
	return &AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call{Call: _e.mock.On("ListMatcherFieldNamesExecute", r)}
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call) Run(run func(r admin.ListMatcherFieldNamesApiRequest)) *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListMatcherFieldNamesApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call) Return(_a0 []string, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call) RunAndReturn(run func(admin.ListMatcherFieldNamesApiRequest) ([]string, *http.Response, error)) *AlertConfigurationsApi_ListMatcherFieldNamesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatcherFieldNamesWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ListMatcherFieldNamesWithParams(ctx context.Context, args *admin.ListMatcherFieldNamesApiParams) admin.ListMatcherFieldNamesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListMatcherFieldNamesWithParams")
	}

	var r0 admin.ListMatcherFieldNamesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatcherFieldNamesApiParams) admin.ListMatcherFieldNamesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListMatcherFieldNamesApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatcherFieldNamesWithParams'
type AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call struct {
	*mock.Call
}

// ListMatcherFieldNamesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListMatcherFieldNamesApiParams
func (_e *AlertConfigurationsApi_Expecter) ListMatcherFieldNamesWithParams(ctx any, args any) *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call {
	return &AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call{Call: _e.mock.On("ListMatcherFieldNamesWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListMatcherFieldNamesApiParams)) *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListMatcherFieldNamesApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call) Return(_a0 admin.ListMatcherFieldNamesApiRequest) *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListMatcherFieldNamesApiParams) admin.ListMatcherFieldNamesApiRequest) *AlertConfigurationsApi_ListMatcherFieldNamesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfig provides a mock function with given fields: ctx, groupId, alertConfigId, alertsToggle
func (_m *AlertConfigurationsApi) ToggleAlertConfig(ctx context.Context, groupId string, alertConfigId string, alertsToggle *admin.AlertsToggle) admin.ToggleAlertConfigApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId, alertsToggle)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfig")
	}

	var r0 admin.ToggleAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AlertsToggle) admin.ToggleAlertConfigApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId, alertsToggle)
	} else {
		r0 = ret.Get(0).(admin.ToggleAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ToggleAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfig'
type AlertConfigurationsApi_ToggleAlertConfig_Call struct {
	*mock.Call
}

// ToggleAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
//   - alertsToggle *admin.AlertsToggle
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfig(ctx any, groupId any, alertConfigId any, alertsToggle any) *AlertConfigurationsApi_ToggleAlertConfig_Call {
	return &AlertConfigurationsApi_ToggleAlertConfig_Call{Call: _e.mock.On("ToggleAlertConfig", ctx, groupId, alertConfigId, alertsToggle)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfig_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string, alertsToggle *admin.AlertsToggle)) *AlertConfigurationsApi_ToggleAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AlertsToggle))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfig_Call) Return(_a0 admin.ToggleAlertConfigApiRequest) *AlertConfigurationsApi_ToggleAlertConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfig_Call) RunAndReturn(run func(context.Context, string, string, *admin.AlertsToggle) admin.ToggleAlertConfigApiRequest) *AlertConfigurationsApi_ToggleAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfigExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ToggleAlertConfigExecute(r admin.ToggleAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfigExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ToggleAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ToggleAlertConfigApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ToggleAlertConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ToggleAlertConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ToggleAlertConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfigExecute'
type AlertConfigurationsApi_ToggleAlertConfigExecute_Call struct {
	*mock.Call
}

// ToggleAlertConfigExecute is a helper method to define mock.On call
//   - r admin.ToggleAlertConfigApiRequest
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfigExecute(r any) *AlertConfigurationsApi_ToggleAlertConfigExecute_Call {
	return &AlertConfigurationsApi_ToggleAlertConfigExecute_Call{Call: _e.mock.On("ToggleAlertConfigExecute", r)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigExecute_Call) Run(run func(r admin.ToggleAlertConfigApiRequest)) *AlertConfigurationsApi_ToggleAlertConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ToggleAlertConfigApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ToggleAlertConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigExecute_Call) RunAndReturn(run func(admin.ToggleAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_ToggleAlertConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfigWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ToggleAlertConfigWithParams(ctx context.Context, args *admin.ToggleAlertConfigApiParams) admin.ToggleAlertConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfigWithParams")
	}

	var r0 admin.ToggleAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ToggleAlertConfigApiParams) admin.ToggleAlertConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ToggleAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ToggleAlertConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfigWithParams'
type AlertConfigurationsApi_ToggleAlertConfigWithParams_Call struct {
	*mock.Call
}

// ToggleAlertConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ToggleAlertConfigApiParams
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfigWithParams(ctx any, args any) *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call {
	return &AlertConfigurationsApi_ToggleAlertConfigWithParams_Call{Call: _e.mock.On("ToggleAlertConfigWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.ToggleAlertConfigApiParams)) *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ToggleAlertConfigApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call) Return(_a0 admin.ToggleAlertConfigApiRequest) *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.ToggleAlertConfigApiParams) admin.ToggleAlertConfigApiRequest) *AlertConfigurationsApi_ToggleAlertConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfig provides a mock function with given fields: ctx, groupId, alertConfigId, groupAlertsConfig
func (_m *AlertConfigurationsApi) UpdateAlertConfig(ctx context.Context, groupId string, alertConfigId string, groupAlertsConfig *admin.GroupAlertsConfig) admin.UpdateAlertConfigApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId, groupAlertsConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfig")
	}

	var r0 admin.UpdateAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupAlertsConfig) admin.UpdateAlertConfigApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId, groupAlertsConfig)
	} else {
		r0 = ret.Get(0).(admin.UpdateAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_UpdateAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfig'
type AlertConfigurationsApi_UpdateAlertConfig_Call struct {
	*mock.Call
}

// UpdateAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
//   - groupAlertsConfig *admin.GroupAlertsConfig
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfig(ctx any, groupId any, alertConfigId any, groupAlertsConfig any) *AlertConfigurationsApi_UpdateAlertConfig_Call {
	return &AlertConfigurationsApi_UpdateAlertConfig_Call{Call: _e.mock.On("UpdateAlertConfig", ctx, groupId, alertConfigId, groupAlertsConfig)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfig_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string, groupAlertsConfig *admin.GroupAlertsConfig)) *AlertConfigurationsApi_UpdateAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupAlertsConfig))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfig_Call) Return(_a0 admin.UpdateAlertConfigApiRequest) *AlertConfigurationsApi_UpdateAlertConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfig_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupAlertsConfig) admin.UpdateAlertConfigApiRequest) *AlertConfigurationsApi_UpdateAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfigExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) UpdateAlertConfigExecute(r admin.UpdateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfigExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAlertConfigApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAlertConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAlertConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_UpdateAlertConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfigExecute'
type AlertConfigurationsApi_UpdateAlertConfigExecute_Call struct {
	*mock.Call
}

// UpdateAlertConfigExecute is a helper method to define mock.On call
//   - r admin.UpdateAlertConfigApiRequest
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfigExecute(r any) *AlertConfigurationsApi_UpdateAlertConfigExecute_Call {
	return &AlertConfigurationsApi_UpdateAlertConfigExecute_Call{Call: _e.mock.On("UpdateAlertConfigExecute", r)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigExecute_Call) Run(run func(r admin.UpdateAlertConfigApiRequest)) *AlertConfigurationsApi_UpdateAlertConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAlertConfigApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_UpdateAlertConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigExecute_Call) RunAndReturn(run func(admin.UpdateAlertConfigApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_UpdateAlertConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfigWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) UpdateAlertConfigWithParams(ctx context.Context, args *admin.UpdateAlertConfigApiParams) admin.UpdateAlertConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfigWithParams")
	}

	var r0 admin.UpdateAlertConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAlertConfigApiParams) admin.UpdateAlertConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAlertConfigApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_UpdateAlertConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfigWithParams'
type AlertConfigurationsApi_UpdateAlertConfigWithParams_Call struct {
	*mock.Call
}

// UpdateAlertConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAlertConfigApiParams
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfigWithParams(ctx any, args any) *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call {
	return &AlertConfigurationsApi_UpdateAlertConfigWithParams_Call{Call: _e.mock.On("UpdateAlertConfigWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAlertConfigApiParams)) *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAlertConfigApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call) Return(_a0 admin.UpdateAlertConfigApiRequest) *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAlertConfigApiParams) admin.UpdateAlertConfigApiRequest) *AlertConfigurationsApi_UpdateAlertConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlertConfigurationsApi creates a new instance of AlertConfigurationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertConfigurationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertConfigurationsApi {
	mock := &AlertConfigurationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
