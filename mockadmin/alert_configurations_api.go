// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240530002/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AlertConfigurationsApi is an autogenerated mock type for the AlertConfigurationsApi type
type AlertConfigurationsApi struct {
	mock.Mock
}

type AlertConfigurationsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertConfigurationsApi) EXPECT() *AlertConfigurationsApi_Expecter {
	return &AlertConfigurationsApi_Expecter{mock: &_m.Mock}
}

// CreateAlertConfiguration provides a mock function with given fields: ctx, groupId, groupAlertsConfig
func (_m *AlertConfigurationsApi) CreateAlertConfiguration(ctx context.Context, groupId string, groupAlertsConfig *admin.GroupAlertsConfig) admin.CreateAlertConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, groupAlertsConfig)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfiguration")
	}

	var r0 admin.CreateAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupAlertsConfig) admin.CreateAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, groupAlertsConfig)
	} else {
		r0 = ret.Get(0).(admin.CreateAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_CreateAlertConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfiguration'
type AlertConfigurationsApi_CreateAlertConfiguration_Call struct {
	*mock.Call
}

// CreateAlertConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupAlertsConfig *admin.GroupAlertsConfig
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfiguration(ctx interface{}, groupId interface{}, groupAlertsConfig interface{}) *AlertConfigurationsApi_CreateAlertConfiguration_Call {
	return &AlertConfigurationsApi_CreateAlertConfiguration_Call{Call: _e.mock.On("CreateAlertConfiguration", ctx, groupId, groupAlertsConfig)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfiguration_Call) Run(run func(ctx context.Context, groupId string, groupAlertsConfig *admin.GroupAlertsConfig)) *AlertConfigurationsApi_CreateAlertConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupAlertsConfig))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfiguration_Call) Return(_a0 admin.CreateAlertConfigurationApiRequest) *AlertConfigurationsApi_CreateAlertConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfiguration_Call) RunAndReturn(run func(context.Context, string, *admin.GroupAlertsConfig) admin.CreateAlertConfigurationApiRequest) *AlertConfigurationsApi_CreateAlertConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlertConfigurationExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) CreateAlertConfigurationExecute(r admin.CreateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfigurationExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAlertConfigurationApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAlertConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAlertConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_CreateAlertConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfigurationExecute'
type AlertConfigurationsApi_CreateAlertConfigurationExecute_Call struct {
	*mock.Call
}

// CreateAlertConfigurationExecute is a helper method to define mock.On call
//   - r admin.CreateAlertConfigurationApiRequest
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfigurationExecute(r interface{}) *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call {
	return &AlertConfigurationsApi_CreateAlertConfigurationExecute_Call{Call: _e.mock.On("CreateAlertConfigurationExecute", r)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call) Run(run func(r admin.CreateAlertConfigurationApiRequest)) *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAlertConfigurationApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call) RunAndReturn(run func(admin.CreateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_CreateAlertConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlertConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) CreateAlertConfigurationWithParams(ctx context.Context, args *admin.CreateAlertConfigurationApiParams) admin.CreateAlertConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfigurationWithParams")
	}

	var r0 admin.CreateAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAlertConfigurationApiParams) admin.CreateAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfigurationWithParams'
type AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call struct {
	*mock.Call
}

// CreateAlertConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAlertConfigurationApiParams
func (_e *AlertConfigurationsApi_Expecter) CreateAlertConfigurationWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call {
	return &AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call{Call: _e.mock.On("CreateAlertConfigurationWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAlertConfigurationApiParams)) *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAlertConfigurationApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call) Return(_a0 admin.CreateAlertConfigurationApiRequest) *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAlertConfigurationApiParams) admin.CreateAlertConfigurationApiRequest) *AlertConfigurationsApi_CreateAlertConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfiguration provides a mock function with given fields: ctx, groupId, alertConfigId
func (_m *AlertConfigurationsApi) DeleteAlertConfiguration(ctx context.Context, groupId string, alertConfigId string) admin.DeleteAlertConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfiguration")
	}

	var r0 admin.DeleteAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId)
	} else {
		r0 = ret.Get(0).(admin.DeleteAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_DeleteAlertConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfiguration'
type AlertConfigurationsApi_DeleteAlertConfiguration_Call struct {
	*mock.Call
}

// DeleteAlertConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfiguration(ctx interface{}, groupId interface{}, alertConfigId interface{}) *AlertConfigurationsApi_DeleteAlertConfiguration_Call {
	return &AlertConfigurationsApi_DeleteAlertConfiguration_Call{Call: _e.mock.On("DeleteAlertConfiguration", ctx, groupId, alertConfigId)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfiguration_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string)) *AlertConfigurationsApi_DeleteAlertConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfiguration_Call) Return(_a0 admin.DeleteAlertConfigurationApiRequest) *AlertConfigurationsApi_DeleteAlertConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfiguration_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteAlertConfigurationApiRequest) *AlertConfigurationsApi_DeleteAlertConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfigurationExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) DeleteAlertConfigurationExecute(r admin.DeleteAlertConfigurationApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfigurationExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAlertConfigurationApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAlertConfigurationApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAlertConfigurationApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfigurationExecute'
type AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call struct {
	*mock.Call
}

// DeleteAlertConfigurationExecute is a helper method to define mock.On call
//   - r admin.DeleteAlertConfigurationApiRequest
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfigurationExecute(r interface{}) *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call {
	return &AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call{Call: _e.mock.On("DeleteAlertConfigurationExecute", r)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call) Run(run func(r admin.DeleteAlertConfigurationApiRequest)) *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAlertConfigurationApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call) Return(_a0 *http.Response, _a1 error) *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call) RunAndReturn(run func(admin.DeleteAlertConfigurationApiRequest) (*http.Response, error)) *AlertConfigurationsApi_DeleteAlertConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlertConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) DeleteAlertConfigurationWithParams(ctx context.Context, args *admin.DeleteAlertConfigurationApiParams) admin.DeleteAlertConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertConfigurationWithParams")
	}

	var r0 admin.DeleteAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAlertConfigurationApiParams) admin.DeleteAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlertConfigurationWithParams'
type AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call struct {
	*mock.Call
}

// DeleteAlertConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAlertConfigurationApiParams
func (_e *AlertConfigurationsApi_Expecter) DeleteAlertConfigurationWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call {
	return &AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call{Call: _e.mock.On("DeleteAlertConfigurationWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAlertConfigurationApiParams)) *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAlertConfigurationApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call) Return(_a0 admin.DeleteAlertConfigurationApiRequest) *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAlertConfigurationApiParams) admin.DeleteAlertConfigurationApiRequest) *AlertConfigurationsApi_DeleteAlertConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfiguration provides a mock function with given fields: ctx, groupId, alertConfigId
func (_m *AlertConfigurationsApi) GetAlertConfiguration(ctx context.Context, groupId string, alertConfigId string) admin.GetAlertConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfiguration")
	}

	var r0 admin.GetAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfiguration'
type AlertConfigurationsApi_GetAlertConfiguration_Call struct {
	*mock.Call
}

// GetAlertConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfiguration(ctx interface{}, groupId interface{}, alertConfigId interface{}) *AlertConfigurationsApi_GetAlertConfiguration_Call {
	return &AlertConfigurationsApi_GetAlertConfiguration_Call{Call: _e.mock.On("GetAlertConfiguration", ctx, groupId, alertConfigId)}
}

func (_c *AlertConfigurationsApi_GetAlertConfiguration_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string)) *AlertConfigurationsApi_GetAlertConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfiguration_Call) Return(_a0 admin.GetAlertConfigurationApiRequest) *AlertConfigurationsApi_GetAlertConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfiguration_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAlertConfigurationApiRequest) *AlertConfigurationsApi_GetAlertConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigurationExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) GetAlertConfigurationExecute(r admin.GetAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigurationExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAlertConfigurationApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAlertConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAlertConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_GetAlertConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigurationExecute'
type AlertConfigurationsApi_GetAlertConfigurationExecute_Call struct {
	*mock.Call
}

// GetAlertConfigurationExecute is a helper method to define mock.On call
//   - r admin.GetAlertConfigurationApiRequest
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigurationExecute(r interface{}) *AlertConfigurationsApi_GetAlertConfigurationExecute_Call {
	return &AlertConfigurationsApi_GetAlertConfigurationExecute_Call{Call: _e.mock.On("GetAlertConfigurationExecute", r)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationExecute_Call) Run(run func(r admin.GetAlertConfigurationApiRequest)) *AlertConfigurationsApi_GetAlertConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAlertConfigurationApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_GetAlertConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationExecute_Call) RunAndReturn(run func(admin.GetAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_GetAlertConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) GetAlertConfigurationWithParams(ctx context.Context, args *admin.GetAlertConfigurationApiParams) admin.GetAlertConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigurationWithParams")
	}

	var r0 admin.GetAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAlertConfigurationApiParams) admin.GetAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_GetAlertConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigurationWithParams'
type AlertConfigurationsApi_GetAlertConfigurationWithParams_Call struct {
	*mock.Call
}

// GetAlertConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAlertConfigurationApiParams
func (_e *AlertConfigurationsApi_Expecter) GetAlertConfigurationWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call {
	return &AlertConfigurationsApi_GetAlertConfigurationWithParams_Call{Call: _e.mock.On("GetAlertConfigurationWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAlertConfigurationApiParams)) *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAlertConfigurationApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call) Return(_a0 admin.GetAlertConfigurationApiRequest) *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAlertConfigurationApiParams) admin.GetAlertConfigurationApiRequest) *AlertConfigurationsApi_GetAlertConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationMatchersFieldNames provides a mock function with given fields: ctx
func (_m *AlertConfigurationsApi) ListAlertConfigurationMatchersFieldNames(ctx context.Context) admin.ListAlertConfigurationMatchersFieldNamesApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationMatchersFieldNames")
	}

	var r0 admin.ListAlertConfigurationMatchersFieldNamesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListAlertConfigurationMatchersFieldNamesApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationMatchersFieldNamesApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationMatchersFieldNames'
type AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call struct {
	*mock.Call
}

// ListAlertConfigurationMatchersFieldNames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationMatchersFieldNames(ctx interface{}) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call{Call: _e.mock.On("ListAlertConfigurationMatchersFieldNames", ctx)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call) Run(run func(ctx context.Context)) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call) Return(_a0 admin.ListAlertConfigurationMatchersFieldNamesApiRequest) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call) RunAndReturn(run func(context.Context) admin.ListAlertConfigurationMatchersFieldNamesApiRequest) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationMatchersFieldNamesExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ListAlertConfigurationMatchersFieldNamesExecute(r admin.ListAlertConfigurationMatchersFieldNamesApiRequest) ([]string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationMatchersFieldNamesExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationMatchersFieldNamesApiRequest) ([]string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationMatchersFieldNamesApiRequest) []string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAlertConfigurationMatchersFieldNamesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAlertConfigurationMatchersFieldNamesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationMatchersFieldNamesExecute'
type AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call struct {
	*mock.Call
}

// ListAlertConfigurationMatchersFieldNamesExecute is a helper method to define mock.On call
//   - r admin.ListAlertConfigurationMatchersFieldNamesApiRequest
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationMatchersFieldNamesExecute(r interface{}) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call{Call: _e.mock.On("ListAlertConfigurationMatchersFieldNamesExecute", r)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call) Run(run func(r admin.ListAlertConfigurationMatchersFieldNamesApiRequest)) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAlertConfigurationMatchersFieldNamesApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call) Return(_a0 []string, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call) RunAndReturn(run func(admin.ListAlertConfigurationMatchersFieldNamesApiRequest) ([]string, *http.Response, error)) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationMatchersFieldNamesWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ListAlertConfigurationMatchersFieldNamesWithParams(ctx context.Context, args *admin.ListAlertConfigurationMatchersFieldNamesApiParams) admin.ListAlertConfigurationMatchersFieldNamesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationMatchersFieldNamesWithParams")
	}

	var r0 admin.ListAlertConfigurationMatchersFieldNamesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAlertConfigurationMatchersFieldNamesApiParams) admin.ListAlertConfigurationMatchersFieldNamesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationMatchersFieldNamesApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationMatchersFieldNamesWithParams'
type AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call struct {
	*mock.Call
}

// ListAlertConfigurationMatchersFieldNamesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAlertConfigurationMatchersFieldNamesApiParams
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationMatchersFieldNamesWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call{Call: _e.mock.On("ListAlertConfigurationMatchersFieldNamesWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAlertConfigurationMatchersFieldNamesApiParams)) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAlertConfigurationMatchersFieldNamesApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call) Return(_a0 admin.ListAlertConfigurationMatchersFieldNamesApiRequest) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAlertConfigurationMatchersFieldNamesApiParams) admin.ListAlertConfigurationMatchersFieldNamesApiRequest) *AlertConfigurationsApi_ListAlertConfigurationMatchersFieldNamesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurations provides a mock function with given fields: ctx, groupId
func (_m *AlertConfigurationsApi) ListAlertConfigurations(ctx context.Context, groupId string) admin.ListAlertConfigurationsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurations")
	}

	var r0 admin.ListAlertConfigurationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListAlertConfigurationsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurations'
type AlertConfigurationsApi_ListAlertConfigurations_Call struct {
	*mock.Call
}

// ListAlertConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurations(ctx interface{}, groupId interface{}) *AlertConfigurationsApi_ListAlertConfigurations_Call {
	return &AlertConfigurationsApi_ListAlertConfigurations_Call{Call: _e.mock.On("ListAlertConfigurations", ctx, groupId)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurations_Call) Run(run func(ctx context.Context, groupId string)) *AlertConfigurationsApi_ListAlertConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurations_Call) Return(_a0 admin.ListAlertConfigurationsApiRequest) *AlertConfigurationsApi_ListAlertConfigurations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurations_Call) RunAndReturn(run func(context.Context, string) admin.ListAlertConfigurationsApiRequest) *AlertConfigurationsApi_ListAlertConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationsByAlertId provides a mock function with given fields: ctx, groupId, alertId
func (_m *AlertConfigurationsApi) ListAlertConfigurationsByAlertId(ctx context.Context, groupId string, alertId string) admin.ListAlertConfigurationsByAlertIdApiRequest {
	ret := _m.Called(ctx, groupId, alertId)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationsByAlertId")
	}

	var r0 admin.ListAlertConfigurationsByAlertIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListAlertConfigurationsByAlertIdApiRequest); ok {
		r0 = rf(ctx, groupId, alertId)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationsByAlertIdApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationsByAlertId'
type AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call struct {
	*mock.Call
}

// ListAlertConfigurationsByAlertId is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertId string
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationsByAlertId(ctx interface{}, groupId interface{}, alertId interface{}) *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call{Call: _e.mock.On("ListAlertConfigurationsByAlertId", ctx, groupId, alertId)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call) Run(run func(ctx context.Context, groupId string, alertId string)) *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call) Return(_a0 admin.ListAlertConfigurationsByAlertIdApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call) RunAndReturn(run func(context.Context, string, string) admin.ListAlertConfigurationsByAlertIdApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsByAlertId_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationsByAlertIdExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ListAlertConfigurationsByAlertIdExecute(r admin.ListAlertConfigurationsByAlertIdApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationsByAlertIdExecute")
	}

	var r0 *admin.PaginatedAlertConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationsByAlertIdApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationsByAlertIdApiRequest) *admin.PaginatedAlertConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAlertConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAlertConfigurationsByAlertIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAlertConfigurationsByAlertIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationsByAlertIdExecute'
type AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call struct {
	*mock.Call
}

// ListAlertConfigurationsByAlertIdExecute is a helper method to define mock.On call
//   - r admin.ListAlertConfigurationsByAlertIdApiRequest
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationsByAlertIdExecute(r interface{}) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call{Call: _e.mock.On("ListAlertConfigurationsByAlertIdExecute", r)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call) Run(run func(r admin.ListAlertConfigurationsByAlertIdApiRequest)) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAlertConfigurationsByAlertIdApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call) Return(_a0 *admin.PaginatedAlertConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call) RunAndReturn(run func(admin.ListAlertConfigurationsByAlertIdApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationsByAlertIdWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ListAlertConfigurationsByAlertIdWithParams(ctx context.Context, args *admin.ListAlertConfigurationsByAlertIdApiParams) admin.ListAlertConfigurationsByAlertIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationsByAlertIdWithParams")
	}

	var r0 admin.ListAlertConfigurationsByAlertIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAlertConfigurationsByAlertIdApiParams) admin.ListAlertConfigurationsByAlertIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationsByAlertIdApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationsByAlertIdWithParams'
type AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call struct {
	*mock.Call
}

// ListAlertConfigurationsByAlertIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAlertConfigurationsByAlertIdApiParams
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationsByAlertIdWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call{Call: _e.mock.On("ListAlertConfigurationsByAlertIdWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAlertConfigurationsByAlertIdApiParams)) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAlertConfigurationsByAlertIdApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call) Return(_a0 admin.ListAlertConfigurationsByAlertIdApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAlertConfigurationsByAlertIdApiParams) admin.ListAlertConfigurationsByAlertIdApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsByAlertIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationsExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ListAlertConfigurationsExecute(r admin.ListAlertConfigurationsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationsExecute")
	}

	var r0 *admin.PaginatedAlertConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAlertConfigurationsApiRequest) *admin.PaginatedAlertConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAlertConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAlertConfigurationsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAlertConfigurationsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ListAlertConfigurationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationsExecute'
type AlertConfigurationsApi_ListAlertConfigurationsExecute_Call struct {
	*mock.Call
}

// ListAlertConfigurationsExecute is a helper method to define mock.On call
//   - r admin.ListAlertConfigurationsApiRequest
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationsExecute(r interface{}) *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationsExecute_Call{Call: _e.mock.On("ListAlertConfigurationsExecute", r)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call) Run(run func(r admin.ListAlertConfigurationsApiRequest)) *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAlertConfigurationsApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call) Return(_a0 *admin.PaginatedAlertConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call) RunAndReturn(run func(admin.ListAlertConfigurationsApiRequest) (*admin.PaginatedAlertConfig, *http.Response, error)) *AlertConfigurationsApi_ListAlertConfigurationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertConfigurationsWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ListAlertConfigurationsWithParams(ctx context.Context, args *admin.ListAlertConfigurationsApiParams) admin.ListAlertConfigurationsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertConfigurationsWithParams")
	}

	var r0 admin.ListAlertConfigurationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAlertConfigurationsApiParams) admin.ListAlertConfigurationsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAlertConfigurationsApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertConfigurationsWithParams'
type AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call struct {
	*mock.Call
}

// ListAlertConfigurationsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAlertConfigurationsApiParams
func (_e *AlertConfigurationsApi_Expecter) ListAlertConfigurationsWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call {
	return &AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call{Call: _e.mock.On("ListAlertConfigurationsWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAlertConfigurationsApiParams)) *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAlertConfigurationsApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call) Return(_a0 admin.ListAlertConfigurationsApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAlertConfigurationsApiParams) admin.ListAlertConfigurationsApiRequest) *AlertConfigurationsApi_ListAlertConfigurationsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfiguration provides a mock function with given fields: ctx, groupId, alertConfigId, alertsToggle
func (_m *AlertConfigurationsApi) ToggleAlertConfiguration(ctx context.Context, groupId string, alertConfigId string, alertsToggle *admin.AlertsToggle) admin.ToggleAlertConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId, alertsToggle)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfiguration")
	}

	var r0 admin.ToggleAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AlertsToggle) admin.ToggleAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId, alertsToggle)
	} else {
		r0 = ret.Get(0).(admin.ToggleAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ToggleAlertConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfiguration'
type AlertConfigurationsApi_ToggleAlertConfiguration_Call struct {
	*mock.Call
}

// ToggleAlertConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
//   - alertsToggle *admin.AlertsToggle
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfiguration(ctx interface{}, groupId interface{}, alertConfigId interface{}, alertsToggle interface{}) *AlertConfigurationsApi_ToggleAlertConfiguration_Call {
	return &AlertConfigurationsApi_ToggleAlertConfiguration_Call{Call: _e.mock.On("ToggleAlertConfiguration", ctx, groupId, alertConfigId, alertsToggle)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfiguration_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string, alertsToggle *admin.AlertsToggle)) *AlertConfigurationsApi_ToggleAlertConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AlertsToggle))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfiguration_Call) Return(_a0 admin.ToggleAlertConfigurationApiRequest) *AlertConfigurationsApi_ToggleAlertConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfiguration_Call) RunAndReturn(run func(context.Context, string, string, *admin.AlertsToggle) admin.ToggleAlertConfigurationApiRequest) *AlertConfigurationsApi_ToggleAlertConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfigurationExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) ToggleAlertConfigurationExecute(r admin.ToggleAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfigurationExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ToggleAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ToggleAlertConfigurationApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ToggleAlertConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ToggleAlertConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfigurationExecute'
type AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call struct {
	*mock.Call
}

// ToggleAlertConfigurationExecute is a helper method to define mock.On call
//   - r admin.ToggleAlertConfigurationApiRequest
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfigurationExecute(r interface{}) *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call {
	return &AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call{Call: _e.mock.On("ToggleAlertConfigurationExecute", r)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call) Run(run func(r admin.ToggleAlertConfigurationApiRequest)) *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ToggleAlertConfigurationApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call) RunAndReturn(run func(admin.ToggleAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_ToggleAlertConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAlertConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) ToggleAlertConfigurationWithParams(ctx context.Context, args *admin.ToggleAlertConfigurationApiParams) admin.ToggleAlertConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAlertConfigurationWithParams")
	}

	var r0 admin.ToggleAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ToggleAlertConfigurationApiParams) admin.ToggleAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ToggleAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAlertConfigurationWithParams'
type AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call struct {
	*mock.Call
}

// ToggleAlertConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ToggleAlertConfigurationApiParams
func (_e *AlertConfigurationsApi_Expecter) ToggleAlertConfigurationWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call {
	return &AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call{Call: _e.mock.On("ToggleAlertConfigurationWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.ToggleAlertConfigurationApiParams)) *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ToggleAlertConfigurationApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call) Return(_a0 admin.ToggleAlertConfigurationApiRequest) *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.ToggleAlertConfigurationApiParams) admin.ToggleAlertConfigurationApiRequest) *AlertConfigurationsApi_ToggleAlertConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfiguration provides a mock function with given fields: ctx, groupId, alertConfigId, groupAlertsConfig
func (_m *AlertConfigurationsApi) UpdateAlertConfiguration(ctx context.Context, groupId string, alertConfigId string, groupAlertsConfig *admin.GroupAlertsConfig) admin.UpdateAlertConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, alertConfigId, groupAlertsConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfiguration")
	}

	var r0 admin.UpdateAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupAlertsConfig) admin.UpdateAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, alertConfigId, groupAlertsConfig)
	} else {
		r0 = ret.Get(0).(admin.UpdateAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_UpdateAlertConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfiguration'
type AlertConfigurationsApi_UpdateAlertConfiguration_Call struct {
	*mock.Call
}

// UpdateAlertConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - alertConfigId string
//   - groupAlertsConfig *admin.GroupAlertsConfig
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfiguration(ctx interface{}, groupId interface{}, alertConfigId interface{}, groupAlertsConfig interface{}) *AlertConfigurationsApi_UpdateAlertConfiguration_Call {
	return &AlertConfigurationsApi_UpdateAlertConfiguration_Call{Call: _e.mock.On("UpdateAlertConfiguration", ctx, groupId, alertConfigId, groupAlertsConfig)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfiguration_Call) Run(run func(ctx context.Context, groupId string, alertConfigId string, groupAlertsConfig *admin.GroupAlertsConfig)) *AlertConfigurationsApi_UpdateAlertConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupAlertsConfig))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfiguration_Call) Return(_a0 admin.UpdateAlertConfigurationApiRequest) *AlertConfigurationsApi_UpdateAlertConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfiguration_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupAlertsConfig) admin.UpdateAlertConfigurationApiRequest) *AlertConfigurationsApi_UpdateAlertConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfigurationExecute provides a mock function with given fields: r
func (_m *AlertConfigurationsApi) UpdateAlertConfigurationExecute(r admin.UpdateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfigurationExecute")
	}

	var r0 *admin.GroupAlertsConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAlertConfigurationApiRequest) *admin.GroupAlertsConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupAlertsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAlertConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAlertConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfigurationExecute'
type AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call struct {
	*mock.Call
}

// UpdateAlertConfigurationExecute is a helper method to define mock.On call
//   - r admin.UpdateAlertConfigurationApiRequest
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfigurationExecute(r interface{}) *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call {
	return &AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call{Call: _e.mock.On("UpdateAlertConfigurationExecute", r)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call) Run(run func(r admin.UpdateAlertConfigurationApiRequest)) *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAlertConfigurationApiRequest))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call) Return(_a0 *admin.GroupAlertsConfig, _a1 *http.Response, _a2 error) *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call) RunAndReturn(run func(admin.UpdateAlertConfigurationApiRequest) (*admin.GroupAlertsConfig, *http.Response, error)) *AlertConfigurationsApi_UpdateAlertConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlertConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *AlertConfigurationsApi) UpdateAlertConfigurationWithParams(ctx context.Context, args *admin.UpdateAlertConfigurationApiParams) admin.UpdateAlertConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlertConfigurationWithParams")
	}

	var r0 admin.UpdateAlertConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAlertConfigurationApiParams) admin.UpdateAlertConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAlertConfigurationApiRequest)
	}

	return r0
}

// AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlertConfigurationWithParams'
type AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call struct {
	*mock.Call
}

// UpdateAlertConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAlertConfigurationApiParams
func (_e *AlertConfigurationsApi_Expecter) UpdateAlertConfigurationWithParams(ctx interface{}, args interface{}) *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call {
	return &AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call{Call: _e.mock.On("UpdateAlertConfigurationWithParams", ctx, args)}
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAlertConfigurationApiParams)) *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAlertConfigurationApiParams))
	})
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call) Return(_a0 admin.UpdateAlertConfigurationApiRequest) *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAlertConfigurationApiParams) admin.UpdateAlertConfigurationApiRequest) *AlertConfigurationsApi_UpdateAlertConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlertConfigurationsApi creates a new instance of AlertConfigurationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertConfigurationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertConfigurationsApi {
	mock := &AlertConfigurationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
