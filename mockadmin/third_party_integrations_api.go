// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ThirdPartyIntegrationsApi is an autogenerated mock type for the ThirdPartyIntegrationsApi type
type ThirdPartyIntegrationsApi struct {
	mock.Mock
}

type ThirdPartyIntegrationsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ThirdPartyIntegrationsApi) EXPECT() *ThirdPartyIntegrationsApi_Expecter {
	return &ThirdPartyIntegrationsApi_Expecter{mock: &_m.Mock}
}

// CreateGroupIntegration provides a mock function with given fields: ctx, integrationType, groupId, thirdPartyIntegration
func (_m *ThirdPartyIntegrationsApi) CreateGroupIntegration(ctx context.Context, integrationType string, groupId string, thirdPartyIntegration *admin.ThirdPartyIntegration) admin.CreateGroupIntegrationApiRequest {
	ret := _m.Called(ctx, integrationType, groupId, thirdPartyIntegration)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupIntegration")
	}

	var r0 admin.CreateGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ThirdPartyIntegration) admin.CreateGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, integrationType, groupId, thirdPartyIntegration)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_CreateGroupIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupIntegration'
type ThirdPartyIntegrationsApi_CreateGroupIntegration_Call struct {
	*mock.Call
}

// CreateGroupIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType string
//   - groupId string
//   - thirdPartyIntegration *admin.ThirdPartyIntegration
func (_e *ThirdPartyIntegrationsApi_Expecter) CreateGroupIntegration(ctx any, integrationType any, groupId any, thirdPartyIntegration any) *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call {
	return &ThirdPartyIntegrationsApi_CreateGroupIntegration_Call{Call: _e.mock.On("CreateGroupIntegration", ctx, integrationType, groupId, thirdPartyIntegration)}
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call) Run(run func(ctx context.Context, integrationType string, groupId string, thirdPartyIntegration *admin.ThirdPartyIntegration)) *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ThirdPartyIntegration))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call) Return(_a0 admin.CreateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call) RunAndReturn(run func(context.Context, string, string, *admin.ThirdPartyIntegration) admin.CreateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_CreateGroupIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupIntegrationExecute provides a mock function with given fields: r
func (_m *ThirdPartyIntegrationsApi) CreateGroupIntegrationExecute(r admin.CreateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupIntegrationExecute")
	}

	var r0 *admin.PaginatedIntegration
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateGroupIntegrationApiRequest) *admin.PaginatedIntegration); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateGroupIntegrationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateGroupIntegrationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupIntegrationExecute'
type ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call struct {
	*mock.Call
}

// CreateGroupIntegrationExecute is a helper method to define mock.On call
//   - r admin.CreateGroupIntegrationApiRequest
func (_e *ThirdPartyIntegrationsApi_Expecter) CreateGroupIntegrationExecute(r any) *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call {
	return &ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call{Call: _e.mock.On("CreateGroupIntegrationExecute", r)}
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call) Run(run func(r admin.CreateGroupIntegrationApiRequest)) *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateGroupIntegrationApiRequest))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call) Return(_a0 *admin.PaginatedIntegration, _a1 *http.Response, _a2 error) *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call) RunAndReturn(run func(admin.CreateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error)) *ThirdPartyIntegrationsApi_CreateGroupIntegrationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupIntegrationWithParams provides a mock function with given fields: ctx, args
func (_m *ThirdPartyIntegrationsApi) CreateGroupIntegrationWithParams(ctx context.Context, args *admin.CreateGroupIntegrationApiParams) admin.CreateGroupIntegrationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupIntegrationWithParams")
	}

	var r0 admin.CreateGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateGroupIntegrationApiParams) admin.CreateGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupIntegrationWithParams'
type ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call struct {
	*mock.Call
}

// CreateGroupIntegrationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateGroupIntegrationApiParams
func (_e *ThirdPartyIntegrationsApi_Expecter) CreateGroupIntegrationWithParams(ctx any, args any) *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call {
	return &ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call{Call: _e.mock.On("CreateGroupIntegrationWithParams", ctx, args)}
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateGroupIntegrationApiParams)) *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateGroupIntegrationApiParams))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call) Return(_a0 admin.CreateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateGroupIntegrationApiParams) admin.CreateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_CreateGroupIntegrationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupIntegration provides a mock function with given fields: ctx, integrationType, groupId
func (_m *ThirdPartyIntegrationsApi) DeleteGroupIntegration(ctx context.Context, integrationType string, groupId string) admin.DeleteGroupIntegrationApiRequest {
	ret := _m.Called(ctx, integrationType, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupIntegration")
	}

	var r0 admin.DeleteGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, integrationType, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupIntegration'
type ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call struct {
	*mock.Call
}

// DeleteGroupIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType string
//   - groupId string
func (_e *ThirdPartyIntegrationsApi_Expecter) DeleteGroupIntegration(ctx any, integrationType any, groupId any) *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call {
	return &ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call{Call: _e.mock.On("DeleteGroupIntegration", ctx, integrationType, groupId)}
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call) Run(run func(ctx context.Context, integrationType string, groupId string)) *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call) Return(_a0 admin.DeleteGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_DeleteGroupIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupIntegrationExecute provides a mock function with given fields: r
func (_m *ThirdPartyIntegrationsApi) DeleteGroupIntegrationExecute(r admin.DeleteGroupIntegrationApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupIntegrationExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupIntegrationApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteGroupIntegrationApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteGroupIntegrationApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupIntegrationExecute'
type ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call struct {
	*mock.Call
}

// DeleteGroupIntegrationExecute is a helper method to define mock.On call
//   - r admin.DeleteGroupIntegrationApiRequest
func (_e *ThirdPartyIntegrationsApi_Expecter) DeleteGroupIntegrationExecute(r any) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call {
	return &ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call{Call: _e.mock.On("DeleteGroupIntegrationExecute", r)}
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call) Run(run func(r admin.DeleteGroupIntegrationApiRequest)) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteGroupIntegrationApiRequest))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call) Return(_a0 *http.Response, _a1 error) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call) RunAndReturn(run func(admin.DeleteGroupIntegrationApiRequest) (*http.Response, error)) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupIntegrationWithParams provides a mock function with given fields: ctx, args
func (_m *ThirdPartyIntegrationsApi) DeleteGroupIntegrationWithParams(ctx context.Context, args *admin.DeleteGroupIntegrationApiParams) admin.DeleteGroupIntegrationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupIntegrationWithParams")
	}

	var r0 admin.DeleteGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteGroupIntegrationApiParams) admin.DeleteGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupIntegrationWithParams'
type ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call struct {
	*mock.Call
}

// DeleteGroupIntegrationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteGroupIntegrationApiParams
func (_e *ThirdPartyIntegrationsApi_Expecter) DeleteGroupIntegrationWithParams(ctx any, args any) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call {
	return &ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call{Call: _e.mock.On("DeleteGroupIntegrationWithParams", ctx, args)}
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteGroupIntegrationApiParams)) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteGroupIntegrationApiParams))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call) Return(_a0 admin.DeleteGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteGroupIntegrationApiParams) admin.DeleteGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_DeleteGroupIntegrationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIntegration provides a mock function with given fields: ctx, groupId, integrationType
func (_m *ThirdPartyIntegrationsApi) GetGroupIntegration(ctx context.Context, groupId string, integrationType string) admin.GetGroupIntegrationApiRequest {
	ret := _m.Called(ctx, groupId, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIntegration")
	}

	var r0 admin.GetGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, groupId, integrationType)
	} else {
		r0 = ret.Get(0).(admin.GetGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_GetGroupIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIntegration'
type ThirdPartyIntegrationsApi_GetGroupIntegration_Call struct {
	*mock.Call
}

// GetGroupIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - integrationType string
func (_e *ThirdPartyIntegrationsApi_Expecter) GetGroupIntegration(ctx any, groupId any, integrationType any) *ThirdPartyIntegrationsApi_GetGroupIntegration_Call {
	return &ThirdPartyIntegrationsApi_GetGroupIntegration_Call{Call: _e.mock.On("GetGroupIntegration", ctx, groupId, integrationType)}
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegration_Call) Run(run func(ctx context.Context, groupId string, integrationType string)) *ThirdPartyIntegrationsApi_GetGroupIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegration_Call) Return(_a0 admin.GetGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_GetGroupIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegration_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_GetGroupIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIntegrationExecute provides a mock function with given fields: r
func (_m *ThirdPartyIntegrationsApi) GetGroupIntegrationExecute(r admin.GetGroupIntegrationApiRequest) (*admin.ThirdPartyIntegration, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIntegrationExecute")
	}

	var r0 *admin.ThirdPartyIntegration
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupIntegrationApiRequest) (*admin.ThirdPartyIntegration, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupIntegrationApiRequest) *admin.ThirdPartyIntegration); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ThirdPartyIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupIntegrationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupIntegrationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIntegrationExecute'
type ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call struct {
	*mock.Call
}

// GetGroupIntegrationExecute is a helper method to define mock.On call
//   - r admin.GetGroupIntegrationApiRequest
func (_e *ThirdPartyIntegrationsApi_Expecter) GetGroupIntegrationExecute(r any) *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call {
	return &ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call{Call: _e.mock.On("GetGroupIntegrationExecute", r)}
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call) Run(run func(r admin.GetGroupIntegrationApiRequest)) *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupIntegrationApiRequest))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call) Return(_a0 *admin.ThirdPartyIntegration, _a1 *http.Response, _a2 error) *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call) RunAndReturn(run func(admin.GetGroupIntegrationApiRequest) (*admin.ThirdPartyIntegration, *http.Response, error)) *ThirdPartyIntegrationsApi_GetGroupIntegrationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupIntegrationWithParams provides a mock function with given fields: ctx, args
func (_m *ThirdPartyIntegrationsApi) GetGroupIntegrationWithParams(ctx context.Context, args *admin.GetGroupIntegrationApiParams) admin.GetGroupIntegrationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupIntegrationWithParams")
	}

	var r0 admin.GetGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupIntegrationApiParams) admin.GetGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupIntegrationWithParams'
type ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call struct {
	*mock.Call
}

// GetGroupIntegrationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupIntegrationApiParams
func (_e *ThirdPartyIntegrationsApi_Expecter) GetGroupIntegrationWithParams(ctx any, args any) *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call {
	return &ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call{Call: _e.mock.On("GetGroupIntegrationWithParams", ctx, args)}
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupIntegrationApiParams)) *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupIntegrationApiParams))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call) Return(_a0 admin.GetGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupIntegrationApiParams) admin.GetGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_GetGroupIntegrationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupIntegrations provides a mock function with given fields: ctx, groupId
func (_m *ThirdPartyIntegrationsApi) ListGroupIntegrations(ctx context.Context, groupId string) admin.ListGroupIntegrationsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupIntegrations")
	}

	var r0 admin.ListGroupIntegrationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupIntegrationsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupIntegrationsApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_ListGroupIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupIntegrations'
type ThirdPartyIntegrationsApi_ListGroupIntegrations_Call struct {
	*mock.Call
}

// ListGroupIntegrations is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ThirdPartyIntegrationsApi_Expecter) ListGroupIntegrations(ctx any, groupId any) *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call {
	return &ThirdPartyIntegrationsApi_ListGroupIntegrations_Call{Call: _e.mock.On("ListGroupIntegrations", ctx, groupId)}
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call) Run(run func(ctx context.Context, groupId string)) *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call) Return(_a0 admin.ListGroupIntegrationsApiRequest) *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupIntegrationsApiRequest) *ThirdPartyIntegrationsApi_ListGroupIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupIntegrationsExecute provides a mock function with given fields: r
func (_m *ThirdPartyIntegrationsApi) ListGroupIntegrationsExecute(r admin.ListGroupIntegrationsApiRequest) (*admin.PaginatedIntegration, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupIntegrationsExecute")
	}

	var r0 *admin.PaginatedIntegration
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupIntegrationsApiRequest) (*admin.PaginatedIntegration, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupIntegrationsApiRequest) *admin.PaginatedIntegration); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupIntegrationsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupIntegrationsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupIntegrationsExecute'
type ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call struct {
	*mock.Call
}

// ListGroupIntegrationsExecute is a helper method to define mock.On call
//   - r admin.ListGroupIntegrationsApiRequest
func (_e *ThirdPartyIntegrationsApi_Expecter) ListGroupIntegrationsExecute(r any) *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call {
	return &ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call{Call: _e.mock.On("ListGroupIntegrationsExecute", r)}
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call) Run(run func(r admin.ListGroupIntegrationsApiRequest)) *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupIntegrationsApiRequest))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call) Return(_a0 *admin.PaginatedIntegration, _a1 *http.Response, _a2 error) *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call) RunAndReturn(run func(admin.ListGroupIntegrationsApiRequest) (*admin.PaginatedIntegration, *http.Response, error)) *ThirdPartyIntegrationsApi_ListGroupIntegrationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupIntegrationsWithParams provides a mock function with given fields: ctx, args
func (_m *ThirdPartyIntegrationsApi) ListGroupIntegrationsWithParams(ctx context.Context, args *admin.ListGroupIntegrationsApiParams) admin.ListGroupIntegrationsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupIntegrationsWithParams")
	}

	var r0 admin.ListGroupIntegrationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupIntegrationsApiParams) admin.ListGroupIntegrationsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupIntegrationsApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupIntegrationsWithParams'
type ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call struct {
	*mock.Call
}

// ListGroupIntegrationsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupIntegrationsApiParams
func (_e *ThirdPartyIntegrationsApi_Expecter) ListGroupIntegrationsWithParams(ctx any, args any) *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call {
	return &ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call{Call: _e.mock.On("ListGroupIntegrationsWithParams", ctx, args)}
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupIntegrationsApiParams)) *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupIntegrationsApiParams))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call) Return(_a0 admin.ListGroupIntegrationsApiRequest) *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupIntegrationsApiParams) admin.ListGroupIntegrationsApiRequest) *ThirdPartyIntegrationsApi_ListGroupIntegrationsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupIntegration provides a mock function with given fields: ctx, integrationType, groupId, thirdPartyIntegration
func (_m *ThirdPartyIntegrationsApi) UpdateGroupIntegration(ctx context.Context, integrationType string, groupId string, thirdPartyIntegration *admin.ThirdPartyIntegration) admin.UpdateGroupIntegrationApiRequest {
	ret := _m.Called(ctx, integrationType, groupId, thirdPartyIntegration)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupIntegration")
	}

	var r0 admin.UpdateGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ThirdPartyIntegration) admin.UpdateGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, integrationType, groupId, thirdPartyIntegration)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupIntegration'
type ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call struct {
	*mock.Call
}

// UpdateGroupIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType string
//   - groupId string
//   - thirdPartyIntegration *admin.ThirdPartyIntegration
func (_e *ThirdPartyIntegrationsApi_Expecter) UpdateGroupIntegration(ctx any, integrationType any, groupId any, thirdPartyIntegration any) *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call {
	return &ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call{Call: _e.mock.On("UpdateGroupIntegration", ctx, integrationType, groupId, thirdPartyIntegration)}
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call) Run(run func(ctx context.Context, integrationType string, groupId string, thirdPartyIntegration *admin.ThirdPartyIntegration)) *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ThirdPartyIntegration))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call) Return(_a0 admin.UpdateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call) RunAndReturn(run func(context.Context, string, string, *admin.ThirdPartyIntegration) admin.UpdateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_UpdateGroupIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupIntegrationExecute provides a mock function with given fields: r
func (_m *ThirdPartyIntegrationsApi) UpdateGroupIntegrationExecute(r admin.UpdateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupIntegrationExecute")
	}

	var r0 *admin.PaginatedIntegration
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupIntegrationApiRequest) *admin.PaginatedIntegration); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupIntegrationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupIntegrationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupIntegrationExecute'
type ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call struct {
	*mock.Call
}

// UpdateGroupIntegrationExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupIntegrationApiRequest
func (_e *ThirdPartyIntegrationsApi_Expecter) UpdateGroupIntegrationExecute(r any) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call {
	return &ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call{Call: _e.mock.On("UpdateGroupIntegrationExecute", r)}
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call) Run(run func(r admin.UpdateGroupIntegrationApiRequest)) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupIntegrationApiRequest))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call) Return(_a0 *admin.PaginatedIntegration, _a1 *http.Response, _a2 error) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call) RunAndReturn(run func(admin.UpdateGroupIntegrationApiRequest) (*admin.PaginatedIntegration, *http.Response, error)) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupIntegrationWithParams provides a mock function with given fields: ctx, args
func (_m *ThirdPartyIntegrationsApi) UpdateGroupIntegrationWithParams(ctx context.Context, args *admin.UpdateGroupIntegrationApiParams) admin.UpdateGroupIntegrationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupIntegrationWithParams")
	}

	var r0 admin.UpdateGroupIntegrationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupIntegrationApiParams) admin.UpdateGroupIntegrationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupIntegrationApiRequest)
	}

	return r0
}

// ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupIntegrationWithParams'
type ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call struct {
	*mock.Call
}

// UpdateGroupIntegrationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupIntegrationApiParams
func (_e *ThirdPartyIntegrationsApi_Expecter) UpdateGroupIntegrationWithParams(ctx any, args any) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call {
	return &ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call{Call: _e.mock.On("UpdateGroupIntegrationWithParams", ctx, args)}
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupIntegrationApiParams)) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupIntegrationApiParams))
	})
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call) Return(_a0 admin.UpdateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupIntegrationApiParams) admin.UpdateGroupIntegrationApiRequest) *ThirdPartyIntegrationsApi_UpdateGroupIntegrationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewThirdPartyIntegrationsApi creates a new instance of ThirdPartyIntegrationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThirdPartyIntegrationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThirdPartyIntegrationsApi {
	mock := &ThirdPartyIntegrationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
