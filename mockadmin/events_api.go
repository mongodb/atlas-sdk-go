// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// EventsApi is an autogenerated mock type for the EventsApi type
type EventsApi struct {
	mock.Mock
}

type EventsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *EventsApi) EXPECT() *EventsApi_Expecter {
	return &EventsApi_Expecter{mock: &_m.Mock}
}

// GetGroupEvent provides a mock function with given fields: ctx, groupId, eventId
func (_m *EventsApi) GetGroupEvent(ctx context.Context, groupId string, eventId string) admin.GetGroupEventApiRequest {
	ret := _m.Called(ctx, groupId, eventId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupEvent")
	}

	var r0 admin.GetGroupEventApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupEventApiRequest); ok {
		r0 = rf(ctx, groupId, eventId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupEventApiRequest)
	}

	return r0
}

// EventsApi_GetGroupEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupEvent'
type EventsApi_GetGroupEvent_Call struct {
	*mock.Call
}

// GetGroupEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - eventId string
func (_e *EventsApi_Expecter) GetGroupEvent(ctx any, groupId any, eventId any) *EventsApi_GetGroupEvent_Call {
	return &EventsApi_GetGroupEvent_Call{Call: _e.mock.On("GetGroupEvent", ctx, groupId, eventId)}
}

func (_c *EventsApi_GetGroupEvent_Call) Run(run func(ctx context.Context, groupId string, eventId string)) *EventsApi_GetGroupEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *EventsApi_GetGroupEvent_Call) Return(_a0 admin.GetGroupEventApiRequest) *EventsApi_GetGroupEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_GetGroupEvent_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupEventApiRequest) *EventsApi_GetGroupEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupEventExecute provides a mock function with given fields: r
func (_m *EventsApi) GetGroupEventExecute(r admin.GetGroupEventApiRequest) (*admin.EventViewForNdsGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupEventExecute")
	}

	var r0 *admin.EventViewForNdsGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupEventApiRequest) (*admin.EventViewForNdsGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupEventApiRequest) *admin.EventViewForNdsGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.EventViewForNdsGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupEventApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupEventApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EventsApi_GetGroupEventExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupEventExecute'
type EventsApi_GetGroupEventExecute_Call struct {
	*mock.Call
}

// GetGroupEventExecute is a helper method to define mock.On call
//   - r admin.GetGroupEventApiRequest
func (_e *EventsApi_Expecter) GetGroupEventExecute(r any) *EventsApi_GetGroupEventExecute_Call {
	return &EventsApi_GetGroupEventExecute_Call{Call: _e.mock.On("GetGroupEventExecute", r)}
}

func (_c *EventsApi_GetGroupEventExecute_Call) Run(run func(r admin.GetGroupEventApiRequest)) *EventsApi_GetGroupEventExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupEventApiRequest))
	})
	return _c
}

func (_c *EventsApi_GetGroupEventExecute_Call) Return(_a0 *admin.EventViewForNdsGroup, _a1 *http.Response, _a2 error) *EventsApi_GetGroupEventExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EventsApi_GetGroupEventExecute_Call) RunAndReturn(run func(admin.GetGroupEventApiRequest) (*admin.EventViewForNdsGroup, *http.Response, error)) *EventsApi_GetGroupEventExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupEventWithParams provides a mock function with given fields: ctx, args
func (_m *EventsApi) GetGroupEventWithParams(ctx context.Context, args *admin.GetGroupEventApiParams) admin.GetGroupEventApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupEventWithParams")
	}

	var r0 admin.GetGroupEventApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupEventApiParams) admin.GetGroupEventApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupEventApiRequest)
	}

	return r0
}

// EventsApi_GetGroupEventWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupEventWithParams'
type EventsApi_GetGroupEventWithParams_Call struct {
	*mock.Call
}

// GetGroupEventWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupEventApiParams
func (_e *EventsApi_Expecter) GetGroupEventWithParams(ctx any, args any) *EventsApi_GetGroupEventWithParams_Call {
	return &EventsApi_GetGroupEventWithParams_Call{Call: _e.mock.On("GetGroupEventWithParams", ctx, args)}
}

func (_c *EventsApi_GetGroupEventWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupEventApiParams)) *EventsApi_GetGroupEventWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupEventApiParams))
	})
	return _c
}

func (_c *EventsApi_GetGroupEventWithParams_Call) Return(_a0 admin.GetGroupEventApiRequest) *EventsApi_GetGroupEventWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_GetGroupEventWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupEventApiParams) admin.GetGroupEventApiRequest) *EventsApi_GetGroupEventWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgEvent provides a mock function with given fields: ctx, orgId, eventId
func (_m *EventsApi) GetOrgEvent(ctx context.Context, orgId string, eventId string) admin.GetOrgEventApiRequest {
	ret := _m.Called(ctx, orgId, eventId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgEvent")
	}

	var r0 admin.GetOrgEventApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgEventApiRequest); ok {
		r0 = rf(ctx, orgId, eventId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgEventApiRequest)
	}

	return r0
}

// EventsApi_GetOrgEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgEvent'
type EventsApi_GetOrgEvent_Call struct {
	*mock.Call
}

// GetOrgEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - eventId string
func (_e *EventsApi_Expecter) GetOrgEvent(ctx any, orgId any, eventId any) *EventsApi_GetOrgEvent_Call {
	return &EventsApi_GetOrgEvent_Call{Call: _e.mock.On("GetOrgEvent", ctx, orgId, eventId)}
}

func (_c *EventsApi_GetOrgEvent_Call) Run(run func(ctx context.Context, orgId string, eventId string)) *EventsApi_GetOrgEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *EventsApi_GetOrgEvent_Call) Return(_a0 admin.GetOrgEventApiRequest) *EventsApi_GetOrgEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_GetOrgEvent_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgEventApiRequest) *EventsApi_GetOrgEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgEventExecute provides a mock function with given fields: r
func (_m *EventsApi) GetOrgEventExecute(r admin.GetOrgEventApiRequest) (*admin.EventViewForOrg, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgEventExecute")
	}

	var r0 *admin.EventViewForOrg
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgEventApiRequest) (*admin.EventViewForOrg, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgEventApiRequest) *admin.EventViewForOrg); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.EventViewForOrg)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgEventApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgEventApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EventsApi_GetOrgEventExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgEventExecute'
type EventsApi_GetOrgEventExecute_Call struct {
	*mock.Call
}

// GetOrgEventExecute is a helper method to define mock.On call
//   - r admin.GetOrgEventApiRequest
func (_e *EventsApi_Expecter) GetOrgEventExecute(r any) *EventsApi_GetOrgEventExecute_Call {
	return &EventsApi_GetOrgEventExecute_Call{Call: _e.mock.On("GetOrgEventExecute", r)}
}

func (_c *EventsApi_GetOrgEventExecute_Call) Run(run func(r admin.GetOrgEventApiRequest)) *EventsApi_GetOrgEventExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgEventApiRequest))
	})
	return _c
}

func (_c *EventsApi_GetOrgEventExecute_Call) Return(_a0 *admin.EventViewForOrg, _a1 *http.Response, _a2 error) *EventsApi_GetOrgEventExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EventsApi_GetOrgEventExecute_Call) RunAndReturn(run func(admin.GetOrgEventApiRequest) (*admin.EventViewForOrg, *http.Response, error)) *EventsApi_GetOrgEventExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgEventWithParams provides a mock function with given fields: ctx, args
func (_m *EventsApi) GetOrgEventWithParams(ctx context.Context, args *admin.GetOrgEventApiParams) admin.GetOrgEventApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgEventWithParams")
	}

	var r0 admin.GetOrgEventApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgEventApiParams) admin.GetOrgEventApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgEventApiRequest)
	}

	return r0
}

// EventsApi_GetOrgEventWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgEventWithParams'
type EventsApi_GetOrgEventWithParams_Call struct {
	*mock.Call
}

// GetOrgEventWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgEventApiParams
func (_e *EventsApi_Expecter) GetOrgEventWithParams(ctx any, args any) *EventsApi_GetOrgEventWithParams_Call {
	return &EventsApi_GetOrgEventWithParams_Call{Call: _e.mock.On("GetOrgEventWithParams", ctx, args)}
}

func (_c *EventsApi_GetOrgEventWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgEventApiParams)) *EventsApi_GetOrgEventWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgEventApiParams))
	})
	return _c
}

func (_c *EventsApi_GetOrgEventWithParams_Call) Return(_a0 admin.GetOrgEventApiRequest) *EventsApi_GetOrgEventWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_GetOrgEventWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgEventApiParams) admin.GetOrgEventApiRequest) *EventsApi_GetOrgEventWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventTypes provides a mock function with given fields: ctx
func (_m *EventsApi) ListEventTypes(ctx context.Context) admin.ListEventTypesApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListEventTypes")
	}

	var r0 admin.ListEventTypesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListEventTypesApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListEventTypesApiRequest)
	}

	return r0
}

// EventsApi_ListEventTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventTypes'
type EventsApi_ListEventTypes_Call struct {
	*mock.Call
}

// ListEventTypes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *EventsApi_Expecter) ListEventTypes(ctx any) *EventsApi_ListEventTypes_Call {
	return &EventsApi_ListEventTypes_Call{Call: _e.mock.On("ListEventTypes", ctx)}
}

func (_c *EventsApi_ListEventTypes_Call) Run(run func(ctx context.Context)) *EventsApi_ListEventTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *EventsApi_ListEventTypes_Call) Return(_a0 admin.ListEventTypesApiRequest) *EventsApi_ListEventTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListEventTypes_Call) RunAndReturn(run func(context.Context) admin.ListEventTypesApiRequest) *EventsApi_ListEventTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventTypesExecute provides a mock function with given fields: r
func (_m *EventsApi) ListEventTypesExecute(r admin.ListEventTypesApiRequest) (*admin.PaginatedEventTypeDetailsResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListEventTypesExecute")
	}

	var r0 *admin.PaginatedEventTypeDetailsResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListEventTypesApiRequest) (*admin.PaginatedEventTypeDetailsResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListEventTypesApiRequest) *admin.PaginatedEventTypeDetailsResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedEventTypeDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListEventTypesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListEventTypesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EventsApi_ListEventTypesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventTypesExecute'
type EventsApi_ListEventTypesExecute_Call struct {
	*mock.Call
}

// ListEventTypesExecute is a helper method to define mock.On call
//   - r admin.ListEventTypesApiRequest
func (_e *EventsApi_Expecter) ListEventTypesExecute(r any) *EventsApi_ListEventTypesExecute_Call {
	return &EventsApi_ListEventTypesExecute_Call{Call: _e.mock.On("ListEventTypesExecute", r)}
}

func (_c *EventsApi_ListEventTypesExecute_Call) Run(run func(r admin.ListEventTypesApiRequest)) *EventsApi_ListEventTypesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListEventTypesApiRequest))
	})
	return _c
}

func (_c *EventsApi_ListEventTypesExecute_Call) Return(_a0 *admin.PaginatedEventTypeDetailsResponse, _a1 *http.Response, _a2 error) *EventsApi_ListEventTypesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EventsApi_ListEventTypesExecute_Call) RunAndReturn(run func(admin.ListEventTypesApiRequest) (*admin.PaginatedEventTypeDetailsResponse, *http.Response, error)) *EventsApi_ListEventTypesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventTypesWithParams provides a mock function with given fields: ctx, args
func (_m *EventsApi) ListEventTypesWithParams(ctx context.Context, args *admin.ListEventTypesApiParams) admin.ListEventTypesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListEventTypesWithParams")
	}

	var r0 admin.ListEventTypesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListEventTypesApiParams) admin.ListEventTypesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListEventTypesApiRequest)
	}

	return r0
}

// EventsApi_ListEventTypesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventTypesWithParams'
type EventsApi_ListEventTypesWithParams_Call struct {
	*mock.Call
}

// ListEventTypesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListEventTypesApiParams
func (_e *EventsApi_Expecter) ListEventTypesWithParams(ctx any, args any) *EventsApi_ListEventTypesWithParams_Call {
	return &EventsApi_ListEventTypesWithParams_Call{Call: _e.mock.On("ListEventTypesWithParams", ctx, args)}
}

func (_c *EventsApi_ListEventTypesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListEventTypesApiParams)) *EventsApi_ListEventTypesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListEventTypesApiParams))
	})
	return _c
}

func (_c *EventsApi_ListEventTypesWithParams_Call) Return(_a0 admin.ListEventTypesApiRequest) *EventsApi_ListEventTypesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListEventTypesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListEventTypesApiParams) admin.ListEventTypesApiRequest) *EventsApi_ListEventTypesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupEvents provides a mock function with given fields: ctx, groupId
func (_m *EventsApi) ListGroupEvents(ctx context.Context, groupId string) admin.ListGroupEventsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupEvents")
	}

	var r0 admin.ListGroupEventsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupEventsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupEventsApiRequest)
	}

	return r0
}

// EventsApi_ListGroupEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupEvents'
type EventsApi_ListGroupEvents_Call struct {
	*mock.Call
}

// ListGroupEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *EventsApi_Expecter) ListGroupEvents(ctx any, groupId any) *EventsApi_ListGroupEvents_Call {
	return &EventsApi_ListGroupEvents_Call{Call: _e.mock.On("ListGroupEvents", ctx, groupId)}
}

func (_c *EventsApi_ListGroupEvents_Call) Run(run func(ctx context.Context, groupId string)) *EventsApi_ListGroupEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EventsApi_ListGroupEvents_Call) Return(_a0 admin.ListGroupEventsApiRequest) *EventsApi_ListGroupEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListGroupEvents_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupEventsApiRequest) *EventsApi_ListGroupEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupEventsExecute provides a mock function with given fields: r
func (_m *EventsApi) ListGroupEventsExecute(r admin.ListGroupEventsApiRequest) (*admin.GroupPaginatedEvent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupEventsExecute")
	}

	var r0 *admin.GroupPaginatedEvent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupEventsApiRequest) (*admin.GroupPaginatedEvent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupEventsApiRequest) *admin.GroupPaginatedEvent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupPaginatedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupEventsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupEventsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EventsApi_ListGroupEventsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupEventsExecute'
type EventsApi_ListGroupEventsExecute_Call struct {
	*mock.Call
}

// ListGroupEventsExecute is a helper method to define mock.On call
//   - r admin.ListGroupEventsApiRequest
func (_e *EventsApi_Expecter) ListGroupEventsExecute(r any) *EventsApi_ListGroupEventsExecute_Call {
	return &EventsApi_ListGroupEventsExecute_Call{Call: _e.mock.On("ListGroupEventsExecute", r)}
}

func (_c *EventsApi_ListGroupEventsExecute_Call) Run(run func(r admin.ListGroupEventsApiRequest)) *EventsApi_ListGroupEventsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupEventsApiRequest))
	})
	return _c
}

func (_c *EventsApi_ListGroupEventsExecute_Call) Return(_a0 *admin.GroupPaginatedEvent, _a1 *http.Response, _a2 error) *EventsApi_ListGroupEventsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EventsApi_ListGroupEventsExecute_Call) RunAndReturn(run func(admin.ListGroupEventsApiRequest) (*admin.GroupPaginatedEvent, *http.Response, error)) *EventsApi_ListGroupEventsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupEventsWithParams provides a mock function with given fields: ctx, args
func (_m *EventsApi) ListGroupEventsWithParams(ctx context.Context, args *admin.ListGroupEventsApiParams) admin.ListGroupEventsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupEventsWithParams")
	}

	var r0 admin.ListGroupEventsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupEventsApiParams) admin.ListGroupEventsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupEventsApiRequest)
	}

	return r0
}

// EventsApi_ListGroupEventsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupEventsWithParams'
type EventsApi_ListGroupEventsWithParams_Call struct {
	*mock.Call
}

// ListGroupEventsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupEventsApiParams
func (_e *EventsApi_Expecter) ListGroupEventsWithParams(ctx any, args any) *EventsApi_ListGroupEventsWithParams_Call {
	return &EventsApi_ListGroupEventsWithParams_Call{Call: _e.mock.On("ListGroupEventsWithParams", ctx, args)}
}

func (_c *EventsApi_ListGroupEventsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupEventsApiParams)) *EventsApi_ListGroupEventsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupEventsApiParams))
	})
	return _c
}

func (_c *EventsApi_ListGroupEventsWithParams_Call) Return(_a0 admin.ListGroupEventsApiRequest) *EventsApi_ListGroupEventsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListGroupEventsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupEventsApiParams) admin.ListGroupEventsApiRequest) *EventsApi_ListGroupEventsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgEvents provides a mock function with given fields: ctx, orgId
func (_m *EventsApi) ListOrgEvents(ctx context.Context, orgId string) admin.ListOrgEventsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgEvents")
	}

	var r0 admin.ListOrgEventsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgEventsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgEventsApiRequest)
	}

	return r0
}

// EventsApi_ListOrgEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgEvents'
type EventsApi_ListOrgEvents_Call struct {
	*mock.Call
}

// ListOrgEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *EventsApi_Expecter) ListOrgEvents(ctx any, orgId any) *EventsApi_ListOrgEvents_Call {
	return &EventsApi_ListOrgEvents_Call{Call: _e.mock.On("ListOrgEvents", ctx, orgId)}
}

func (_c *EventsApi_ListOrgEvents_Call) Run(run func(ctx context.Context, orgId string)) *EventsApi_ListOrgEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EventsApi_ListOrgEvents_Call) Return(_a0 admin.ListOrgEventsApiRequest) *EventsApi_ListOrgEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListOrgEvents_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgEventsApiRequest) *EventsApi_ListOrgEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgEventsExecute provides a mock function with given fields: r
func (_m *EventsApi) ListOrgEventsExecute(r admin.ListOrgEventsApiRequest) (*admin.OrgPaginatedEvent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgEventsExecute")
	}

	var r0 *admin.OrgPaginatedEvent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgEventsApiRequest) (*admin.OrgPaginatedEvent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgEventsApiRequest) *admin.OrgPaginatedEvent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgPaginatedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgEventsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgEventsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EventsApi_ListOrgEventsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgEventsExecute'
type EventsApi_ListOrgEventsExecute_Call struct {
	*mock.Call
}

// ListOrgEventsExecute is a helper method to define mock.On call
//   - r admin.ListOrgEventsApiRequest
func (_e *EventsApi_Expecter) ListOrgEventsExecute(r any) *EventsApi_ListOrgEventsExecute_Call {
	return &EventsApi_ListOrgEventsExecute_Call{Call: _e.mock.On("ListOrgEventsExecute", r)}
}

func (_c *EventsApi_ListOrgEventsExecute_Call) Run(run func(r admin.ListOrgEventsApiRequest)) *EventsApi_ListOrgEventsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgEventsApiRequest))
	})
	return _c
}

func (_c *EventsApi_ListOrgEventsExecute_Call) Return(_a0 *admin.OrgPaginatedEvent, _a1 *http.Response, _a2 error) *EventsApi_ListOrgEventsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EventsApi_ListOrgEventsExecute_Call) RunAndReturn(run func(admin.ListOrgEventsApiRequest) (*admin.OrgPaginatedEvent, *http.Response, error)) *EventsApi_ListOrgEventsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgEventsWithParams provides a mock function with given fields: ctx, args
func (_m *EventsApi) ListOrgEventsWithParams(ctx context.Context, args *admin.ListOrgEventsApiParams) admin.ListOrgEventsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgEventsWithParams")
	}

	var r0 admin.ListOrgEventsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgEventsApiParams) admin.ListOrgEventsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgEventsApiRequest)
	}

	return r0
}

// EventsApi_ListOrgEventsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgEventsWithParams'
type EventsApi_ListOrgEventsWithParams_Call struct {
	*mock.Call
}

// ListOrgEventsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgEventsApiParams
func (_e *EventsApi_Expecter) ListOrgEventsWithParams(ctx any, args any) *EventsApi_ListOrgEventsWithParams_Call {
	return &EventsApi_ListOrgEventsWithParams_Call{Call: _e.mock.On("ListOrgEventsWithParams", ctx, args)}
}

func (_c *EventsApi_ListOrgEventsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgEventsApiParams)) *EventsApi_ListOrgEventsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgEventsApiParams))
	})
	return _c
}

func (_c *EventsApi_ListOrgEventsWithParams_Call) Return(_a0 admin.ListOrgEventsApiRequest) *EventsApi_ListOrgEventsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsApi_ListOrgEventsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgEventsApiParams) admin.ListOrgEventsApiRequest) *EventsApi_ListOrgEventsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventsApi creates a new instance of EventsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsApi {
	mock := &EventsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
