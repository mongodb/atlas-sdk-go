// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240530001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AccessTrackingApi is an autogenerated mock type for the AccessTrackingApi type
type AccessTrackingApi struct {
	mock.Mock
}

type AccessTrackingApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessTrackingApi) EXPECT() *AccessTrackingApi_Expecter {
	return &AccessTrackingApi_Expecter{mock: &_m.Mock}
}

// ListAccessLogsByClusterName provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AccessTrackingApi) ListAccessLogsByClusterName(ctx context.Context, groupId string, clusterName string) admin.ListAccessLogsByClusterNameApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByClusterName")
	}

	var r0 admin.ListAccessLogsByClusterNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListAccessLogsByClusterNameApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListAccessLogsByClusterNameApiRequest)
	}

	return r0
}

// AccessTrackingApi_ListAccessLogsByClusterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByClusterName'
type AccessTrackingApi_ListAccessLogsByClusterName_Call struct {
	*mock.Call
}

// ListAccessLogsByClusterName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByClusterName(ctx interface{}, groupId interface{}, clusterName interface{}) *AccessTrackingApi_ListAccessLogsByClusterName_Call {
	return &AccessTrackingApi_ListAccessLogsByClusterName_Call{Call: _e.mock.On("ListAccessLogsByClusterName", ctx, groupId, clusterName)}
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterName_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AccessTrackingApi_ListAccessLogsByClusterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterName_Call) Return(_a0 admin.ListAccessLogsByClusterNameApiRequest) *AccessTrackingApi_ListAccessLogsByClusterName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterName_Call) RunAndReturn(run func(context.Context, string, string) admin.ListAccessLogsByClusterNameApiRequest) *AccessTrackingApi_ListAccessLogsByClusterName_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessLogsByClusterNameExecute provides a mock function with given fields: r
func (_m *AccessTrackingApi) ListAccessLogsByClusterNameExecute(r admin.ListAccessLogsByClusterNameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByClusterNameExecute")
	}

	var r0 *admin.MongoDBAccessLogsList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAccessLogsByClusterNameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAccessLogsByClusterNameApiRequest) *admin.MongoDBAccessLogsList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MongoDBAccessLogsList)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAccessLogsByClusterNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAccessLogsByClusterNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByClusterNameExecute'
type AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call struct {
	*mock.Call
}

// ListAccessLogsByClusterNameExecute is a helper method to define mock.On call
//   - r admin.ListAccessLogsByClusterNameApiRequest
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByClusterNameExecute(r interface{}) *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call {
	return &AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call{Call: _e.mock.On("ListAccessLogsByClusterNameExecute", r)}
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call) Run(run func(r admin.ListAccessLogsByClusterNameApiRequest)) *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAccessLogsByClusterNameApiRequest))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call) Return(_a0 *admin.MongoDBAccessLogsList, _a1 *http.Response, _a2 error) *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call) RunAndReturn(run func(admin.ListAccessLogsByClusterNameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)) *AccessTrackingApi_ListAccessLogsByClusterNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessLogsByClusterNameWithParams provides a mock function with given fields: ctx, args
func (_m *AccessTrackingApi) ListAccessLogsByClusterNameWithParams(ctx context.Context, args *admin.ListAccessLogsByClusterNameApiParams) admin.ListAccessLogsByClusterNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByClusterNameWithParams")
	}

	var r0 admin.ListAccessLogsByClusterNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAccessLogsByClusterNameApiParams) admin.ListAccessLogsByClusterNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAccessLogsByClusterNameApiRequest)
	}

	return r0
}

// AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByClusterNameWithParams'
type AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call struct {
	*mock.Call
}

// ListAccessLogsByClusterNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAccessLogsByClusterNameApiParams
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByClusterNameWithParams(ctx interface{}, args interface{}) *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call {
	return &AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call{Call: _e.mock.On("ListAccessLogsByClusterNameWithParams", ctx, args)}
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAccessLogsByClusterNameApiParams)) *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAccessLogsByClusterNameApiParams))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call) Return(_a0 admin.ListAccessLogsByClusterNameApiRequest) *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAccessLogsByClusterNameApiParams) admin.ListAccessLogsByClusterNameApiRequest) *AccessTrackingApi_ListAccessLogsByClusterNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessLogsByHostname provides a mock function with given fields: ctx, groupId, hostname
func (_m *AccessTrackingApi) ListAccessLogsByHostname(ctx context.Context, groupId string, hostname string) admin.ListAccessLogsByHostnameApiRequest {
	ret := _m.Called(ctx, groupId, hostname)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByHostname")
	}

	var r0 admin.ListAccessLogsByHostnameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListAccessLogsByHostnameApiRequest); ok {
		r0 = rf(ctx, groupId, hostname)
	} else {
		r0 = ret.Get(0).(admin.ListAccessLogsByHostnameApiRequest)
	}

	return r0
}

// AccessTrackingApi_ListAccessLogsByHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByHostname'
type AccessTrackingApi_ListAccessLogsByHostname_Call struct {
	*mock.Call
}

// ListAccessLogsByHostname is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - hostname string
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByHostname(ctx interface{}, groupId interface{}, hostname interface{}) *AccessTrackingApi_ListAccessLogsByHostname_Call {
	return &AccessTrackingApi_ListAccessLogsByHostname_Call{Call: _e.mock.On("ListAccessLogsByHostname", ctx, groupId, hostname)}
}

func (_c *AccessTrackingApi_ListAccessLogsByHostname_Call) Run(run func(ctx context.Context, groupId string, hostname string)) *AccessTrackingApi_ListAccessLogsByHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostname_Call) Return(_a0 admin.ListAccessLogsByHostnameApiRequest) *AccessTrackingApi_ListAccessLogsByHostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostname_Call) RunAndReturn(run func(context.Context, string, string) admin.ListAccessLogsByHostnameApiRequest) *AccessTrackingApi_ListAccessLogsByHostname_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessLogsByHostnameExecute provides a mock function with given fields: r
func (_m *AccessTrackingApi) ListAccessLogsByHostnameExecute(r admin.ListAccessLogsByHostnameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByHostnameExecute")
	}

	var r0 *admin.MongoDBAccessLogsList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAccessLogsByHostnameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAccessLogsByHostnameApiRequest) *admin.MongoDBAccessLogsList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MongoDBAccessLogsList)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAccessLogsByHostnameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAccessLogsByHostnameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessTrackingApi_ListAccessLogsByHostnameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByHostnameExecute'
type AccessTrackingApi_ListAccessLogsByHostnameExecute_Call struct {
	*mock.Call
}

// ListAccessLogsByHostnameExecute is a helper method to define mock.On call
//   - r admin.ListAccessLogsByHostnameApiRequest
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByHostnameExecute(r interface{}) *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call {
	return &AccessTrackingApi_ListAccessLogsByHostnameExecute_Call{Call: _e.mock.On("ListAccessLogsByHostnameExecute", r)}
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call) Run(run func(r admin.ListAccessLogsByHostnameApiRequest)) *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAccessLogsByHostnameApiRequest))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call) Return(_a0 *admin.MongoDBAccessLogsList, _a1 *http.Response, _a2 error) *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call) RunAndReturn(run func(admin.ListAccessLogsByHostnameApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)) *AccessTrackingApi_ListAccessLogsByHostnameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessLogsByHostnameWithParams provides a mock function with given fields: ctx, args
func (_m *AccessTrackingApi) ListAccessLogsByHostnameWithParams(ctx context.Context, args *admin.ListAccessLogsByHostnameApiParams) admin.ListAccessLogsByHostnameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogsByHostnameWithParams")
	}

	var r0 admin.ListAccessLogsByHostnameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAccessLogsByHostnameApiParams) admin.ListAccessLogsByHostnameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAccessLogsByHostnameApiRequest)
	}

	return r0
}

// AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessLogsByHostnameWithParams'
type AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call struct {
	*mock.Call
}

// ListAccessLogsByHostnameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAccessLogsByHostnameApiParams
func (_e *AccessTrackingApi_Expecter) ListAccessLogsByHostnameWithParams(ctx interface{}, args interface{}) *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call {
	return &AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call{Call: _e.mock.On("ListAccessLogsByHostnameWithParams", ctx, args)}
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAccessLogsByHostnameApiParams)) *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAccessLogsByHostnameApiParams))
	})
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call) Return(_a0 admin.ListAccessLogsByHostnameApiRequest) *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAccessLogsByHostnameApiParams) admin.ListAccessLogsByHostnameApiRequest) *AccessTrackingApi_ListAccessLogsByHostnameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessTrackingApi creates a new instance of AccessTrackingApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessTrackingApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessTrackingApi {
	mock := &AccessTrackingApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
