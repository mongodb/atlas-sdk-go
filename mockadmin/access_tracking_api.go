// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AccessTrackingApi is an autogenerated mock type for the AccessTrackingApi type
type AccessTrackingApi struct {
	mock.Mock
}

type AccessTrackingApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessTrackingApi) EXPECT() *AccessTrackingApi_Expecter {
	return &AccessTrackingApi_Expecter{mock: &_m.Mock}
}

// GetAccessHistoryCluster provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AccessTrackingApi) GetAccessHistoryCluster(ctx context.Context, groupId string, clusterName string) admin.GetAccessHistoryClusterApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryCluster")
	}

	var r0 admin.GetAccessHistoryClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAccessHistoryClusterApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetAccessHistoryClusterApiRequest)
	}

	return r0
}

// AccessTrackingApi_GetAccessHistoryCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryCluster'
type AccessTrackingApi_GetAccessHistoryCluster_Call struct {
	*mock.Call
}

// GetAccessHistoryCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryCluster(ctx any, groupId any, clusterName any) *AccessTrackingApi_GetAccessHistoryCluster_Call {
	return &AccessTrackingApi_GetAccessHistoryCluster_Call{Call: _e.mock.On("GetAccessHistoryCluster", ctx, groupId, clusterName)}
}

func (_c *AccessTrackingApi_GetAccessHistoryCluster_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AccessTrackingApi_GetAccessHistoryCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryCluster_Call) Return(_a0 admin.GetAccessHistoryClusterApiRequest) *AccessTrackingApi_GetAccessHistoryCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryCluster_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAccessHistoryClusterApiRequest) *AccessTrackingApi_GetAccessHistoryCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessHistoryClusterExecute provides a mock function with given fields: r
func (_m *AccessTrackingApi) GetAccessHistoryClusterExecute(r admin.GetAccessHistoryClusterApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryClusterExecute")
	}

	var r0 *admin.MongoDBAccessLogsList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAccessHistoryClusterApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAccessHistoryClusterApiRequest) *admin.MongoDBAccessLogsList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MongoDBAccessLogsList)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAccessHistoryClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAccessHistoryClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessTrackingApi_GetAccessHistoryClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryClusterExecute'
type AccessTrackingApi_GetAccessHistoryClusterExecute_Call struct {
	*mock.Call
}

// GetAccessHistoryClusterExecute is a helper method to define mock.On call
//   - r admin.GetAccessHistoryClusterApiRequest
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryClusterExecute(r any) *AccessTrackingApi_GetAccessHistoryClusterExecute_Call {
	return &AccessTrackingApi_GetAccessHistoryClusterExecute_Call{Call: _e.mock.On("GetAccessHistoryClusterExecute", r)}
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterExecute_Call) Run(run func(r admin.GetAccessHistoryClusterApiRequest)) *AccessTrackingApi_GetAccessHistoryClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAccessHistoryClusterApiRequest))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterExecute_Call) Return(_a0 *admin.MongoDBAccessLogsList, _a1 *http.Response, _a2 error) *AccessTrackingApi_GetAccessHistoryClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterExecute_Call) RunAndReturn(run func(admin.GetAccessHistoryClusterApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)) *AccessTrackingApi_GetAccessHistoryClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessHistoryClusterWithParams provides a mock function with given fields: ctx, args
func (_m *AccessTrackingApi) GetAccessHistoryClusterWithParams(ctx context.Context, args *admin.GetAccessHistoryClusterApiParams) admin.GetAccessHistoryClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryClusterWithParams")
	}

	var r0 admin.GetAccessHistoryClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAccessHistoryClusterApiParams) admin.GetAccessHistoryClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAccessHistoryClusterApiRequest)
	}

	return r0
}

// AccessTrackingApi_GetAccessHistoryClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryClusterWithParams'
type AccessTrackingApi_GetAccessHistoryClusterWithParams_Call struct {
	*mock.Call
}

// GetAccessHistoryClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAccessHistoryClusterApiParams
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryClusterWithParams(ctx any, args any) *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call {
	return &AccessTrackingApi_GetAccessHistoryClusterWithParams_Call{Call: _e.mock.On("GetAccessHistoryClusterWithParams", ctx, args)}
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAccessHistoryClusterApiParams)) *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAccessHistoryClusterApiParams))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call) Return(_a0 admin.GetAccessHistoryClusterApiRequest) *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAccessHistoryClusterApiParams) admin.GetAccessHistoryClusterApiRequest) *AccessTrackingApi_GetAccessHistoryClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessHistoryProcess provides a mock function with given fields: ctx, groupId, hostname
func (_m *AccessTrackingApi) GetAccessHistoryProcess(ctx context.Context, groupId string, hostname string) admin.GetAccessHistoryProcessApiRequest {
	ret := _m.Called(ctx, groupId, hostname)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryProcess")
	}

	var r0 admin.GetAccessHistoryProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAccessHistoryProcessApiRequest); ok {
		r0 = rf(ctx, groupId, hostname)
	} else {
		r0 = ret.Get(0).(admin.GetAccessHistoryProcessApiRequest)
	}

	return r0
}

// AccessTrackingApi_GetAccessHistoryProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryProcess'
type AccessTrackingApi_GetAccessHistoryProcess_Call struct {
	*mock.Call
}

// GetAccessHistoryProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - hostname string
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryProcess(ctx any, groupId any, hostname any) *AccessTrackingApi_GetAccessHistoryProcess_Call {
	return &AccessTrackingApi_GetAccessHistoryProcess_Call{Call: _e.mock.On("GetAccessHistoryProcess", ctx, groupId, hostname)}
}

func (_c *AccessTrackingApi_GetAccessHistoryProcess_Call) Run(run func(ctx context.Context, groupId string, hostname string)) *AccessTrackingApi_GetAccessHistoryProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcess_Call) Return(_a0 admin.GetAccessHistoryProcessApiRequest) *AccessTrackingApi_GetAccessHistoryProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcess_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAccessHistoryProcessApiRequest) *AccessTrackingApi_GetAccessHistoryProcess_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessHistoryProcessExecute provides a mock function with given fields: r
func (_m *AccessTrackingApi) GetAccessHistoryProcessExecute(r admin.GetAccessHistoryProcessApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryProcessExecute")
	}

	var r0 *admin.MongoDBAccessLogsList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAccessHistoryProcessApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAccessHistoryProcessApiRequest) *admin.MongoDBAccessLogsList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MongoDBAccessLogsList)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAccessHistoryProcessApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAccessHistoryProcessApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessTrackingApi_GetAccessHistoryProcessExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryProcessExecute'
type AccessTrackingApi_GetAccessHistoryProcessExecute_Call struct {
	*mock.Call
}

// GetAccessHistoryProcessExecute is a helper method to define mock.On call
//   - r admin.GetAccessHistoryProcessApiRequest
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryProcessExecute(r any) *AccessTrackingApi_GetAccessHistoryProcessExecute_Call {
	return &AccessTrackingApi_GetAccessHistoryProcessExecute_Call{Call: _e.mock.On("GetAccessHistoryProcessExecute", r)}
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessExecute_Call) Run(run func(r admin.GetAccessHistoryProcessApiRequest)) *AccessTrackingApi_GetAccessHistoryProcessExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAccessHistoryProcessApiRequest))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessExecute_Call) Return(_a0 *admin.MongoDBAccessLogsList, _a1 *http.Response, _a2 error) *AccessTrackingApi_GetAccessHistoryProcessExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessExecute_Call) RunAndReturn(run func(admin.GetAccessHistoryProcessApiRequest) (*admin.MongoDBAccessLogsList, *http.Response, error)) *AccessTrackingApi_GetAccessHistoryProcessExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessHistoryProcessWithParams provides a mock function with given fields: ctx, args
func (_m *AccessTrackingApi) GetAccessHistoryProcessWithParams(ctx context.Context, args *admin.GetAccessHistoryProcessApiParams) admin.GetAccessHistoryProcessApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessHistoryProcessWithParams")
	}

	var r0 admin.GetAccessHistoryProcessApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAccessHistoryProcessApiParams) admin.GetAccessHistoryProcessApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAccessHistoryProcessApiRequest)
	}

	return r0
}

// AccessTrackingApi_GetAccessHistoryProcessWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessHistoryProcessWithParams'
type AccessTrackingApi_GetAccessHistoryProcessWithParams_Call struct {
	*mock.Call
}

// GetAccessHistoryProcessWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAccessHistoryProcessApiParams
func (_e *AccessTrackingApi_Expecter) GetAccessHistoryProcessWithParams(ctx any, args any) *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call {
	return &AccessTrackingApi_GetAccessHistoryProcessWithParams_Call{Call: _e.mock.On("GetAccessHistoryProcessWithParams", ctx, args)}
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAccessHistoryProcessApiParams)) *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAccessHistoryProcessApiParams))
	})
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call) Return(_a0 admin.GetAccessHistoryProcessApiRequest) *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAccessHistoryProcessApiParams) admin.GetAccessHistoryProcessApiRequest) *AccessTrackingApi_GetAccessHistoryProcessWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessTrackingApi creates a new instance of AccessTrackingApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessTrackingApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessTrackingApi {
	mock := &AccessTrackingApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
