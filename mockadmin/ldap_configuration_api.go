// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115012/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// LDAPConfigurationApi is an autogenerated mock type for the LDAPConfigurationApi type
type LDAPConfigurationApi struct {
	mock.Mock
}

type LDAPConfigurationApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LDAPConfigurationApi) EXPECT() *LDAPConfigurationApi_Expecter {
	return &LDAPConfigurationApi_Expecter{mock: &_m.Mock}
}

// DeleteLDAPConfiguration provides a mock function with given fields: ctx, groupId
func (_m *LDAPConfigurationApi) DeleteLDAPConfiguration(ctx context.Context, groupId string) admin.DeleteLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLDAPConfiguration")
	}

	var r0 admin.DeleteLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_DeleteLDAPConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLDAPConfiguration'
type LDAPConfigurationApi_DeleteLDAPConfiguration_Call struct {
	*mock.Call
}

// DeleteLDAPConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *LDAPConfigurationApi_Expecter) DeleteLDAPConfiguration(ctx interface{}, groupId interface{}) *LDAPConfigurationApi_DeleteLDAPConfiguration_Call {
	return &LDAPConfigurationApi_DeleteLDAPConfiguration_Call{Call: _e.mock.On("DeleteLDAPConfiguration", ctx, groupId)}
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfiguration_Call) Run(run func(ctx context.Context, groupId string)) *LDAPConfigurationApi_DeleteLDAPConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfiguration_Call) Return(_a0 admin.DeleteLDAPConfigurationApiRequest) *LDAPConfigurationApi_DeleteLDAPConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfiguration_Call) RunAndReturn(run func(context.Context, string) admin.DeleteLDAPConfigurationApiRequest) *LDAPConfigurationApi_DeleteLDAPConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLDAPConfigurationExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) DeleteLDAPConfigurationExecute(r admin.DeleteLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLDAPConfigurationExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteLDAPConfigurationApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteLDAPConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteLDAPConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLDAPConfigurationExecute'
type LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call struct {
	*mock.Call
}

// DeleteLDAPConfigurationExecute is a helper method to define mock.On call
//   - r admin.DeleteLDAPConfigurationApiRequest
func (_e *LDAPConfigurationApi_Expecter) DeleteLDAPConfigurationExecute(r interface{}) *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call {
	return &LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call{Call: _e.mock.On("DeleteLDAPConfigurationExecute", r)}
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call) Run(run func(r admin.DeleteLDAPConfigurationApiRequest)) *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteLDAPConfigurationApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call) RunAndReturn(run func(admin.DeleteLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_DeleteLDAPConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLDAPConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) DeleteLDAPConfigurationWithParams(ctx context.Context, args *admin.DeleteLDAPConfigurationApiParams) admin.DeleteLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLDAPConfigurationWithParams")
	}

	var r0 admin.DeleteLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteLDAPConfigurationApiParams) admin.DeleteLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLDAPConfigurationWithParams'
type LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call struct {
	*mock.Call
}

// DeleteLDAPConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteLDAPConfigurationApiParams
func (_e *LDAPConfigurationApi_Expecter) DeleteLDAPConfigurationWithParams(ctx interface{}, args interface{}) *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call {
	return &LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call{Call: _e.mock.On("DeleteLDAPConfigurationWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteLDAPConfigurationApiParams)) *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteLDAPConfigurationApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call) Return(_a0 admin.DeleteLDAPConfigurationApiRequest) *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteLDAPConfigurationApiParams) admin.DeleteLDAPConfigurationApiRequest) *LDAPConfigurationApi_DeleteLDAPConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfiguration provides a mock function with given fields: ctx, groupId
func (_m *LDAPConfigurationApi) GetLDAPConfiguration(ctx context.Context, groupId string) admin.GetLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfiguration")
	}

	var r0 admin.GetLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetLDAPConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfiguration'
type LDAPConfigurationApi_GetLDAPConfiguration_Call struct {
	*mock.Call
}

// GetLDAPConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfiguration(ctx interface{}, groupId interface{}) *LDAPConfigurationApi_GetLDAPConfiguration_Call {
	return &LDAPConfigurationApi_GetLDAPConfiguration_Call{Call: _e.mock.On("GetLDAPConfiguration", ctx, groupId)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfiguration_Call) Run(run func(ctx context.Context, groupId string)) *LDAPConfigurationApi_GetLDAPConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfiguration_Call) Return(_a0 admin.GetLDAPConfigurationApiRequest) *LDAPConfigurationApi_GetLDAPConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfiguration_Call) RunAndReturn(run func(context.Context, string) admin.GetLDAPConfigurationApiRequest) *LDAPConfigurationApi_GetLDAPConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfigurationExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) GetLDAPConfigurationExecute(r admin.GetLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfigurationExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetLDAPConfigurationApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetLDAPConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetLDAPConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_GetLDAPConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfigurationExecute'
type LDAPConfigurationApi_GetLDAPConfigurationExecute_Call struct {
	*mock.Call
}

// GetLDAPConfigurationExecute is a helper method to define mock.On call
//   - r admin.GetLDAPConfigurationApiRequest
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfigurationExecute(r interface{}) *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call {
	return &LDAPConfigurationApi_GetLDAPConfigurationExecute_Call{Call: _e.mock.On("GetLDAPConfigurationExecute", r)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call) Run(run func(r admin.GetLDAPConfigurationApiRequest)) *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetLDAPConfigurationApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call) RunAndReturn(run func(admin.GetLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_GetLDAPConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfigurationStatus provides a mock function with given fields: ctx, groupId, requestId
func (_m *LDAPConfigurationApi) GetLDAPConfigurationStatus(ctx context.Context, groupId string, requestId string) admin.GetLDAPConfigurationStatusApiRequest {
	ret := _m.Called(ctx, groupId, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfigurationStatus")
	}

	var r0 admin.GetLDAPConfigurationStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetLDAPConfigurationStatusApiRequest); ok {
		r0 = rf(ctx, groupId, requestId)
	} else {
		r0 = ret.Get(0).(admin.GetLDAPConfigurationStatusApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetLDAPConfigurationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfigurationStatus'
type LDAPConfigurationApi_GetLDAPConfigurationStatus_Call struct {
	*mock.Call
}

// GetLDAPConfigurationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - requestId string
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfigurationStatus(ctx interface{}, groupId interface{}, requestId interface{}) *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call {
	return &LDAPConfigurationApi_GetLDAPConfigurationStatus_Call{Call: _e.mock.On("GetLDAPConfigurationStatus", ctx, groupId, requestId)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call) Run(run func(ctx context.Context, groupId string, requestId string)) *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call) Return(_a0 admin.GetLDAPConfigurationStatusApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call) RunAndReturn(run func(context.Context, string, string) admin.GetLDAPConfigurationStatusApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfigurationStatusExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) GetLDAPConfigurationStatusExecute(r admin.GetLDAPConfigurationStatusApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfigurationStatusExecute")
	}

	var r0 *admin.LDAPVerifyConnectivityJobRequest
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetLDAPConfigurationStatusApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetLDAPConfigurationStatusApiRequest) *admin.LDAPVerifyConnectivityJobRequest); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LDAPVerifyConnectivityJobRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetLDAPConfigurationStatusApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetLDAPConfigurationStatusApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfigurationStatusExecute'
type LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call struct {
	*mock.Call
}

// GetLDAPConfigurationStatusExecute is a helper method to define mock.On call
//   - r admin.GetLDAPConfigurationStatusApiRequest
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfigurationStatusExecute(r interface{}) *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call {
	return &LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call{Call: _e.mock.On("GetLDAPConfigurationStatusExecute", r)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call) Run(run func(r admin.GetLDAPConfigurationStatusApiRequest)) *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetLDAPConfigurationStatusApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call) Return(_a0 *admin.LDAPVerifyConnectivityJobRequest, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call) RunAndReturn(run func(admin.GetLDAPConfigurationStatusApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)) *LDAPConfigurationApi_GetLDAPConfigurationStatusExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfigurationStatusWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) GetLDAPConfigurationStatusWithParams(ctx context.Context, args *admin.GetLDAPConfigurationStatusApiParams) admin.GetLDAPConfigurationStatusApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfigurationStatusWithParams")
	}

	var r0 admin.GetLDAPConfigurationStatusApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetLDAPConfigurationStatusApiParams) admin.GetLDAPConfigurationStatusApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetLDAPConfigurationStatusApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfigurationStatusWithParams'
type LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call struct {
	*mock.Call
}

// GetLDAPConfigurationStatusWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetLDAPConfigurationStatusApiParams
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfigurationStatusWithParams(ctx interface{}, args interface{}) *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call {
	return &LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call{Call: _e.mock.On("GetLDAPConfigurationStatusWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call) Run(run func(ctx context.Context, args *admin.GetLDAPConfigurationStatusApiParams)) *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetLDAPConfigurationStatusApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call) Return(_a0 admin.GetLDAPConfigurationStatusApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetLDAPConfigurationStatusApiParams) admin.GetLDAPConfigurationStatusApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationStatusWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) GetLDAPConfigurationWithParams(ctx context.Context, args *admin.GetLDAPConfigurationApiParams) admin.GetLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfigurationWithParams")
	}

	var r0 admin.GetLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetLDAPConfigurationApiParams) admin.GetLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfigurationWithParams'
type LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call struct {
	*mock.Call
}

// GetLDAPConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetLDAPConfigurationApiParams
func (_e *LDAPConfigurationApi_Expecter) GetLDAPConfigurationWithParams(ctx interface{}, args interface{}) *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call {
	return &LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call{Call: _e.mock.On("GetLDAPConfigurationWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetLDAPConfigurationApiParams)) *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetLDAPConfigurationApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call) Return(_a0 admin.GetLDAPConfigurationApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetLDAPConfigurationApiParams) admin.GetLDAPConfigurationApiRequest) *LDAPConfigurationApi_GetLDAPConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLDAPConfiguration provides a mock function with given fields: ctx, groupId, userSecurity
func (_m *LDAPConfigurationApi) SaveLDAPConfiguration(ctx context.Context, groupId string, userSecurity *admin.UserSecurity) admin.SaveLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, userSecurity)

	if len(ret) == 0 {
		panic("no return value specified for SaveLDAPConfiguration")
	}

	var r0 admin.SaveLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.UserSecurity) admin.SaveLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, userSecurity)
	} else {
		r0 = ret.Get(0).(admin.SaveLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_SaveLDAPConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLDAPConfiguration'
type LDAPConfigurationApi_SaveLDAPConfiguration_Call struct {
	*mock.Call
}

// SaveLDAPConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userSecurity *admin.UserSecurity
func (_e *LDAPConfigurationApi_Expecter) SaveLDAPConfiguration(ctx interface{}, groupId interface{}, userSecurity interface{}) *LDAPConfigurationApi_SaveLDAPConfiguration_Call {
	return &LDAPConfigurationApi_SaveLDAPConfiguration_Call{Call: _e.mock.On("SaveLDAPConfiguration", ctx, groupId, userSecurity)}
}

func (_c *LDAPConfigurationApi_SaveLDAPConfiguration_Call) Run(run func(ctx context.Context, groupId string, userSecurity *admin.UserSecurity)) *LDAPConfigurationApi_SaveLDAPConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.UserSecurity))
	})
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfiguration_Call) Return(_a0 admin.SaveLDAPConfigurationApiRequest) *LDAPConfigurationApi_SaveLDAPConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfiguration_Call) RunAndReturn(run func(context.Context, string, *admin.UserSecurity) admin.SaveLDAPConfigurationApiRequest) *LDAPConfigurationApi_SaveLDAPConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLDAPConfigurationExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) SaveLDAPConfigurationExecute(r admin.SaveLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SaveLDAPConfigurationExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.SaveLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SaveLDAPConfigurationApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SaveLDAPConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.SaveLDAPConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLDAPConfigurationExecute'
type LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call struct {
	*mock.Call
}

// SaveLDAPConfigurationExecute is a helper method to define mock.On call
//   - r admin.SaveLDAPConfigurationApiRequest
func (_e *LDAPConfigurationApi_Expecter) SaveLDAPConfigurationExecute(r interface{}) *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call {
	return &LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call{Call: _e.mock.On("SaveLDAPConfigurationExecute", r)}
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call) Run(run func(r admin.SaveLDAPConfigurationApiRequest)) *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SaveLDAPConfigurationApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call) RunAndReturn(run func(admin.SaveLDAPConfigurationApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_SaveLDAPConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLDAPConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) SaveLDAPConfigurationWithParams(ctx context.Context, args *admin.SaveLDAPConfigurationApiParams) admin.SaveLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SaveLDAPConfigurationWithParams")
	}

	var r0 admin.SaveLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SaveLDAPConfigurationApiParams) admin.SaveLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SaveLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLDAPConfigurationWithParams'
type LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call struct {
	*mock.Call
}

// SaveLDAPConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SaveLDAPConfigurationApiParams
func (_e *LDAPConfigurationApi_Expecter) SaveLDAPConfigurationWithParams(ctx interface{}, args interface{}) *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call {
	return &LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call{Call: _e.mock.On("SaveLDAPConfigurationWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.SaveLDAPConfigurationApiParams)) *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SaveLDAPConfigurationApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call) Return(_a0 admin.SaveLDAPConfigurationApiRequest) *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.SaveLDAPConfigurationApiParams) admin.SaveLDAPConfigurationApiRequest) *LDAPConfigurationApi_SaveLDAPConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyLDAPConfiguration provides a mock function with given fields: ctx, groupId, lDAPVerifyConnectivityJobRequestParams
func (_m *LDAPConfigurationApi) VerifyLDAPConfiguration(ctx context.Context, groupId string, lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, groupId, lDAPVerifyConnectivityJobRequestParams)

	if len(ret) == 0 {
		panic("no return value specified for VerifyLDAPConfiguration")
	}

	var r0 admin.VerifyLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, groupId, lDAPVerifyConnectivityJobRequestParams)
	} else {
		r0 = ret.Get(0).(admin.VerifyLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_VerifyLDAPConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyLDAPConfiguration'
type LDAPConfigurationApi_VerifyLDAPConfiguration_Call struct {
	*mock.Call
}

// VerifyLDAPConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams
func (_e *LDAPConfigurationApi_Expecter) VerifyLDAPConfiguration(ctx interface{}, groupId interface{}, lDAPVerifyConnectivityJobRequestParams interface{}) *LDAPConfigurationApi_VerifyLDAPConfiguration_Call {
	return &LDAPConfigurationApi_VerifyLDAPConfiguration_Call{Call: _e.mock.On("VerifyLDAPConfiguration", ctx, groupId, lDAPVerifyConnectivityJobRequestParams)}
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfiguration_Call) Run(run func(ctx context.Context, groupId string, lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams)) *LDAPConfigurationApi_VerifyLDAPConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.LDAPVerifyConnectivityJobRequestParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfiguration_Call) Return(_a0 admin.VerifyLDAPConfigurationApiRequest) *LDAPConfigurationApi_VerifyLDAPConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfiguration_Call) RunAndReturn(run func(context.Context, string, *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyLDAPConfigurationApiRequest) *LDAPConfigurationApi_VerifyLDAPConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyLDAPConfigurationExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) VerifyLDAPConfigurationExecute(r admin.VerifyLDAPConfigurationApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VerifyLDAPConfigurationExecute")
	}

	var r0 *admin.LDAPVerifyConnectivityJobRequest
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.VerifyLDAPConfigurationApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.VerifyLDAPConfigurationApiRequest) *admin.LDAPVerifyConnectivityJobRequest); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LDAPVerifyConnectivityJobRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.VerifyLDAPConfigurationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.VerifyLDAPConfigurationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyLDAPConfigurationExecute'
type LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call struct {
	*mock.Call
}

// VerifyLDAPConfigurationExecute is a helper method to define mock.On call
//   - r admin.VerifyLDAPConfigurationApiRequest
func (_e *LDAPConfigurationApi_Expecter) VerifyLDAPConfigurationExecute(r interface{}) *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call {
	return &LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call{Call: _e.mock.On("VerifyLDAPConfigurationExecute", r)}
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call) Run(run func(r admin.VerifyLDAPConfigurationApiRequest)) *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.VerifyLDAPConfigurationApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call) Return(_a0 *admin.LDAPVerifyConnectivityJobRequest, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call) RunAndReturn(run func(admin.VerifyLDAPConfigurationApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)) *LDAPConfigurationApi_VerifyLDAPConfigurationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyLDAPConfigurationWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) VerifyLDAPConfigurationWithParams(ctx context.Context, args *admin.VerifyLDAPConfigurationApiParams) admin.VerifyLDAPConfigurationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for VerifyLDAPConfigurationWithParams")
	}

	var r0 admin.VerifyLDAPConfigurationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.VerifyLDAPConfigurationApiParams) admin.VerifyLDAPConfigurationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.VerifyLDAPConfigurationApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyLDAPConfigurationWithParams'
type LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call struct {
	*mock.Call
}

// VerifyLDAPConfigurationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.VerifyLDAPConfigurationApiParams
func (_e *LDAPConfigurationApi_Expecter) VerifyLDAPConfigurationWithParams(ctx interface{}, args interface{}) *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call {
	return &LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call{Call: _e.mock.On("VerifyLDAPConfigurationWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call) Run(run func(ctx context.Context, args *admin.VerifyLDAPConfigurationApiParams)) *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.VerifyLDAPConfigurationApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call) Return(_a0 admin.VerifyLDAPConfigurationApiRequest) *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call) RunAndReturn(run func(context.Context, *admin.VerifyLDAPConfigurationApiParams) admin.VerifyLDAPConfigurationApiRequest) *LDAPConfigurationApi_VerifyLDAPConfigurationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewLDAPConfigurationApi creates a new instance of LDAPConfigurationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLDAPConfigurationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LDAPConfigurationApi {
	mock := &LDAPConfigurationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
