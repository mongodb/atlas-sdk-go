// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// LDAPConfigurationApi is an autogenerated mock type for the LDAPConfigurationApi type
type LDAPConfigurationApi struct {
	mock.Mock
}

type LDAPConfigurationApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LDAPConfigurationApi) EXPECT() *LDAPConfigurationApi_Expecter {
	return &LDAPConfigurationApi_Expecter{mock: &_m.Mock}
}

// DeleteLdapUserMapping provides a mock function with given fields: ctx, groupId
func (_m *LDAPConfigurationApi) DeleteLdapUserMapping(ctx context.Context, groupId string) admin.DeleteLdapUserMappingApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUserMapping")
	}

	var r0 admin.DeleteLdapUserMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteLdapUserMappingApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteLdapUserMappingApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_DeleteLdapUserMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUserMapping'
type LDAPConfigurationApi_DeleteLdapUserMapping_Call struct {
	*mock.Call
}

// DeleteLdapUserMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *LDAPConfigurationApi_Expecter) DeleteLdapUserMapping(ctx any, groupId any) *LDAPConfigurationApi_DeleteLdapUserMapping_Call {
	return &LDAPConfigurationApi_DeleteLdapUserMapping_Call{Call: _e.mock.On("DeleteLdapUserMapping", ctx, groupId)}
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMapping_Call) Run(run func(ctx context.Context, groupId string)) *LDAPConfigurationApi_DeleteLdapUserMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMapping_Call) Return(_a0 admin.DeleteLdapUserMappingApiRequest) *LDAPConfigurationApi_DeleteLdapUserMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMapping_Call) RunAndReturn(run func(context.Context, string) admin.DeleteLdapUserMappingApiRequest) *LDAPConfigurationApi_DeleteLdapUserMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUserMappingExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) DeleteLdapUserMappingExecute(r admin.DeleteLdapUserMappingApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUserMappingExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteLdapUserMappingApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteLdapUserMappingApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteLdapUserMappingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteLdapUserMappingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUserMappingExecute'
type LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call struct {
	*mock.Call
}

// DeleteLdapUserMappingExecute is a helper method to define mock.On call
//   - r admin.DeleteLdapUserMappingApiRequest
func (_e *LDAPConfigurationApi_Expecter) DeleteLdapUserMappingExecute(r any) *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call {
	return &LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call{Call: _e.mock.On("DeleteLdapUserMappingExecute", r)}
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call) Run(run func(r admin.DeleteLdapUserMappingApiRequest)) *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteLdapUserMappingApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call) RunAndReturn(run func(admin.DeleteLdapUserMappingApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_DeleteLdapUserMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUserMappingWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) DeleteLdapUserMappingWithParams(ctx context.Context, args *admin.DeleteLdapUserMappingApiParams) admin.DeleteLdapUserMappingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUserMappingWithParams")
	}

	var r0 admin.DeleteLdapUserMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteLdapUserMappingApiParams) admin.DeleteLdapUserMappingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteLdapUserMappingApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUserMappingWithParams'
type LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call struct {
	*mock.Call
}

// DeleteLdapUserMappingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteLdapUserMappingApiParams
func (_e *LDAPConfigurationApi_Expecter) DeleteLdapUserMappingWithParams(ctx any, args any) *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call {
	return &LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call{Call: _e.mock.On("DeleteLdapUserMappingWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteLdapUserMappingApiParams)) *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteLdapUserMappingApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call) Return(_a0 admin.DeleteLdapUserMappingApiRequest) *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteLdapUserMappingApiParams) admin.DeleteLdapUserMappingApiRequest) *LDAPConfigurationApi_DeleteLdapUserMappingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurity provides a mock function with given fields: ctx, groupId
func (_m *LDAPConfigurationApi) GetUserSecurity(ctx context.Context, groupId string) admin.GetUserSecurityApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurity")
	}

	var r0 admin.GetUserSecurityApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetUserSecurityApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetUserSecurityApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetUserSecurity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurity'
type LDAPConfigurationApi_GetUserSecurity_Call struct {
	*mock.Call
}

// GetUserSecurity is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurity(ctx any, groupId any) *LDAPConfigurationApi_GetUserSecurity_Call {
	return &LDAPConfigurationApi_GetUserSecurity_Call{Call: _e.mock.On("GetUserSecurity", ctx, groupId)}
}

func (_c *LDAPConfigurationApi_GetUserSecurity_Call) Run(run func(ctx context.Context, groupId string)) *LDAPConfigurationApi_GetUserSecurity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurity_Call) Return(_a0 admin.GetUserSecurityApiRequest) *LDAPConfigurationApi_GetUserSecurity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurity_Call) RunAndReturn(run func(context.Context, string) admin.GetUserSecurityApiRequest) *LDAPConfigurationApi_GetUserSecurity_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurityExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) GetUserSecurityExecute(r admin.GetUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurityExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserSecurityApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserSecurityApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserSecurityApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_GetUserSecurityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurityExecute'
type LDAPConfigurationApi_GetUserSecurityExecute_Call struct {
	*mock.Call
}

// GetUserSecurityExecute is a helper method to define mock.On call
//   - r admin.GetUserSecurityApiRequest
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurityExecute(r any) *LDAPConfigurationApi_GetUserSecurityExecute_Call {
	return &LDAPConfigurationApi_GetUserSecurityExecute_Call{Call: _e.mock.On("GetUserSecurityExecute", r)}
}

func (_c *LDAPConfigurationApi_GetUserSecurityExecute_Call) Run(run func(r admin.GetUserSecurityApiRequest)) *LDAPConfigurationApi_GetUserSecurityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserSecurityApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_GetUserSecurityExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityExecute_Call) RunAndReturn(run func(admin.GetUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_GetUserSecurityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurityVerify provides a mock function with given fields: ctx, groupId, requestId
func (_m *LDAPConfigurationApi) GetUserSecurityVerify(ctx context.Context, groupId string, requestId string) admin.GetUserSecurityVerifyApiRequest {
	ret := _m.Called(ctx, groupId, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurityVerify")
	}

	var r0 admin.GetUserSecurityVerifyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetUserSecurityVerifyApiRequest); ok {
		r0 = rf(ctx, groupId, requestId)
	} else {
		r0 = ret.Get(0).(admin.GetUserSecurityVerifyApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetUserSecurityVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurityVerify'
type LDAPConfigurationApi_GetUserSecurityVerify_Call struct {
	*mock.Call
}

// GetUserSecurityVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - requestId string
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurityVerify(ctx any, groupId any, requestId any) *LDAPConfigurationApi_GetUserSecurityVerify_Call {
	return &LDAPConfigurationApi_GetUserSecurityVerify_Call{Call: _e.mock.On("GetUserSecurityVerify", ctx, groupId, requestId)}
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerify_Call) Run(run func(ctx context.Context, groupId string, requestId string)) *LDAPConfigurationApi_GetUserSecurityVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerify_Call) Return(_a0 admin.GetUserSecurityVerifyApiRequest) *LDAPConfigurationApi_GetUserSecurityVerify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerify_Call) RunAndReturn(run func(context.Context, string, string) admin.GetUserSecurityVerifyApiRequest) *LDAPConfigurationApi_GetUserSecurityVerify_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurityVerifyExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) GetUserSecurityVerifyExecute(r admin.GetUserSecurityVerifyApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurityVerifyExecute")
	}

	var r0 *admin.LDAPVerifyConnectivityJobRequest
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserSecurityVerifyApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserSecurityVerifyApiRequest) *admin.LDAPVerifyConnectivityJobRequest); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LDAPVerifyConnectivityJobRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserSecurityVerifyApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserSecurityVerifyApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurityVerifyExecute'
type LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call struct {
	*mock.Call
}

// GetUserSecurityVerifyExecute is a helper method to define mock.On call
//   - r admin.GetUserSecurityVerifyApiRequest
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurityVerifyExecute(r any) *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call {
	return &LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call{Call: _e.mock.On("GetUserSecurityVerifyExecute", r)}
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call) Run(run func(r admin.GetUserSecurityVerifyApiRequest)) *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserSecurityVerifyApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call) Return(_a0 *admin.LDAPVerifyConnectivityJobRequest, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call) RunAndReturn(run func(admin.GetUserSecurityVerifyApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)) *LDAPConfigurationApi_GetUserSecurityVerifyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurityVerifyWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) GetUserSecurityVerifyWithParams(ctx context.Context, args *admin.GetUserSecurityVerifyApiParams) admin.GetUserSecurityVerifyApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurityVerifyWithParams")
	}

	var r0 admin.GetUserSecurityVerifyApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserSecurityVerifyApiParams) admin.GetUserSecurityVerifyApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserSecurityVerifyApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurityVerifyWithParams'
type LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call struct {
	*mock.Call
}

// GetUserSecurityVerifyWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserSecurityVerifyApiParams
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurityVerifyWithParams(ctx any, args any) *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call {
	return &LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call{Call: _e.mock.On("GetUserSecurityVerifyWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserSecurityVerifyApiParams)) *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserSecurityVerifyApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call) Return(_a0 admin.GetUserSecurityVerifyApiRequest) *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserSecurityVerifyApiParams) admin.GetUserSecurityVerifyApiRequest) *LDAPConfigurationApi_GetUserSecurityVerifyWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSecurityWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) GetUserSecurityWithParams(ctx context.Context, args *admin.GetUserSecurityApiParams) admin.GetUserSecurityApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSecurityWithParams")
	}

	var r0 admin.GetUserSecurityApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserSecurityApiParams) admin.GetUserSecurityApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserSecurityApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_GetUserSecurityWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSecurityWithParams'
type LDAPConfigurationApi_GetUserSecurityWithParams_Call struct {
	*mock.Call
}

// GetUserSecurityWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserSecurityApiParams
func (_e *LDAPConfigurationApi_Expecter) GetUserSecurityWithParams(ctx any, args any) *LDAPConfigurationApi_GetUserSecurityWithParams_Call {
	return &LDAPConfigurationApi_GetUserSecurityWithParams_Call{Call: _e.mock.On("GetUserSecurityWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_GetUserSecurityWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserSecurityApiParams)) *LDAPConfigurationApi_GetUserSecurityWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserSecurityApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityWithParams_Call) Return(_a0 admin.GetUserSecurityApiRequest) *LDAPConfigurationApi_GetUserSecurityWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_GetUserSecurityWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserSecurityApiParams) admin.GetUserSecurityApiRequest) *LDAPConfigurationApi_GetUserSecurityWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSecurity provides a mock function with given fields: ctx, groupId, userSecurity
func (_m *LDAPConfigurationApi) UpdateUserSecurity(ctx context.Context, groupId string, userSecurity *admin.UserSecurity) admin.UpdateUserSecurityApiRequest {
	ret := _m.Called(ctx, groupId, userSecurity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSecurity")
	}

	var r0 admin.UpdateUserSecurityApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.UserSecurity) admin.UpdateUserSecurityApiRequest); ok {
		r0 = rf(ctx, groupId, userSecurity)
	} else {
		r0 = ret.Get(0).(admin.UpdateUserSecurityApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_UpdateUserSecurity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSecurity'
type LDAPConfigurationApi_UpdateUserSecurity_Call struct {
	*mock.Call
}

// UpdateUserSecurity is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userSecurity *admin.UserSecurity
func (_e *LDAPConfigurationApi_Expecter) UpdateUserSecurity(ctx any, groupId any, userSecurity any) *LDAPConfigurationApi_UpdateUserSecurity_Call {
	return &LDAPConfigurationApi_UpdateUserSecurity_Call{Call: _e.mock.On("UpdateUserSecurity", ctx, groupId, userSecurity)}
}

func (_c *LDAPConfigurationApi_UpdateUserSecurity_Call) Run(run func(ctx context.Context, groupId string, userSecurity *admin.UserSecurity)) *LDAPConfigurationApi_UpdateUserSecurity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.UserSecurity))
	})
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurity_Call) Return(_a0 admin.UpdateUserSecurityApiRequest) *LDAPConfigurationApi_UpdateUserSecurity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurity_Call) RunAndReturn(run func(context.Context, string, *admin.UserSecurity) admin.UpdateUserSecurityApiRequest) *LDAPConfigurationApi_UpdateUserSecurity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSecurityExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) UpdateUserSecurityExecute(r admin.UpdateUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSecurityExecute")
	}

	var r0 *admin.UserSecurity
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateUserSecurityApiRequest) *admin.UserSecurity); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UserSecurity)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateUserSecurityApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateUserSecurityApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_UpdateUserSecurityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSecurityExecute'
type LDAPConfigurationApi_UpdateUserSecurityExecute_Call struct {
	*mock.Call
}

// UpdateUserSecurityExecute is a helper method to define mock.On call
//   - r admin.UpdateUserSecurityApiRequest
func (_e *LDAPConfigurationApi_Expecter) UpdateUserSecurityExecute(r any) *LDAPConfigurationApi_UpdateUserSecurityExecute_Call {
	return &LDAPConfigurationApi_UpdateUserSecurityExecute_Call{Call: _e.mock.On("UpdateUserSecurityExecute", r)}
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityExecute_Call) Run(run func(r admin.UpdateUserSecurityApiRequest)) *LDAPConfigurationApi_UpdateUserSecurityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateUserSecurityApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityExecute_Call) Return(_a0 *admin.UserSecurity, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_UpdateUserSecurityExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityExecute_Call) RunAndReturn(run func(admin.UpdateUserSecurityApiRequest) (*admin.UserSecurity, *http.Response, error)) *LDAPConfigurationApi_UpdateUserSecurityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSecurityWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) UpdateUserSecurityWithParams(ctx context.Context, args *admin.UpdateUserSecurityApiParams) admin.UpdateUserSecurityApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSecurityWithParams")
	}

	var r0 admin.UpdateUserSecurityApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateUserSecurityApiParams) admin.UpdateUserSecurityApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateUserSecurityApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_UpdateUserSecurityWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSecurityWithParams'
type LDAPConfigurationApi_UpdateUserSecurityWithParams_Call struct {
	*mock.Call
}

// UpdateUserSecurityWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateUserSecurityApiParams
func (_e *LDAPConfigurationApi_Expecter) UpdateUserSecurityWithParams(ctx any, args any) *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call {
	return &LDAPConfigurationApi_UpdateUserSecurityWithParams_Call{Call: _e.mock.On("UpdateUserSecurityWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateUserSecurityApiParams)) *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateUserSecurityApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call) Return(_a0 admin.UpdateUserSecurityApiRequest) *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateUserSecurityApiParams) admin.UpdateUserSecurityApiRequest) *LDAPConfigurationApi_UpdateUserSecurityWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUserSecurityLdap provides a mock function with given fields: ctx, groupId, lDAPVerifyConnectivityJobRequestParams
func (_m *LDAPConfigurationApi) VerifyUserSecurityLdap(ctx context.Context, groupId string, lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyUserSecurityLdapApiRequest {
	ret := _m.Called(ctx, groupId, lDAPVerifyConnectivityJobRequestParams)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserSecurityLdap")
	}

	var r0 admin.VerifyUserSecurityLdapApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyUserSecurityLdapApiRequest); ok {
		r0 = rf(ctx, groupId, lDAPVerifyConnectivityJobRequestParams)
	} else {
		r0 = ret.Get(0).(admin.VerifyUserSecurityLdapApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_VerifyUserSecurityLdap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUserSecurityLdap'
type LDAPConfigurationApi_VerifyUserSecurityLdap_Call struct {
	*mock.Call
}

// VerifyUserSecurityLdap is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams
func (_e *LDAPConfigurationApi_Expecter) VerifyUserSecurityLdap(ctx any, groupId any, lDAPVerifyConnectivityJobRequestParams any) *LDAPConfigurationApi_VerifyUserSecurityLdap_Call {
	return &LDAPConfigurationApi_VerifyUserSecurityLdap_Call{Call: _e.mock.On("VerifyUserSecurityLdap", ctx, groupId, lDAPVerifyConnectivityJobRequestParams)}
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdap_Call) Run(run func(ctx context.Context, groupId string, lDAPVerifyConnectivityJobRequestParams *admin.LDAPVerifyConnectivityJobRequestParams)) *LDAPConfigurationApi_VerifyUserSecurityLdap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.LDAPVerifyConnectivityJobRequestParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdap_Call) Return(_a0 admin.VerifyUserSecurityLdapApiRequest) *LDAPConfigurationApi_VerifyUserSecurityLdap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdap_Call) RunAndReturn(run func(context.Context, string, *admin.LDAPVerifyConnectivityJobRequestParams) admin.VerifyUserSecurityLdapApiRequest) *LDAPConfigurationApi_VerifyUserSecurityLdap_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUserSecurityLdapExecute provides a mock function with given fields: r
func (_m *LDAPConfigurationApi) VerifyUserSecurityLdapExecute(r admin.VerifyUserSecurityLdapApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserSecurityLdapExecute")
	}

	var r0 *admin.LDAPVerifyConnectivityJobRequest
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.VerifyUserSecurityLdapApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.VerifyUserSecurityLdapApiRequest) *admin.LDAPVerifyConnectivityJobRequest); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LDAPVerifyConnectivityJobRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.VerifyUserSecurityLdapApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.VerifyUserSecurityLdapApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUserSecurityLdapExecute'
type LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call struct {
	*mock.Call
}

// VerifyUserSecurityLdapExecute is a helper method to define mock.On call
//   - r admin.VerifyUserSecurityLdapApiRequest
func (_e *LDAPConfigurationApi_Expecter) VerifyUserSecurityLdapExecute(r any) *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call {
	return &LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call{Call: _e.mock.On("VerifyUserSecurityLdapExecute", r)}
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call) Run(run func(r admin.VerifyUserSecurityLdapApiRequest)) *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.VerifyUserSecurityLdapApiRequest))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call) Return(_a0 *admin.LDAPVerifyConnectivityJobRequest, _a1 *http.Response, _a2 error) *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call) RunAndReturn(run func(admin.VerifyUserSecurityLdapApiRequest) (*admin.LDAPVerifyConnectivityJobRequest, *http.Response, error)) *LDAPConfigurationApi_VerifyUserSecurityLdapExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUserSecurityLdapWithParams provides a mock function with given fields: ctx, args
func (_m *LDAPConfigurationApi) VerifyUserSecurityLdapWithParams(ctx context.Context, args *admin.VerifyUserSecurityLdapApiParams) admin.VerifyUserSecurityLdapApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserSecurityLdapWithParams")
	}

	var r0 admin.VerifyUserSecurityLdapApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.VerifyUserSecurityLdapApiParams) admin.VerifyUserSecurityLdapApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.VerifyUserSecurityLdapApiRequest)
	}

	return r0
}

// LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUserSecurityLdapWithParams'
type LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call struct {
	*mock.Call
}

// VerifyUserSecurityLdapWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.VerifyUserSecurityLdapApiParams
func (_e *LDAPConfigurationApi_Expecter) VerifyUserSecurityLdapWithParams(ctx any, args any) *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call {
	return &LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call{Call: _e.mock.On("VerifyUserSecurityLdapWithParams", ctx, args)}
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call) Run(run func(ctx context.Context, args *admin.VerifyUserSecurityLdapApiParams)) *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.VerifyUserSecurityLdapApiParams))
	})
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call) Return(_a0 admin.VerifyUserSecurityLdapApiRequest) *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call) RunAndReturn(run func(context.Context, *admin.VerifyUserSecurityLdapApiParams) admin.VerifyUserSecurityLdapApiRequest) *LDAPConfigurationApi_VerifyUserSecurityLdapWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewLDAPConfigurationApi creates a new instance of LDAPConfigurationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLDAPConfigurationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LDAPConfigurationApi {
	mock := &LDAPConfigurationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
