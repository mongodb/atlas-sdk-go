// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MongoDBCloudUsersApi is an autogenerated mock type for the MongoDBCloudUsersApi type
type MongoDBCloudUsersApi struct {
	mock.Mock
}

type MongoDBCloudUsersApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MongoDBCloudUsersApi) EXPECT() *MongoDBCloudUsersApi_Expecter {
	return &MongoDBCloudUsersApi_Expecter{mock: &_m.Mock}
}

// AddGroupUserRole provides a mock function with given fields: ctx, groupId, userId, addOrRemoveGroupRole
func (_m *MongoDBCloudUsersApi) AddGroupUserRole(ctx context.Context, groupId string, userId string, addOrRemoveGroupRole *admin.AddOrRemoveGroupRole) admin.AddGroupUserRoleApiRequest {
	ret := _m.Called(ctx, groupId, userId, addOrRemoveGroupRole)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUserRole")
	}

	var r0 admin.AddGroupUserRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveGroupRole) admin.AddGroupUserRoleApiRequest); ok {
		r0 = rf(ctx, groupId, userId, addOrRemoveGroupRole)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUserRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddGroupUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUserRole'
type MongoDBCloudUsersApi_AddGroupUserRole_Call struct {
	*mock.Call
}

// AddGroupUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
//   - addOrRemoveGroupRole *admin.AddOrRemoveGroupRole
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUserRole(ctx any, groupId any, userId any, addOrRemoveGroupRole any) *MongoDBCloudUsersApi_AddGroupUserRole_Call {
	return &MongoDBCloudUsersApi_AddGroupUserRole_Call{Call: _e.mock.On("AddGroupUserRole", ctx, groupId, userId, addOrRemoveGroupRole)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRole_Call) Run(run func(ctx context.Context, groupId string, userId string, addOrRemoveGroupRole *admin.AddOrRemoveGroupRole)) *MongoDBCloudUsersApi_AddGroupUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveGroupRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRole_Call) Return(_a0 admin.AddGroupUserRoleApiRequest) *MongoDBCloudUsersApi_AddGroupUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveGroupRole) admin.AddGroupUserRoleApiRequest) *MongoDBCloudUsersApi_AddGroupUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUserRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddGroupUserRoleExecute(r admin.AddGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUserRoleExecute")
	}

	var r0 *admin.GroupUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddGroupUserRoleApiRequest) *admin.GroupUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddGroupUserRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddGroupUserRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUserRoleExecute'
type MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call struct {
	*mock.Call
}

// AddGroupUserRoleExecute is a helper method to define mock.On call
//   - r admin.AddGroupUserRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUserRoleExecute(r any) *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call {
	return &MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call{Call: _e.mock.On("AddGroupUserRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call) Run(run func(r admin.AddGroupUserRoleApiRequest)) *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddGroupUserRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call) Return(_a0 *admin.GroupUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call) RunAndReturn(run func(admin.AddGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddGroupUserRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUserRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddGroupUserRoleWithParams(ctx context.Context, args *admin.AddGroupUserRoleApiParams) admin.AddGroupUserRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUserRoleWithParams")
	}

	var r0 admin.AddGroupUserRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddGroupUserRoleApiParams) admin.AddGroupUserRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUserRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUserRoleWithParams'
type MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call struct {
	*mock.Call
}

// AddGroupUserRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddGroupUserRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUserRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call {
	return &MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call{Call: _e.mock.On("AddGroupUserRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.AddGroupUserRoleApiParams)) *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddGroupUserRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call) Return(_a0 admin.AddGroupUserRoleApiRequest) *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddGroupUserRoleApiParams) admin.AddGroupUserRoleApiRequest) *MongoDBCloudUsersApi_AddGroupUserRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUsers provides a mock function with given fields: ctx, groupId, groupUserRequest
func (_m *MongoDBCloudUsersApi) AddGroupUsers(ctx context.Context, groupId string, groupUserRequest *admin.GroupUserRequest) admin.AddGroupUsersApiRequest {
	ret := _m.Called(ctx, groupId, groupUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUsers")
	}

	var r0 admin.AddGroupUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupUserRequest) admin.AddGroupUsersApiRequest); ok {
		r0 = rf(ctx, groupId, groupUserRequest)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUsers'
type MongoDBCloudUsersApi_AddGroupUsers_Call struct {
	*mock.Call
}

// AddGroupUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupUserRequest *admin.GroupUserRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUsers(ctx any, groupId any, groupUserRequest any) *MongoDBCloudUsersApi_AddGroupUsers_Call {
	return &MongoDBCloudUsersApi_AddGroupUsers_Call{Call: _e.mock.On("AddGroupUsers", ctx, groupId, groupUserRequest)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUsers_Call) Run(run func(ctx context.Context, groupId string, groupUserRequest *admin.GroupUserRequest)) *MongoDBCloudUsersApi_AddGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupUserRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsers_Call) Return(_a0 admin.AddGroupUsersApiRequest) *MongoDBCloudUsersApi_AddGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsers_Call) RunAndReturn(run func(context.Context, string, *admin.GroupUserRequest) admin.AddGroupUsersApiRequest) *MongoDBCloudUsersApi_AddGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUsersExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddGroupUsersExecute(r admin.AddGroupUsersApiRequest) (*admin.GroupUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUsersExecute")
	}

	var r0 *admin.GroupUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddGroupUsersApiRequest) (*admin.GroupUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddGroupUsersApiRequest) *admin.GroupUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddGroupUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddGroupUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddGroupUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUsersExecute'
type MongoDBCloudUsersApi_AddGroupUsersExecute_Call struct {
	*mock.Call
}

// AddGroupUsersExecute is a helper method to define mock.On call
//   - r admin.AddGroupUsersApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUsersExecute(r any) *MongoDBCloudUsersApi_AddGroupUsersExecute_Call {
	return &MongoDBCloudUsersApi_AddGroupUsersExecute_Call{Call: _e.mock.On("AddGroupUsersExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersExecute_Call) Run(run func(r admin.AddGroupUsersApiRequest)) *MongoDBCloudUsersApi_AddGroupUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddGroupUsersApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersExecute_Call) Return(_a0 *admin.GroupUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddGroupUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersExecute_Call) RunAndReturn(run func(admin.AddGroupUsersApiRequest) (*admin.GroupUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddGroupUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupUsersWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddGroupUsersWithParams(ctx context.Context, args *admin.AddGroupUsersApiParams) admin.AddGroupUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupUsersWithParams")
	}

	var r0 admin.AddGroupUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddGroupUsersApiParams) admin.AddGroupUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddGroupUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddGroupUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupUsersWithParams'
type MongoDBCloudUsersApi_AddGroupUsersWithParams_Call struct {
	*mock.Call
}

// AddGroupUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddGroupUsersApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddGroupUsersWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call {
	return &MongoDBCloudUsersApi_AddGroupUsersWithParams_Call{Call: _e.mock.On("AddGroupUsersWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.AddGroupUsersApiParams)) *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddGroupUsersApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call) Return(_a0 admin.AddGroupUsersApiRequest) *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddGroupUsersApiParams) admin.AddGroupUsersApiRequest) *MongoDBCloudUsersApi_AddGroupUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgRole provides a mock function with given fields: ctx, orgId, userId, addOrRemoveOrgRole
func (_m *MongoDBCloudUsersApi) AddOrgRole(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole) admin.AddOrgRoleApiRequest {
	ret := _m.Called(ctx, orgId, userId, addOrRemoveOrgRole)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgRole")
	}

	var r0 admin.AddOrgRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.AddOrgRoleApiRequest); ok {
		r0 = rf(ctx, orgId, userId, addOrRemoveOrgRole)
	} else {
		r0 = ret.Get(0).(admin.AddOrgRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrgRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgRole'
type MongoDBCloudUsersApi_AddOrgRole_Call struct {
	*mock.Call
}

// AddOrgRole is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - addOrRemoveOrgRole *admin.AddOrRemoveOrgRole
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgRole(ctx any, orgId any, userId any, addOrRemoveOrgRole any) *MongoDBCloudUsersApi_AddOrgRole_Call {
	return &MongoDBCloudUsersApi_AddOrgRole_Call{Call: _e.mock.On("AddOrgRole", ctx, orgId, userId, addOrRemoveOrgRole)}
}

func (_c *MongoDBCloudUsersApi_AddOrgRole_Call) Run(run func(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole)) *MongoDBCloudUsersApi_AddOrgRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveOrgRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRole_Call) Return(_a0 admin.AddOrgRoleApiRequest) *MongoDBCloudUsersApi_AddOrgRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.AddOrgRoleApiRequest) *MongoDBCloudUsersApi_AddOrgRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddOrgRoleExecute(r admin.AddOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgRoleExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddOrgRoleApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddOrgRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddOrgRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddOrgRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgRoleExecute'
type MongoDBCloudUsersApi_AddOrgRoleExecute_Call struct {
	*mock.Call
}

// AddOrgRoleExecute is a helper method to define mock.On call
//   - r admin.AddOrgRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgRoleExecute(r any) *MongoDBCloudUsersApi_AddOrgRoleExecute_Call {
	return &MongoDBCloudUsersApi_AddOrgRoleExecute_Call{Call: _e.mock.On("AddOrgRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleExecute_Call) Run(run func(r admin.AddOrgRoleApiRequest)) *MongoDBCloudUsersApi_AddOrgRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddOrgRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddOrgRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleExecute_Call) RunAndReturn(run func(admin.AddOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddOrgRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddOrgRoleWithParams(ctx context.Context, args *admin.AddOrgRoleApiParams) admin.AddOrgRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgRoleWithParams")
	}

	var r0 admin.AddOrgRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddOrgRoleApiParams) admin.AddOrgRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddOrgRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrgRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgRoleWithParams'
type MongoDBCloudUsersApi_AddOrgRoleWithParams_Call struct {
	*mock.Call
}

// AddOrgRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddOrgRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call {
	return &MongoDBCloudUsersApi_AddOrgRoleWithParams_Call{Call: _e.mock.On("AddOrgRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.AddOrgRoleApiParams)) *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddOrgRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call) Return(_a0 admin.AddOrgRoleApiRequest) *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddOrgRoleApiParams) admin.AddOrgRoleApiRequest) *MongoDBCloudUsersApi_AddOrgRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgTeamUser provides a mock function with given fields: ctx, orgId, teamId, addOrRemoveUserFromTeam
func (_m *MongoDBCloudUsersApi) AddOrgTeamUser(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam) admin.AddOrgTeamUserApiRequest {
	ret := _m.Called(ctx, orgId, teamId, addOrRemoveUserFromTeam)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgTeamUser")
	}

	var r0 admin.AddOrgTeamUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.AddOrgTeamUserApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, addOrRemoveUserFromTeam)
	} else {
		r0 = ret.Get(0).(admin.AddOrgTeamUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrgTeamUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgTeamUser'
type MongoDBCloudUsersApi_AddOrgTeamUser_Call struct {
	*mock.Call
}

// AddOrgTeamUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgTeamUser(ctx any, orgId any, teamId any, addOrRemoveUserFromTeam any) *MongoDBCloudUsersApi_AddOrgTeamUser_Call {
	return &MongoDBCloudUsersApi_AddOrgTeamUser_Call{Call: _e.mock.On("AddOrgTeamUser", ctx, orgId, teamId, addOrRemoveUserFromTeam)}
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUser_Call) Run(run func(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam)) *MongoDBCloudUsersApi_AddOrgTeamUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveUserFromTeam))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUser_Call) Return(_a0 admin.AddOrgTeamUserApiRequest) *MongoDBCloudUsersApi_AddOrgTeamUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUser_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.AddOrgTeamUserApiRequest) *MongoDBCloudUsersApi_AddOrgTeamUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgTeamUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddOrgTeamUserExecute(r admin.AddOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgTeamUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddOrgTeamUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddOrgTeamUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddOrgTeamUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgTeamUserExecute'
type MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call struct {
	*mock.Call
}

// AddOrgTeamUserExecute is a helper method to define mock.On call
//   - r admin.AddOrgTeamUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgTeamUserExecute(r any) *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call {
	return &MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call{Call: _e.mock.On("AddOrgTeamUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call) Run(run func(r admin.AddOrgTeamUserApiRequest)) *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddOrgTeamUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call) RunAndReturn(run func(admin.AddOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddOrgTeamUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrgTeamUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddOrgTeamUserWithParams(ctx context.Context, args *admin.AddOrgTeamUserApiParams) admin.AddOrgTeamUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddOrgTeamUserWithParams")
	}

	var r0 admin.AddOrgTeamUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddOrgTeamUserApiParams) admin.AddOrgTeamUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddOrgTeamUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrgTeamUserWithParams'
type MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call struct {
	*mock.Call
}

// AddOrgTeamUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddOrgTeamUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddOrgTeamUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call {
	return &MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call{Call: _e.mock.On("AddOrgTeamUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call) Run(run func(ctx context.Context, args *admin.AddOrgTeamUserApiParams)) *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddOrgTeamUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call) Return(_a0 admin.AddOrgTeamUserApiRequest) *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddOrgTeamUserApiParams) admin.AddOrgTeamUserApiRequest) *MongoDBCloudUsersApi_AddOrgTeamUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgUser provides a mock function with given fields: ctx, orgId, orgUserRequest
func (_m *MongoDBCloudUsersApi) CreateOrgUser(ctx context.Context, orgId string, orgUserRequest *admin.OrgUserRequest) admin.CreateOrgUserApiRequest {
	ret := _m.Called(ctx, orgId, orgUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgUser")
	}

	var r0 admin.CreateOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrgUserRequest) admin.CreateOrgUserApiRequest); ok {
		r0 = rf(ctx, orgId, orgUserRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateOrgUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgUser'
type MongoDBCloudUsersApi_CreateOrgUser_Call struct {
	*mock.Call
}

// CreateOrgUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - orgUserRequest *admin.OrgUserRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrgUser(ctx any, orgId any, orgUserRequest any) *MongoDBCloudUsersApi_CreateOrgUser_Call {
	return &MongoDBCloudUsersApi_CreateOrgUser_Call{Call: _e.mock.On("CreateOrgUser", ctx, orgId, orgUserRequest)}
}

func (_c *MongoDBCloudUsersApi_CreateOrgUser_Call) Run(run func(ctx context.Context, orgId string, orgUserRequest *admin.OrgUserRequest)) *MongoDBCloudUsersApi_CreateOrgUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrgUserRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUser_Call) Return(_a0 admin.CreateOrgUserApiRequest) *MongoDBCloudUsersApi_CreateOrgUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUser_Call) RunAndReturn(run func(context.Context, string, *admin.OrgUserRequest) admin.CreateOrgUserApiRequest) *MongoDBCloudUsersApi_CreateOrgUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) CreateOrgUserExecute(r admin.CreateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_CreateOrgUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgUserExecute'
type MongoDBCloudUsersApi_CreateOrgUserExecute_Call struct {
	*mock.Call
}

// CreateOrgUserExecute is a helper method to define mock.On call
//   - r admin.CreateOrgUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrgUserExecute(r any) *MongoDBCloudUsersApi_CreateOrgUserExecute_Call {
	return &MongoDBCloudUsersApi_CreateOrgUserExecute_Call{Call: _e.mock.On("CreateOrgUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserExecute_Call) Run(run func(r admin.CreateOrgUserApiRequest)) *MongoDBCloudUsersApi_CreateOrgUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_CreateOrgUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserExecute_Call) RunAndReturn(run func(admin.CreateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_CreateOrgUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) CreateOrgUserWithParams(ctx context.Context, args *admin.CreateOrgUserApiParams) admin.CreateOrgUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgUserWithParams")
	}

	var r0 admin.CreateOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgUserApiParams) admin.CreateOrgUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateOrgUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgUserWithParams'
type MongoDBCloudUsersApi_CreateOrgUserWithParams_Call struct {
	*mock.Call
}

// CreateOrgUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrgUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call {
	return &MongoDBCloudUsersApi_CreateOrgUserWithParams_Call{Call: _e.mock.On("CreateOrgUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgUserApiParams)) *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call) Return(_a0 admin.CreateOrgUserApiRequest) *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgUserApiParams) admin.CreateOrgUserApiRequest) *MongoDBCloudUsersApi_CreateOrgUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, cloudAppUser
func (_m *MongoDBCloudUsersApi) CreateUser(ctx context.Context, cloudAppUser *admin.CloudAppUser) admin.CreateUserApiRequest {
	ret := _m.Called(ctx, cloudAppUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 admin.CreateUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CloudAppUser) admin.CreateUserApiRequest); ok {
		r0 = rf(ctx, cloudAppUser)
	} else {
		r0 = ret.Get(0).(admin.CreateUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MongoDBCloudUsersApi_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - cloudAppUser *admin.CloudAppUser
func (_e *MongoDBCloudUsersApi_Expecter) CreateUser(ctx any, cloudAppUser any) *MongoDBCloudUsersApi_CreateUser_Call {
	return &MongoDBCloudUsersApi_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, cloudAppUser)}
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) Run(run func(ctx context.Context, cloudAppUser *admin.CloudAppUser)) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CloudAppUser))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) Return(_a0 admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) RunAndReturn(run func(context.Context, *admin.CloudAppUser) admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) CreateUserExecute(r admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateUserApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_CreateUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserExecute'
type MongoDBCloudUsersApi_CreateUserExecute_Call struct {
	*mock.Call
}

// CreateUserExecute is a helper method to define mock.On call
//   - r admin.CreateUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateUserExecute(r any) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	return &MongoDBCloudUsersApi_CreateUserExecute_Call{Call: _e.mock.On("CreateUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) Run(run func(r admin.CreateUserApiRequest)) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) RunAndReturn(run func(admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) CreateUserWithParams(ctx context.Context, args *admin.CreateUserApiParams) admin.CreateUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserWithParams")
	}

	var r0 admin.CreateUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateUserApiParams) admin.CreateUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserWithParams'
type MongoDBCloudUsersApi_CreateUserWithParams_Call struct {
	*mock.Call
}

// CreateUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) CreateUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	return &MongoDBCloudUsersApi_CreateUserWithParams_Call{Call: _e.mock.On("CreateUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateUserApiParams)) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) Return(_a0 admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateUserApiParams) admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupUser provides a mock function with given fields: ctx, groupId, userId
func (_m *MongoDBCloudUsersApi) GetGroupUser(ctx context.Context, groupId string, userId string) admin.GetGroupUserApiRequest {
	ret := _m.Called(ctx, groupId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupUser")
	}

	var r0 admin.GetGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupUserApiRequest); ok {
		r0 = rf(ctx, groupId, userId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetGroupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupUser'
type MongoDBCloudUsersApi_GetGroupUser_Call struct {
	*mock.Call
}

// GetGroupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetGroupUser(ctx any, groupId any, userId any) *MongoDBCloudUsersApi_GetGroupUser_Call {
	return &MongoDBCloudUsersApi_GetGroupUser_Call{Call: _e.mock.On("GetGroupUser", ctx, groupId, userId)}
}

func (_c *MongoDBCloudUsersApi_GetGroupUser_Call) Run(run func(ctx context.Context, groupId string, userId string)) *MongoDBCloudUsersApi_GetGroupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUser_Call) Return(_a0 admin.GetGroupUserApiRequest) *MongoDBCloudUsersApi_GetGroupUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUser_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupUserApiRequest) *MongoDBCloudUsersApi_GetGroupUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetGroupUserExecute(r admin.GetGroupUserApiRequest) (*admin.GroupUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupUserExecute")
	}

	var r0 *admin.GroupUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupUserApiRequest) (*admin.GroupUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupUserApiRequest) *admin.GroupUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetGroupUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupUserExecute'
type MongoDBCloudUsersApi_GetGroupUserExecute_Call struct {
	*mock.Call
}

// GetGroupUserExecute is a helper method to define mock.On call
//   - r admin.GetGroupUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetGroupUserExecute(r any) *MongoDBCloudUsersApi_GetGroupUserExecute_Call {
	return &MongoDBCloudUsersApi_GetGroupUserExecute_Call{Call: _e.mock.On("GetGroupUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetGroupUserExecute_Call) Run(run func(r admin.GetGroupUserApiRequest)) *MongoDBCloudUsersApi_GetGroupUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUserExecute_Call) Return(_a0 *admin.GroupUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetGroupUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUserExecute_Call) RunAndReturn(run func(admin.GetGroupUserApiRequest) (*admin.GroupUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_GetGroupUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetGroupUserWithParams(ctx context.Context, args *admin.GetGroupUserApiParams) admin.GetGroupUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupUserWithParams")
	}

	var r0 admin.GetGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupUserApiParams) admin.GetGroupUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetGroupUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupUserWithParams'
type MongoDBCloudUsersApi_GetGroupUserWithParams_Call struct {
	*mock.Call
}

// GetGroupUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetGroupUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetGroupUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetGroupUserWithParams_Call{Call: _e.mock.On("GetGroupUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetGroupUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupUserApiParams)) *MongoDBCloudUsersApi_GetGroupUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUserWithParams_Call) Return(_a0 admin.GetGroupUserApiRequest) *MongoDBCloudUsersApi_GetGroupUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetGroupUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupUserApiParams) admin.GetGroupUserApiRequest) *MongoDBCloudUsersApi_GetGroupUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgUser provides a mock function with given fields: ctx, orgId, userId
func (_m *MongoDBCloudUsersApi) GetOrgUser(ctx context.Context, orgId string, userId string) admin.GetOrgUserApiRequest {
	ret := _m.Called(ctx, orgId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgUser")
	}

	var r0 admin.GetOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetOrgUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgUser'
type MongoDBCloudUsersApi_GetOrgUser_Call struct {
	*mock.Call
}

// GetOrgUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetOrgUser(ctx any, orgId any, userId any) *MongoDBCloudUsersApi_GetOrgUser_Call {
	return &MongoDBCloudUsersApi_GetOrgUser_Call{Call: _e.mock.On("GetOrgUser", ctx, orgId, userId)}
}

func (_c *MongoDBCloudUsersApi_GetOrgUser_Call) Run(run func(ctx context.Context, orgId string, userId string)) *MongoDBCloudUsersApi_GetOrgUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUser_Call) Return(_a0 admin.GetOrgUserApiRequest) *MongoDBCloudUsersApi_GetOrgUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUser_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgUserApiRequest) *MongoDBCloudUsersApi_GetOrgUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetOrgUserExecute(r admin.GetOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetOrgUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgUserExecute'
type MongoDBCloudUsersApi_GetOrgUserExecute_Call struct {
	*mock.Call
}

// GetOrgUserExecute is a helper method to define mock.On call
//   - r admin.GetOrgUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetOrgUserExecute(r any) *MongoDBCloudUsersApi_GetOrgUserExecute_Call {
	return &MongoDBCloudUsersApi_GetOrgUserExecute_Call{Call: _e.mock.On("GetOrgUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetOrgUserExecute_Call) Run(run func(r admin.GetOrgUserApiRequest)) *MongoDBCloudUsersApi_GetOrgUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetOrgUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUserExecute_Call) RunAndReturn(run func(admin.GetOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_GetOrgUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetOrgUserWithParams(ctx context.Context, args *admin.GetOrgUserApiParams) admin.GetOrgUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgUserWithParams")
	}

	var r0 admin.GetOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgUserApiParams) admin.GetOrgUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetOrgUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgUserWithParams'
type MongoDBCloudUsersApi_GetOrgUserWithParams_Call struct {
	*mock.Call
}

// GetOrgUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetOrgUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetOrgUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetOrgUserWithParams_Call{Call: _e.mock.On("GetOrgUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetOrgUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgUserApiParams)) *MongoDBCloudUsersApi_GetOrgUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUserWithParams_Call) Return(_a0 admin.GetOrgUserApiRequest) *MongoDBCloudUsersApi_GetOrgUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrgUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgUserApiParams) admin.GetOrgUserApiRequest) *MongoDBCloudUsersApi_GetOrgUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *MongoDBCloudUsersApi) GetUser(ctx context.Context, userId string) admin.GetUserApiRequest {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 admin.GetUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetUserApiRequest); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(admin.GetUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MongoDBCloudUsersApi_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetUser(ctx any, userId any) *MongoDBCloudUsersApi_GetUser_Call {
	return &MongoDBCloudUsersApi_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userId)}
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) Run(run func(ctx context.Context, userId string)) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) Return(_a0 admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) RunAndReturn(run func(context.Context, string) admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, userName
func (_m *MongoDBCloudUsersApi) GetUserByName(ctx context.Context, userName string) admin.GetUserByNameApiRequest {
	ret := _m.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 admin.GetUserByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetUserByNameApiRequest); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(admin.GetUserByNameApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type MongoDBCloudUsersApi_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByName(ctx any, userName any) *MongoDBCloudUsersApi_GetUserByName_Call {
	return &MongoDBCloudUsersApi_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, userName)}
}

func (_c *MongoDBCloudUsersApi_GetUserByName_Call) Run(run func(ctx context.Context, userName string)) *MongoDBCloudUsersApi_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByName_Call) Return(_a0 admin.GetUserByNameApiRequest) *MongoDBCloudUsersApi_GetUserByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByName_Call) RunAndReturn(run func(context.Context, string) admin.GetUserByNameApiRequest) *MongoDBCloudUsersApi_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByNameExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetUserByNameExecute(r admin.GetUserByNameApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByNameExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserByNameApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserByNameApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetUserByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByNameExecute'
type MongoDBCloudUsersApi_GetUserByNameExecute_Call struct {
	*mock.Call
}

// GetUserByNameExecute is a helper method to define mock.On call
//   - r admin.GetUserByNameApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByNameExecute(r any) *MongoDBCloudUsersApi_GetUserByNameExecute_Call {
	return &MongoDBCloudUsersApi_GetUserByNameExecute_Call{Call: _e.mock.On("GetUserByNameExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetUserByNameExecute_Call) Run(run func(r admin.GetUserByNameApiRequest)) *MongoDBCloudUsersApi_GetUserByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserByNameApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByNameExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetUserByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByNameExecute_Call) RunAndReturn(run func(admin.GetUserByNameApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_GetUserByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByNameWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetUserByNameWithParams(ctx context.Context, args *admin.GetUserByNameApiParams) admin.GetUserByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByNameWithParams")
	}

	var r0 admin.GetUserByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserByNameApiParams) admin.GetUserByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserByNameApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByNameWithParams'
type MongoDBCloudUsersApi_GetUserByNameWithParams_Call struct {
	*mock.Call
}

// GetUserByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserByNameApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByNameWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetUserByNameWithParams_Call {
	return &MongoDBCloudUsersApi_GetUserByNameWithParams_Call{Call: _e.mock.On("GetUserByNameWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetUserByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserByNameApiParams)) *MongoDBCloudUsersApi_GetUserByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserByNameApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByNameWithParams_Call) Return(_a0 admin.GetUserByNameApiRequest) *MongoDBCloudUsersApi_GetUserByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserByNameApiParams) admin.GetUserByNameApiRequest) *MongoDBCloudUsersApi_GetUserByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetUserExecute(r admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserExecute'
type MongoDBCloudUsersApi_GetUserExecute_Call struct {
	*mock.Call
}

// GetUserExecute is a helper method to define mock.On call
//   - r admin.GetUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetUserExecute(r any) *MongoDBCloudUsersApi_GetUserExecute_Call {
	return &MongoDBCloudUsersApi_GetUserExecute_Call{Call: _e.mock.On("GetUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) Run(run func(r admin.GetUserApiRequest)) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) RunAndReturn(run func(admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetUserWithParams(ctx context.Context, args *admin.GetUserApiParams) admin.GetUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithParams")
	}

	var r0 admin.GetUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserApiParams) admin.GetUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithParams'
type MongoDBCloudUsersApi_GetUserWithParams_Call struct {
	*mock.Call
}

// GetUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetUserWithParams_Call{Call: _e.mock.On("GetUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserApiParams)) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) Return(_a0 admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserApiParams) admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupUsers provides a mock function with given fields: ctx, groupId
func (_m *MongoDBCloudUsersApi) ListGroupUsers(ctx context.Context, groupId string) admin.ListGroupUsersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupUsers")
	}

	var r0 admin.ListGroupUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupUsersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupUsers'
type MongoDBCloudUsersApi_ListGroupUsers_Call struct {
	*mock.Call
}

// ListGroupUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *MongoDBCloudUsersApi_Expecter) ListGroupUsers(ctx any, groupId any) *MongoDBCloudUsersApi_ListGroupUsers_Call {
	return &MongoDBCloudUsersApi_ListGroupUsers_Call{Call: _e.mock.On("ListGroupUsers", ctx, groupId)}
}

func (_c *MongoDBCloudUsersApi_ListGroupUsers_Call) Run(run func(ctx context.Context, groupId string)) *MongoDBCloudUsersApi_ListGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsers_Call) Return(_a0 admin.ListGroupUsersApiRequest) *MongoDBCloudUsersApi_ListGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsers_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupUsersApiRequest) *MongoDBCloudUsersApi_ListGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupUsersExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) ListGroupUsersExecute(r admin.ListGroupUsersApiRequest) (*admin.PaginatedGroupUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupUsersExecute")
	}

	var r0 *admin.PaginatedGroupUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupUsersApiRequest) (*admin.PaginatedGroupUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupUsersApiRequest) *admin.PaginatedGroupUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedGroupUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_ListGroupUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupUsersExecute'
type MongoDBCloudUsersApi_ListGroupUsersExecute_Call struct {
	*mock.Call
}

// ListGroupUsersExecute is a helper method to define mock.On call
//   - r admin.ListGroupUsersApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) ListGroupUsersExecute(r any) *MongoDBCloudUsersApi_ListGroupUsersExecute_Call {
	return &MongoDBCloudUsersApi_ListGroupUsersExecute_Call{Call: _e.mock.On("ListGroupUsersExecute", r)}
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersExecute_Call) Run(run func(r admin.ListGroupUsersApiRequest)) *MongoDBCloudUsersApi_ListGroupUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupUsersApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersExecute_Call) Return(_a0 *admin.PaginatedGroupUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_ListGroupUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersExecute_Call) RunAndReturn(run func(admin.ListGroupUsersApiRequest) (*admin.PaginatedGroupUser, *http.Response, error)) *MongoDBCloudUsersApi_ListGroupUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupUsersWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) ListGroupUsersWithParams(ctx context.Context, args *admin.ListGroupUsersApiParams) admin.ListGroupUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupUsersWithParams")
	}

	var r0 admin.ListGroupUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupUsersApiParams) admin.ListGroupUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListGroupUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupUsersWithParams'
type MongoDBCloudUsersApi_ListGroupUsersWithParams_Call struct {
	*mock.Call
}

// ListGroupUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupUsersApiParams
func (_e *MongoDBCloudUsersApi_Expecter) ListGroupUsersWithParams(ctx any, args any) *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call {
	return &MongoDBCloudUsersApi_ListGroupUsersWithParams_Call{Call: _e.mock.On("ListGroupUsersWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupUsersApiParams)) *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupUsersApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call) Return(_a0 admin.ListGroupUsersApiRequest) *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupUsersApiParams) admin.ListGroupUsersApiRequest) *MongoDBCloudUsersApi_ListGroupUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgUsers provides a mock function with given fields: ctx, orgId
func (_m *MongoDBCloudUsersApi) ListOrgUsers(ctx context.Context, orgId string) admin.ListOrgUsersApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgUsers")
	}

	var r0 admin.ListOrgUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgUsersApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListOrgUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgUsers'
type MongoDBCloudUsersApi_ListOrgUsers_Call struct {
	*mock.Call
}

// ListOrgUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *MongoDBCloudUsersApi_Expecter) ListOrgUsers(ctx any, orgId any) *MongoDBCloudUsersApi_ListOrgUsers_Call {
	return &MongoDBCloudUsersApi_ListOrgUsers_Call{Call: _e.mock.On("ListOrgUsers", ctx, orgId)}
}

func (_c *MongoDBCloudUsersApi_ListOrgUsers_Call) Run(run func(ctx context.Context, orgId string)) *MongoDBCloudUsersApi_ListOrgUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsers_Call) Return(_a0 admin.ListOrgUsersApiRequest) *MongoDBCloudUsersApi_ListOrgUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsers_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgUsersApiRequest) *MongoDBCloudUsersApi_ListOrgUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgUsersExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) ListOrgUsersExecute(r admin.ListOrgUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgUsersExecute")
	}

	var r0 *admin.PaginatedOrgUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgUsersApiRequest) *admin.PaginatedOrgUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_ListOrgUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgUsersExecute'
type MongoDBCloudUsersApi_ListOrgUsersExecute_Call struct {
	*mock.Call
}

// ListOrgUsersExecute is a helper method to define mock.On call
//   - r admin.ListOrgUsersApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) ListOrgUsersExecute(r any) *MongoDBCloudUsersApi_ListOrgUsersExecute_Call {
	return &MongoDBCloudUsersApi_ListOrgUsersExecute_Call{Call: _e.mock.On("ListOrgUsersExecute", r)}
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersExecute_Call) Run(run func(r admin.ListOrgUsersApiRequest)) *MongoDBCloudUsersApi_ListOrgUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgUsersApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersExecute_Call) Return(_a0 *admin.PaginatedOrgUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_ListOrgUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersExecute_Call) RunAndReturn(run func(admin.ListOrgUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error)) *MongoDBCloudUsersApi_ListOrgUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgUsersWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) ListOrgUsersWithParams(ctx context.Context, args *admin.ListOrgUsersApiParams) admin.ListOrgUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgUsersWithParams")
	}

	var r0 admin.ListOrgUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgUsersApiParams) admin.ListOrgUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListOrgUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgUsersWithParams'
type MongoDBCloudUsersApi_ListOrgUsersWithParams_Call struct {
	*mock.Call
}

// ListOrgUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgUsersApiParams
func (_e *MongoDBCloudUsersApi_Expecter) ListOrgUsersWithParams(ctx any, args any) *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call {
	return &MongoDBCloudUsersApi_ListOrgUsersWithParams_Call{Call: _e.mock.On("ListOrgUsersWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgUsersApiParams)) *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgUsersApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call) Return(_a0 admin.ListOrgUsersApiRequest) *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgUsersApiParams) admin.ListOrgUsersApiRequest) *MongoDBCloudUsersApi_ListOrgUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamUsers provides a mock function with given fields: ctx, orgId, teamId
func (_m *MongoDBCloudUsersApi) ListTeamUsers(ctx context.Context, orgId string, teamId string) admin.ListTeamUsersApiRequest {
	ret := _m.Called(ctx, orgId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamUsers")
	}

	var r0 admin.ListTeamUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListTeamUsersApiRequest); ok {
		r0 = rf(ctx, orgId, teamId)
	} else {
		r0 = ret.Get(0).(admin.ListTeamUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListTeamUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamUsers'
type MongoDBCloudUsersApi_ListTeamUsers_Call struct {
	*mock.Call
}

// ListTeamUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
func (_e *MongoDBCloudUsersApi_Expecter) ListTeamUsers(ctx any, orgId any, teamId any) *MongoDBCloudUsersApi_ListTeamUsers_Call {
	return &MongoDBCloudUsersApi_ListTeamUsers_Call{Call: _e.mock.On("ListTeamUsers", ctx, orgId, teamId)}
}

func (_c *MongoDBCloudUsersApi_ListTeamUsers_Call) Run(run func(ctx context.Context, orgId string, teamId string)) *MongoDBCloudUsersApi_ListTeamUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsers_Call) Return(_a0 admin.ListTeamUsersApiRequest) *MongoDBCloudUsersApi_ListTeamUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsers_Call) RunAndReturn(run func(context.Context, string, string) admin.ListTeamUsersApiRequest) *MongoDBCloudUsersApi_ListTeamUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamUsersExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) ListTeamUsersExecute(r admin.ListTeamUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamUsersExecute")
	}

	var r0 *admin.PaginatedOrgUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListTeamUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListTeamUsersApiRequest) *admin.PaginatedOrgUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedOrgUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListTeamUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListTeamUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_ListTeamUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamUsersExecute'
type MongoDBCloudUsersApi_ListTeamUsersExecute_Call struct {
	*mock.Call
}

// ListTeamUsersExecute is a helper method to define mock.On call
//   - r admin.ListTeamUsersApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) ListTeamUsersExecute(r any) *MongoDBCloudUsersApi_ListTeamUsersExecute_Call {
	return &MongoDBCloudUsersApi_ListTeamUsersExecute_Call{Call: _e.mock.On("ListTeamUsersExecute", r)}
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersExecute_Call) Run(run func(r admin.ListTeamUsersApiRequest)) *MongoDBCloudUsersApi_ListTeamUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListTeamUsersApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersExecute_Call) Return(_a0 *admin.PaginatedOrgUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_ListTeamUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersExecute_Call) RunAndReturn(run func(admin.ListTeamUsersApiRequest) (*admin.PaginatedOrgUser, *http.Response, error)) *MongoDBCloudUsersApi_ListTeamUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamUsersWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) ListTeamUsersWithParams(ctx context.Context, args *admin.ListTeamUsersApiParams) admin.ListTeamUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamUsersWithParams")
	}

	var r0 admin.ListTeamUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListTeamUsersApiParams) admin.ListTeamUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListTeamUsersApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_ListTeamUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamUsersWithParams'
type MongoDBCloudUsersApi_ListTeamUsersWithParams_Call struct {
	*mock.Call
}

// ListTeamUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListTeamUsersApiParams
func (_e *MongoDBCloudUsersApi_Expecter) ListTeamUsersWithParams(ctx any, args any) *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call {
	return &MongoDBCloudUsersApi_ListTeamUsersWithParams_Call{Call: _e.mock.On("ListTeamUsersWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListTeamUsersApiParams)) *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListTeamUsersApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call) Return(_a0 admin.ListTeamUsersApiRequest) *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListTeamUsersApiParams) admin.ListTeamUsersApiRequest) *MongoDBCloudUsersApi_ListTeamUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUser provides a mock function with given fields: ctx, groupId, userId
func (_m *MongoDBCloudUsersApi) RemoveGroupUser(ctx context.Context, groupId string, userId string) admin.RemoveGroupUserApiRequest {
	ret := _m.Called(ctx, groupId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUser")
	}

	var r0 admin.RemoveGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveGroupUserApiRequest); ok {
		r0 = rf(ctx, groupId, userId)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveGroupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUser'
type MongoDBCloudUsersApi_RemoveGroupUser_Call struct {
	*mock.Call
}

// RemoveGroupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUser(ctx any, groupId any, userId any) *MongoDBCloudUsersApi_RemoveGroupUser_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUser_Call{Call: _e.mock.On("RemoveGroupUser", ctx, groupId, userId)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUser_Call) Run(run func(ctx context.Context, groupId string, userId string)) *MongoDBCloudUsersApi_RemoveGroupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUser_Call) Return(_a0 admin.RemoveGroupUserApiRequest) *MongoDBCloudUsersApi_RemoveGroupUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUser_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveGroupUserApiRequest) *MongoDBCloudUsersApi_RemoveGroupUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveGroupUserExecute(r admin.RemoveGroupUserApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupUserApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupUserApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveGroupUserApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoDBCloudUsersApi_RemoveGroupUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUserExecute'
type MongoDBCloudUsersApi_RemoveGroupUserExecute_Call struct {
	*mock.Call
}

// RemoveGroupUserExecute is a helper method to define mock.On call
//   - r admin.RemoveGroupUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUserExecute(r any) *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUserExecute_Call{Call: _e.mock.On("RemoveGroupUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call) Run(run func(r admin.RemoveGroupUserApiRequest)) *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveGroupUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call) Return(_a0 *http.Response, _a1 error) *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call) RunAndReturn(run func(admin.RemoveGroupUserApiRequest) (*http.Response, error)) *MongoDBCloudUsersApi_RemoveGroupUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUserRole provides a mock function with given fields: ctx, groupId, userId, addOrRemoveGroupRole
func (_m *MongoDBCloudUsersApi) RemoveGroupUserRole(ctx context.Context, groupId string, userId string, addOrRemoveGroupRole *admin.AddOrRemoveGroupRole) admin.RemoveGroupUserRoleApiRequest {
	ret := _m.Called(ctx, groupId, userId, addOrRemoveGroupRole)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUserRole")
	}

	var r0 admin.RemoveGroupUserRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveGroupRole) admin.RemoveGroupUserRoleApiRequest); ok {
		r0 = rf(ctx, groupId, userId, addOrRemoveGroupRole)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupUserRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveGroupUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUserRole'
type MongoDBCloudUsersApi_RemoveGroupUserRole_Call struct {
	*mock.Call
}

// RemoveGroupUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
//   - addOrRemoveGroupRole *admin.AddOrRemoveGroupRole
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUserRole(ctx any, groupId any, userId any, addOrRemoveGroupRole any) *MongoDBCloudUsersApi_RemoveGroupUserRole_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUserRole_Call{Call: _e.mock.On("RemoveGroupUserRole", ctx, groupId, userId, addOrRemoveGroupRole)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRole_Call) Run(run func(ctx context.Context, groupId string, userId string, addOrRemoveGroupRole *admin.AddOrRemoveGroupRole)) *MongoDBCloudUsersApi_RemoveGroupUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveGroupRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRole_Call) Return(_a0 admin.RemoveGroupUserRoleApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveGroupRole) admin.RemoveGroupUserRoleApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUserRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveGroupUserRoleExecute(r admin.RemoveGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUserRoleExecute")
	}

	var r0 *admin.GroupUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupUserRoleApiRequest) *admin.GroupUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveGroupUserRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveGroupUserRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUserRoleExecute'
type MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call struct {
	*mock.Call
}

// RemoveGroupUserRoleExecute is a helper method to define mock.On call
//   - r admin.RemoveGroupUserRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUserRoleExecute(r any) *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call{Call: _e.mock.On("RemoveGroupUserRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call) Run(run func(r admin.RemoveGroupUserRoleApiRequest)) *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveGroupUserRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call) Return(_a0 *admin.GroupUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call) RunAndReturn(run func(admin.RemoveGroupUserRoleApiRequest) (*admin.GroupUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_RemoveGroupUserRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUserRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveGroupUserRoleWithParams(ctx context.Context, args *admin.RemoveGroupUserRoleApiParams) admin.RemoveGroupUserRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUserRoleWithParams")
	}

	var r0 admin.RemoveGroupUserRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveGroupUserRoleApiParams) admin.RemoveGroupUserRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupUserRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUserRoleWithParams'
type MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call struct {
	*mock.Call
}

// RemoveGroupUserRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveGroupUserRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUserRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call{Call: _e.mock.On("RemoveGroupUserRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveGroupUserRoleApiParams)) *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveGroupUserRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call) Return(_a0 admin.RemoveGroupUserRoleApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveGroupUserRoleApiParams) admin.RemoveGroupUserRoleApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveGroupUserWithParams(ctx context.Context, args *admin.RemoveGroupUserApiParams) admin.RemoveGroupUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupUserWithParams")
	}

	var r0 admin.RemoveGroupUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveGroupUserApiParams) admin.RemoveGroupUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupUserWithParams'
type MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call struct {
	*mock.Call
}

// RemoveGroupUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveGroupUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveGroupUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call{Call: _e.mock.On("RemoveGroupUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveGroupUserApiParams)) *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveGroupUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call) Return(_a0 admin.RemoveGroupUserApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveGroupUserApiParams) admin.RemoveGroupUserApiRequest) *MongoDBCloudUsersApi_RemoveGroupUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgRole provides a mock function with given fields: ctx, orgId, userId, addOrRemoveOrgRole
func (_m *MongoDBCloudUsersApi) RemoveOrgRole(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole) admin.RemoveOrgRoleApiRequest {
	ret := _m.Called(ctx, orgId, userId, addOrRemoveOrgRole)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgRole")
	}

	var r0 admin.RemoveOrgRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.RemoveOrgRoleApiRequest); ok {
		r0 = rf(ctx, orgId, userId, addOrRemoveOrgRole)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgRole'
type MongoDBCloudUsersApi_RemoveOrgRole_Call struct {
	*mock.Call
}

// RemoveOrgRole is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - addOrRemoveOrgRole *admin.AddOrRemoveOrgRole
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgRole(ctx any, orgId any, userId any, addOrRemoveOrgRole any) *MongoDBCloudUsersApi_RemoveOrgRole_Call {
	return &MongoDBCloudUsersApi_RemoveOrgRole_Call{Call: _e.mock.On("RemoveOrgRole", ctx, orgId, userId, addOrRemoveOrgRole)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRole_Call) Run(run func(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole)) *MongoDBCloudUsersApi_RemoveOrgRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveOrgRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRole_Call) Return(_a0 admin.RemoveOrgRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrgRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.RemoveOrgRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrgRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveOrgRoleExecute(r admin.RemoveOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgRoleExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgRoleApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveOrgRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveOrgRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgRoleExecute'
type MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call struct {
	*mock.Call
}

// RemoveOrgRoleExecute is a helper method to define mock.On call
//   - r admin.RemoveOrgRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgRoleExecute(r any) *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call {
	return &MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call{Call: _e.mock.On("RemoveOrgRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call) Run(run func(r admin.RemoveOrgRoleApiRequest)) *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveOrgRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call) RunAndReturn(run func(admin.RemoveOrgRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_RemoveOrgRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveOrgRoleWithParams(ctx context.Context, args *admin.RemoveOrgRoleApiParams) admin.RemoveOrgRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgRoleWithParams")
	}

	var r0 admin.RemoveOrgRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveOrgRoleApiParams) admin.RemoveOrgRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgRoleWithParams'
type MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call struct {
	*mock.Call
}

// RemoveOrgRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveOrgRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call{Call: _e.mock.On("RemoveOrgRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveOrgRoleApiParams)) *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveOrgRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call) Return(_a0 admin.RemoveOrgRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveOrgRoleApiParams) admin.RemoveOrgRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrgRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgTeamUser provides a mock function with given fields: ctx, orgId, teamId, addOrRemoveUserFromTeam
func (_m *MongoDBCloudUsersApi) RemoveOrgTeamUser(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam) admin.RemoveOrgTeamUserApiRequest {
	ret := _m.Called(ctx, orgId, teamId, addOrRemoveUserFromTeam)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgTeamUser")
	}

	var r0 admin.RemoveOrgTeamUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.RemoveOrgTeamUserApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, addOrRemoveUserFromTeam)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgTeamUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgTeamUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgTeamUser'
type MongoDBCloudUsersApi_RemoveOrgTeamUser_Call struct {
	*mock.Call
}

// RemoveOrgTeamUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgTeamUser(ctx any, orgId any, teamId any, addOrRemoveUserFromTeam any) *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call {
	return &MongoDBCloudUsersApi_RemoveOrgTeamUser_Call{Call: _e.mock.On("RemoveOrgTeamUser", ctx, orgId, teamId, addOrRemoveUserFromTeam)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call) Run(run func(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam)) *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveUserFromTeam))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call) Return(_a0 admin.RemoveOrgTeamUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.RemoveOrgTeamUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgTeamUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgTeamUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveOrgTeamUserExecute(r admin.RemoveOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgTeamUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgTeamUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveOrgTeamUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveOrgTeamUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgTeamUserExecute'
type MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call struct {
	*mock.Call
}

// RemoveOrgTeamUserExecute is a helper method to define mock.On call
//   - r admin.RemoveOrgTeamUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgTeamUserExecute(r any) *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call {
	return &MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call{Call: _e.mock.On("RemoveOrgTeamUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call) Run(run func(r admin.RemoveOrgTeamUserApiRequest)) *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveOrgTeamUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call) RunAndReturn(run func(admin.RemoveOrgTeamUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_RemoveOrgTeamUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgTeamUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveOrgTeamUserWithParams(ctx context.Context, args *admin.RemoveOrgTeamUserApiParams) admin.RemoveOrgTeamUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgTeamUserWithParams")
	}

	var r0 admin.RemoveOrgTeamUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveOrgTeamUserApiParams) admin.RemoveOrgTeamUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgTeamUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgTeamUserWithParams'
type MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call struct {
	*mock.Call
}

// RemoveOrgTeamUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveOrgTeamUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgTeamUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call{Call: _e.mock.On("RemoveOrgTeamUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveOrgTeamUserApiParams)) *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveOrgTeamUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call) Return(_a0 admin.RemoveOrgTeamUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveOrgTeamUserApiParams) admin.RemoveOrgTeamUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgTeamUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgUser provides a mock function with given fields: ctx, orgId, userId
func (_m *MongoDBCloudUsersApi) RemoveOrgUser(ctx context.Context, orgId string, userId string) admin.RemoveOrgUserApiRequest {
	ret := _m.Called(ctx, orgId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgUser")
	}

	var r0 admin.RemoveOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveOrgUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgUser'
type MongoDBCloudUsersApi_RemoveOrgUser_Call struct {
	*mock.Call
}

// RemoveOrgUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgUser(ctx any, orgId any, userId any) *MongoDBCloudUsersApi_RemoveOrgUser_Call {
	return &MongoDBCloudUsersApi_RemoveOrgUser_Call{Call: _e.mock.On("RemoveOrgUser", ctx, orgId, userId)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUser_Call) Run(run func(ctx context.Context, orgId string, userId string)) *MongoDBCloudUsersApi_RemoveOrgUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUser_Call) Return(_a0 admin.RemoveOrgUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUser_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveOrgUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveOrgUserExecute(r admin.RemoveOrgUserApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgUserApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveOrgUserApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveOrgUserApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoDBCloudUsersApi_RemoveOrgUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgUserExecute'
type MongoDBCloudUsersApi_RemoveOrgUserExecute_Call struct {
	*mock.Call
}

// RemoveOrgUserExecute is a helper method to define mock.On call
//   - r admin.RemoveOrgUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgUserExecute(r any) *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call {
	return &MongoDBCloudUsersApi_RemoveOrgUserExecute_Call{Call: _e.mock.On("RemoveOrgUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call) Run(run func(r admin.RemoveOrgUserApiRequest)) *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveOrgUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call) Return(_a0 *http.Response, _a1 error) *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call) RunAndReturn(run func(admin.RemoveOrgUserApiRequest) (*http.Response, error)) *MongoDBCloudUsersApi_RemoveOrgUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrgUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveOrgUserWithParams(ctx context.Context, args *admin.RemoveOrgUserApiParams) admin.RemoveOrgUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrgUserWithParams")
	}

	var r0 admin.RemoveOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveOrgUserApiParams) admin.RemoveOrgUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrgUserWithParams'
type MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call struct {
	*mock.Call
}

// RemoveOrgUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveOrgUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrgUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call{Call: _e.mock.On("RemoveOrgUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveOrgUserApiParams)) *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveOrgUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call) Return(_a0 admin.RemoveOrgUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveOrgUserApiParams) admin.RemoveOrgUserApiRequest) *MongoDBCloudUsersApi_RemoveOrgUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUser provides a mock function with given fields: ctx, orgId, userId, orgUserUpdateRequest
func (_m *MongoDBCloudUsersApi) UpdateOrgUser(ctx context.Context, orgId string, userId string, orgUserUpdateRequest *admin.OrgUserUpdateRequest) admin.UpdateOrgUserApiRequest {
	ret := _m.Called(ctx, orgId, userId, orgUserUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUser")
	}

	var r0 admin.UpdateOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrgUserUpdateRequest) admin.UpdateOrgUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId, orgUserUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_UpdateOrgUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUser'
type MongoDBCloudUsersApi_UpdateOrgUser_Call struct {
	*mock.Call
}

// UpdateOrgUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - orgUserUpdateRequest *admin.OrgUserUpdateRequest
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrgUser(ctx any, orgId any, userId any, orgUserUpdateRequest any) *MongoDBCloudUsersApi_UpdateOrgUser_Call {
	return &MongoDBCloudUsersApi_UpdateOrgUser_Call{Call: _e.mock.On("UpdateOrgUser", ctx, orgId, userId, orgUserUpdateRequest)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUser_Call) Run(run func(ctx context.Context, orgId string, userId string, orgUserUpdateRequest *admin.OrgUserUpdateRequest)) *MongoDBCloudUsersApi_UpdateOrgUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrgUserUpdateRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUser_Call) Return(_a0 admin.UpdateOrgUserApiRequest) *MongoDBCloudUsersApi_UpdateOrgUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUser_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrgUserUpdateRequest) admin.UpdateOrgUserApiRequest) *MongoDBCloudUsersApi_UpdateOrgUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) UpdateOrgUserExecute(r admin.UpdateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrgUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrgUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrgUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_UpdateOrgUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUserExecute'
type MongoDBCloudUsersApi_UpdateOrgUserExecute_Call struct {
	*mock.Call
}

// UpdateOrgUserExecute is a helper method to define mock.On call
//   - r admin.UpdateOrgUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrgUserExecute(r any) *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call {
	return &MongoDBCloudUsersApi_UpdateOrgUserExecute_Call{Call: _e.mock.On("UpdateOrgUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call) Run(run func(r admin.UpdateOrgUserApiRequest)) *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrgUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call) RunAndReturn(run func(admin.UpdateOrgUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_UpdateOrgUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrgUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) UpdateOrgUserWithParams(ctx context.Context, args *admin.UpdateOrgUserApiParams) admin.UpdateOrgUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrgUserWithParams")
	}

	var r0 admin.UpdateOrgUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrgUserApiParams) admin.UpdateOrgUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrgUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrgUserWithParams'
type MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call struct {
	*mock.Call
}

// UpdateOrgUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrgUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrgUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call {
	return &MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call{Call: _e.mock.On("UpdateOrgUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrgUserApiParams)) *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrgUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call) Return(_a0 admin.UpdateOrgUserApiRequest) *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrgUserApiParams) admin.UpdateOrgUserApiRequest) *MongoDBCloudUsersApi_UpdateOrgUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMongoDBCloudUsersApi creates a new instance of MongoDBCloudUsersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoDBCloudUsersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoDBCloudUsersApi {
	mock := &MongoDBCloudUsersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
