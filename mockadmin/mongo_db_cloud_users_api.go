// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MongoDBCloudUsersApi is an autogenerated mock type for the MongoDBCloudUsersApi type
type MongoDBCloudUsersApi struct {
	mock.Mock
}

type MongoDBCloudUsersApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MongoDBCloudUsersApi) EXPECT() *MongoDBCloudUsersApi_Expecter {
	return &MongoDBCloudUsersApi_Expecter{mock: &_m.Mock}
}

// AddOrganizationRole provides a mock function with given fields: ctx, orgId, userId, addOrRemoveOrgRole
func (_m *MongoDBCloudUsersApi) AddOrganizationRole(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole) admin.AddOrganizationRoleApiRequest {
	ret := _m.Called(ctx, orgId, userId, addOrRemoveOrgRole)

	if len(ret) == 0 {
		panic("no return value specified for AddOrganizationRole")
	}

	var r0 admin.AddOrganizationRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.AddOrganizationRoleApiRequest); ok {
		r0 = rf(ctx, orgId, userId, addOrRemoveOrgRole)
	} else {
		r0 = ret.Get(0).(admin.AddOrganizationRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrganizationRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrganizationRole'
type MongoDBCloudUsersApi_AddOrganizationRole_Call struct {
	*mock.Call
}

// AddOrganizationRole is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - addOrRemoveOrgRole *admin.AddOrRemoveOrgRole
func (_e *MongoDBCloudUsersApi_Expecter) AddOrganizationRole(ctx any, orgId any, userId any, addOrRemoveOrgRole any) *MongoDBCloudUsersApi_AddOrganizationRole_Call {
	return &MongoDBCloudUsersApi_AddOrganizationRole_Call{Call: _e.mock.On("AddOrganizationRole", ctx, orgId, userId, addOrRemoveOrgRole)}
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRole_Call) Run(run func(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole)) *MongoDBCloudUsersApi_AddOrganizationRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveOrgRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRole_Call) Return(_a0 admin.AddOrganizationRoleApiRequest) *MongoDBCloudUsersApi_AddOrganizationRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.AddOrganizationRoleApiRequest) *MongoDBCloudUsersApi_AddOrganizationRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrganizationRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddOrganizationRoleExecute(r admin.AddOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddOrganizationRoleExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddOrganizationRoleApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddOrganizationRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddOrganizationRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrganizationRoleExecute'
type MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call struct {
	*mock.Call
}

// AddOrganizationRoleExecute is a helper method to define mock.On call
//   - r admin.AddOrganizationRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddOrganizationRoleExecute(r any) *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call {
	return &MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call{Call: _e.mock.On("AddOrganizationRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call) Run(run func(r admin.AddOrganizationRoleApiRequest)) *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddOrganizationRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call) RunAndReturn(run func(admin.AddOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddOrganizationRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrganizationRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddOrganizationRoleWithParams(ctx context.Context, args *admin.AddOrganizationRoleApiParams) admin.AddOrganizationRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddOrganizationRoleWithParams")
	}

	var r0 admin.AddOrganizationRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddOrganizationRoleApiParams) admin.AddOrganizationRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddOrganizationRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrganizationRoleWithParams'
type MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call struct {
	*mock.Call
}

// AddOrganizationRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddOrganizationRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddOrganizationRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call {
	return &MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call{Call: _e.mock.On("AddOrganizationRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.AddOrganizationRoleApiParams)) *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddOrganizationRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call) Return(_a0 admin.AddOrganizationRoleApiRequest) *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddOrganizationRoleApiParams) admin.AddOrganizationRoleApiRequest) *MongoDBCloudUsersApi_AddOrganizationRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToTeam provides a mock function with given fields: ctx, orgId, teamId, addOrRemoveUserFromTeam
func (_m *MongoDBCloudUsersApi) AddUserToTeam(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam) admin.AddUserToTeamApiRequest {
	ret := _m.Called(ctx, orgId, teamId, addOrRemoveUserFromTeam)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToTeam")
	}

	var r0 admin.AddUserToTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.AddUserToTeamApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, addOrRemoveUserFromTeam)
	} else {
		r0 = ret.Get(0).(admin.AddUserToTeamApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddUserToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToTeam'
type MongoDBCloudUsersApi_AddUserToTeam_Call struct {
	*mock.Call
}

// AddUserToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam
func (_e *MongoDBCloudUsersApi_Expecter) AddUserToTeam(ctx any, orgId any, teamId any, addOrRemoveUserFromTeam any) *MongoDBCloudUsersApi_AddUserToTeam_Call {
	return &MongoDBCloudUsersApi_AddUserToTeam_Call{Call: _e.mock.On("AddUserToTeam", ctx, orgId, teamId, addOrRemoveUserFromTeam)}
}

func (_c *MongoDBCloudUsersApi_AddUserToTeam_Call) Run(run func(ctx context.Context, orgId string, teamId string, addOrRemoveUserFromTeam *admin.AddOrRemoveUserFromTeam)) *MongoDBCloudUsersApi_AddUserToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveUserFromTeam))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeam_Call) Return(_a0 admin.AddUserToTeamApiRequest) *MongoDBCloudUsersApi_AddUserToTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeam_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveUserFromTeam) admin.AddUserToTeamApiRequest) *MongoDBCloudUsersApi_AddUserToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToTeamExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) AddUserToTeamExecute(r admin.AddUserToTeamApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToTeamExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddUserToTeamApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddUserToTeamApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddUserToTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddUserToTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_AddUserToTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToTeamExecute'
type MongoDBCloudUsersApi_AddUserToTeamExecute_Call struct {
	*mock.Call
}

// AddUserToTeamExecute is a helper method to define mock.On call
//   - r admin.AddUserToTeamApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) AddUserToTeamExecute(r any) *MongoDBCloudUsersApi_AddUserToTeamExecute_Call {
	return &MongoDBCloudUsersApi_AddUserToTeamExecute_Call{Call: _e.mock.On("AddUserToTeamExecute", r)}
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamExecute_Call) Run(run func(r admin.AddUserToTeamApiRequest)) *MongoDBCloudUsersApi_AddUserToTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddUserToTeamApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_AddUserToTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamExecute_Call) RunAndReturn(run func(admin.AddUserToTeamApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_AddUserToTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToTeamWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) AddUserToTeamWithParams(ctx context.Context, args *admin.AddUserToTeamApiParams) admin.AddUserToTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToTeamWithParams")
	}

	var r0 admin.AddUserToTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddUserToTeamApiParams) admin.AddUserToTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddUserToTeamApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_AddUserToTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToTeamWithParams'
type MongoDBCloudUsersApi_AddUserToTeamWithParams_Call struct {
	*mock.Call
}

// AddUserToTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddUserToTeamApiParams
func (_e *MongoDBCloudUsersApi_Expecter) AddUserToTeamWithParams(ctx any, args any) *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call {
	return &MongoDBCloudUsersApi_AddUserToTeamWithParams_Call{Call: _e.mock.On("AddUserToTeamWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.AddUserToTeamApiParams)) *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddUserToTeamApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call) Return(_a0 admin.AddUserToTeamApiRequest) *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddUserToTeamApiParams) admin.AddUserToTeamApiRequest) *MongoDBCloudUsersApi_AddUserToTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationUser provides a mock function with given fields: ctx, orgId, orgUserRequest
func (_m *MongoDBCloudUsersApi) CreateOrganizationUser(ctx context.Context, orgId string, orgUserRequest *admin.OrgUserRequest) admin.CreateOrganizationUserApiRequest {
	ret := _m.Called(ctx, orgId, orgUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUser")
	}

	var r0 admin.CreateOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.OrgUserRequest) admin.CreateOrganizationUserApiRequest); ok {
		r0 = rf(ctx, orgId, orgUserRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUser'
type MongoDBCloudUsersApi_CreateOrganizationUser_Call struct {
	*mock.Call
}

// CreateOrganizationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - orgUserRequest *admin.OrgUserRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrganizationUser(ctx any, orgId any, orgUserRequest any) *MongoDBCloudUsersApi_CreateOrganizationUser_Call {
	return &MongoDBCloudUsersApi_CreateOrganizationUser_Call{Call: _e.mock.On("CreateOrganizationUser", ctx, orgId, orgUserRequest)}
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUser_Call) Run(run func(ctx context.Context, orgId string, orgUserRequest *admin.OrgUserRequest)) *MongoDBCloudUsersApi_CreateOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.OrgUserRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUser_Call) Return(_a0 admin.CreateOrganizationUserApiRequest) *MongoDBCloudUsersApi_CreateOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUser_Call) RunAndReturn(run func(context.Context, string, *admin.OrgUserRequest) admin.CreateOrganizationUserApiRequest) *MongoDBCloudUsersApi_CreateOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) CreateOrganizationUserExecute(r admin.CreateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrganizationUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrganizationUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrganizationUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUserExecute'
type MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call struct {
	*mock.Call
}

// CreateOrganizationUserExecute is a helper method to define mock.On call
//   - r admin.CreateOrganizationUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrganizationUserExecute(r any) *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call {
	return &MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call{Call: _e.mock.On("CreateOrganizationUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call) Run(run func(r admin.CreateOrganizationUserApiRequest)) *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrganizationUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call) RunAndReturn(run func(admin.CreateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_CreateOrganizationUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) CreateOrganizationUserWithParams(ctx context.Context, args *admin.CreateOrganizationUserApiParams) admin.CreateOrganizationUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUserWithParams")
	}

	var r0 admin.CreateOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrganizationUserApiParams) admin.CreateOrganizationUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUserWithParams'
type MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call struct {
	*mock.Call
}

// CreateOrganizationUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrganizationUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) CreateOrganizationUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call {
	return &MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call{Call: _e.mock.On("CreateOrganizationUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrganizationUserApiParams)) *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrganizationUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call) Return(_a0 admin.CreateOrganizationUserApiRequest) *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrganizationUserApiParams) admin.CreateOrganizationUserApiRequest) *MongoDBCloudUsersApi_CreateOrganizationUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, cloudAppUser
func (_m *MongoDBCloudUsersApi) CreateUser(ctx context.Context, cloudAppUser *admin.CloudAppUser) admin.CreateUserApiRequest {
	ret := _m.Called(ctx, cloudAppUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 admin.CreateUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CloudAppUser) admin.CreateUserApiRequest); ok {
		r0 = rf(ctx, cloudAppUser)
	} else {
		r0 = ret.Get(0).(admin.CreateUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MongoDBCloudUsersApi_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - cloudAppUser *admin.CloudAppUser
func (_e *MongoDBCloudUsersApi_Expecter) CreateUser(ctx any, cloudAppUser any) *MongoDBCloudUsersApi_CreateUser_Call {
	return &MongoDBCloudUsersApi_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, cloudAppUser)}
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) Run(run func(ctx context.Context, cloudAppUser *admin.CloudAppUser)) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CloudAppUser))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) Return(_a0 admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUser_Call) RunAndReturn(run func(context.Context, *admin.CloudAppUser) admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) CreateUserExecute(r admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateUserApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_CreateUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserExecute'
type MongoDBCloudUsersApi_CreateUserExecute_Call struct {
	*mock.Call
}

// CreateUserExecute is a helper method to define mock.On call
//   - r admin.CreateUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) CreateUserExecute(r any) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	return &MongoDBCloudUsersApi_CreateUserExecute_Call{Call: _e.mock.On("CreateUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) Run(run func(r admin.CreateUserApiRequest)) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserExecute_Call) RunAndReturn(run func(admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_CreateUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) CreateUserWithParams(ctx context.Context, args *admin.CreateUserApiParams) admin.CreateUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserWithParams")
	}

	var r0 admin.CreateUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateUserApiParams) admin.CreateUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_CreateUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserWithParams'
type MongoDBCloudUsersApi_CreateUserWithParams_Call struct {
	*mock.Call
}

// CreateUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) CreateUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	return &MongoDBCloudUsersApi_CreateUserWithParams_Call{Call: _e.mock.On("CreateUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateUserApiParams)) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) Return(_a0 admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_CreateUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateUserApiParams) admin.CreateUserApiRequest) *MongoDBCloudUsersApi_CreateUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUser provides a mock function with given fields: ctx, orgId, userId
func (_m *MongoDBCloudUsersApi) GetOrganizationUser(ctx context.Context, orgId string, userId string) admin.GetOrganizationUserApiRequest {
	ret := _m.Called(ctx, orgId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUser")
	}

	var r0 admin.GetOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrganizationUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUser'
type MongoDBCloudUsersApi_GetOrganizationUser_Call struct {
	*mock.Call
}

// GetOrganizationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetOrganizationUser(ctx any, orgId any, userId any) *MongoDBCloudUsersApi_GetOrganizationUser_Call {
	return &MongoDBCloudUsersApi_GetOrganizationUser_Call{Call: _e.mock.On("GetOrganizationUser", ctx, orgId, userId)}
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUser_Call) Run(run func(ctx context.Context, orgId string, userId string)) *MongoDBCloudUsersApi_GetOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUser_Call) Return(_a0 admin.GetOrganizationUserApiRequest) *MongoDBCloudUsersApi_GetOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUser_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrganizationUserApiRequest) *MongoDBCloudUsersApi_GetOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetOrganizationUserExecute(r admin.GetOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrganizationUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrganizationUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrganizationUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetOrganizationUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUserExecute'
type MongoDBCloudUsersApi_GetOrganizationUserExecute_Call struct {
	*mock.Call
}

// GetOrganizationUserExecute is a helper method to define mock.On call
//   - r admin.GetOrganizationUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetOrganizationUserExecute(r any) *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call {
	return &MongoDBCloudUsersApi_GetOrganizationUserExecute_Call{Call: _e.mock.On("GetOrganizationUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call) Run(run func(r admin.GetOrganizationUserApiRequest)) *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrganizationUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call) RunAndReturn(run func(admin.GetOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_GetOrganizationUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetOrganizationUserWithParams(ctx context.Context, args *admin.GetOrganizationUserApiParams) admin.GetOrganizationUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUserWithParams")
	}

	var r0 admin.GetOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrganizationUserApiParams) admin.GetOrganizationUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUserWithParams'
type MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call struct {
	*mock.Call
}

// GetOrganizationUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrganizationUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetOrganizationUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call{Call: _e.mock.On("GetOrganizationUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrganizationUserApiParams)) *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrganizationUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call) Return(_a0 admin.GetOrganizationUserApiRequest) *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrganizationUserApiParams) admin.GetOrganizationUserApiRequest) *MongoDBCloudUsersApi_GetOrganizationUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectUser provides a mock function with given fields: ctx, groupId, userId
func (_m *MongoDBCloudUsersApi) GetProjectUser(ctx context.Context, groupId string, userId string) admin.GetProjectUserApiRequest {
	ret := _m.Called(ctx, groupId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectUser")
	}

	var r0 admin.GetProjectUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProjectUserApiRequest); ok {
		r0 = rf(ctx, groupId, userId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetProjectUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectUser'
type MongoDBCloudUsersApi_GetProjectUser_Call struct {
	*mock.Call
}

// GetProjectUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetProjectUser(ctx any, groupId any, userId any) *MongoDBCloudUsersApi_GetProjectUser_Call {
	return &MongoDBCloudUsersApi_GetProjectUser_Call{Call: _e.mock.On("GetProjectUser", ctx, groupId, userId)}
}

func (_c *MongoDBCloudUsersApi_GetProjectUser_Call) Run(run func(ctx context.Context, groupId string, userId string)) *MongoDBCloudUsersApi_GetProjectUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUser_Call) Return(_a0 admin.GetProjectUserApiRequest) *MongoDBCloudUsersApi_GetProjectUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUser_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProjectUserApiRequest) *MongoDBCloudUsersApi_GetProjectUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetProjectUserExecute(r admin.GetProjectUserApiRequest) (*admin.GroupUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectUserExecute")
	}

	var r0 *admin.GroupUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectUserApiRequest) (*admin.GroupUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectUserApiRequest) *admin.GroupUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetProjectUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectUserExecute'
type MongoDBCloudUsersApi_GetProjectUserExecute_Call struct {
	*mock.Call
}

// GetProjectUserExecute is a helper method to define mock.On call
//   - r admin.GetProjectUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetProjectUserExecute(r any) *MongoDBCloudUsersApi_GetProjectUserExecute_Call {
	return &MongoDBCloudUsersApi_GetProjectUserExecute_Call{Call: _e.mock.On("GetProjectUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetProjectUserExecute_Call) Run(run func(r admin.GetProjectUserApiRequest)) *MongoDBCloudUsersApi_GetProjectUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUserExecute_Call) Return(_a0 *admin.GroupUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetProjectUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUserExecute_Call) RunAndReturn(run func(admin.GetProjectUserApiRequest) (*admin.GroupUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_GetProjectUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetProjectUserWithParams(ctx context.Context, args *admin.GetProjectUserApiParams) admin.GetProjectUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectUserWithParams")
	}

	var r0 admin.GetProjectUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectUserApiParams) admin.GetProjectUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetProjectUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectUserWithParams'
type MongoDBCloudUsersApi_GetProjectUserWithParams_Call struct {
	*mock.Call
}

// GetProjectUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetProjectUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetProjectUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetProjectUserWithParams_Call{Call: _e.mock.On("GetProjectUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetProjectUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectUserApiParams)) *MongoDBCloudUsersApi_GetProjectUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUserWithParams_Call) Return(_a0 admin.GetProjectUserApiRequest) *MongoDBCloudUsersApi_GetProjectUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetProjectUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectUserApiParams) admin.GetProjectUserApiRequest) *MongoDBCloudUsersApi_GetProjectUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *MongoDBCloudUsersApi) GetUser(ctx context.Context, userId string) admin.GetUserApiRequest {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 admin.GetUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetUserApiRequest); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(admin.GetUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MongoDBCloudUsersApi_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MongoDBCloudUsersApi_Expecter) GetUser(ctx any, userId any) *MongoDBCloudUsersApi_GetUser_Call {
	return &MongoDBCloudUsersApi_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userId)}
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) Run(run func(ctx context.Context, userId string)) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) Return(_a0 admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUser_Call) RunAndReturn(run func(context.Context, string) admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, userName
func (_m *MongoDBCloudUsersApi) GetUserByUsername(ctx context.Context, userName string) admin.GetUserByUsernameApiRequest {
	ret := _m.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 admin.GetUserByUsernameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetUserByUsernameApiRequest); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(admin.GetUserByUsernameApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MongoDBCloudUsersApi_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByUsername(ctx any, userName any) *MongoDBCloudUsersApi_GetUserByUsername_Call {
	return &MongoDBCloudUsersApi_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, userName)}
}

func (_c *MongoDBCloudUsersApi_GetUserByUsername_Call) Run(run func(ctx context.Context, userName string)) *MongoDBCloudUsersApi_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsername_Call) Return(_a0 admin.GetUserByUsernameApiRequest) *MongoDBCloudUsersApi_GetUserByUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) admin.GetUserByUsernameApiRequest) *MongoDBCloudUsersApi_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsernameExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetUserByUsernameExecute(r admin.GetUserByUsernameApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserByUsernameApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserByUsernameApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserByUsernameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserByUsernameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetUserByUsernameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsernameExecute'
type MongoDBCloudUsersApi_GetUserByUsernameExecute_Call struct {
	*mock.Call
}

// GetUserByUsernameExecute is a helper method to define mock.On call
//   - r admin.GetUserByUsernameApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByUsernameExecute(r any) *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call {
	return &MongoDBCloudUsersApi_GetUserByUsernameExecute_Call{Call: _e.mock.On("GetUserByUsernameExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call) Run(run func(r admin.GetUserByUsernameApiRequest)) *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserByUsernameApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call) RunAndReturn(run func(admin.GetUserByUsernameApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_GetUserByUsernameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsernameWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetUserByUsernameWithParams(ctx context.Context, args *admin.GetUserByUsernameApiParams) admin.GetUserByUsernameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameWithParams")
	}

	var r0 admin.GetUserByUsernameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserByUsernameApiParams) admin.GetUserByUsernameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserByUsernameApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsernameWithParams'
type MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call struct {
	*mock.Call
}

// GetUserByUsernameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserByUsernameApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetUserByUsernameWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call {
	return &MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call{Call: _e.mock.On("GetUserByUsernameWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserByUsernameApiParams)) *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserByUsernameApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call) Return(_a0 admin.GetUserByUsernameApiRequest) *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserByUsernameApiParams) admin.GetUserByUsernameApiRequest) *MongoDBCloudUsersApi_GetUserByUsernameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) GetUserExecute(r admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserExecute")
	}

	var r0 *admin.CloudAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetUserApiRequest) *admin.CloudAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_GetUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserExecute'
type MongoDBCloudUsersApi_GetUserExecute_Call struct {
	*mock.Call
}

// GetUserExecute is a helper method to define mock.On call
//   - r admin.GetUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) GetUserExecute(r any) *MongoDBCloudUsersApi_GetUserExecute_Call {
	return &MongoDBCloudUsersApi_GetUserExecute_Call{Call: _e.mock.On("GetUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) Run(run func(r admin.GetUserApiRequest)) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) Return(_a0 *admin.CloudAppUser, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserExecute_Call) RunAndReturn(run func(admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error)) *MongoDBCloudUsersApi_GetUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) GetUserWithParams(ctx context.Context, args *admin.GetUserApiParams) admin.GetUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithParams")
	}

	var r0 admin.GetUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetUserApiParams) admin.GetUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_GetUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithParams'
type MongoDBCloudUsersApi_GetUserWithParams_Call struct {
	*mock.Call
}

// GetUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) GetUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	return &MongoDBCloudUsersApi_GetUserWithParams_Call{Call: _e.mock.On("GetUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) Run(run func(ctx context.Context, args *admin.GetUserApiParams)) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) Return(_a0 admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_GetUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetUserApiParams) admin.GetUserApiRequest) *MongoDBCloudUsersApi_GetUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationRole provides a mock function with given fields: ctx, orgId, userId, addOrRemoveOrgRole
func (_m *MongoDBCloudUsersApi) RemoveOrganizationRole(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole) admin.RemoveOrganizationRoleApiRequest {
	ret := _m.Called(ctx, orgId, userId, addOrRemoveOrgRole)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationRole")
	}

	var r0 admin.RemoveOrganizationRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.RemoveOrganizationRoleApiRequest); ok {
		r0 = rf(ctx, orgId, userId, addOrRemoveOrgRole)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrganizationRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrganizationRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationRole'
type MongoDBCloudUsersApi_RemoveOrganizationRole_Call struct {
	*mock.Call
}

// RemoveOrganizationRole is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - addOrRemoveOrgRole *admin.AddOrRemoveOrgRole
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrganizationRole(ctx any, orgId any, userId any, addOrRemoveOrgRole any) *MongoDBCloudUsersApi_RemoveOrganizationRole_Call {
	return &MongoDBCloudUsersApi_RemoveOrganizationRole_Call{Call: _e.mock.On("RemoveOrganizationRole", ctx, orgId, userId, addOrRemoveOrgRole)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRole_Call) Run(run func(ctx context.Context, orgId string, userId string, addOrRemoveOrgRole *admin.AddOrRemoveOrgRole)) *MongoDBCloudUsersApi_RemoveOrganizationRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AddOrRemoveOrgRole))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRole_Call) Return(_a0 admin.RemoveOrganizationRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrganizationRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRole_Call) RunAndReturn(run func(context.Context, string, string, *admin.AddOrRemoveOrgRole) admin.RemoveOrganizationRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrganizationRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationRoleExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) RemoveOrganizationRoleExecute(r admin.RemoveOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationRoleExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveOrganizationRoleApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveOrganizationRoleApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveOrganizationRoleApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationRoleExecute'
type MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call struct {
	*mock.Call
}

// RemoveOrganizationRoleExecute is a helper method to define mock.On call
//   - r admin.RemoveOrganizationRoleApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrganizationRoleExecute(r any) *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call {
	return &MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call{Call: _e.mock.On("RemoveOrganizationRoleExecute", r)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call) Run(run func(r admin.RemoveOrganizationRoleApiRequest)) *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveOrganizationRoleApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call) RunAndReturn(run func(admin.RemoveOrganizationRoleApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_RemoveOrganizationRoleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrganizationRoleWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) RemoveOrganizationRoleWithParams(ctx context.Context, args *admin.RemoveOrganizationRoleApiParams) admin.RemoveOrganizationRoleApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOrganizationRoleWithParams")
	}

	var r0 admin.RemoveOrganizationRoleApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveOrganizationRoleApiParams) admin.RemoveOrganizationRoleApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveOrganizationRoleApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrganizationRoleWithParams'
type MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call struct {
	*mock.Call
}

// RemoveOrganizationRoleWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveOrganizationRoleApiParams
func (_e *MongoDBCloudUsersApi_Expecter) RemoveOrganizationRoleWithParams(ctx any, args any) *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call {
	return &MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call{Call: _e.mock.On("RemoveOrganizationRoleWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveOrganizationRoleApiParams)) *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveOrganizationRoleApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call) Return(_a0 admin.RemoveOrganizationRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveOrganizationRoleApiParams) admin.RemoveOrganizationRoleApiRequest) *MongoDBCloudUsersApi_RemoveOrganizationRoleWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUser provides a mock function with given fields: ctx, orgId, userId, orgUserUpdateRequest
func (_m *MongoDBCloudUsersApi) UpdateOrganizationUser(ctx context.Context, orgId string, userId string, orgUserUpdateRequest *admin.OrgUserUpdateRequest) admin.UpdateOrganizationUserApiRequest {
	ret := _m.Called(ctx, orgId, userId, orgUserUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUser")
	}

	var r0 admin.UpdateOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.OrgUserUpdateRequest) admin.UpdateOrganizationUserApiRequest); ok {
		r0 = rf(ctx, orgId, userId, orgUserUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_UpdateOrganizationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUser'
type MongoDBCloudUsersApi_UpdateOrganizationUser_Call struct {
	*mock.Call
}

// UpdateOrganizationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - userId string
//   - orgUserUpdateRequest *admin.OrgUserUpdateRequest
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrganizationUser(ctx any, orgId any, userId any, orgUserUpdateRequest any) *MongoDBCloudUsersApi_UpdateOrganizationUser_Call {
	return &MongoDBCloudUsersApi_UpdateOrganizationUser_Call{Call: _e.mock.On("UpdateOrganizationUser", ctx, orgId, userId, orgUserUpdateRequest)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUser_Call) Run(run func(ctx context.Context, orgId string, userId string, orgUserUpdateRequest *admin.OrgUserUpdateRequest)) *MongoDBCloudUsersApi_UpdateOrganizationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.OrgUserUpdateRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUser_Call) Return(_a0 admin.UpdateOrganizationUserApiRequest) *MongoDBCloudUsersApi_UpdateOrganizationUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUser_Call) RunAndReturn(run func(context.Context, string, string, *admin.OrgUserUpdateRequest) admin.UpdateOrganizationUserApiRequest) *MongoDBCloudUsersApi_UpdateOrganizationUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUserExecute provides a mock function with given fields: r
func (_m *MongoDBCloudUsersApi) UpdateOrganizationUserExecute(r admin.UpdateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUserExecute")
	}

	var r0 *admin.OrgUserResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateOrganizationUserApiRequest) *admin.OrgUserResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateOrganizationUserApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateOrganizationUserApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUserExecute'
type MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call struct {
	*mock.Call
}

// UpdateOrganizationUserExecute is a helper method to define mock.On call
//   - r admin.UpdateOrganizationUserApiRequest
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrganizationUserExecute(r any) *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call {
	return &MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call{Call: _e.mock.On("UpdateOrganizationUserExecute", r)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call) Run(run func(r admin.UpdateOrganizationUserApiRequest)) *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateOrganizationUserApiRequest))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call) Return(_a0 *admin.OrgUserResponse, _a1 *http.Response, _a2 error) *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call) RunAndReturn(run func(admin.UpdateOrganizationUserApiRequest) (*admin.OrgUserResponse, *http.Response, error)) *MongoDBCloudUsersApi_UpdateOrganizationUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUserWithParams provides a mock function with given fields: ctx, args
func (_m *MongoDBCloudUsersApi) UpdateOrganizationUserWithParams(ctx context.Context, args *admin.UpdateOrganizationUserApiParams) admin.UpdateOrganizationUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUserWithParams")
	}

	var r0 admin.UpdateOrganizationUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateOrganizationUserApiParams) admin.UpdateOrganizationUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateOrganizationUserApiRequest)
	}

	return r0
}

// MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUserWithParams'
type MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call struct {
	*mock.Call
}

// UpdateOrganizationUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateOrganizationUserApiParams
func (_e *MongoDBCloudUsersApi_Expecter) UpdateOrganizationUserWithParams(ctx any, args any) *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call {
	return &MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call{Call: _e.mock.On("UpdateOrganizationUserWithParams", ctx, args)}
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateOrganizationUserApiParams)) *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateOrganizationUserApiParams))
	})
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call) Return(_a0 admin.UpdateOrganizationUserApiRequest) *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateOrganizationUserApiParams) admin.UpdateOrganizationUserApiRequest) *MongoDBCloudUsersApi_UpdateOrganizationUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMongoDBCloudUsersApi creates a new instance of MongoDBCloudUsersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoDBCloudUsersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoDBCloudUsersApi {
	mock := &MongoDBCloudUsersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
