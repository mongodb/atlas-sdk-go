// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// SharedTierSnapshotsApi is an autogenerated mock type for the SharedTierSnapshotsApi type
type SharedTierSnapshotsApi struct {
	mock.Mock
}

type SharedTierSnapshotsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *SharedTierSnapshotsApi) EXPECT() *SharedTierSnapshotsApi_Expecter {
	return &SharedTierSnapshotsApi_Expecter{mock: &_m.Mock}
}

// DownloadClusterBackupTenant provides a mock function with given fields: ctx, clusterName, groupId, tenantRestore
func (_m *SharedTierSnapshotsApi) DownloadClusterBackupTenant(ctx context.Context, clusterName string, groupId string, tenantRestore *admin.TenantRestore) admin.DownloadClusterBackupTenantApiRequest {
	ret := _m.Called(ctx, clusterName, groupId, tenantRestore)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterBackupTenant")
	}

	var r0 admin.DownloadClusterBackupTenantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TenantRestore) admin.DownloadClusterBackupTenantApiRequest); ok {
		r0 = rf(ctx, clusterName, groupId, tenantRestore)
	} else {
		r0 = ret.Get(0).(admin.DownloadClusterBackupTenantApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterBackupTenant'
type SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call struct {
	*mock.Call
}

// DownloadClusterBackupTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - groupId string
//   - tenantRestore *admin.TenantRestore
func (_e *SharedTierSnapshotsApi_Expecter) DownloadClusterBackupTenant(ctx any, clusterName any, groupId any, tenantRestore any) *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call {
	return &SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call{Call: _e.mock.On("DownloadClusterBackupTenant", ctx, clusterName, groupId, tenantRestore)}
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call) Run(run func(ctx context.Context, clusterName string, groupId string, tenantRestore *admin.TenantRestore)) *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TenantRestore))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call) Return(_a0 admin.DownloadClusterBackupTenantApiRequest) *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call) RunAndReturn(run func(context.Context, string, string, *admin.TenantRestore) admin.DownloadClusterBackupTenantApiRequest) *SharedTierSnapshotsApi_DownloadClusterBackupTenant_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadClusterBackupTenantExecute provides a mock function with given fields: r
func (_m *SharedTierSnapshotsApi) DownloadClusterBackupTenantExecute(r admin.DownloadClusterBackupTenantApiRequest) (*admin.TenantRestore, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterBackupTenantExecute")
	}

	var r0 *admin.TenantRestore
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DownloadClusterBackupTenantApiRequest) (*admin.TenantRestore, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DownloadClusterBackupTenantApiRequest) *admin.TenantRestore); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TenantRestore)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DownloadClusterBackupTenantApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DownloadClusterBackupTenantApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterBackupTenantExecute'
type SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call struct {
	*mock.Call
}

// DownloadClusterBackupTenantExecute is a helper method to define mock.On call
//   - r admin.DownloadClusterBackupTenantApiRequest
func (_e *SharedTierSnapshotsApi_Expecter) DownloadClusterBackupTenantExecute(r any) *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call {
	return &SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call{Call: _e.mock.On("DownloadClusterBackupTenantExecute", r)}
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call) Run(run func(r admin.DownloadClusterBackupTenantApiRequest)) *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DownloadClusterBackupTenantApiRequest))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call) Return(_a0 *admin.TenantRestore, _a1 *http.Response, _a2 error) *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call) RunAndReturn(run func(admin.DownloadClusterBackupTenantApiRequest) (*admin.TenantRestore, *http.Response, error)) *SharedTierSnapshotsApi_DownloadClusterBackupTenantExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadClusterBackupTenantWithParams provides a mock function with given fields: ctx, args
func (_m *SharedTierSnapshotsApi) DownloadClusterBackupTenantWithParams(ctx context.Context, args *admin.DownloadClusterBackupTenantApiParams) admin.DownloadClusterBackupTenantApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DownloadClusterBackupTenantWithParams")
	}

	var r0 admin.DownloadClusterBackupTenantApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DownloadClusterBackupTenantApiParams) admin.DownloadClusterBackupTenantApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DownloadClusterBackupTenantApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadClusterBackupTenantWithParams'
type SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call struct {
	*mock.Call
}

// DownloadClusterBackupTenantWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DownloadClusterBackupTenantApiParams
func (_e *SharedTierSnapshotsApi_Expecter) DownloadClusterBackupTenantWithParams(ctx any, args any) *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call {
	return &SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call{Call: _e.mock.On("DownloadClusterBackupTenantWithParams", ctx, args)}
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call) Run(run func(ctx context.Context, args *admin.DownloadClusterBackupTenantApiParams)) *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DownloadClusterBackupTenantApiParams))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call) Return(_a0 admin.DownloadClusterBackupTenantApiRequest) *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call) RunAndReturn(run func(context.Context, *admin.DownloadClusterBackupTenantApiParams) admin.DownloadClusterBackupTenantApiRequest) *SharedTierSnapshotsApi_DownloadClusterBackupTenantWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupTenantSnapshot provides a mock function with given fields: ctx, groupId, clusterName, snapshotId
func (_m *SharedTierSnapshotsApi) GetBackupTenantSnapshot(ctx context.Context, groupId string, clusterName string, snapshotId string) admin.GetBackupTenantSnapshotApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, snapshotId)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupTenantSnapshot")
	}

	var r0 admin.GetBackupTenantSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetBackupTenantSnapshotApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, snapshotId)
	} else {
		r0 = ret.Get(0).(admin.GetBackupTenantSnapshotApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupTenantSnapshot'
type SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call struct {
	*mock.Call
}

// GetBackupTenantSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - snapshotId string
func (_e *SharedTierSnapshotsApi_Expecter) GetBackupTenantSnapshot(ctx any, groupId any, clusterName any, snapshotId any) *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call {
	return &SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call{Call: _e.mock.On("GetBackupTenantSnapshot", ctx, groupId, clusterName, snapshotId)}
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call) Run(run func(ctx context.Context, groupId string, clusterName string, snapshotId string)) *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call) Return(_a0 admin.GetBackupTenantSnapshotApiRequest) *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetBackupTenantSnapshotApiRequest) *SharedTierSnapshotsApi_GetBackupTenantSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupTenantSnapshotExecute provides a mock function with given fields: r
func (_m *SharedTierSnapshotsApi) GetBackupTenantSnapshotExecute(r admin.GetBackupTenantSnapshotApiRequest) (*admin.BackupTenantSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupTenantSnapshotExecute")
	}

	var r0 *admin.BackupTenantSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetBackupTenantSnapshotApiRequest) (*admin.BackupTenantSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetBackupTenantSnapshotApiRequest) *admin.BackupTenantSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BackupTenantSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetBackupTenantSnapshotApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetBackupTenantSnapshotApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupTenantSnapshotExecute'
type SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call struct {
	*mock.Call
}

// GetBackupTenantSnapshotExecute is a helper method to define mock.On call
//   - r admin.GetBackupTenantSnapshotApiRequest
func (_e *SharedTierSnapshotsApi_Expecter) GetBackupTenantSnapshotExecute(r any) *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call {
	return &SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call{Call: _e.mock.On("GetBackupTenantSnapshotExecute", r)}
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call) Run(run func(r admin.GetBackupTenantSnapshotApiRequest)) *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetBackupTenantSnapshotApiRequest))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call) Return(_a0 *admin.BackupTenantSnapshot, _a1 *http.Response, _a2 error) *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call) RunAndReturn(run func(admin.GetBackupTenantSnapshotApiRequest) (*admin.BackupTenantSnapshot, *http.Response, error)) *SharedTierSnapshotsApi_GetBackupTenantSnapshotExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupTenantSnapshotWithParams provides a mock function with given fields: ctx, args
func (_m *SharedTierSnapshotsApi) GetBackupTenantSnapshotWithParams(ctx context.Context, args *admin.GetBackupTenantSnapshotApiParams) admin.GetBackupTenantSnapshotApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupTenantSnapshotWithParams")
	}

	var r0 admin.GetBackupTenantSnapshotApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetBackupTenantSnapshotApiParams) admin.GetBackupTenantSnapshotApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetBackupTenantSnapshotApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupTenantSnapshotWithParams'
type SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call struct {
	*mock.Call
}

// GetBackupTenantSnapshotWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetBackupTenantSnapshotApiParams
func (_e *SharedTierSnapshotsApi_Expecter) GetBackupTenantSnapshotWithParams(ctx any, args any) *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call {
	return &SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call{Call: _e.mock.On("GetBackupTenantSnapshotWithParams", ctx, args)}
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call) Run(run func(ctx context.Context, args *admin.GetBackupTenantSnapshotApiParams)) *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetBackupTenantSnapshotApiParams))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call) Return(_a0 admin.GetBackupTenantSnapshotApiRequest) *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetBackupTenantSnapshotApiParams) admin.GetBackupTenantSnapshotApiRequest) *SharedTierSnapshotsApi_GetBackupTenantSnapshotWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupSnapshots provides a mock function with given fields: ctx, groupId, clusterName
func (_m *SharedTierSnapshotsApi) ListClusterBackupSnapshots(ctx context.Context, groupId string, clusterName string) admin.ListClusterBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupSnapshots")
	}

	var r0 admin.ListClusterBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterBackupSnapshotsApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupSnapshots'
type SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call struct {
	*mock.Call
}

// ListClusterBackupSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *SharedTierSnapshotsApi_Expecter) ListClusterBackupSnapshots(ctx any, groupId any, clusterName any) *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call {
	return &SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call{Call: _e.mock.On("ListClusterBackupSnapshots", ctx, groupId, clusterName)}
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call) Return(_a0 admin.ListClusterBackupSnapshotsApiRequest) *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterBackupSnapshotsApiRequest) *SharedTierSnapshotsApi_ListClusterBackupSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupSnapshotsExecute provides a mock function with given fields: r
func (_m *SharedTierSnapshotsApi) ListClusterBackupSnapshotsExecute(r admin.ListClusterBackupSnapshotsApiRequest) (*admin.PaginatedTenantSnapshot, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupSnapshotsExecute")
	}

	var r0 *admin.PaginatedTenantSnapshot
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterBackupSnapshotsApiRequest) (*admin.PaginatedTenantSnapshot, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterBackupSnapshotsApiRequest) *admin.PaginatedTenantSnapshot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTenantSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterBackupSnapshotsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterBackupSnapshotsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupSnapshotsExecute'
type SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call struct {
	*mock.Call
}

// ListClusterBackupSnapshotsExecute is a helper method to define mock.On call
//   - r admin.ListClusterBackupSnapshotsApiRequest
func (_e *SharedTierSnapshotsApi_Expecter) ListClusterBackupSnapshotsExecute(r any) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call {
	return &SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call{Call: _e.mock.On("ListClusterBackupSnapshotsExecute", r)}
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call) Run(run func(r admin.ListClusterBackupSnapshotsApiRequest)) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterBackupSnapshotsApiRequest))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call) Return(_a0 *admin.PaginatedTenantSnapshot, _a1 *http.Response, _a2 error) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call) RunAndReturn(run func(admin.ListClusterBackupSnapshotsApiRequest) (*admin.PaginatedTenantSnapshot, *http.Response, error)) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterBackupSnapshotsWithParams provides a mock function with given fields: ctx, args
func (_m *SharedTierSnapshotsApi) ListClusterBackupSnapshotsWithParams(ctx context.Context, args *admin.ListClusterBackupSnapshotsApiParams) admin.ListClusterBackupSnapshotsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterBackupSnapshotsWithParams")
	}

	var r0 admin.ListClusterBackupSnapshotsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterBackupSnapshotsApiParams) admin.ListClusterBackupSnapshotsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterBackupSnapshotsApiRequest)
	}

	return r0
}

// SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterBackupSnapshotsWithParams'
type SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call struct {
	*mock.Call
}

// ListClusterBackupSnapshotsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterBackupSnapshotsApiParams
func (_e *SharedTierSnapshotsApi_Expecter) ListClusterBackupSnapshotsWithParams(ctx any, args any) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call {
	return &SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call{Call: _e.mock.On("ListClusterBackupSnapshotsWithParams", ctx, args)}
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterBackupSnapshotsApiParams)) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterBackupSnapshotsApiParams))
	})
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call) Return(_a0 admin.ListClusterBackupSnapshotsApiRequest) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterBackupSnapshotsApiParams) admin.ListClusterBackupSnapshotsApiRequest) *SharedTierSnapshotsApi_ListClusterBackupSnapshotsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewSharedTierSnapshotsApi creates a new instance of SharedTierSnapshotsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedTierSnapshotsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *SharedTierSnapshotsApi {
	mock := &SharedTierSnapshotsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
