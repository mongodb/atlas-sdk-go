// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312001/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AtlasSearchApi is an autogenerated mock type for the AtlasSearchApi type
type AtlasSearchApi struct {
	mock.Mock
}

type AtlasSearchApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasSearchApi) EXPECT() *AtlasSearchApi_Expecter {
	return &AtlasSearchApi_Expecter{mock: &_m.Mock}
}

// CreateClusterFtsIndex provides a mock function with given fields: ctx, groupId, clusterName, clusterSearchIndex
func (_m *AtlasSearchApi) CreateClusterFtsIndex(ctx context.Context, groupId string, clusterName string, clusterSearchIndex *admin.ClusterSearchIndex) admin.CreateClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterSearchIndex)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterFtsIndex")
	}

	var r0 admin.CreateClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ClusterSearchIndex) admin.CreateClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterSearchIndex)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterFtsIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterFtsIndex'
type AtlasSearchApi_CreateClusterFtsIndex_Call struct {
	*mock.Call
}

// CreateClusterFtsIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterSearchIndex *admin.ClusterSearchIndex
func (_e *AtlasSearchApi_Expecter) CreateClusterFtsIndex(ctx any, groupId any, clusterName any, clusterSearchIndex any) *AtlasSearchApi_CreateClusterFtsIndex_Call {
	return &AtlasSearchApi_CreateClusterFtsIndex_Call{Call: _e.mock.On("CreateClusterFtsIndex", ctx, groupId, clusterName, clusterSearchIndex)}
}

func (_c *AtlasSearchApi_CreateClusterFtsIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterSearchIndex *admin.ClusterSearchIndex)) *AtlasSearchApi_CreateClusterFtsIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ClusterSearchIndex))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndex_Call) Return(_a0 admin.CreateClusterFtsIndexApiRequest) *AtlasSearchApi_CreateClusterFtsIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndex_Call) RunAndReturn(run func(context.Context, string, string, *admin.ClusterSearchIndex) admin.CreateClusterFtsIndexApiRequest) *AtlasSearchApi_CreateClusterFtsIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterFtsIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) CreateClusterFtsIndexExecute(r admin.CreateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterFtsIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateClusterFtsIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateClusterFtsIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateClusterFtsIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_CreateClusterFtsIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterFtsIndexExecute'
type AtlasSearchApi_CreateClusterFtsIndexExecute_Call struct {
	*mock.Call
}

// CreateClusterFtsIndexExecute is a helper method to define mock.On call
//   - r admin.CreateClusterFtsIndexApiRequest
func (_e *AtlasSearchApi_Expecter) CreateClusterFtsIndexExecute(r any) *AtlasSearchApi_CreateClusterFtsIndexExecute_Call {
	return &AtlasSearchApi_CreateClusterFtsIndexExecute_Call{Call: _e.mock.On("CreateClusterFtsIndexExecute", r)}
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexExecute_Call) Run(run func(r admin.CreateClusterFtsIndexApiRequest)) *AtlasSearchApi_CreateClusterFtsIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateClusterFtsIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApi_CreateClusterFtsIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexExecute_Call) RunAndReturn(run func(admin.CreateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApi_CreateClusterFtsIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterFtsIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) CreateClusterFtsIndexWithParams(ctx context.Context, args *admin.CreateClusterFtsIndexApiParams) admin.CreateClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterFtsIndexWithParams")
	}

	var r0 admin.CreateClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateClusterFtsIndexApiParams) admin.CreateClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterFtsIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterFtsIndexWithParams'
type AtlasSearchApi_CreateClusterFtsIndexWithParams_Call struct {
	*mock.Call
}

// CreateClusterFtsIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateClusterFtsIndexApiParams
func (_e *AtlasSearchApi_Expecter) CreateClusterFtsIndexWithParams(ctx any, args any) *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call {
	return &AtlasSearchApi_CreateClusterFtsIndexWithParams_Call{Call: _e.mock.On("CreateClusterFtsIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateClusterFtsIndexApiParams)) *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateClusterFtsIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call) Return(_a0 admin.CreateClusterFtsIndexApiRequest) *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateClusterFtsIndexApiParams) admin.CreateClusterFtsIndexApiRequest) *AtlasSearchApi_CreateClusterFtsIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName, apiSearchDeploymentRequest
func (_m *AtlasSearchApi) CreateClusterSearchDeployment(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest) admin.CreateClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, apiSearchDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchDeployment")
	}

	var r0 admin.CreateClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.CreateClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, apiSearchDeploymentRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchDeployment'
type AtlasSearchApi_CreateClusterSearchDeployment_Call struct {
	*mock.Call
}

// CreateClusterSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchDeployment(ctx any, groupId any, clusterName any, apiSearchDeploymentRequest any) *AtlasSearchApi_CreateClusterSearchDeployment_Call {
	return &AtlasSearchApi_CreateClusterSearchDeployment_Call{Call: _e.mock.On("CreateClusterSearchDeployment", ctx, groupId, clusterName, apiSearchDeploymentRequest)}
}

func (_c *AtlasSearchApi_CreateClusterSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest)) *AtlasSearchApi_CreateClusterSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiSearchDeploymentRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeployment_Call) Return(_a0 admin.CreateClusterSearchDeploymentApiRequest) *AtlasSearchApi_CreateClusterSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.CreateClusterSearchDeploymentApiRequest) *AtlasSearchApi_CreateClusterSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) CreateClusterSearchDeploymentExecute(r admin.CreateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateClusterSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateClusterSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateClusterSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchDeploymentExecute'
type AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call struct {
	*mock.Call
}

// CreateClusterSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.CreateClusterSearchDeploymentApiRequest
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchDeploymentExecute(r any) *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call {
	return &AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call{Call: _e.mock.On("CreateClusterSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call) Run(run func(r admin.CreateClusterSearchDeploymentApiRequest)) *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateClusterSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call) RunAndReturn(run func(admin.CreateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApi_CreateClusterSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) CreateClusterSearchDeploymentWithParams(ctx context.Context, args *admin.CreateClusterSearchDeploymentApiParams) admin.CreateClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchDeploymentWithParams")
	}

	var r0 admin.CreateClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateClusterSearchDeploymentApiParams) admin.CreateClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchDeploymentWithParams'
type AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// CreateClusterSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateClusterSearchDeploymentApiParams
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchDeploymentWithParams(ctx any, args any) *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call {
	return &AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call{Call: _e.mock.On("CreateClusterSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateClusterSearchDeploymentApiParams)) *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateClusterSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call) Return(_a0 admin.CreateClusterSearchDeploymentApiRequest) *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateClusterSearchDeploymentApiParams) admin.CreateClusterSearchDeploymentApiRequest) *AtlasSearchApi_CreateClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, searchIndexCreateRequest
func (_m *AtlasSearchApi) CreateClusterSearchIndex(ctx context.Context, groupId string, clusterName string, searchIndexCreateRequest *admin.SearchIndexCreateRequest) admin.CreateClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, searchIndexCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchIndex")
	}

	var r0 admin.CreateClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.SearchIndexCreateRequest) admin.CreateClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, searchIndexCreateRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchIndex'
type AtlasSearchApi_CreateClusterSearchIndex_Call struct {
	*mock.Call
}

// CreateClusterSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - searchIndexCreateRequest *admin.SearchIndexCreateRequest
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchIndex(ctx any, groupId any, clusterName any, searchIndexCreateRequest any) *AtlasSearchApi_CreateClusterSearchIndex_Call {
	return &AtlasSearchApi_CreateClusterSearchIndex_Call{Call: _e.mock.On("CreateClusterSearchIndex", ctx, groupId, clusterName, searchIndexCreateRequest)}
}

func (_c *AtlasSearchApi_CreateClusterSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, searchIndexCreateRequest *admin.SearchIndexCreateRequest)) *AtlasSearchApi_CreateClusterSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.SearchIndexCreateRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndex_Call) Return(_a0 admin.CreateClusterSearchIndexApiRequest) *AtlasSearchApi_CreateClusterSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, *admin.SearchIndexCreateRequest) admin.CreateClusterSearchIndexApiRequest) *AtlasSearchApi_CreateClusterSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) CreateClusterSearchIndexExecute(r admin.CreateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchIndexExecute")
	}

	var r0 *admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateClusterSearchIndexApiRequest) *admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateClusterSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateClusterSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_CreateClusterSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchIndexExecute'
type AtlasSearchApi_CreateClusterSearchIndexExecute_Call struct {
	*mock.Call
}

// CreateClusterSearchIndexExecute is a helper method to define mock.On call
//   - r admin.CreateClusterSearchIndexApiRequest
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchIndexExecute(r any) *AtlasSearchApi_CreateClusterSearchIndexExecute_Call {
	return &AtlasSearchApi_CreateClusterSearchIndexExecute_Call{Call: _e.mock.On("CreateClusterSearchIndexExecute", r)}
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexExecute_Call) Run(run func(r admin.CreateClusterSearchIndexApiRequest)) *AtlasSearchApi_CreateClusterSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateClusterSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexExecute_Call) Return(_a0 *admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_CreateClusterSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexExecute_Call) RunAndReturn(run func(admin.CreateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_CreateClusterSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) CreateClusterSearchIndexWithParams(ctx context.Context, args *admin.CreateClusterSearchIndexApiParams) admin.CreateClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSearchIndexWithParams")
	}

	var r0 admin.CreateClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateClusterSearchIndexApiParams) admin.CreateClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_CreateClusterSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterSearchIndexWithParams'
type AtlasSearchApi_CreateClusterSearchIndexWithParams_Call struct {
	*mock.Call
}

// CreateClusterSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateClusterSearchIndexApiParams
func (_e *AtlasSearchApi_Expecter) CreateClusterSearchIndexWithParams(ctx any, args any) *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call {
	return &AtlasSearchApi_CreateClusterSearchIndexWithParams_Call{Call: _e.mock.On("CreateClusterSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateClusterSearchIndexApiParams)) *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateClusterSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call) Return(_a0 admin.CreateClusterSearchIndexApiRequest) *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateClusterSearchIndexApiParams) admin.CreateClusterSearchIndexApiRequest) *AtlasSearchApi_CreateClusterSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterFtsIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApi) DeleteClusterFtsIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.DeleteClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterFtsIndex")
	}

	var r0 admin.DeleteClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterFtsIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterFtsIndex'
type AtlasSearchApi_DeleteClusterFtsIndex_Call struct {
	*mock.Call
}

// DeleteClusterFtsIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApi_Expecter) DeleteClusterFtsIndex(ctx any, groupId any, clusterName any, indexId any) *AtlasSearchApi_DeleteClusterFtsIndex_Call {
	return &AtlasSearchApi_DeleteClusterFtsIndex_Call{Call: _e.mock.On("DeleteClusterFtsIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApi_DeleteClusterFtsIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndex_Call) Return(_a0 admin.DeleteClusterFtsIndexApiRequest) *AtlasSearchApi_DeleteClusterFtsIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteClusterFtsIndexApiRequest) *AtlasSearchApi_DeleteClusterFtsIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterFtsIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) DeleteClusterFtsIndexExecute(r admin.DeleteClusterFtsIndexApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterFtsIndexExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterFtsIndexApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterFtsIndexApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterFtsIndexApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasSearchApi_DeleteClusterFtsIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterFtsIndexExecute'
type AtlasSearchApi_DeleteClusterFtsIndexExecute_Call struct {
	*mock.Call
}

// DeleteClusterFtsIndexExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterFtsIndexApiRequest
func (_e *AtlasSearchApi_Expecter) DeleteClusterFtsIndexExecute(r any) *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call {
	return &AtlasSearchApi_DeleteClusterFtsIndexExecute_Call{Call: _e.mock.On("DeleteClusterFtsIndexExecute", r)}
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call) Run(run func(r admin.DeleteClusterFtsIndexApiRequest)) *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterFtsIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call) Return(_a0 *http.Response, _a1 error) *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call) RunAndReturn(run func(admin.DeleteClusterFtsIndexApiRequest) (*http.Response, error)) *AtlasSearchApi_DeleteClusterFtsIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterFtsIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) DeleteClusterFtsIndexWithParams(ctx context.Context, args *admin.DeleteClusterFtsIndexApiParams) admin.DeleteClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterFtsIndexWithParams")
	}

	var r0 admin.DeleteClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterFtsIndexApiParams) admin.DeleteClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterFtsIndexWithParams'
type AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call struct {
	*mock.Call
}

// DeleteClusterFtsIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterFtsIndexApiParams
func (_e *AtlasSearchApi_Expecter) DeleteClusterFtsIndexWithParams(ctx any, args any) *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call {
	return &AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call{Call: _e.mock.On("DeleteClusterFtsIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterFtsIndexApiParams)) *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterFtsIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call) Return(_a0 admin.DeleteClusterFtsIndexApiRequest) *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterFtsIndexApiParams) admin.DeleteClusterFtsIndexApiRequest) *AtlasSearchApi_DeleteClusterFtsIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AtlasSearchApi) DeleteClusterSearchDeployment(ctx context.Context, groupId string, clusterName string) admin.DeleteClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchDeployment")
	}

	var r0 admin.DeleteClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchDeployment'
type AtlasSearchApi_DeleteClusterSearchDeployment_Call struct {
	*mock.Call
}

// DeleteClusterSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchDeployment(ctx any, groupId any, clusterName any) *AtlasSearchApi_DeleteClusterSearchDeployment_Call {
	return &AtlasSearchApi_DeleteClusterSearchDeployment_Call{Call: _e.mock.On("DeleteClusterSearchDeployment", ctx, groupId, clusterName)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AtlasSearchApi_DeleteClusterSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeployment_Call) Return(_a0 admin.DeleteClusterSearchDeploymentApiRequest) *AtlasSearchApi_DeleteClusterSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteClusterSearchDeploymentApiRequest) *AtlasSearchApi_DeleteClusterSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) DeleteClusterSearchDeploymentExecute(r admin.DeleteClusterSearchDeploymentApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchDeploymentExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSearchDeploymentApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSearchDeploymentApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterSearchDeploymentApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchDeploymentExecute'
type AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call struct {
	*mock.Call
}

// DeleteClusterSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterSearchDeploymentApiRequest
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchDeploymentExecute(r any) *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call {
	return &AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call{Call: _e.mock.On("DeleteClusterSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call) Run(run func(r admin.DeleteClusterSearchDeploymentApiRequest)) *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call) Return(_a0 *http.Response, _a1 error) *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call) RunAndReturn(run func(admin.DeleteClusterSearchDeploymentApiRequest) (*http.Response, error)) *AtlasSearchApi_DeleteClusterSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) DeleteClusterSearchDeploymentWithParams(ctx context.Context, args *admin.DeleteClusterSearchDeploymentApiParams) admin.DeleteClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchDeploymentWithParams")
	}

	var r0 admin.DeleteClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterSearchDeploymentApiParams) admin.DeleteClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchDeploymentWithParams'
type AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// DeleteClusterSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterSearchDeploymentApiParams
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchDeploymentWithParams(ctx any, args any) *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call {
	return &AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call{Call: _e.mock.On("DeleteClusterSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterSearchDeploymentApiParams)) *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call) Return(_a0 admin.DeleteClusterSearchDeploymentApiRequest) *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterSearchDeploymentApiParams) admin.DeleteClusterSearchDeploymentApiRequest) *AtlasSearchApi_DeleteClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApi) DeleteClusterSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.DeleteClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchIndex")
	}

	var r0 admin.DeleteClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchIndex'
type AtlasSearchApi_DeleteClusterSearchIndex_Call struct {
	*mock.Call
}

// DeleteClusterSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchIndex(ctx any, groupId any, clusterName any, indexId any) *AtlasSearchApi_DeleteClusterSearchIndex_Call {
	return &AtlasSearchApi_DeleteClusterSearchIndex_Call{Call: _e.mock.On("DeleteClusterSearchIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApi_DeleteClusterSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndex_Call) Return(_a0 admin.DeleteClusterSearchIndexApiRequest) *AtlasSearchApi_DeleteClusterSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteClusterSearchIndexApiRequest) *AtlasSearchApi_DeleteClusterSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) DeleteClusterSearchIndexExecute(r admin.DeleteClusterSearchIndexApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchIndexExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSearchIndexApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteClusterSearchIndexApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteClusterSearchIndexApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasSearchApi_DeleteClusterSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchIndexExecute'
type AtlasSearchApi_DeleteClusterSearchIndexExecute_Call struct {
	*mock.Call
}

// DeleteClusterSearchIndexExecute is a helper method to define mock.On call
//   - r admin.DeleteClusterSearchIndexApiRequest
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchIndexExecute(r any) *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call {
	return &AtlasSearchApi_DeleteClusterSearchIndexExecute_Call{Call: _e.mock.On("DeleteClusterSearchIndexExecute", r)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call) Run(run func(r admin.DeleteClusterSearchIndexApiRequest)) *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteClusterSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call) Return(_a0 *http.Response, _a1 error) *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call) RunAndReturn(run func(admin.DeleteClusterSearchIndexApiRequest) (*http.Response, error)) *AtlasSearchApi_DeleteClusterSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClusterSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) DeleteClusterSearchIndexWithParams(ctx context.Context, args *admin.DeleteClusterSearchIndexApiParams) admin.DeleteClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSearchIndexWithParams")
	}

	var r0 admin.DeleteClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteClusterSearchIndexApiParams) admin.DeleteClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClusterSearchIndexWithParams'
type AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call struct {
	*mock.Call
}

// DeleteClusterSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteClusterSearchIndexApiParams
func (_e *AtlasSearchApi_Expecter) DeleteClusterSearchIndexWithParams(ctx any, args any) *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call {
	return &AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call{Call: _e.mock.On("DeleteClusterSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteClusterSearchIndexApiParams)) *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteClusterSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call) Return(_a0 admin.DeleteClusterSearchIndexApiRequest) *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteClusterSearchIndexApiParams) admin.DeleteClusterSearchIndexApiRequest) *AtlasSearchApi_DeleteClusterSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndexByName provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName, indexName
func (_m *AtlasSearchApi) DeleteIndexByName(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string) admin.DeleteIndexByNameApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName, indexName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndexByName")
	}

	var r0 admin.DeleteIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.DeleteIndexByNameApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName, indexName)
	} else {
		r0 = ret.Get(0).(admin.DeleteIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteIndexByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndexByName'
type AtlasSearchApi_DeleteIndexByName_Call struct {
	*mock.Call
}

// DeleteIndexByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
//   - indexName string
func (_e *AtlasSearchApi_Expecter) DeleteIndexByName(ctx any, groupId any, clusterName any, collectionName any, databaseName any, indexName any) *AtlasSearchApi_DeleteIndexByName_Call {
	return &AtlasSearchApi_DeleteIndexByName_Call{Call: _e.mock.On("DeleteIndexByName", ctx, groupId, clusterName, collectionName, databaseName, indexName)}
}

func (_c *AtlasSearchApi_DeleteIndexByName_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string)) *AtlasSearchApi_DeleteIndexByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByName_Call) Return(_a0 admin.DeleteIndexByNameApiRequest) *AtlasSearchApi_DeleteIndexByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByName_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.DeleteIndexByNameApiRequest) *AtlasSearchApi_DeleteIndexByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndexByNameExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) DeleteIndexByNameExecute(r admin.DeleteIndexByNameApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndexByNameExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteIndexByNameApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteIndexByNameApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteIndexByNameApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasSearchApi_DeleteIndexByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndexByNameExecute'
type AtlasSearchApi_DeleteIndexByNameExecute_Call struct {
	*mock.Call
}

// DeleteIndexByNameExecute is a helper method to define mock.On call
//   - r admin.DeleteIndexByNameApiRequest
func (_e *AtlasSearchApi_Expecter) DeleteIndexByNameExecute(r any) *AtlasSearchApi_DeleteIndexByNameExecute_Call {
	return &AtlasSearchApi_DeleteIndexByNameExecute_Call{Call: _e.mock.On("DeleteIndexByNameExecute", r)}
}

func (_c *AtlasSearchApi_DeleteIndexByNameExecute_Call) Run(run func(r admin.DeleteIndexByNameApiRequest)) *AtlasSearchApi_DeleteIndexByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteIndexByNameApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByNameExecute_Call) Return(_a0 *http.Response, _a1 error) *AtlasSearchApi_DeleteIndexByNameExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByNameExecute_Call) RunAndReturn(run func(admin.DeleteIndexByNameApiRequest) (*http.Response, error)) *AtlasSearchApi_DeleteIndexByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndexByNameWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) DeleteIndexByNameWithParams(ctx context.Context, args *admin.DeleteIndexByNameApiParams) admin.DeleteIndexByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndexByNameWithParams")
	}

	var r0 admin.DeleteIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteIndexByNameApiParams) admin.DeleteIndexByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_DeleteIndexByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndexByNameWithParams'
type AtlasSearchApi_DeleteIndexByNameWithParams_Call struct {
	*mock.Call
}

// DeleteIndexByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteIndexByNameApiParams
func (_e *AtlasSearchApi_Expecter) DeleteIndexByNameWithParams(ctx any, args any) *AtlasSearchApi_DeleteIndexByNameWithParams_Call {
	return &AtlasSearchApi_DeleteIndexByNameWithParams_Call{Call: _e.mock.On("DeleteIndexByNameWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_DeleteIndexByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteIndexByNameApiParams)) *AtlasSearchApi_DeleteIndexByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteIndexByNameApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByNameWithParams_Call) Return(_a0 admin.DeleteIndexByNameApiRequest) *AtlasSearchApi_DeleteIndexByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_DeleteIndexByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteIndexByNameApiParams) admin.DeleteIndexByNameApiRequest) *AtlasSearchApi_DeleteIndexByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterFtsIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApi) GetClusterFtsIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.GetClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterFtsIndex")
	}

	var r0 admin.GetClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.GetClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterFtsIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterFtsIndex'
type AtlasSearchApi_GetClusterFtsIndex_Call struct {
	*mock.Call
}

// GetClusterFtsIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApi_Expecter) GetClusterFtsIndex(ctx any, groupId any, clusterName any, indexId any) *AtlasSearchApi_GetClusterFtsIndex_Call {
	return &AtlasSearchApi_GetClusterFtsIndex_Call{Call: _e.mock.On("GetClusterFtsIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApi_GetClusterFtsIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApi_GetClusterFtsIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndex_Call) Return(_a0 admin.GetClusterFtsIndexApiRequest) *AtlasSearchApi_GetClusterFtsIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterFtsIndexApiRequest) *AtlasSearchApi_GetClusterFtsIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterFtsIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) GetClusterFtsIndexExecute(r admin.GetClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterFtsIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterFtsIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterFtsIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterFtsIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_GetClusterFtsIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterFtsIndexExecute'
type AtlasSearchApi_GetClusterFtsIndexExecute_Call struct {
	*mock.Call
}

// GetClusterFtsIndexExecute is a helper method to define mock.On call
//   - r admin.GetClusterFtsIndexApiRequest
func (_e *AtlasSearchApi_Expecter) GetClusterFtsIndexExecute(r any) *AtlasSearchApi_GetClusterFtsIndexExecute_Call {
	return &AtlasSearchApi_GetClusterFtsIndexExecute_Call{Call: _e.mock.On("GetClusterFtsIndexExecute", r)}
}

func (_c *AtlasSearchApi_GetClusterFtsIndexExecute_Call) Run(run func(r admin.GetClusterFtsIndexApiRequest)) *AtlasSearchApi_GetClusterFtsIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterFtsIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApi_GetClusterFtsIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndexExecute_Call) RunAndReturn(run func(admin.GetClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApi_GetClusterFtsIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterFtsIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) GetClusterFtsIndexWithParams(ctx context.Context, args *admin.GetClusterFtsIndexApiParams) admin.GetClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterFtsIndexWithParams")
	}

	var r0 admin.GetClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterFtsIndexApiParams) admin.GetClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterFtsIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterFtsIndexWithParams'
type AtlasSearchApi_GetClusterFtsIndexWithParams_Call struct {
	*mock.Call
}

// GetClusterFtsIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterFtsIndexApiParams
func (_e *AtlasSearchApi_Expecter) GetClusterFtsIndexWithParams(ctx any, args any) *AtlasSearchApi_GetClusterFtsIndexWithParams_Call {
	return &AtlasSearchApi_GetClusterFtsIndexWithParams_Call{Call: _e.mock.On("GetClusterFtsIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_GetClusterFtsIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterFtsIndexApiParams)) *AtlasSearchApi_GetClusterFtsIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterFtsIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndexWithParams_Call) Return(_a0 admin.GetClusterFtsIndexApiRequest) *AtlasSearchApi_GetClusterFtsIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterFtsIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterFtsIndexApiParams) admin.GetClusterFtsIndexApiRequest) *AtlasSearchApi_GetClusterFtsIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AtlasSearchApi) GetClusterSearchDeployment(ctx context.Context, groupId string, clusterName string) admin.GetClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchDeployment")
	}

	var r0 admin.GetClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchDeployment'
type AtlasSearchApi_GetClusterSearchDeployment_Call struct {
	*mock.Call
}

// GetClusterSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AtlasSearchApi_Expecter) GetClusterSearchDeployment(ctx any, groupId any, clusterName any) *AtlasSearchApi_GetClusterSearchDeployment_Call {
	return &AtlasSearchApi_GetClusterSearchDeployment_Call{Call: _e.mock.On("GetClusterSearchDeployment", ctx, groupId, clusterName)}
}

func (_c *AtlasSearchApi_GetClusterSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AtlasSearchApi_GetClusterSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeployment_Call) Return(_a0 admin.GetClusterSearchDeploymentApiRequest) *AtlasSearchApi_GetClusterSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string) admin.GetClusterSearchDeploymentApiRequest) *AtlasSearchApi_GetClusterSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) GetClusterSearchDeploymentExecute(r admin.GetClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_GetClusterSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchDeploymentExecute'
type AtlasSearchApi_GetClusterSearchDeploymentExecute_Call struct {
	*mock.Call
}

// GetClusterSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.GetClusterSearchDeploymentApiRequest
func (_e *AtlasSearchApi_Expecter) GetClusterSearchDeploymentExecute(r any) *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call {
	return &AtlasSearchApi_GetClusterSearchDeploymentExecute_Call{Call: _e.mock.On("GetClusterSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call) Run(run func(r admin.GetClusterSearchDeploymentApiRequest)) *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call) RunAndReturn(run func(admin.GetClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApi_GetClusterSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) GetClusterSearchDeploymentWithParams(ctx context.Context, args *admin.GetClusterSearchDeploymentApiParams) admin.GetClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchDeploymentWithParams")
	}

	var r0 admin.GetClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterSearchDeploymentApiParams) admin.GetClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchDeploymentWithParams'
type AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// GetClusterSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterSearchDeploymentApiParams
func (_e *AtlasSearchApi_Expecter) GetClusterSearchDeploymentWithParams(ctx any, args any) *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call {
	return &AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call{Call: _e.mock.On("GetClusterSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterSearchDeploymentApiParams)) *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call) Return(_a0 admin.GetClusterSearchDeploymentApiRequest) *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterSearchDeploymentApiParams) admin.GetClusterSearchDeploymentApiRequest) *AtlasSearchApi_GetClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApi) GetClusterSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.GetClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchIndex")
	}

	var r0 admin.GetClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchIndex'
type AtlasSearchApi_GetClusterSearchIndex_Call struct {
	*mock.Call
}

// GetClusterSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApi_Expecter) GetClusterSearchIndex(ctx any, groupId any, clusterName any, indexId any) *AtlasSearchApi_GetClusterSearchIndex_Call {
	return &AtlasSearchApi_GetClusterSearchIndex_Call{Call: _e.mock.On("GetClusterSearchIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApi_GetClusterSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApi_GetClusterSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndex_Call) Return(_a0 admin.GetClusterSearchIndexApiRequest) *AtlasSearchApi_GetClusterSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetClusterSearchIndexApiRequest) *AtlasSearchApi_GetClusterSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) GetClusterSearchIndexExecute(r admin.GetClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchIndexExecute")
	}

	var r0 *admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetClusterSearchIndexApiRequest) *admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetClusterSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetClusterSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_GetClusterSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchIndexExecute'
type AtlasSearchApi_GetClusterSearchIndexExecute_Call struct {
	*mock.Call
}

// GetClusterSearchIndexExecute is a helper method to define mock.On call
//   - r admin.GetClusterSearchIndexApiRequest
func (_e *AtlasSearchApi_Expecter) GetClusterSearchIndexExecute(r any) *AtlasSearchApi_GetClusterSearchIndexExecute_Call {
	return &AtlasSearchApi_GetClusterSearchIndexExecute_Call{Call: _e.mock.On("GetClusterSearchIndexExecute", r)}
}

func (_c *AtlasSearchApi_GetClusterSearchIndexExecute_Call) Run(run func(r admin.GetClusterSearchIndexApiRequest)) *AtlasSearchApi_GetClusterSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetClusterSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndexExecute_Call) Return(_a0 *admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_GetClusterSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndexExecute_Call) RunAndReturn(run func(admin.GetClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_GetClusterSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) GetClusterSearchIndexWithParams(ctx context.Context, args *admin.GetClusterSearchIndexApiParams) admin.GetClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterSearchIndexWithParams")
	}

	var r0 admin.GetClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetClusterSearchIndexApiParams) admin.GetClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetClusterSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterSearchIndexWithParams'
type AtlasSearchApi_GetClusterSearchIndexWithParams_Call struct {
	*mock.Call
}

// GetClusterSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetClusterSearchIndexApiParams
func (_e *AtlasSearchApi_Expecter) GetClusterSearchIndexWithParams(ctx any, args any) *AtlasSearchApi_GetClusterSearchIndexWithParams_Call {
	return &AtlasSearchApi_GetClusterSearchIndexWithParams_Call{Call: _e.mock.On("GetClusterSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_GetClusterSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.GetClusterSearchIndexApiParams)) *AtlasSearchApi_GetClusterSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetClusterSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndexWithParams_Call) Return(_a0 admin.GetClusterSearchIndexApiRequest) *AtlasSearchApi_GetClusterSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetClusterSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetClusterSearchIndexApiParams) admin.GetClusterSearchIndexApiRequest) *AtlasSearchApi_GetClusterSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexByName provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName, indexName
func (_m *AtlasSearchApi) GetIndexByName(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string) admin.GetIndexByNameApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName, indexName)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexByName")
	}

	var r0 admin.GetIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) admin.GetIndexByNameApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName, indexName)
	} else {
		r0 = ret.Get(0).(admin.GetIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetIndexByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexByName'
type AtlasSearchApi_GetIndexByName_Call struct {
	*mock.Call
}

// GetIndexByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
//   - indexName string
func (_e *AtlasSearchApi_Expecter) GetIndexByName(ctx any, groupId any, clusterName any, collectionName any, databaseName any, indexName any) *AtlasSearchApi_GetIndexByName_Call {
	return &AtlasSearchApi_GetIndexByName_Call{Call: _e.mock.On("GetIndexByName", ctx, groupId, clusterName, collectionName, databaseName, indexName)}
}

func (_c *AtlasSearchApi_GetIndexByName_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string)) *AtlasSearchApi_GetIndexByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_GetIndexByName_Call) Return(_a0 admin.GetIndexByNameApiRequest) *AtlasSearchApi_GetIndexByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetIndexByName_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) admin.GetIndexByNameApiRequest) *AtlasSearchApi_GetIndexByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexByNameExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) GetIndexByNameExecute(r admin.GetIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexByNameExecute")
	}

	var r0 *admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetIndexByNameApiRequest) *admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetIndexByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetIndexByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_GetIndexByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexByNameExecute'
type AtlasSearchApi_GetIndexByNameExecute_Call struct {
	*mock.Call
}

// GetIndexByNameExecute is a helper method to define mock.On call
//   - r admin.GetIndexByNameApiRequest
func (_e *AtlasSearchApi_Expecter) GetIndexByNameExecute(r any) *AtlasSearchApi_GetIndexByNameExecute_Call {
	return &AtlasSearchApi_GetIndexByNameExecute_Call{Call: _e.mock.On("GetIndexByNameExecute", r)}
}

func (_c *AtlasSearchApi_GetIndexByNameExecute_Call) Run(run func(r admin.GetIndexByNameApiRequest)) *AtlasSearchApi_GetIndexByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetIndexByNameApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_GetIndexByNameExecute_Call) Return(_a0 *admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_GetIndexByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_GetIndexByNameExecute_Call) RunAndReturn(run func(admin.GetIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_GetIndexByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexByNameWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) GetIndexByNameWithParams(ctx context.Context, args *admin.GetIndexByNameApiParams) admin.GetIndexByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexByNameWithParams")
	}

	var r0 admin.GetIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetIndexByNameApiParams) admin.GetIndexByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_GetIndexByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexByNameWithParams'
type AtlasSearchApi_GetIndexByNameWithParams_Call struct {
	*mock.Call
}

// GetIndexByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetIndexByNameApiParams
func (_e *AtlasSearchApi_Expecter) GetIndexByNameWithParams(ctx any, args any) *AtlasSearchApi_GetIndexByNameWithParams_Call {
	return &AtlasSearchApi_GetIndexByNameWithParams_Call{Call: _e.mock.On("GetIndexByNameWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_GetIndexByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetIndexByNameApiParams)) *AtlasSearchApi_GetIndexByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetIndexByNameApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_GetIndexByNameWithParams_Call) Return(_a0 admin.GetIndexByNameApiRequest) *AtlasSearchApi_GetIndexByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_GetIndexByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetIndexByNameApiParams) admin.GetIndexByNameApiRequest) *AtlasSearchApi_GetIndexByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterFtsIndex provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName
func (_m *AtlasSearchApi) ListClusterFtsIndex(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string) admin.ListClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterFtsIndex")
	}

	var r0 admin.ListClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListClusterFtsIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterFtsIndex'
type AtlasSearchApi_ListClusterFtsIndex_Call struct {
	*mock.Call
}

// ListClusterFtsIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
func (_e *AtlasSearchApi_Expecter) ListClusterFtsIndex(ctx any, groupId any, clusterName any, collectionName any, databaseName any) *AtlasSearchApi_ListClusterFtsIndex_Call {
	return &AtlasSearchApi_ListClusterFtsIndex_Call{Call: _e.mock.On("ListClusterFtsIndex", ctx, groupId, clusterName, collectionName, databaseName)}
}

func (_c *AtlasSearchApi_ListClusterFtsIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string)) *AtlasSearchApi_ListClusterFtsIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndex_Call) Return(_a0 admin.ListClusterFtsIndexApiRequest) *AtlasSearchApi_ListClusterFtsIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndex_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListClusterFtsIndexApiRequest) *AtlasSearchApi_ListClusterFtsIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterFtsIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) ListClusterFtsIndexExecute(r admin.ListClusterFtsIndexApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterFtsIndexExecute")
	}

	var r0 []admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterFtsIndexApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterFtsIndexApiRequest) []admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterFtsIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterFtsIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_ListClusterFtsIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterFtsIndexExecute'
type AtlasSearchApi_ListClusterFtsIndexExecute_Call struct {
	*mock.Call
}

// ListClusterFtsIndexExecute is a helper method to define mock.On call
//   - r admin.ListClusterFtsIndexApiRequest
func (_e *AtlasSearchApi_Expecter) ListClusterFtsIndexExecute(r any) *AtlasSearchApi_ListClusterFtsIndexExecute_Call {
	return &AtlasSearchApi_ListClusterFtsIndexExecute_Call{Call: _e.mock.On("ListClusterFtsIndexExecute", r)}
}

func (_c *AtlasSearchApi_ListClusterFtsIndexExecute_Call) Run(run func(r admin.ListClusterFtsIndexApiRequest)) *AtlasSearchApi_ListClusterFtsIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterFtsIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndexExecute_Call) Return(_a0 []admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApi_ListClusterFtsIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndexExecute_Call) RunAndReturn(run func(admin.ListClusterFtsIndexApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApi_ListClusterFtsIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterFtsIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) ListClusterFtsIndexWithParams(ctx context.Context, args *admin.ListClusterFtsIndexApiParams) admin.ListClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterFtsIndexWithParams")
	}

	var r0 admin.ListClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterFtsIndexApiParams) admin.ListClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListClusterFtsIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterFtsIndexWithParams'
type AtlasSearchApi_ListClusterFtsIndexWithParams_Call struct {
	*mock.Call
}

// ListClusterFtsIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterFtsIndexApiParams
func (_e *AtlasSearchApi_Expecter) ListClusterFtsIndexWithParams(ctx any, args any) *AtlasSearchApi_ListClusterFtsIndexWithParams_Call {
	return &AtlasSearchApi_ListClusterFtsIndexWithParams_Call{Call: _e.mock.On("ListClusterFtsIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_ListClusterFtsIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterFtsIndexApiParams)) *AtlasSearchApi_ListClusterFtsIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterFtsIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndexWithParams_Call) Return(_a0 admin.ListClusterFtsIndexApiRequest) *AtlasSearchApi_ListClusterFtsIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListClusterFtsIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterFtsIndexApiParams) admin.ListClusterFtsIndexApiRequest) *AtlasSearchApi_ListClusterFtsIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSearchIndexes provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AtlasSearchApi) ListClusterSearchIndexes(ctx context.Context, groupId string, clusterName string) admin.ListClusterSearchIndexesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSearchIndexes")
	}

	var r0 admin.ListClusterSearchIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListClusterSearchIndexesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSearchIndexesApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListClusterSearchIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSearchIndexes'
type AtlasSearchApi_ListClusterSearchIndexes_Call struct {
	*mock.Call
}

// ListClusterSearchIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AtlasSearchApi_Expecter) ListClusterSearchIndexes(ctx any, groupId any, clusterName any) *AtlasSearchApi_ListClusterSearchIndexes_Call {
	return &AtlasSearchApi_ListClusterSearchIndexes_Call{Call: _e.mock.On("ListClusterSearchIndexes", ctx, groupId, clusterName)}
}

func (_c *AtlasSearchApi_ListClusterSearchIndexes_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AtlasSearchApi_ListClusterSearchIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexes_Call) Return(_a0 admin.ListClusterSearchIndexesApiRequest) *AtlasSearchApi_ListClusterSearchIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexes_Call) RunAndReturn(run func(context.Context, string, string) admin.ListClusterSearchIndexesApiRequest) *AtlasSearchApi_ListClusterSearchIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSearchIndexesExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) ListClusterSearchIndexesExecute(r admin.ListClusterSearchIndexesApiRequest) ([]admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSearchIndexesExecute")
	}

	var r0 []admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListClusterSearchIndexesApiRequest) ([]admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListClusterSearchIndexesApiRequest) []admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListClusterSearchIndexesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListClusterSearchIndexesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_ListClusterSearchIndexesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSearchIndexesExecute'
type AtlasSearchApi_ListClusterSearchIndexesExecute_Call struct {
	*mock.Call
}

// ListClusterSearchIndexesExecute is a helper method to define mock.On call
//   - r admin.ListClusterSearchIndexesApiRequest
func (_e *AtlasSearchApi_Expecter) ListClusterSearchIndexesExecute(r any) *AtlasSearchApi_ListClusterSearchIndexesExecute_Call {
	return &AtlasSearchApi_ListClusterSearchIndexesExecute_Call{Call: _e.mock.On("ListClusterSearchIndexesExecute", r)}
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesExecute_Call) Run(run func(r admin.ListClusterSearchIndexesApiRequest)) *AtlasSearchApi_ListClusterSearchIndexesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListClusterSearchIndexesApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesExecute_Call) Return(_a0 []admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_ListClusterSearchIndexesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesExecute_Call) RunAndReturn(run func(admin.ListClusterSearchIndexesApiRequest) ([]admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_ListClusterSearchIndexesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSearchIndexesWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) ListClusterSearchIndexesWithParams(ctx context.Context, args *admin.ListClusterSearchIndexesApiParams) admin.ListClusterSearchIndexesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSearchIndexesWithParams")
	}

	var r0 admin.ListClusterSearchIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClusterSearchIndexesApiParams) admin.ListClusterSearchIndexesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListClusterSearchIndexesApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListClusterSearchIndexesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSearchIndexesWithParams'
type AtlasSearchApi_ListClusterSearchIndexesWithParams_Call struct {
	*mock.Call
}

// ListClusterSearchIndexesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListClusterSearchIndexesApiParams
func (_e *AtlasSearchApi_Expecter) ListClusterSearchIndexesWithParams(ctx any, args any) *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call {
	return &AtlasSearchApi_ListClusterSearchIndexesWithParams_Call{Call: _e.mock.On("ListClusterSearchIndexesWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListClusterSearchIndexesApiParams)) *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClusterSearchIndexesApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call) Return(_a0 admin.ListClusterSearchIndexesApiRequest) *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListClusterSearchIndexesApiParams) admin.ListClusterSearchIndexesApiRequest) *AtlasSearchApi_ListClusterSearchIndexesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName
func (_m *AtlasSearchApi) ListSearchIndex(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string) admin.ListSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchIndex")
	}

	var r0 admin.ListSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName)
	} else {
		r0 = ret.Get(0).(admin.ListSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSearchIndex'
type AtlasSearchApi_ListSearchIndex_Call struct {
	*mock.Call
}

// ListSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
func (_e *AtlasSearchApi_Expecter) ListSearchIndex(ctx any, groupId any, clusterName any, collectionName any, databaseName any) *AtlasSearchApi_ListSearchIndex_Call {
	return &AtlasSearchApi_ListSearchIndex_Call{Call: _e.mock.On("ListSearchIndex", ctx, groupId, clusterName, collectionName, databaseName)}
}

func (_c *AtlasSearchApi_ListSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string)) *AtlasSearchApi_ListSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndex_Call) Return(_a0 admin.ListSearchIndexApiRequest) *AtlasSearchApi_ListSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListSearchIndexApiRequest) *AtlasSearchApi_ListSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ListSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) ListSearchIndexExecute(r admin.ListSearchIndexApiRequest) ([]admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchIndexExecute")
	}

	var r0 []admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListSearchIndexApiRequest) ([]admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListSearchIndexApiRequest) []admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_ListSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSearchIndexExecute'
type AtlasSearchApi_ListSearchIndexExecute_Call struct {
	*mock.Call
}

// ListSearchIndexExecute is a helper method to define mock.On call
//   - r admin.ListSearchIndexApiRequest
func (_e *AtlasSearchApi_Expecter) ListSearchIndexExecute(r any) *AtlasSearchApi_ListSearchIndexExecute_Call {
	return &AtlasSearchApi_ListSearchIndexExecute_Call{Call: _e.mock.On("ListSearchIndexExecute", r)}
}

func (_c *AtlasSearchApi_ListSearchIndexExecute_Call) Run(run func(r admin.ListSearchIndexApiRequest)) *AtlasSearchApi_ListSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndexExecute_Call) Return(_a0 []admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_ListSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndexExecute_Call) RunAndReturn(run func(admin.ListSearchIndexApiRequest) ([]admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_ListSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) ListSearchIndexWithParams(ctx context.Context, args *admin.ListSearchIndexApiParams) admin.ListSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchIndexWithParams")
	}

	var r0 admin.ListSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListSearchIndexApiParams) admin.ListSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_ListSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSearchIndexWithParams'
type AtlasSearchApi_ListSearchIndexWithParams_Call struct {
	*mock.Call
}

// ListSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListSearchIndexApiParams
func (_e *AtlasSearchApi_Expecter) ListSearchIndexWithParams(ctx any, args any) *AtlasSearchApi_ListSearchIndexWithParams_Call {
	return &AtlasSearchApi_ListSearchIndexWithParams_Call{Call: _e.mock.On("ListSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_ListSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.ListSearchIndexApiParams)) *AtlasSearchApi_ListSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndexWithParams_Call) Return(_a0 admin.ListSearchIndexApiRequest) *AtlasSearchApi_ListSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_ListSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListSearchIndexApiParams) admin.ListSearchIndexApiRequest) *AtlasSearchApi_ListSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterFtsIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId, clusterSearchIndex
func (_m *AtlasSearchApi) UpdateClusterFtsIndex(ctx context.Context, groupId string, clusterName string, indexId string, clusterSearchIndex *admin.ClusterSearchIndex) admin.UpdateClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId, clusterSearchIndex)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterFtsIndex")
	}

	var r0 admin.UpdateClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.ClusterSearchIndex) admin.UpdateClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId, clusterSearchIndex)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterFtsIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterFtsIndex'
type AtlasSearchApi_UpdateClusterFtsIndex_Call struct {
	*mock.Call
}

// UpdateClusterFtsIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
//   - clusterSearchIndex *admin.ClusterSearchIndex
func (_e *AtlasSearchApi_Expecter) UpdateClusterFtsIndex(ctx any, groupId any, clusterName any, indexId any, clusterSearchIndex any) *AtlasSearchApi_UpdateClusterFtsIndex_Call {
	return &AtlasSearchApi_UpdateClusterFtsIndex_Call{Call: _e.mock.On("UpdateClusterFtsIndex", ctx, groupId, clusterName, indexId, clusterSearchIndex)}
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string, clusterSearchIndex *admin.ClusterSearchIndex)) *AtlasSearchApi_UpdateClusterFtsIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.ClusterSearchIndex))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndex_Call) Return(_a0 admin.UpdateClusterFtsIndexApiRequest) *AtlasSearchApi_UpdateClusterFtsIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndex_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.ClusterSearchIndex) admin.UpdateClusterFtsIndexApiRequest) *AtlasSearchApi_UpdateClusterFtsIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterFtsIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) UpdateClusterFtsIndexExecute(r admin.UpdateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterFtsIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterFtsIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterFtsIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterFtsIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_UpdateClusterFtsIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterFtsIndexExecute'
type AtlasSearchApi_UpdateClusterFtsIndexExecute_Call struct {
	*mock.Call
}

// UpdateClusterFtsIndexExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterFtsIndexApiRequest
func (_e *AtlasSearchApi_Expecter) UpdateClusterFtsIndexExecute(r any) *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call {
	return &AtlasSearchApi_UpdateClusterFtsIndexExecute_Call{Call: _e.mock.On("UpdateClusterFtsIndexExecute", r)}
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call) Run(run func(r admin.UpdateClusterFtsIndexApiRequest)) *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterFtsIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call) RunAndReturn(run func(admin.UpdateClusterFtsIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApi_UpdateClusterFtsIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterFtsIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) UpdateClusterFtsIndexWithParams(ctx context.Context, args *admin.UpdateClusterFtsIndexApiParams) admin.UpdateClusterFtsIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterFtsIndexWithParams")
	}

	var r0 admin.UpdateClusterFtsIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterFtsIndexApiParams) admin.UpdateClusterFtsIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterFtsIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterFtsIndexWithParams'
type AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call struct {
	*mock.Call
}

// UpdateClusterFtsIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterFtsIndexApiParams
func (_e *AtlasSearchApi_Expecter) UpdateClusterFtsIndexWithParams(ctx any, args any) *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call {
	return &AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call{Call: _e.mock.On("UpdateClusterFtsIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterFtsIndexApiParams)) *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterFtsIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call) Return(_a0 admin.UpdateClusterFtsIndexApiRequest) *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterFtsIndexApiParams) admin.UpdateClusterFtsIndexApiRequest) *AtlasSearchApi_UpdateClusterFtsIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName, apiSearchDeploymentRequest
func (_m *AtlasSearchApi) UpdateClusterSearchDeployment(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest) admin.UpdateClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, apiSearchDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchDeployment")
	}

	var r0 admin.UpdateClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.UpdateClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, apiSearchDeploymentRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchDeployment'
type AtlasSearchApi_UpdateClusterSearchDeployment_Call struct {
	*mock.Call
}

// UpdateClusterSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchDeployment(ctx any, groupId any, clusterName any, apiSearchDeploymentRequest any) *AtlasSearchApi_UpdateClusterSearchDeployment_Call {
	return &AtlasSearchApi_UpdateClusterSearchDeployment_Call{Call: _e.mock.On("UpdateClusterSearchDeployment", ctx, groupId, clusterName, apiSearchDeploymentRequest)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest)) *AtlasSearchApi_UpdateClusterSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiSearchDeploymentRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeployment_Call) Return(_a0 admin.UpdateClusterSearchDeploymentApiRequest) *AtlasSearchApi_UpdateClusterSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.UpdateClusterSearchDeploymentApiRequest) *AtlasSearchApi_UpdateClusterSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) UpdateClusterSearchDeploymentExecute(r admin.UpdateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchDeploymentExecute'
type AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call struct {
	*mock.Call
}

// UpdateClusterSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterSearchDeploymentApiRequest
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchDeploymentExecute(r any) *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call {
	return &AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call{Call: _e.mock.On("UpdateClusterSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call) Run(run func(r admin.UpdateClusterSearchDeploymentApiRequest)) *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call) RunAndReturn(run func(admin.UpdateClusterSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApi_UpdateClusterSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) UpdateClusterSearchDeploymentWithParams(ctx context.Context, args *admin.UpdateClusterSearchDeploymentApiParams) admin.UpdateClusterSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchDeploymentWithParams")
	}

	var r0 admin.UpdateClusterSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterSearchDeploymentApiParams) admin.UpdateClusterSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchDeploymentWithParams'
type AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// UpdateClusterSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterSearchDeploymentApiParams
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchDeploymentWithParams(ctx any, args any) *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call {
	return &AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call{Call: _e.mock.On("UpdateClusterSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterSearchDeploymentApiParams)) *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call) Return(_a0 admin.UpdateClusterSearchDeploymentApiRequest) *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterSearchDeploymentApiParams) admin.UpdateClusterSearchDeploymentApiRequest) *AtlasSearchApi_UpdateClusterSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId, searchIndexUpdateRequest
func (_m *AtlasSearchApi) UpdateClusterSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string, searchIndexUpdateRequest *admin.SearchIndexUpdateRequest) admin.UpdateClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId, searchIndexUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchIndex")
	}

	var r0 admin.UpdateClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.SearchIndexUpdateRequest) admin.UpdateClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId, searchIndexUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchIndex'
type AtlasSearchApi_UpdateClusterSearchIndex_Call struct {
	*mock.Call
}

// UpdateClusterSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
//   - searchIndexUpdateRequest *admin.SearchIndexUpdateRequest
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchIndex(ctx any, groupId any, clusterName any, indexId any, searchIndexUpdateRequest any) *AtlasSearchApi_UpdateClusterSearchIndex_Call {
	return &AtlasSearchApi_UpdateClusterSearchIndex_Call{Call: _e.mock.On("UpdateClusterSearchIndex", ctx, groupId, clusterName, indexId, searchIndexUpdateRequest)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string, searchIndexUpdateRequest *admin.SearchIndexUpdateRequest)) *AtlasSearchApi_UpdateClusterSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.SearchIndexUpdateRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndex_Call) Return(_a0 admin.UpdateClusterSearchIndexApiRequest) *AtlasSearchApi_UpdateClusterSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.SearchIndexUpdateRequest) admin.UpdateClusterSearchIndexApiRequest) *AtlasSearchApi_UpdateClusterSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) UpdateClusterSearchIndexExecute(r admin.UpdateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchIndexExecute")
	}

	var r0 *admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateClusterSearchIndexApiRequest) *admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateClusterSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateClusterSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_UpdateClusterSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchIndexExecute'
type AtlasSearchApi_UpdateClusterSearchIndexExecute_Call struct {
	*mock.Call
}

// UpdateClusterSearchIndexExecute is a helper method to define mock.On call
//   - r admin.UpdateClusterSearchIndexApiRequest
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchIndexExecute(r any) *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call {
	return &AtlasSearchApi_UpdateClusterSearchIndexExecute_Call{Call: _e.mock.On("UpdateClusterSearchIndexExecute", r)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call) Run(run func(r admin.UpdateClusterSearchIndexApiRequest)) *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateClusterSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call) Return(_a0 *admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call) RunAndReturn(run func(admin.UpdateClusterSearchIndexApiRequest) (*admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_UpdateClusterSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) UpdateClusterSearchIndexWithParams(ctx context.Context, args *admin.UpdateClusterSearchIndexApiParams) admin.UpdateClusterSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSearchIndexWithParams")
	}

	var r0 admin.UpdateClusterSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateClusterSearchIndexApiParams) admin.UpdateClusterSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateClusterSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterSearchIndexWithParams'
type AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call struct {
	*mock.Call
}

// UpdateClusterSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateClusterSearchIndexApiParams
func (_e *AtlasSearchApi_Expecter) UpdateClusterSearchIndexWithParams(ctx any, args any) *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call {
	return &AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call{Call: _e.mock.On("UpdateClusterSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateClusterSearchIndexApiParams)) *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateClusterSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call) Return(_a0 admin.UpdateClusterSearchIndexApiRequest) *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateClusterSearchIndexApiParams) admin.UpdateClusterSearchIndexApiRequest) *AtlasSearchApi_UpdateClusterSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIndexByName provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName, indexName, searchIndexUpdateRequest
func (_m *AtlasSearchApi) UpdateIndexByName(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string, searchIndexUpdateRequest *admin.SearchIndexUpdateRequest) admin.UpdateIndexByNameApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName, indexName, searchIndexUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndexByName")
	}

	var r0 admin.UpdateIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, *admin.SearchIndexUpdateRequest) admin.UpdateIndexByNameApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName, indexName, searchIndexUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateIndexByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIndexByName'
type AtlasSearchApi_UpdateIndexByName_Call struct {
	*mock.Call
}

// UpdateIndexByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
//   - indexName string
//   - searchIndexUpdateRequest *admin.SearchIndexUpdateRequest
func (_e *AtlasSearchApi_Expecter) UpdateIndexByName(ctx any, groupId any, clusterName any, collectionName any, databaseName any, indexName any, searchIndexUpdateRequest any) *AtlasSearchApi_UpdateIndexByName_Call {
	return &AtlasSearchApi_UpdateIndexByName_Call{Call: _e.mock.On("UpdateIndexByName", ctx, groupId, clusterName, collectionName, databaseName, indexName, searchIndexUpdateRequest)}
}

func (_c *AtlasSearchApi_UpdateIndexByName_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string, indexName string, searchIndexUpdateRequest *admin.SearchIndexUpdateRequest)) *AtlasSearchApi_UpdateIndexByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(*admin.SearchIndexUpdateRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByName_Call) Return(_a0 admin.UpdateIndexByNameApiRequest) *AtlasSearchApi_UpdateIndexByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByName_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, *admin.SearchIndexUpdateRequest) admin.UpdateIndexByNameApiRequest) *AtlasSearchApi_UpdateIndexByName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIndexByNameExecute provides a mock function with given fields: r
func (_m *AtlasSearchApi) UpdateIndexByNameExecute(r admin.UpdateIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndexByNameExecute")
	}

	var r0 *admin.SearchIndexResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateIndexByNameApiRequest) *admin.SearchIndexResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SearchIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateIndexByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateIndexByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApi_UpdateIndexByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIndexByNameExecute'
type AtlasSearchApi_UpdateIndexByNameExecute_Call struct {
	*mock.Call
}

// UpdateIndexByNameExecute is a helper method to define mock.On call
//   - r admin.UpdateIndexByNameApiRequest
func (_e *AtlasSearchApi_Expecter) UpdateIndexByNameExecute(r any) *AtlasSearchApi_UpdateIndexByNameExecute_Call {
	return &AtlasSearchApi_UpdateIndexByNameExecute_Call{Call: _e.mock.On("UpdateIndexByNameExecute", r)}
}

func (_c *AtlasSearchApi_UpdateIndexByNameExecute_Call) Run(run func(r admin.UpdateIndexByNameApiRequest)) *AtlasSearchApi_UpdateIndexByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateIndexByNameApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByNameExecute_Call) Return(_a0 *admin.SearchIndexResponse, _a1 *http.Response, _a2 error) *AtlasSearchApi_UpdateIndexByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByNameExecute_Call) RunAndReturn(run func(admin.UpdateIndexByNameApiRequest) (*admin.SearchIndexResponse, *http.Response, error)) *AtlasSearchApi_UpdateIndexByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIndexByNameWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApi) UpdateIndexByNameWithParams(ctx context.Context, args *admin.UpdateIndexByNameApiParams) admin.UpdateIndexByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndexByNameWithParams")
	}

	var r0 admin.UpdateIndexByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateIndexByNameApiParams) admin.UpdateIndexByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateIndexByNameApiRequest)
	}

	return r0
}

// AtlasSearchApi_UpdateIndexByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIndexByNameWithParams'
type AtlasSearchApi_UpdateIndexByNameWithParams_Call struct {
	*mock.Call
}

// UpdateIndexByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateIndexByNameApiParams
func (_e *AtlasSearchApi_Expecter) UpdateIndexByNameWithParams(ctx any, args any) *AtlasSearchApi_UpdateIndexByNameWithParams_Call {
	return &AtlasSearchApi_UpdateIndexByNameWithParams_Call{Call: _e.mock.On("UpdateIndexByNameWithParams", ctx, args)}
}

func (_c *AtlasSearchApi_UpdateIndexByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateIndexByNameApiParams)) *AtlasSearchApi_UpdateIndexByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateIndexByNameApiParams))
	})
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByNameWithParams_Call) Return(_a0 admin.UpdateIndexByNameApiRequest) *AtlasSearchApi_UpdateIndexByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApi_UpdateIndexByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateIndexByNameApiParams) admin.UpdateIndexByNameApiRequest) *AtlasSearchApi_UpdateIndexByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasSearchApi creates a new instance of AtlasSearchApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasSearchApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasSearchApi {
	mock := &AtlasSearchApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
