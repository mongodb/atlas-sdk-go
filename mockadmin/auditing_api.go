// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AuditingApi is an autogenerated mock type for the AuditingApi type
type AuditingApi struct {
	mock.Mock
}

type AuditingApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditingApi) EXPECT() *AuditingApi_Expecter {
	return &AuditingApi_Expecter{mock: &_m.Mock}
}

// GetGroupAuditLog provides a mock function with given fields: ctx, groupId
func (_m *AuditingApi) GetGroupAuditLog(ctx context.Context, groupId string) admin.GetGroupAuditLogApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAuditLog")
	}

	var r0 admin.GetGroupAuditLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetGroupAuditLogApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupAuditLogApiRequest)
	}

	return r0
}

// AuditingApi_GetGroupAuditLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupAuditLog'
type AuditingApi_GetGroupAuditLog_Call struct {
	*mock.Call
}

// GetGroupAuditLog is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *AuditingApi_Expecter) GetGroupAuditLog(ctx any, groupId any) *AuditingApi_GetGroupAuditLog_Call {
	return &AuditingApi_GetGroupAuditLog_Call{Call: _e.mock.On("GetGroupAuditLog", ctx, groupId)}
}

func (_c *AuditingApi_GetGroupAuditLog_Call) Run(run func(ctx context.Context, groupId string)) *AuditingApi_GetGroupAuditLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuditingApi_GetGroupAuditLog_Call) Return(_a0 admin.GetGroupAuditLogApiRequest) *AuditingApi_GetGroupAuditLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditingApi_GetGroupAuditLog_Call) RunAndReturn(run func(context.Context, string) admin.GetGroupAuditLogApiRequest) *AuditingApi_GetGroupAuditLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupAuditLogExecute provides a mock function with given fields: r
func (_m *AuditingApi) GetGroupAuditLogExecute(r admin.GetGroupAuditLogApiRequest) (*admin.AuditLog, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAuditLogExecute")
	}

	var r0 *admin.AuditLog
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupAuditLogApiRequest) (*admin.AuditLog, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupAuditLogApiRequest) *admin.AuditLog); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupAuditLogApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupAuditLogApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditingApi_GetGroupAuditLogExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupAuditLogExecute'
type AuditingApi_GetGroupAuditLogExecute_Call struct {
	*mock.Call
}

// GetGroupAuditLogExecute is a helper method to define mock.On call
//   - r admin.GetGroupAuditLogApiRequest
func (_e *AuditingApi_Expecter) GetGroupAuditLogExecute(r any) *AuditingApi_GetGroupAuditLogExecute_Call {
	return &AuditingApi_GetGroupAuditLogExecute_Call{Call: _e.mock.On("GetGroupAuditLogExecute", r)}
}

func (_c *AuditingApi_GetGroupAuditLogExecute_Call) Run(run func(r admin.GetGroupAuditLogApiRequest)) *AuditingApi_GetGroupAuditLogExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupAuditLogApiRequest))
	})
	return _c
}

func (_c *AuditingApi_GetGroupAuditLogExecute_Call) Return(_a0 *admin.AuditLog, _a1 *http.Response, _a2 error) *AuditingApi_GetGroupAuditLogExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditingApi_GetGroupAuditLogExecute_Call) RunAndReturn(run func(admin.GetGroupAuditLogApiRequest) (*admin.AuditLog, *http.Response, error)) *AuditingApi_GetGroupAuditLogExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupAuditLogWithParams provides a mock function with given fields: ctx, args
func (_m *AuditingApi) GetGroupAuditLogWithParams(ctx context.Context, args *admin.GetGroupAuditLogApiParams) admin.GetGroupAuditLogApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAuditLogWithParams")
	}

	var r0 admin.GetGroupAuditLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupAuditLogApiParams) admin.GetGroupAuditLogApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupAuditLogApiRequest)
	}

	return r0
}

// AuditingApi_GetGroupAuditLogWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupAuditLogWithParams'
type AuditingApi_GetGroupAuditLogWithParams_Call struct {
	*mock.Call
}

// GetGroupAuditLogWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupAuditLogApiParams
func (_e *AuditingApi_Expecter) GetGroupAuditLogWithParams(ctx any, args any) *AuditingApi_GetGroupAuditLogWithParams_Call {
	return &AuditingApi_GetGroupAuditLogWithParams_Call{Call: _e.mock.On("GetGroupAuditLogWithParams", ctx, args)}
}

func (_c *AuditingApi_GetGroupAuditLogWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupAuditLogApiParams)) *AuditingApi_GetGroupAuditLogWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupAuditLogApiParams))
	})
	return _c
}

func (_c *AuditingApi_GetGroupAuditLogWithParams_Call) Return(_a0 admin.GetGroupAuditLogApiRequest) *AuditingApi_GetGroupAuditLogWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditingApi_GetGroupAuditLogWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupAuditLogApiParams) admin.GetGroupAuditLogApiRequest) *AuditingApi_GetGroupAuditLogWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuditLog provides a mock function with given fields: ctx, groupId, auditLog
func (_m *AuditingApi) UpdateAuditLog(ctx context.Context, groupId string, auditLog *admin.AuditLog) admin.UpdateAuditLogApiRequest {
	ret := _m.Called(ctx, groupId, auditLog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuditLog")
	}

	var r0 admin.UpdateAuditLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.AuditLog) admin.UpdateAuditLogApiRequest); ok {
		r0 = rf(ctx, groupId, auditLog)
	} else {
		r0 = ret.Get(0).(admin.UpdateAuditLogApiRequest)
	}

	return r0
}

// AuditingApi_UpdateAuditLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuditLog'
type AuditingApi_UpdateAuditLog_Call struct {
	*mock.Call
}

// UpdateAuditLog is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - auditLog *admin.AuditLog
func (_e *AuditingApi_Expecter) UpdateAuditLog(ctx any, groupId any, auditLog any) *AuditingApi_UpdateAuditLog_Call {
	return &AuditingApi_UpdateAuditLog_Call{Call: _e.mock.On("UpdateAuditLog", ctx, groupId, auditLog)}
}

func (_c *AuditingApi_UpdateAuditLog_Call) Run(run func(ctx context.Context, groupId string, auditLog *admin.AuditLog)) *AuditingApi_UpdateAuditLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.AuditLog))
	})
	return _c
}

func (_c *AuditingApi_UpdateAuditLog_Call) Return(_a0 admin.UpdateAuditLogApiRequest) *AuditingApi_UpdateAuditLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditingApi_UpdateAuditLog_Call) RunAndReturn(run func(context.Context, string, *admin.AuditLog) admin.UpdateAuditLogApiRequest) *AuditingApi_UpdateAuditLog_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuditLogExecute provides a mock function with given fields: r
func (_m *AuditingApi) UpdateAuditLogExecute(r admin.UpdateAuditLogApiRequest) (*admin.AuditLog, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuditLogExecute")
	}

	var r0 *admin.AuditLog
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAuditLogApiRequest) (*admin.AuditLog, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAuditLogApiRequest) *admin.AuditLog); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAuditLogApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAuditLogApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditingApi_UpdateAuditLogExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuditLogExecute'
type AuditingApi_UpdateAuditLogExecute_Call struct {
	*mock.Call
}

// UpdateAuditLogExecute is a helper method to define mock.On call
//   - r admin.UpdateAuditLogApiRequest
func (_e *AuditingApi_Expecter) UpdateAuditLogExecute(r any) *AuditingApi_UpdateAuditLogExecute_Call {
	return &AuditingApi_UpdateAuditLogExecute_Call{Call: _e.mock.On("UpdateAuditLogExecute", r)}
}

func (_c *AuditingApi_UpdateAuditLogExecute_Call) Run(run func(r admin.UpdateAuditLogApiRequest)) *AuditingApi_UpdateAuditLogExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAuditLogApiRequest))
	})
	return _c
}

func (_c *AuditingApi_UpdateAuditLogExecute_Call) Return(_a0 *admin.AuditLog, _a1 *http.Response, _a2 error) *AuditingApi_UpdateAuditLogExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditingApi_UpdateAuditLogExecute_Call) RunAndReturn(run func(admin.UpdateAuditLogApiRequest) (*admin.AuditLog, *http.Response, error)) *AuditingApi_UpdateAuditLogExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuditLogWithParams provides a mock function with given fields: ctx, args
func (_m *AuditingApi) UpdateAuditLogWithParams(ctx context.Context, args *admin.UpdateAuditLogApiParams) admin.UpdateAuditLogApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuditLogWithParams")
	}

	var r0 admin.UpdateAuditLogApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAuditLogApiParams) admin.UpdateAuditLogApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAuditLogApiRequest)
	}

	return r0
}

// AuditingApi_UpdateAuditLogWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuditLogWithParams'
type AuditingApi_UpdateAuditLogWithParams_Call struct {
	*mock.Call
}

// UpdateAuditLogWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAuditLogApiParams
func (_e *AuditingApi_Expecter) UpdateAuditLogWithParams(ctx any, args any) *AuditingApi_UpdateAuditLogWithParams_Call {
	return &AuditingApi_UpdateAuditLogWithParams_Call{Call: _e.mock.On("UpdateAuditLogWithParams", ctx, args)}
}

func (_c *AuditingApi_UpdateAuditLogWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAuditLogApiParams)) *AuditingApi_UpdateAuditLogWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAuditLogApiParams))
	})
	return _c
}

func (_c *AuditingApi_UpdateAuditLogWithParams_Call) Return(_a0 admin.UpdateAuditLogApiRequest) *AuditingApi_UpdateAuditLogWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditingApi_UpdateAuditLogWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAuditLogApiParams) admin.UpdateAuditLogApiRequest) *AuditingApi_UpdateAuditLogWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditingApi creates a new instance of AuditingApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditingApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditingApi {
	mock := &AuditingApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
