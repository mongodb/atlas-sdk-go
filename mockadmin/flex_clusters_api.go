// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20240805005/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// FlexClustersApi is an autogenerated mock type for the FlexClustersApi type
type FlexClustersApi struct {
	mock.Mock
}

type FlexClustersApi_Expecter struct {
	mock *mock.Mock
}

func (_m *FlexClustersApi) EXPECT() *FlexClustersApi_Expecter {
	return &FlexClustersApi_Expecter{mock: &_m.Mock}
}

// CreateFlexcluster provides a mock function with given fields: ctx, groupId, flexClusterDescriptionCreate20250101
func (_m *FlexClustersApi) CreateFlexcluster(ctx context.Context, groupId string, flexClusterDescriptionCreate20250101 *admin.FlexClusterDescriptionCreate20250101) admin.CreateFlexclusterApiRequest {
	ret := _m.Called(ctx, groupId, flexClusterDescriptionCreate20250101)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlexcluster")
	}

	var r0 admin.CreateFlexclusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.FlexClusterDescriptionCreate20250101) admin.CreateFlexclusterApiRequest); ok {
		r0 = rf(ctx, groupId, flexClusterDescriptionCreate20250101)
	} else {
		r0 = ret.Get(0).(admin.CreateFlexclusterApiRequest)
	}

	return r0
}

// FlexClustersApi_CreateFlexcluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlexcluster'
type FlexClustersApi_CreateFlexcluster_Call struct {
	*mock.Call
}

// CreateFlexcluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - flexClusterDescriptionCreate20250101 *admin.FlexClusterDescriptionCreate20250101
func (_e *FlexClustersApi_Expecter) CreateFlexcluster(ctx any, groupId any, flexClusterDescriptionCreate20250101 any) *FlexClustersApi_CreateFlexcluster_Call {
	return &FlexClustersApi_CreateFlexcluster_Call{Call: _e.mock.On("CreateFlexcluster", ctx, groupId, flexClusterDescriptionCreate20250101)}
}

func (_c *FlexClustersApi_CreateFlexcluster_Call) Run(run func(ctx context.Context, groupId string, flexClusterDescriptionCreate20250101 *admin.FlexClusterDescriptionCreate20250101)) *FlexClustersApi_CreateFlexcluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.FlexClusterDescriptionCreate20250101))
	})
	return _c
}

func (_c *FlexClustersApi_CreateFlexcluster_Call) Return(_a0 admin.CreateFlexclusterApiRequest) *FlexClustersApi_CreateFlexcluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_CreateFlexcluster_Call) RunAndReturn(run func(context.Context, string, *admin.FlexClusterDescriptionCreate20250101) admin.CreateFlexclusterApiRequest) *FlexClustersApi_CreateFlexcluster_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlexclusterExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) CreateFlexclusterExecute(r admin.CreateFlexclusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlexclusterExecute")
	}

	var r0 *admin.FlexClusterDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateFlexclusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateFlexclusterApiRequest) *admin.FlexClusterDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexClusterDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateFlexclusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateFlexclusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_CreateFlexclusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlexclusterExecute'
type FlexClustersApi_CreateFlexclusterExecute_Call struct {
	*mock.Call
}

// CreateFlexclusterExecute is a helper method to define mock.On call
//   - r admin.CreateFlexclusterApiRequest
func (_e *FlexClustersApi_Expecter) CreateFlexclusterExecute(r any) *FlexClustersApi_CreateFlexclusterExecute_Call {
	return &FlexClustersApi_CreateFlexclusterExecute_Call{Call: _e.mock.On("CreateFlexclusterExecute", r)}
}

func (_c *FlexClustersApi_CreateFlexclusterExecute_Call) Run(run func(r admin.CreateFlexclusterApiRequest)) *FlexClustersApi_CreateFlexclusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateFlexclusterApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_CreateFlexclusterExecute_Call) Return(_a0 *admin.FlexClusterDescription20250101, _a1 *http.Response, _a2 error) *FlexClustersApi_CreateFlexclusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_CreateFlexclusterExecute_Call) RunAndReturn(run func(admin.CreateFlexclusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)) *FlexClustersApi_CreateFlexclusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlexclusterWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) CreateFlexclusterWithParams(ctx context.Context, args *admin.CreateFlexclusterApiParams) admin.CreateFlexclusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlexclusterWithParams")
	}

	var r0 admin.CreateFlexclusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateFlexclusterApiParams) admin.CreateFlexclusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateFlexclusterApiRequest)
	}

	return r0
}

// FlexClustersApi_CreateFlexclusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlexclusterWithParams'
type FlexClustersApi_CreateFlexclusterWithParams_Call struct {
	*mock.Call
}

// CreateFlexclusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateFlexclusterApiParams
func (_e *FlexClustersApi_Expecter) CreateFlexclusterWithParams(ctx any, args any) *FlexClustersApi_CreateFlexclusterWithParams_Call {
	return &FlexClustersApi_CreateFlexclusterWithParams_Call{Call: _e.mock.On("CreateFlexclusterWithParams", ctx, args)}
}

func (_c *FlexClustersApi_CreateFlexclusterWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateFlexclusterApiParams)) *FlexClustersApi_CreateFlexclusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateFlexclusterApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_CreateFlexclusterWithParams_Call) Return(_a0 admin.CreateFlexclusterApiRequest) *FlexClustersApi_CreateFlexclusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_CreateFlexclusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateFlexclusterApiParams) admin.CreateFlexclusterApiRequest) *FlexClustersApi_CreateFlexclusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFlexCluster provides a mock function with given fields: ctx, groupId, name
func (_m *FlexClustersApi) DeleteFlexCluster(ctx context.Context, groupId string, name string) admin.DeleteFlexClusterApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlexCluster")
	}

	var r0 admin.DeleteFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteFlexClusterApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.DeleteFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_DeleteFlexCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFlexCluster'
type FlexClustersApi_DeleteFlexCluster_Call struct {
	*mock.Call
}

// DeleteFlexCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *FlexClustersApi_Expecter) DeleteFlexCluster(ctx any, groupId any, name any) *FlexClustersApi_DeleteFlexCluster_Call {
	return &FlexClustersApi_DeleteFlexCluster_Call{Call: _e.mock.On("DeleteFlexCluster", ctx, groupId, name)}
}

func (_c *FlexClustersApi_DeleteFlexCluster_Call) Run(run func(ctx context.Context, groupId string, name string)) *FlexClustersApi_DeleteFlexCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FlexClustersApi_DeleteFlexCluster_Call) Return(_a0 admin.DeleteFlexClusterApiRequest) *FlexClustersApi_DeleteFlexCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_DeleteFlexCluster_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteFlexClusterApiRequest) *FlexClustersApi_DeleteFlexCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFlexClusterExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) DeleteFlexClusterExecute(r admin.DeleteFlexClusterApiRequest) (any, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlexClusterExecute")
	}

	var r0 any
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteFlexClusterApiRequest) (any, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteFlexClusterApiRequest) any); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteFlexClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteFlexClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_DeleteFlexClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFlexClusterExecute'
type FlexClustersApi_DeleteFlexClusterExecute_Call struct {
	*mock.Call
}

// DeleteFlexClusterExecute is a helper method to define mock.On call
//   - r admin.DeleteFlexClusterApiRequest
func (_e *FlexClustersApi_Expecter) DeleteFlexClusterExecute(r any) *FlexClustersApi_DeleteFlexClusterExecute_Call {
	return &FlexClustersApi_DeleteFlexClusterExecute_Call{Call: _e.mock.On("DeleteFlexClusterExecute", r)}
}

func (_c *FlexClustersApi_DeleteFlexClusterExecute_Call) Run(run func(r admin.DeleteFlexClusterApiRequest)) *FlexClustersApi_DeleteFlexClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteFlexClusterApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_DeleteFlexClusterExecute_Call) Return(_a0 any, _a1 *http.Response, _a2 error) *FlexClustersApi_DeleteFlexClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_DeleteFlexClusterExecute_Call) RunAndReturn(run func(admin.DeleteFlexClusterApiRequest) (any, *http.Response, error)) *FlexClustersApi_DeleteFlexClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFlexClusterWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) DeleteFlexClusterWithParams(ctx context.Context, args *admin.DeleteFlexClusterApiParams) admin.DeleteFlexClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlexClusterWithParams")
	}

	var r0 admin.DeleteFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteFlexClusterApiParams) admin.DeleteFlexClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_DeleteFlexClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFlexClusterWithParams'
type FlexClustersApi_DeleteFlexClusterWithParams_Call struct {
	*mock.Call
}

// DeleteFlexClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteFlexClusterApiParams
func (_e *FlexClustersApi_Expecter) DeleteFlexClusterWithParams(ctx any, args any) *FlexClustersApi_DeleteFlexClusterWithParams_Call {
	return &FlexClustersApi_DeleteFlexClusterWithParams_Call{Call: _e.mock.On("DeleteFlexClusterWithParams", ctx, args)}
}

func (_c *FlexClustersApi_DeleteFlexClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteFlexClusterApiParams)) *FlexClustersApi_DeleteFlexClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteFlexClusterApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_DeleteFlexClusterWithParams_Call) Return(_a0 admin.DeleteFlexClusterApiRequest) *FlexClustersApi_DeleteFlexClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_DeleteFlexClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteFlexClusterApiParams) admin.DeleteFlexClusterApiRequest) *FlexClustersApi_DeleteFlexClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexCluster provides a mock function with given fields: ctx, groupId, name
func (_m *FlexClustersApi) GetFlexCluster(ctx context.Context, groupId string, name string) admin.GetFlexClusterApiRequest {
	ret := _m.Called(ctx, groupId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexCluster")
	}

	var r0 admin.GetFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetFlexClusterApiRequest); ok {
		r0 = rf(ctx, groupId, name)
	} else {
		r0 = ret.Get(0).(admin.GetFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_GetFlexCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexCluster'
type FlexClustersApi_GetFlexCluster_Call struct {
	*mock.Call
}

// GetFlexCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
func (_e *FlexClustersApi_Expecter) GetFlexCluster(ctx any, groupId any, name any) *FlexClustersApi_GetFlexCluster_Call {
	return &FlexClustersApi_GetFlexCluster_Call{Call: _e.mock.On("GetFlexCluster", ctx, groupId, name)}
}

func (_c *FlexClustersApi_GetFlexCluster_Call) Run(run func(ctx context.Context, groupId string, name string)) *FlexClustersApi_GetFlexCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FlexClustersApi_GetFlexCluster_Call) Return(_a0 admin.GetFlexClusterApiRequest) *FlexClustersApi_GetFlexCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_GetFlexCluster_Call) RunAndReturn(run func(context.Context, string, string) admin.GetFlexClusterApiRequest) *FlexClustersApi_GetFlexCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexClusterExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) GetFlexClusterExecute(r admin.GetFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexClusterExecute")
	}

	var r0 *admin.FlexClusterDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetFlexClusterApiRequest) *admin.FlexClusterDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexClusterDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetFlexClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetFlexClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_GetFlexClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexClusterExecute'
type FlexClustersApi_GetFlexClusterExecute_Call struct {
	*mock.Call
}

// GetFlexClusterExecute is a helper method to define mock.On call
//   - r admin.GetFlexClusterApiRequest
func (_e *FlexClustersApi_Expecter) GetFlexClusterExecute(r any) *FlexClustersApi_GetFlexClusterExecute_Call {
	return &FlexClustersApi_GetFlexClusterExecute_Call{Call: _e.mock.On("GetFlexClusterExecute", r)}
}

func (_c *FlexClustersApi_GetFlexClusterExecute_Call) Run(run func(r admin.GetFlexClusterApiRequest)) *FlexClustersApi_GetFlexClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetFlexClusterApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_GetFlexClusterExecute_Call) Return(_a0 *admin.FlexClusterDescription20250101, _a1 *http.Response, _a2 error) *FlexClustersApi_GetFlexClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_GetFlexClusterExecute_Call) RunAndReturn(run func(admin.GetFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)) *FlexClustersApi_GetFlexClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlexClusterWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) GetFlexClusterWithParams(ctx context.Context, args *admin.GetFlexClusterApiParams) admin.GetFlexClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetFlexClusterWithParams")
	}

	var r0 admin.GetFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetFlexClusterApiParams) admin.GetFlexClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_GetFlexClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlexClusterWithParams'
type FlexClustersApi_GetFlexClusterWithParams_Call struct {
	*mock.Call
}

// GetFlexClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetFlexClusterApiParams
func (_e *FlexClustersApi_Expecter) GetFlexClusterWithParams(ctx any, args any) *FlexClustersApi_GetFlexClusterWithParams_Call {
	return &FlexClustersApi_GetFlexClusterWithParams_Call{Call: _e.mock.On("GetFlexClusterWithParams", ctx, args)}
}

func (_c *FlexClustersApi_GetFlexClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.GetFlexClusterApiParams)) *FlexClustersApi_GetFlexClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetFlexClusterApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_GetFlexClusterWithParams_Call) Return(_a0 admin.GetFlexClusterApiRequest) *FlexClustersApi_GetFlexClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_GetFlexClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetFlexClusterApiParams) admin.GetFlexClusterApiRequest) *FlexClustersApi_GetFlexClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexClusters provides a mock function with given fields: ctx, groupId
func (_m *FlexClustersApi) ListFlexClusters(ctx context.Context, groupId string) admin.ListFlexClustersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexClusters")
	}

	var r0 admin.ListFlexClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListFlexClustersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListFlexClustersApiRequest)
	}

	return r0
}

// FlexClustersApi_ListFlexClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexClusters'
type FlexClustersApi_ListFlexClusters_Call struct {
	*mock.Call
}

// ListFlexClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *FlexClustersApi_Expecter) ListFlexClusters(ctx any, groupId any) *FlexClustersApi_ListFlexClusters_Call {
	return &FlexClustersApi_ListFlexClusters_Call{Call: _e.mock.On("ListFlexClusters", ctx, groupId)}
}

func (_c *FlexClustersApi_ListFlexClusters_Call) Run(run func(ctx context.Context, groupId string)) *FlexClustersApi_ListFlexClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FlexClustersApi_ListFlexClusters_Call) Return(_a0 admin.ListFlexClustersApiRequest) *FlexClustersApi_ListFlexClusters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_ListFlexClusters_Call) RunAndReturn(run func(context.Context, string) admin.ListFlexClustersApiRequest) *FlexClustersApi_ListFlexClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexClustersExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) ListFlexClustersExecute(r admin.ListFlexClustersApiRequest) (*admin.PaginatedFlexClusters20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexClustersExecute")
	}

	var r0 *admin.PaginatedFlexClusters20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListFlexClustersApiRequest) (*admin.PaginatedFlexClusters20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListFlexClustersApiRequest) *admin.PaginatedFlexClusters20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedFlexClusters20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListFlexClustersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListFlexClustersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_ListFlexClustersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexClustersExecute'
type FlexClustersApi_ListFlexClustersExecute_Call struct {
	*mock.Call
}

// ListFlexClustersExecute is a helper method to define mock.On call
//   - r admin.ListFlexClustersApiRequest
func (_e *FlexClustersApi_Expecter) ListFlexClustersExecute(r any) *FlexClustersApi_ListFlexClustersExecute_Call {
	return &FlexClustersApi_ListFlexClustersExecute_Call{Call: _e.mock.On("ListFlexClustersExecute", r)}
}

func (_c *FlexClustersApi_ListFlexClustersExecute_Call) Run(run func(r admin.ListFlexClustersApiRequest)) *FlexClustersApi_ListFlexClustersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListFlexClustersApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_ListFlexClustersExecute_Call) Return(_a0 *admin.PaginatedFlexClusters20250101, _a1 *http.Response, _a2 error) *FlexClustersApi_ListFlexClustersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_ListFlexClustersExecute_Call) RunAndReturn(run func(admin.ListFlexClustersApiRequest) (*admin.PaginatedFlexClusters20250101, *http.Response, error)) *FlexClustersApi_ListFlexClustersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListFlexClustersWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) ListFlexClustersWithParams(ctx context.Context, args *admin.ListFlexClustersApiParams) admin.ListFlexClustersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListFlexClustersWithParams")
	}

	var r0 admin.ListFlexClustersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListFlexClustersApiParams) admin.ListFlexClustersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListFlexClustersApiRequest)
	}

	return r0
}

// FlexClustersApi_ListFlexClustersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFlexClustersWithParams'
type FlexClustersApi_ListFlexClustersWithParams_Call struct {
	*mock.Call
}

// ListFlexClustersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListFlexClustersApiParams
func (_e *FlexClustersApi_Expecter) ListFlexClustersWithParams(ctx any, args any) *FlexClustersApi_ListFlexClustersWithParams_Call {
	return &FlexClustersApi_ListFlexClustersWithParams_Call{Call: _e.mock.On("ListFlexClustersWithParams", ctx, args)}
}

func (_c *FlexClustersApi_ListFlexClustersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListFlexClustersApiParams)) *FlexClustersApi_ListFlexClustersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListFlexClustersApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_ListFlexClustersWithParams_Call) Return(_a0 admin.ListFlexClustersApiRequest) *FlexClustersApi_ListFlexClustersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_ListFlexClustersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListFlexClustersApiParams) admin.ListFlexClustersApiRequest) *FlexClustersApi_ListFlexClustersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFlexCluster provides a mock function with given fields: ctx, groupId, name, flexClusterDescription20250101
func (_m *FlexClustersApi) UpdateFlexCluster(ctx context.Context, groupId string, name string, flexClusterDescription20250101 *admin.FlexClusterDescription20250101) admin.UpdateFlexClusterApiRequest {
	ret := _m.Called(ctx, groupId, name, flexClusterDescription20250101)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlexCluster")
	}

	var r0 admin.UpdateFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.FlexClusterDescription20250101) admin.UpdateFlexClusterApiRequest); ok {
		r0 = rf(ctx, groupId, name, flexClusterDescription20250101)
	} else {
		r0 = ret.Get(0).(admin.UpdateFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_UpdateFlexCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlexCluster'
type FlexClustersApi_UpdateFlexCluster_Call struct {
	*mock.Call
}

// UpdateFlexCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - name string
//   - flexClusterDescription20250101 *admin.FlexClusterDescription20250101
func (_e *FlexClustersApi_Expecter) UpdateFlexCluster(ctx any, groupId any, name any, flexClusterDescription20250101 any) *FlexClustersApi_UpdateFlexCluster_Call {
	return &FlexClustersApi_UpdateFlexCluster_Call{Call: _e.mock.On("UpdateFlexCluster", ctx, groupId, name, flexClusterDescription20250101)}
}

func (_c *FlexClustersApi_UpdateFlexCluster_Call) Run(run func(ctx context.Context, groupId string, name string, flexClusterDescription20250101 *admin.FlexClusterDescription20250101)) *FlexClustersApi_UpdateFlexCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.FlexClusterDescription20250101))
	})
	return _c
}

func (_c *FlexClustersApi_UpdateFlexCluster_Call) Return(_a0 admin.UpdateFlexClusterApiRequest) *FlexClustersApi_UpdateFlexCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_UpdateFlexCluster_Call) RunAndReturn(run func(context.Context, string, string, *admin.FlexClusterDescription20250101) admin.UpdateFlexClusterApiRequest) *FlexClustersApi_UpdateFlexCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFlexClusterExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) UpdateFlexClusterExecute(r admin.UpdateFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlexClusterExecute")
	}

	var r0 *admin.FlexClusterDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateFlexClusterApiRequest) *admin.FlexClusterDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexClusterDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateFlexClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateFlexClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_UpdateFlexClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlexClusterExecute'
type FlexClustersApi_UpdateFlexClusterExecute_Call struct {
	*mock.Call
}

// UpdateFlexClusterExecute is a helper method to define mock.On call
//   - r admin.UpdateFlexClusterApiRequest
func (_e *FlexClustersApi_Expecter) UpdateFlexClusterExecute(r any) *FlexClustersApi_UpdateFlexClusterExecute_Call {
	return &FlexClustersApi_UpdateFlexClusterExecute_Call{Call: _e.mock.On("UpdateFlexClusterExecute", r)}
}

func (_c *FlexClustersApi_UpdateFlexClusterExecute_Call) Run(run func(r admin.UpdateFlexClusterApiRequest)) *FlexClustersApi_UpdateFlexClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateFlexClusterApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_UpdateFlexClusterExecute_Call) Return(_a0 *admin.FlexClusterDescription20250101, _a1 *http.Response, _a2 error) *FlexClustersApi_UpdateFlexClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_UpdateFlexClusterExecute_Call) RunAndReturn(run func(admin.UpdateFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)) *FlexClustersApi_UpdateFlexClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFlexClusterWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) UpdateFlexClusterWithParams(ctx context.Context, args *admin.UpdateFlexClusterApiParams) admin.UpdateFlexClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlexClusterWithParams")
	}

	var r0 admin.UpdateFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateFlexClusterApiParams) admin.UpdateFlexClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_UpdateFlexClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlexClusterWithParams'
type FlexClustersApi_UpdateFlexClusterWithParams_Call struct {
	*mock.Call
}

// UpdateFlexClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateFlexClusterApiParams
func (_e *FlexClustersApi_Expecter) UpdateFlexClusterWithParams(ctx any, args any) *FlexClustersApi_UpdateFlexClusterWithParams_Call {
	return &FlexClustersApi_UpdateFlexClusterWithParams_Call{Call: _e.mock.On("UpdateFlexClusterWithParams", ctx, args)}
}

func (_c *FlexClustersApi_UpdateFlexClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateFlexClusterApiParams)) *FlexClustersApi_UpdateFlexClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateFlexClusterApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_UpdateFlexClusterWithParams_Call) Return(_a0 admin.UpdateFlexClusterApiRequest) *FlexClustersApi_UpdateFlexClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_UpdateFlexClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateFlexClusterApiParams) admin.UpdateFlexClusterApiRequest) *FlexClustersApi_UpdateFlexClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeFlexCluster provides a mock function with given fields: ctx, groupId, flexClusterDescription20250101
func (_m *FlexClustersApi) UpgradeFlexCluster(ctx context.Context, groupId string, flexClusterDescription20250101 *admin.FlexClusterDescription20250101) admin.UpgradeFlexClusterApiRequest {
	ret := _m.Called(ctx, groupId, flexClusterDescription20250101)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeFlexCluster")
	}

	var r0 admin.UpgradeFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.FlexClusterDescription20250101) admin.UpgradeFlexClusterApiRequest); ok {
		r0 = rf(ctx, groupId, flexClusterDescription20250101)
	} else {
		r0 = ret.Get(0).(admin.UpgradeFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_UpgradeFlexCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeFlexCluster'
type FlexClustersApi_UpgradeFlexCluster_Call struct {
	*mock.Call
}

// UpgradeFlexCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - flexClusterDescription20250101 *admin.FlexClusterDescription20250101
func (_e *FlexClustersApi_Expecter) UpgradeFlexCluster(ctx any, groupId any, flexClusterDescription20250101 any) *FlexClustersApi_UpgradeFlexCluster_Call {
	return &FlexClustersApi_UpgradeFlexCluster_Call{Call: _e.mock.On("UpgradeFlexCluster", ctx, groupId, flexClusterDescription20250101)}
}

func (_c *FlexClustersApi_UpgradeFlexCluster_Call) Run(run func(ctx context.Context, groupId string, flexClusterDescription20250101 *admin.FlexClusterDescription20250101)) *FlexClustersApi_UpgradeFlexCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.FlexClusterDescription20250101))
	})
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexCluster_Call) Return(_a0 admin.UpgradeFlexClusterApiRequest) *FlexClustersApi_UpgradeFlexCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexCluster_Call) RunAndReturn(run func(context.Context, string, *admin.FlexClusterDescription20250101) admin.UpgradeFlexClusterApiRequest) *FlexClustersApi_UpgradeFlexCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeFlexClusterExecute provides a mock function with given fields: r
func (_m *FlexClustersApi) UpgradeFlexClusterExecute(r admin.UpgradeFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeFlexClusterExecute")
	}

	var r0 *admin.FlexClusterDescription20250101
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpgradeFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpgradeFlexClusterApiRequest) *admin.FlexClusterDescription20250101); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FlexClusterDescription20250101)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpgradeFlexClusterApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpgradeFlexClusterApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlexClustersApi_UpgradeFlexClusterExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeFlexClusterExecute'
type FlexClustersApi_UpgradeFlexClusterExecute_Call struct {
	*mock.Call
}

// UpgradeFlexClusterExecute is a helper method to define mock.On call
//   - r admin.UpgradeFlexClusterApiRequest
func (_e *FlexClustersApi_Expecter) UpgradeFlexClusterExecute(r any) *FlexClustersApi_UpgradeFlexClusterExecute_Call {
	return &FlexClustersApi_UpgradeFlexClusterExecute_Call{Call: _e.mock.On("UpgradeFlexClusterExecute", r)}
}

func (_c *FlexClustersApi_UpgradeFlexClusterExecute_Call) Run(run func(r admin.UpgradeFlexClusterApiRequest)) *FlexClustersApi_UpgradeFlexClusterExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpgradeFlexClusterApiRequest))
	})
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexClusterExecute_Call) Return(_a0 *admin.FlexClusterDescription20250101, _a1 *http.Response, _a2 error) *FlexClustersApi_UpgradeFlexClusterExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexClusterExecute_Call) RunAndReturn(run func(admin.UpgradeFlexClusterApiRequest) (*admin.FlexClusterDescription20250101, *http.Response, error)) *FlexClustersApi_UpgradeFlexClusterExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeFlexClusterWithParams provides a mock function with given fields: ctx, args
func (_m *FlexClustersApi) UpgradeFlexClusterWithParams(ctx context.Context, args *admin.UpgradeFlexClusterApiParams) admin.UpgradeFlexClusterApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeFlexClusterWithParams")
	}

	var r0 admin.UpgradeFlexClusterApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpgradeFlexClusterApiParams) admin.UpgradeFlexClusterApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpgradeFlexClusterApiRequest)
	}

	return r0
}

// FlexClustersApi_UpgradeFlexClusterWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeFlexClusterWithParams'
type FlexClustersApi_UpgradeFlexClusterWithParams_Call struct {
	*mock.Call
}

// UpgradeFlexClusterWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpgradeFlexClusterApiParams
func (_e *FlexClustersApi_Expecter) UpgradeFlexClusterWithParams(ctx any, args any) *FlexClustersApi_UpgradeFlexClusterWithParams_Call {
	return &FlexClustersApi_UpgradeFlexClusterWithParams_Call{Call: _e.mock.On("UpgradeFlexClusterWithParams", ctx, args)}
}

func (_c *FlexClustersApi_UpgradeFlexClusterWithParams_Call) Run(run func(ctx context.Context, args *admin.UpgradeFlexClusterApiParams)) *FlexClustersApi_UpgradeFlexClusterWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpgradeFlexClusterApiParams))
	})
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexClusterWithParams_Call) Return(_a0 admin.UpgradeFlexClusterApiRequest) *FlexClustersApi_UpgradeFlexClusterWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlexClustersApi_UpgradeFlexClusterWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpgradeFlexClusterApiParams) admin.UpgradeFlexClusterApiRequest) *FlexClustersApi_UpgradeFlexClusterWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlexClustersApi creates a new instance of FlexClustersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlexClustersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlexClustersApi {
	mock := &FlexClustersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
