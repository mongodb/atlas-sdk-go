// Code generated by mockery. DO NOT EDIT.

package mockadmin

import (
	context "context"

	admin "github.com/mongodb/atlas-sdk-go/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// TeamsApi is an autogenerated mock type for the TeamsApi type
type TeamsApi struct {
	mock.Mock
}

type TeamsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamsApi) EXPECT() *TeamsApi_Expecter {
	return &TeamsApi_Expecter{mock: &_m.Mock}
}

// AddGroupTeams provides a mock function with given fields: ctx, groupId, teamRole
func (_m *TeamsApi) AddGroupTeams(ctx context.Context, groupId string, teamRole *[]admin.TeamRole) admin.AddGroupTeamsApiRequest {
	ret := _m.Called(ctx, groupId, teamRole)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupTeams")
	}

	var r0 admin.AddGroupTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]admin.TeamRole) admin.AddGroupTeamsApiRequest); ok {
		r0 = rf(ctx, groupId, teamRole)
	} else {
		r0 = ret.Get(0).(admin.AddGroupTeamsApiRequest)
	}

	return r0
}

// TeamsApi_AddGroupTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupTeams'
type TeamsApi_AddGroupTeams_Call struct {
	*mock.Call
}

// AddGroupTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - teamRole *[]admin.TeamRole
func (_e *TeamsApi_Expecter) AddGroupTeams(ctx any, groupId any, teamRole any) *TeamsApi_AddGroupTeams_Call {
	return &TeamsApi_AddGroupTeams_Call{Call: _e.mock.On("AddGroupTeams", ctx, groupId, teamRole)}
}

func (_c *TeamsApi_AddGroupTeams_Call) Run(run func(ctx context.Context, groupId string, teamRole *[]admin.TeamRole)) *TeamsApi_AddGroupTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*[]admin.TeamRole))
	})
	return _c
}

func (_c *TeamsApi_AddGroupTeams_Call) Return(_a0 admin.AddGroupTeamsApiRequest) *TeamsApi_AddGroupTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_AddGroupTeams_Call) RunAndReturn(run func(context.Context, string, *[]admin.TeamRole) admin.AddGroupTeamsApiRequest) *TeamsApi_AddGroupTeams_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupTeamsExecute provides a mock function with given fields: r
func (_m *TeamsApi) AddGroupTeamsExecute(r admin.AddGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupTeamsExecute")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddGroupTeamsApiRequest) *admin.PaginatedTeamRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddGroupTeamsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddGroupTeamsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_AddGroupTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupTeamsExecute'
type TeamsApi_AddGroupTeamsExecute_Call struct {
	*mock.Call
}

// AddGroupTeamsExecute is a helper method to define mock.On call
//   - r admin.AddGroupTeamsApiRequest
func (_e *TeamsApi_Expecter) AddGroupTeamsExecute(r any) *TeamsApi_AddGroupTeamsExecute_Call {
	return &TeamsApi_AddGroupTeamsExecute_Call{Call: _e.mock.On("AddGroupTeamsExecute", r)}
}

func (_c *TeamsApi_AddGroupTeamsExecute_Call) Run(run func(r admin.AddGroupTeamsApiRequest)) *TeamsApi_AddGroupTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddGroupTeamsApiRequest))
	})
	return _c
}

func (_c *TeamsApi_AddGroupTeamsExecute_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *TeamsApi_AddGroupTeamsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_AddGroupTeamsExecute_Call) RunAndReturn(run func(admin.AddGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)) *TeamsApi_AddGroupTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupTeamsWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) AddGroupTeamsWithParams(ctx context.Context, args *admin.AddGroupTeamsApiParams) admin.AddGroupTeamsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupTeamsWithParams")
	}

	var r0 admin.AddGroupTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddGroupTeamsApiParams) admin.AddGroupTeamsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddGroupTeamsApiRequest)
	}

	return r0
}

// TeamsApi_AddGroupTeamsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupTeamsWithParams'
type TeamsApi_AddGroupTeamsWithParams_Call struct {
	*mock.Call
}

// AddGroupTeamsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddGroupTeamsApiParams
func (_e *TeamsApi_Expecter) AddGroupTeamsWithParams(ctx any, args any) *TeamsApi_AddGroupTeamsWithParams_Call {
	return &TeamsApi_AddGroupTeamsWithParams_Call{Call: _e.mock.On("AddGroupTeamsWithParams", ctx, args)}
}

func (_c *TeamsApi_AddGroupTeamsWithParams_Call) Run(run func(ctx context.Context, args *admin.AddGroupTeamsApiParams)) *TeamsApi_AddGroupTeamsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddGroupTeamsApiParams))
	})
	return _c
}

func (_c *TeamsApi_AddGroupTeamsWithParams_Call) Return(_a0 admin.AddGroupTeamsApiRequest) *TeamsApi_AddGroupTeamsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_AddGroupTeamsWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddGroupTeamsApiParams) admin.AddGroupTeamsApiRequest) *TeamsApi_AddGroupTeamsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamUsers provides a mock function with given fields: ctx, orgId, teamId, addUserToTeam
func (_m *TeamsApi) AddTeamUsers(ctx context.Context, orgId string, teamId string, addUserToTeam *[]admin.AddUserToTeam) admin.AddTeamUsersApiRequest {
	ret := _m.Called(ctx, orgId, teamId, addUserToTeam)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamUsers")
	}

	var r0 admin.AddTeamUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *[]admin.AddUserToTeam) admin.AddTeamUsersApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, addUserToTeam)
	} else {
		r0 = ret.Get(0).(admin.AddTeamUsersApiRequest)
	}

	return r0
}

// TeamsApi_AddTeamUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamUsers'
type TeamsApi_AddTeamUsers_Call struct {
	*mock.Call
}

// AddTeamUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - addUserToTeam *[]admin.AddUserToTeam
func (_e *TeamsApi_Expecter) AddTeamUsers(ctx any, orgId any, teamId any, addUserToTeam any) *TeamsApi_AddTeamUsers_Call {
	return &TeamsApi_AddTeamUsers_Call{Call: _e.mock.On("AddTeamUsers", ctx, orgId, teamId, addUserToTeam)}
}

func (_c *TeamsApi_AddTeamUsers_Call) Run(run func(ctx context.Context, orgId string, teamId string, addUserToTeam *[]admin.AddUserToTeam)) *TeamsApi_AddTeamUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*[]admin.AddUserToTeam))
	})
	return _c
}

func (_c *TeamsApi_AddTeamUsers_Call) Return(_a0 admin.AddTeamUsersApiRequest) *TeamsApi_AddTeamUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_AddTeamUsers_Call) RunAndReturn(run func(context.Context, string, string, *[]admin.AddUserToTeam) admin.AddTeamUsersApiRequest) *TeamsApi_AddTeamUsers_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamUsersExecute provides a mock function with given fields: r
func (_m *TeamsApi) AddTeamUsersExecute(r admin.AddTeamUsersApiRequest) (*admin.PaginatedApiAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamUsersExecute")
	}

	var r0 *admin.PaginatedApiAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddTeamUsersApiRequest) (*admin.PaginatedApiAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddTeamUsersApiRequest) *admin.PaginatedApiAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedApiAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddTeamUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddTeamUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_AddTeamUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamUsersExecute'
type TeamsApi_AddTeamUsersExecute_Call struct {
	*mock.Call
}

// AddTeamUsersExecute is a helper method to define mock.On call
//   - r admin.AddTeamUsersApiRequest
func (_e *TeamsApi_Expecter) AddTeamUsersExecute(r any) *TeamsApi_AddTeamUsersExecute_Call {
	return &TeamsApi_AddTeamUsersExecute_Call{Call: _e.mock.On("AddTeamUsersExecute", r)}
}

func (_c *TeamsApi_AddTeamUsersExecute_Call) Run(run func(r admin.AddTeamUsersApiRequest)) *TeamsApi_AddTeamUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddTeamUsersApiRequest))
	})
	return _c
}

func (_c *TeamsApi_AddTeamUsersExecute_Call) Return(_a0 *admin.PaginatedApiAppUser, _a1 *http.Response, _a2 error) *TeamsApi_AddTeamUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_AddTeamUsersExecute_Call) RunAndReturn(run func(admin.AddTeamUsersApiRequest) (*admin.PaginatedApiAppUser, *http.Response, error)) *TeamsApi_AddTeamUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamUsersWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) AddTeamUsersWithParams(ctx context.Context, args *admin.AddTeamUsersApiParams) admin.AddTeamUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamUsersWithParams")
	}

	var r0 admin.AddTeamUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddTeamUsersApiParams) admin.AddTeamUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddTeamUsersApiRequest)
	}

	return r0
}

// TeamsApi_AddTeamUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamUsersWithParams'
type TeamsApi_AddTeamUsersWithParams_Call struct {
	*mock.Call
}

// AddTeamUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddTeamUsersApiParams
func (_e *TeamsApi_Expecter) AddTeamUsersWithParams(ctx any, args any) *TeamsApi_AddTeamUsersWithParams_Call {
	return &TeamsApi_AddTeamUsersWithParams_Call{Call: _e.mock.On("AddTeamUsersWithParams", ctx, args)}
}

func (_c *TeamsApi_AddTeamUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.AddTeamUsersApiParams)) *TeamsApi_AddTeamUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddTeamUsersApiParams))
	})
	return _c
}

func (_c *TeamsApi_AddTeamUsersWithParams_Call) Return(_a0 admin.AddTeamUsersApiRequest) *TeamsApi_AddTeamUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_AddTeamUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddTeamUsersApiParams) admin.AddTeamUsersApiRequest) *TeamsApi_AddTeamUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgTeam provides a mock function with given fields: ctx, orgId, team
func (_m *TeamsApi) CreateOrgTeam(ctx context.Context, orgId string, team *admin.Team) admin.CreateOrgTeamApiRequest {
	ret := _m.Called(ctx, orgId, team)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgTeam")
	}

	var r0 admin.CreateOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.Team) admin.CreateOrgTeamApiRequest); ok {
		r0 = rf(ctx, orgId, team)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_CreateOrgTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgTeam'
type TeamsApi_CreateOrgTeam_Call struct {
	*mock.Call
}

// CreateOrgTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - team *admin.Team
func (_e *TeamsApi_Expecter) CreateOrgTeam(ctx any, orgId any, team any) *TeamsApi_CreateOrgTeam_Call {
	return &TeamsApi_CreateOrgTeam_Call{Call: _e.mock.On("CreateOrgTeam", ctx, orgId, team)}
}

func (_c *TeamsApi_CreateOrgTeam_Call) Run(run func(ctx context.Context, orgId string, team *admin.Team)) *TeamsApi_CreateOrgTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.Team))
	})
	return _c
}

func (_c *TeamsApi_CreateOrgTeam_Call) Return(_a0 admin.CreateOrgTeamApiRequest) *TeamsApi_CreateOrgTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_CreateOrgTeam_Call) RunAndReturn(run func(context.Context, string, *admin.Team) admin.CreateOrgTeamApiRequest) *TeamsApi_CreateOrgTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) CreateOrgTeamExecute(r admin.CreateOrgTeamApiRequest) (*admin.Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgTeamExecute")
	}

	var r0 *admin.Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateOrgTeamApiRequest) (*admin.Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateOrgTeamApiRequest) *admin.Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateOrgTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateOrgTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_CreateOrgTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgTeamExecute'
type TeamsApi_CreateOrgTeamExecute_Call struct {
	*mock.Call
}

// CreateOrgTeamExecute is a helper method to define mock.On call
//   - r admin.CreateOrgTeamApiRequest
func (_e *TeamsApi_Expecter) CreateOrgTeamExecute(r any) *TeamsApi_CreateOrgTeamExecute_Call {
	return &TeamsApi_CreateOrgTeamExecute_Call{Call: _e.mock.On("CreateOrgTeamExecute", r)}
}

func (_c *TeamsApi_CreateOrgTeamExecute_Call) Run(run func(r admin.CreateOrgTeamApiRequest)) *TeamsApi_CreateOrgTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateOrgTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_CreateOrgTeamExecute_Call) Return(_a0 *admin.Team, _a1 *http.Response, _a2 error) *TeamsApi_CreateOrgTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_CreateOrgTeamExecute_Call) RunAndReturn(run func(admin.CreateOrgTeamApiRequest) (*admin.Team, *http.Response, error)) *TeamsApi_CreateOrgTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrgTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) CreateOrgTeamWithParams(ctx context.Context, args *admin.CreateOrgTeamApiParams) admin.CreateOrgTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrgTeamWithParams")
	}

	var r0 admin.CreateOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateOrgTeamApiParams) admin.CreateOrgTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_CreateOrgTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrgTeamWithParams'
type TeamsApi_CreateOrgTeamWithParams_Call struct {
	*mock.Call
}

// CreateOrgTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateOrgTeamApiParams
func (_e *TeamsApi_Expecter) CreateOrgTeamWithParams(ctx any, args any) *TeamsApi_CreateOrgTeamWithParams_Call {
	return &TeamsApi_CreateOrgTeamWithParams_Call{Call: _e.mock.On("CreateOrgTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_CreateOrgTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateOrgTeamApiParams)) *TeamsApi_CreateOrgTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateOrgTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_CreateOrgTeamWithParams_Call) Return(_a0 admin.CreateOrgTeamApiRequest) *TeamsApi_CreateOrgTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_CreateOrgTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateOrgTeamApiParams) admin.CreateOrgTeamApiRequest) *TeamsApi_CreateOrgTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgTeam provides a mock function with given fields: ctx, orgId, teamId
func (_m *TeamsApi) DeleteOrgTeam(ctx context.Context, orgId string, teamId string) admin.DeleteOrgTeamApiRequest {
	ret := _m.Called(ctx, orgId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgTeam")
	}

	var r0 admin.DeleteOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteOrgTeamApiRequest); ok {
		r0 = rf(ctx, orgId, teamId)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_DeleteOrgTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgTeam'
type TeamsApi_DeleteOrgTeam_Call struct {
	*mock.Call
}

// DeleteOrgTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
func (_e *TeamsApi_Expecter) DeleteOrgTeam(ctx any, orgId any, teamId any) *TeamsApi_DeleteOrgTeam_Call {
	return &TeamsApi_DeleteOrgTeam_Call{Call: _e.mock.On("DeleteOrgTeam", ctx, orgId, teamId)}
}

func (_c *TeamsApi_DeleteOrgTeam_Call) Run(run func(ctx context.Context, orgId string, teamId string)) *TeamsApi_DeleteOrgTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamsApi_DeleteOrgTeam_Call) Return(_a0 admin.DeleteOrgTeamApiRequest) *TeamsApi_DeleteOrgTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_DeleteOrgTeam_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteOrgTeamApiRequest) *TeamsApi_DeleteOrgTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) DeleteOrgTeamExecute(r admin.DeleteOrgTeamApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgTeamApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteOrgTeamApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteOrgTeamApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsApi_DeleteOrgTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgTeamExecute'
type TeamsApi_DeleteOrgTeamExecute_Call struct {
	*mock.Call
}

// DeleteOrgTeamExecute is a helper method to define mock.On call
//   - r admin.DeleteOrgTeamApiRequest
func (_e *TeamsApi_Expecter) DeleteOrgTeamExecute(r any) *TeamsApi_DeleteOrgTeamExecute_Call {
	return &TeamsApi_DeleteOrgTeamExecute_Call{Call: _e.mock.On("DeleteOrgTeamExecute", r)}
}

func (_c *TeamsApi_DeleteOrgTeamExecute_Call) Run(run func(r admin.DeleteOrgTeamApiRequest)) *TeamsApi_DeleteOrgTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteOrgTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_DeleteOrgTeamExecute_Call) Return(_a0 *http.Response, _a1 error) *TeamsApi_DeleteOrgTeamExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamsApi_DeleteOrgTeamExecute_Call) RunAndReturn(run func(admin.DeleteOrgTeamApiRequest) (*http.Response, error)) *TeamsApi_DeleteOrgTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) DeleteOrgTeamWithParams(ctx context.Context, args *admin.DeleteOrgTeamApiParams) admin.DeleteOrgTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgTeamWithParams")
	}

	var r0 admin.DeleteOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteOrgTeamApiParams) admin.DeleteOrgTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_DeleteOrgTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgTeamWithParams'
type TeamsApi_DeleteOrgTeamWithParams_Call struct {
	*mock.Call
}

// DeleteOrgTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteOrgTeamApiParams
func (_e *TeamsApi_Expecter) DeleteOrgTeamWithParams(ctx any, args any) *TeamsApi_DeleteOrgTeamWithParams_Call {
	return &TeamsApi_DeleteOrgTeamWithParams_Call{Call: _e.mock.On("DeleteOrgTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_DeleteOrgTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteOrgTeamApiParams)) *TeamsApi_DeleteOrgTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteOrgTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_DeleteOrgTeamWithParams_Call) Return(_a0 admin.DeleteOrgTeamApiRequest) *TeamsApi_DeleteOrgTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_DeleteOrgTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteOrgTeamApiParams) admin.DeleteOrgTeamApiRequest) *TeamsApi_DeleteOrgTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupTeam provides a mock function with given fields: ctx, groupId, teamId
func (_m *TeamsApi) GetGroupTeam(ctx context.Context, groupId string, teamId string) admin.GetGroupTeamApiRequest {
	ret := _m.Called(ctx, groupId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupTeam")
	}

	var r0 admin.GetGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetGroupTeamApiRequest); ok {
		r0 = rf(ctx, groupId, teamId)
	} else {
		r0 = ret.Get(0).(admin.GetGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_GetGroupTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupTeam'
type TeamsApi_GetGroupTeam_Call struct {
	*mock.Call
}

// GetGroupTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - teamId string
func (_e *TeamsApi_Expecter) GetGroupTeam(ctx any, groupId any, teamId any) *TeamsApi_GetGroupTeam_Call {
	return &TeamsApi_GetGroupTeam_Call{Call: _e.mock.On("GetGroupTeam", ctx, groupId, teamId)}
}

func (_c *TeamsApi_GetGroupTeam_Call) Run(run func(ctx context.Context, groupId string, teamId string)) *TeamsApi_GetGroupTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamsApi_GetGroupTeam_Call) Return(_a0 admin.GetGroupTeamApiRequest) *TeamsApi_GetGroupTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetGroupTeam_Call) RunAndReturn(run func(context.Context, string, string) admin.GetGroupTeamApiRequest) *TeamsApi_GetGroupTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) GetGroupTeamExecute(r admin.GetGroupTeamApiRequest) (*admin.TeamRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupTeamExecute")
	}

	var r0 *admin.TeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetGroupTeamApiRequest) (*admin.TeamRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetGroupTeamApiRequest) *admin.TeamRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetGroupTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetGroupTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_GetGroupTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupTeamExecute'
type TeamsApi_GetGroupTeamExecute_Call struct {
	*mock.Call
}

// GetGroupTeamExecute is a helper method to define mock.On call
//   - r admin.GetGroupTeamApiRequest
func (_e *TeamsApi_Expecter) GetGroupTeamExecute(r any) *TeamsApi_GetGroupTeamExecute_Call {
	return &TeamsApi_GetGroupTeamExecute_Call{Call: _e.mock.On("GetGroupTeamExecute", r)}
}

func (_c *TeamsApi_GetGroupTeamExecute_Call) Run(run func(r admin.GetGroupTeamApiRequest)) *TeamsApi_GetGroupTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetGroupTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_GetGroupTeamExecute_Call) Return(_a0 *admin.TeamRole, _a1 *http.Response, _a2 error) *TeamsApi_GetGroupTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_GetGroupTeamExecute_Call) RunAndReturn(run func(admin.GetGroupTeamApiRequest) (*admin.TeamRole, *http.Response, error)) *TeamsApi_GetGroupTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) GetGroupTeamWithParams(ctx context.Context, args *admin.GetGroupTeamApiParams) admin.GetGroupTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupTeamWithParams")
	}

	var r0 admin.GetGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetGroupTeamApiParams) admin.GetGroupTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_GetGroupTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupTeamWithParams'
type TeamsApi_GetGroupTeamWithParams_Call struct {
	*mock.Call
}

// GetGroupTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetGroupTeamApiParams
func (_e *TeamsApi_Expecter) GetGroupTeamWithParams(ctx any, args any) *TeamsApi_GetGroupTeamWithParams_Call {
	return &TeamsApi_GetGroupTeamWithParams_Call{Call: _e.mock.On("GetGroupTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_GetGroupTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.GetGroupTeamApiParams)) *TeamsApi_GetGroupTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetGroupTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_GetGroupTeamWithParams_Call) Return(_a0 admin.GetGroupTeamApiRequest) *TeamsApi_GetGroupTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetGroupTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetGroupTeamApiParams) admin.GetGroupTeamApiRequest) *TeamsApi_GetGroupTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgTeam provides a mock function with given fields: ctx, orgId, teamId
func (_m *TeamsApi) GetOrgTeam(ctx context.Context, orgId string, teamId string) admin.GetOrgTeamApiRequest {
	ret := _m.Called(ctx, orgId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgTeam")
	}

	var r0 admin.GetOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetOrgTeamApiRequest); ok {
		r0 = rf(ctx, orgId, teamId)
	} else {
		r0 = ret.Get(0).(admin.GetOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_GetOrgTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgTeam'
type TeamsApi_GetOrgTeam_Call struct {
	*mock.Call
}

// GetOrgTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
func (_e *TeamsApi_Expecter) GetOrgTeam(ctx any, orgId any, teamId any) *TeamsApi_GetOrgTeam_Call {
	return &TeamsApi_GetOrgTeam_Call{Call: _e.mock.On("GetOrgTeam", ctx, orgId, teamId)}
}

func (_c *TeamsApi_GetOrgTeam_Call) Run(run func(ctx context.Context, orgId string, teamId string)) *TeamsApi_GetOrgTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamsApi_GetOrgTeam_Call) Return(_a0 admin.GetOrgTeamApiRequest) *TeamsApi_GetOrgTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetOrgTeam_Call) RunAndReturn(run func(context.Context, string, string) admin.GetOrgTeamApiRequest) *TeamsApi_GetOrgTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) GetOrgTeamExecute(r admin.GetOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgTeamExecute")
	}

	var r0 *admin.TeamResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetOrgTeamApiRequest) *admin.TeamResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetOrgTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetOrgTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_GetOrgTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgTeamExecute'
type TeamsApi_GetOrgTeamExecute_Call struct {
	*mock.Call
}

// GetOrgTeamExecute is a helper method to define mock.On call
//   - r admin.GetOrgTeamApiRequest
func (_e *TeamsApi_Expecter) GetOrgTeamExecute(r any) *TeamsApi_GetOrgTeamExecute_Call {
	return &TeamsApi_GetOrgTeamExecute_Call{Call: _e.mock.On("GetOrgTeamExecute", r)}
}

func (_c *TeamsApi_GetOrgTeamExecute_Call) Run(run func(r admin.GetOrgTeamApiRequest)) *TeamsApi_GetOrgTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetOrgTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_GetOrgTeamExecute_Call) Return(_a0 *admin.TeamResponse, _a1 *http.Response, _a2 error) *TeamsApi_GetOrgTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_GetOrgTeamExecute_Call) RunAndReturn(run func(admin.GetOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error)) *TeamsApi_GetOrgTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) GetOrgTeamWithParams(ctx context.Context, args *admin.GetOrgTeamApiParams) admin.GetOrgTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgTeamWithParams")
	}

	var r0 admin.GetOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetOrgTeamApiParams) admin.GetOrgTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_GetOrgTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgTeamWithParams'
type TeamsApi_GetOrgTeamWithParams_Call struct {
	*mock.Call
}

// GetOrgTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetOrgTeamApiParams
func (_e *TeamsApi_Expecter) GetOrgTeamWithParams(ctx any, args any) *TeamsApi_GetOrgTeamWithParams_Call {
	return &TeamsApi_GetOrgTeamWithParams_Call{Call: _e.mock.On("GetOrgTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_GetOrgTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.GetOrgTeamApiParams)) *TeamsApi_GetOrgTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetOrgTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_GetOrgTeamWithParams_Call) Return(_a0 admin.GetOrgTeamApiRequest) *TeamsApi_GetOrgTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetOrgTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetOrgTeamApiParams) admin.GetOrgTeamApiRequest) *TeamsApi_GetOrgTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByName provides a mock function with given fields: ctx, orgId, teamName
func (_m *TeamsApi) GetTeamByName(ctx context.Context, orgId string, teamName string) admin.GetTeamByNameApiRequest {
	ret := _m.Called(ctx, orgId, teamName)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByName")
	}

	var r0 admin.GetTeamByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetTeamByNameApiRequest); ok {
		r0 = rf(ctx, orgId, teamName)
	} else {
		r0 = ret.Get(0).(admin.GetTeamByNameApiRequest)
	}

	return r0
}

// TeamsApi_GetTeamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByName'
type TeamsApi_GetTeamByName_Call struct {
	*mock.Call
}

// GetTeamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamName string
func (_e *TeamsApi_Expecter) GetTeamByName(ctx any, orgId any, teamName any) *TeamsApi_GetTeamByName_Call {
	return &TeamsApi_GetTeamByName_Call{Call: _e.mock.On("GetTeamByName", ctx, orgId, teamName)}
}

func (_c *TeamsApi_GetTeamByName_Call) Run(run func(ctx context.Context, orgId string, teamName string)) *TeamsApi_GetTeamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamsApi_GetTeamByName_Call) Return(_a0 admin.GetTeamByNameApiRequest) *TeamsApi_GetTeamByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetTeamByName_Call) RunAndReturn(run func(context.Context, string, string) admin.GetTeamByNameApiRequest) *TeamsApi_GetTeamByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByNameExecute provides a mock function with given fields: r
func (_m *TeamsApi) GetTeamByNameExecute(r admin.GetTeamByNameApiRequest) (*admin.TeamResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByNameExecute")
	}

	var r0 *admin.TeamResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetTeamByNameApiRequest) (*admin.TeamResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetTeamByNameApiRequest) *admin.TeamResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetTeamByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetTeamByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_GetTeamByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByNameExecute'
type TeamsApi_GetTeamByNameExecute_Call struct {
	*mock.Call
}

// GetTeamByNameExecute is a helper method to define mock.On call
//   - r admin.GetTeamByNameApiRequest
func (_e *TeamsApi_Expecter) GetTeamByNameExecute(r any) *TeamsApi_GetTeamByNameExecute_Call {
	return &TeamsApi_GetTeamByNameExecute_Call{Call: _e.mock.On("GetTeamByNameExecute", r)}
}

func (_c *TeamsApi_GetTeamByNameExecute_Call) Run(run func(r admin.GetTeamByNameApiRequest)) *TeamsApi_GetTeamByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetTeamByNameApiRequest))
	})
	return _c
}

func (_c *TeamsApi_GetTeamByNameExecute_Call) Return(_a0 *admin.TeamResponse, _a1 *http.Response, _a2 error) *TeamsApi_GetTeamByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_GetTeamByNameExecute_Call) RunAndReturn(run func(admin.GetTeamByNameApiRequest) (*admin.TeamResponse, *http.Response, error)) *TeamsApi_GetTeamByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByNameWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) GetTeamByNameWithParams(ctx context.Context, args *admin.GetTeamByNameApiParams) admin.GetTeamByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByNameWithParams")
	}

	var r0 admin.GetTeamByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTeamByNameApiParams) admin.GetTeamByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetTeamByNameApiRequest)
	}

	return r0
}

// TeamsApi_GetTeamByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByNameWithParams'
type TeamsApi_GetTeamByNameWithParams_Call struct {
	*mock.Call
}

// GetTeamByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetTeamByNameApiParams
func (_e *TeamsApi_Expecter) GetTeamByNameWithParams(ctx any, args any) *TeamsApi_GetTeamByNameWithParams_Call {
	return &TeamsApi_GetTeamByNameWithParams_Call{Call: _e.mock.On("GetTeamByNameWithParams", ctx, args)}
}

func (_c *TeamsApi_GetTeamByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetTeamByNameApiParams)) *TeamsApi_GetTeamByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetTeamByNameApiParams))
	})
	return _c
}

func (_c *TeamsApi_GetTeamByNameWithParams_Call) Return(_a0 admin.GetTeamByNameApiRequest) *TeamsApi_GetTeamByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_GetTeamByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetTeamByNameApiParams) admin.GetTeamByNameApiRequest) *TeamsApi_GetTeamByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupTeams provides a mock function with given fields: ctx, groupId
func (_m *TeamsApi) ListGroupTeams(ctx context.Context, groupId string) admin.ListGroupTeamsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupTeams")
	}

	var r0 admin.ListGroupTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListGroupTeamsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListGroupTeamsApiRequest)
	}

	return r0
}

// TeamsApi_ListGroupTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupTeams'
type TeamsApi_ListGroupTeams_Call struct {
	*mock.Call
}

// ListGroupTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *TeamsApi_Expecter) ListGroupTeams(ctx any, groupId any) *TeamsApi_ListGroupTeams_Call {
	return &TeamsApi_ListGroupTeams_Call{Call: _e.mock.On("ListGroupTeams", ctx, groupId)}
}

func (_c *TeamsApi_ListGroupTeams_Call) Run(run func(ctx context.Context, groupId string)) *TeamsApi_ListGroupTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TeamsApi_ListGroupTeams_Call) Return(_a0 admin.ListGroupTeamsApiRequest) *TeamsApi_ListGroupTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_ListGroupTeams_Call) RunAndReturn(run func(context.Context, string) admin.ListGroupTeamsApiRequest) *TeamsApi_ListGroupTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupTeamsExecute provides a mock function with given fields: r
func (_m *TeamsApi) ListGroupTeamsExecute(r admin.ListGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupTeamsExecute")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListGroupTeamsApiRequest) *admin.PaginatedTeamRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListGroupTeamsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListGroupTeamsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_ListGroupTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupTeamsExecute'
type TeamsApi_ListGroupTeamsExecute_Call struct {
	*mock.Call
}

// ListGroupTeamsExecute is a helper method to define mock.On call
//   - r admin.ListGroupTeamsApiRequest
func (_e *TeamsApi_Expecter) ListGroupTeamsExecute(r any) *TeamsApi_ListGroupTeamsExecute_Call {
	return &TeamsApi_ListGroupTeamsExecute_Call{Call: _e.mock.On("ListGroupTeamsExecute", r)}
}

func (_c *TeamsApi_ListGroupTeamsExecute_Call) Run(run func(r admin.ListGroupTeamsApiRequest)) *TeamsApi_ListGroupTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListGroupTeamsApiRequest))
	})
	return _c
}

func (_c *TeamsApi_ListGroupTeamsExecute_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *TeamsApi_ListGroupTeamsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_ListGroupTeamsExecute_Call) RunAndReturn(run func(admin.ListGroupTeamsApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)) *TeamsApi_ListGroupTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupTeamsWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) ListGroupTeamsWithParams(ctx context.Context, args *admin.ListGroupTeamsApiParams) admin.ListGroupTeamsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupTeamsWithParams")
	}

	var r0 admin.ListGroupTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListGroupTeamsApiParams) admin.ListGroupTeamsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListGroupTeamsApiRequest)
	}

	return r0
}

// TeamsApi_ListGroupTeamsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupTeamsWithParams'
type TeamsApi_ListGroupTeamsWithParams_Call struct {
	*mock.Call
}

// ListGroupTeamsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListGroupTeamsApiParams
func (_e *TeamsApi_Expecter) ListGroupTeamsWithParams(ctx any, args any) *TeamsApi_ListGroupTeamsWithParams_Call {
	return &TeamsApi_ListGroupTeamsWithParams_Call{Call: _e.mock.On("ListGroupTeamsWithParams", ctx, args)}
}

func (_c *TeamsApi_ListGroupTeamsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListGroupTeamsApiParams)) *TeamsApi_ListGroupTeamsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListGroupTeamsApiParams))
	})
	return _c
}

func (_c *TeamsApi_ListGroupTeamsWithParams_Call) Return(_a0 admin.ListGroupTeamsApiRequest) *TeamsApi_ListGroupTeamsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_ListGroupTeamsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListGroupTeamsApiParams) admin.ListGroupTeamsApiRequest) *TeamsApi_ListGroupTeamsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgTeams provides a mock function with given fields: ctx, orgId
func (_m *TeamsApi) ListOrgTeams(ctx context.Context, orgId string) admin.ListOrgTeamsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgTeams")
	}

	var r0 admin.ListOrgTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListOrgTeamsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListOrgTeamsApiRequest)
	}

	return r0
}

// TeamsApi_ListOrgTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgTeams'
type TeamsApi_ListOrgTeams_Call struct {
	*mock.Call
}

// ListOrgTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *TeamsApi_Expecter) ListOrgTeams(ctx any, orgId any) *TeamsApi_ListOrgTeams_Call {
	return &TeamsApi_ListOrgTeams_Call{Call: _e.mock.On("ListOrgTeams", ctx, orgId)}
}

func (_c *TeamsApi_ListOrgTeams_Call) Run(run func(ctx context.Context, orgId string)) *TeamsApi_ListOrgTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TeamsApi_ListOrgTeams_Call) Return(_a0 admin.ListOrgTeamsApiRequest) *TeamsApi_ListOrgTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_ListOrgTeams_Call) RunAndReturn(run func(context.Context, string) admin.ListOrgTeamsApiRequest) *TeamsApi_ListOrgTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgTeamsExecute provides a mock function with given fields: r
func (_m *TeamsApi) ListOrgTeamsExecute(r admin.ListOrgTeamsApiRequest) (*admin.PaginatedTeam, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgTeamsExecute")
	}

	var r0 *admin.PaginatedTeam
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListOrgTeamsApiRequest) (*admin.PaginatedTeam, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListOrgTeamsApiRequest) *admin.PaginatedTeam); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListOrgTeamsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListOrgTeamsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_ListOrgTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgTeamsExecute'
type TeamsApi_ListOrgTeamsExecute_Call struct {
	*mock.Call
}

// ListOrgTeamsExecute is a helper method to define mock.On call
//   - r admin.ListOrgTeamsApiRequest
func (_e *TeamsApi_Expecter) ListOrgTeamsExecute(r any) *TeamsApi_ListOrgTeamsExecute_Call {
	return &TeamsApi_ListOrgTeamsExecute_Call{Call: _e.mock.On("ListOrgTeamsExecute", r)}
}

func (_c *TeamsApi_ListOrgTeamsExecute_Call) Run(run func(r admin.ListOrgTeamsApiRequest)) *TeamsApi_ListOrgTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListOrgTeamsApiRequest))
	})
	return _c
}

func (_c *TeamsApi_ListOrgTeamsExecute_Call) Return(_a0 *admin.PaginatedTeam, _a1 *http.Response, _a2 error) *TeamsApi_ListOrgTeamsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_ListOrgTeamsExecute_Call) RunAndReturn(run func(admin.ListOrgTeamsApiRequest) (*admin.PaginatedTeam, *http.Response, error)) *TeamsApi_ListOrgTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgTeamsWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) ListOrgTeamsWithParams(ctx context.Context, args *admin.ListOrgTeamsApiParams) admin.ListOrgTeamsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgTeamsWithParams")
	}

	var r0 admin.ListOrgTeamsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListOrgTeamsApiParams) admin.ListOrgTeamsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListOrgTeamsApiRequest)
	}

	return r0
}

// TeamsApi_ListOrgTeamsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgTeamsWithParams'
type TeamsApi_ListOrgTeamsWithParams_Call struct {
	*mock.Call
}

// ListOrgTeamsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListOrgTeamsApiParams
func (_e *TeamsApi_Expecter) ListOrgTeamsWithParams(ctx any, args any) *TeamsApi_ListOrgTeamsWithParams_Call {
	return &TeamsApi_ListOrgTeamsWithParams_Call{Call: _e.mock.On("ListOrgTeamsWithParams", ctx, args)}
}

func (_c *TeamsApi_ListOrgTeamsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListOrgTeamsApiParams)) *TeamsApi_ListOrgTeamsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListOrgTeamsApiParams))
	})
	return _c
}

func (_c *TeamsApi_ListOrgTeamsWithParams_Call) Return(_a0 admin.ListOrgTeamsApiRequest) *TeamsApi_ListOrgTeamsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_ListOrgTeamsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListOrgTeamsApiParams) admin.ListOrgTeamsApiRequest) *TeamsApi_ListOrgTeamsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupTeam provides a mock function with given fields: ctx, groupId, teamId
func (_m *TeamsApi) RemoveGroupTeam(ctx context.Context, groupId string, teamId string) admin.RemoveGroupTeamApiRequest {
	ret := _m.Called(ctx, groupId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupTeam")
	}

	var r0 admin.RemoveGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveGroupTeamApiRequest); ok {
		r0 = rf(ctx, groupId, teamId)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_RemoveGroupTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupTeam'
type TeamsApi_RemoveGroupTeam_Call struct {
	*mock.Call
}

// RemoveGroupTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - teamId string
func (_e *TeamsApi_Expecter) RemoveGroupTeam(ctx any, groupId any, teamId any) *TeamsApi_RemoveGroupTeam_Call {
	return &TeamsApi_RemoveGroupTeam_Call{Call: _e.mock.On("RemoveGroupTeam", ctx, groupId, teamId)}
}

func (_c *TeamsApi_RemoveGroupTeam_Call) Run(run func(ctx context.Context, groupId string, teamId string)) *TeamsApi_RemoveGroupTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamsApi_RemoveGroupTeam_Call) Return(_a0 admin.RemoveGroupTeamApiRequest) *TeamsApi_RemoveGroupTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RemoveGroupTeam_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveGroupTeamApiRequest) *TeamsApi_RemoveGroupTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) RemoveGroupTeamExecute(r admin.RemoveGroupTeamApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupTeamApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveGroupTeamApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveGroupTeamApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsApi_RemoveGroupTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupTeamExecute'
type TeamsApi_RemoveGroupTeamExecute_Call struct {
	*mock.Call
}

// RemoveGroupTeamExecute is a helper method to define mock.On call
//   - r admin.RemoveGroupTeamApiRequest
func (_e *TeamsApi_Expecter) RemoveGroupTeamExecute(r any) *TeamsApi_RemoveGroupTeamExecute_Call {
	return &TeamsApi_RemoveGroupTeamExecute_Call{Call: _e.mock.On("RemoveGroupTeamExecute", r)}
}

func (_c *TeamsApi_RemoveGroupTeamExecute_Call) Run(run func(r admin.RemoveGroupTeamApiRequest)) *TeamsApi_RemoveGroupTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveGroupTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_RemoveGroupTeamExecute_Call) Return(_a0 *http.Response, _a1 error) *TeamsApi_RemoveGroupTeamExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamsApi_RemoveGroupTeamExecute_Call) RunAndReturn(run func(admin.RemoveGroupTeamApiRequest) (*http.Response, error)) *TeamsApi_RemoveGroupTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) RemoveGroupTeamWithParams(ctx context.Context, args *admin.RemoveGroupTeamApiParams) admin.RemoveGroupTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupTeamWithParams")
	}

	var r0 admin.RemoveGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveGroupTeamApiParams) admin.RemoveGroupTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_RemoveGroupTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupTeamWithParams'
type TeamsApi_RemoveGroupTeamWithParams_Call struct {
	*mock.Call
}

// RemoveGroupTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveGroupTeamApiParams
func (_e *TeamsApi_Expecter) RemoveGroupTeamWithParams(ctx any, args any) *TeamsApi_RemoveGroupTeamWithParams_Call {
	return &TeamsApi_RemoveGroupTeamWithParams_Call{Call: _e.mock.On("RemoveGroupTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_RemoveGroupTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveGroupTeamApiParams)) *TeamsApi_RemoveGroupTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveGroupTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_RemoveGroupTeamWithParams_Call) Return(_a0 admin.RemoveGroupTeamApiRequest) *TeamsApi_RemoveGroupTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RemoveGroupTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveGroupTeamApiParams) admin.RemoveGroupTeamApiRequest) *TeamsApi_RemoveGroupTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeam provides a mock function with given fields: ctx, orgId, teamId, userId
func (_m *TeamsApi) RemoveUserFromTeam(ctx context.Context, orgId string, teamId string, userId string) admin.RemoveUserFromTeamApiRequest {
	ret := _m.Called(ctx, orgId, teamId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTeam")
	}

	var r0 admin.RemoveUserFromTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.RemoveUserFromTeamApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, userId)
	} else {
		r0 = ret.Get(0).(admin.RemoveUserFromTeamApiRequest)
	}

	return r0
}

// TeamsApi_RemoveUserFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeam'
type TeamsApi_RemoveUserFromTeam_Call struct {
	*mock.Call
}

// RemoveUserFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - userId string
func (_e *TeamsApi_Expecter) RemoveUserFromTeam(ctx any, orgId any, teamId any, userId any) *TeamsApi_RemoveUserFromTeam_Call {
	return &TeamsApi_RemoveUserFromTeam_Call{Call: _e.mock.On("RemoveUserFromTeam", ctx, orgId, teamId, userId)}
}

func (_c *TeamsApi_RemoveUserFromTeam_Call) Run(run func(ctx context.Context, orgId string, teamId string, userId string)) *TeamsApi_RemoveUserFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeam_Call) Return(_a0 admin.RemoveUserFromTeamApiRequest) *TeamsApi_RemoveUserFromTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeam_Call) RunAndReturn(run func(context.Context, string, string, string) admin.RemoveUserFromTeamApiRequest) *TeamsApi_RemoveUserFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) RemoveUserFromTeamExecute(r admin.RemoveUserFromTeamApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RemoveUserFromTeamApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveUserFromTeamApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveUserFromTeamApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsApi_RemoveUserFromTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeamExecute'
type TeamsApi_RemoveUserFromTeamExecute_Call struct {
	*mock.Call
}

// RemoveUserFromTeamExecute is a helper method to define mock.On call
//   - r admin.RemoveUserFromTeamApiRequest
func (_e *TeamsApi_Expecter) RemoveUserFromTeamExecute(r any) *TeamsApi_RemoveUserFromTeamExecute_Call {
	return &TeamsApi_RemoveUserFromTeamExecute_Call{Call: _e.mock.On("RemoveUserFromTeamExecute", r)}
}

func (_c *TeamsApi_RemoveUserFromTeamExecute_Call) Run(run func(r admin.RemoveUserFromTeamApiRequest)) *TeamsApi_RemoveUserFromTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveUserFromTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeamExecute_Call) Return(_a0 *http.Response, _a1 error) *TeamsApi_RemoveUserFromTeamExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeamExecute_Call) RunAndReturn(run func(admin.RemoveUserFromTeamApiRequest) (*http.Response, error)) *TeamsApi_RemoveUserFromTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) RemoveUserFromTeamWithParams(ctx context.Context, args *admin.RemoveUserFromTeamApiParams) admin.RemoveUserFromTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTeamWithParams")
	}

	var r0 admin.RemoveUserFromTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveUserFromTeamApiParams) admin.RemoveUserFromTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveUserFromTeamApiRequest)
	}

	return r0
}

// TeamsApi_RemoveUserFromTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeamWithParams'
type TeamsApi_RemoveUserFromTeamWithParams_Call struct {
	*mock.Call
}

// RemoveUserFromTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveUserFromTeamApiParams
func (_e *TeamsApi_Expecter) RemoveUserFromTeamWithParams(ctx any, args any) *TeamsApi_RemoveUserFromTeamWithParams_Call {
	return &TeamsApi_RemoveUserFromTeamWithParams_Call{Call: _e.mock.On("RemoveUserFromTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_RemoveUserFromTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveUserFromTeamApiParams)) *TeamsApi_RemoveUserFromTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveUserFromTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeamWithParams_Call) Return(_a0 admin.RemoveUserFromTeamApiRequest) *TeamsApi_RemoveUserFromTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RemoveUserFromTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveUserFromTeamApiParams) admin.RemoveUserFromTeamApiRequest) *TeamsApi_RemoveUserFromTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrgTeam provides a mock function with given fields: ctx, orgId, teamId, teamUpdate
func (_m *TeamsApi) RenameOrgTeam(ctx context.Context, orgId string, teamId string, teamUpdate *admin.TeamUpdate) admin.RenameOrgTeamApiRequest {
	ret := _m.Called(ctx, orgId, teamId, teamUpdate)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrgTeam")
	}

	var r0 admin.RenameOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TeamUpdate) admin.RenameOrgTeamApiRequest); ok {
		r0 = rf(ctx, orgId, teamId, teamUpdate)
	} else {
		r0 = ret.Get(0).(admin.RenameOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_RenameOrgTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrgTeam'
type TeamsApi_RenameOrgTeam_Call struct {
	*mock.Call
}

// RenameOrgTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - teamId string
//   - teamUpdate *admin.TeamUpdate
func (_e *TeamsApi_Expecter) RenameOrgTeam(ctx any, orgId any, teamId any, teamUpdate any) *TeamsApi_RenameOrgTeam_Call {
	return &TeamsApi_RenameOrgTeam_Call{Call: _e.mock.On("RenameOrgTeam", ctx, orgId, teamId, teamUpdate)}
}

func (_c *TeamsApi_RenameOrgTeam_Call) Run(run func(ctx context.Context, orgId string, teamId string, teamUpdate *admin.TeamUpdate)) *TeamsApi_RenameOrgTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TeamUpdate))
	})
	return _c
}

func (_c *TeamsApi_RenameOrgTeam_Call) Return(_a0 admin.RenameOrgTeamApiRequest) *TeamsApi_RenameOrgTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RenameOrgTeam_Call) RunAndReturn(run func(context.Context, string, string, *admin.TeamUpdate) admin.RenameOrgTeamApiRequest) *TeamsApi_RenameOrgTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrgTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) RenameOrgTeamExecute(r admin.RenameOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrgTeamExecute")
	}

	var r0 *admin.TeamResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RenameOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RenameOrgTeamApiRequest) *admin.TeamResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RenameOrgTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RenameOrgTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_RenameOrgTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrgTeamExecute'
type TeamsApi_RenameOrgTeamExecute_Call struct {
	*mock.Call
}

// RenameOrgTeamExecute is a helper method to define mock.On call
//   - r admin.RenameOrgTeamApiRequest
func (_e *TeamsApi_Expecter) RenameOrgTeamExecute(r any) *TeamsApi_RenameOrgTeamExecute_Call {
	return &TeamsApi_RenameOrgTeamExecute_Call{Call: _e.mock.On("RenameOrgTeamExecute", r)}
}

func (_c *TeamsApi_RenameOrgTeamExecute_Call) Run(run func(r admin.RenameOrgTeamApiRequest)) *TeamsApi_RenameOrgTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RenameOrgTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_RenameOrgTeamExecute_Call) Return(_a0 *admin.TeamResponse, _a1 *http.Response, _a2 error) *TeamsApi_RenameOrgTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_RenameOrgTeamExecute_Call) RunAndReturn(run func(admin.RenameOrgTeamApiRequest) (*admin.TeamResponse, *http.Response, error)) *TeamsApi_RenameOrgTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RenameOrgTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) RenameOrgTeamWithParams(ctx context.Context, args *admin.RenameOrgTeamApiParams) admin.RenameOrgTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RenameOrgTeamWithParams")
	}

	var r0 admin.RenameOrgTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RenameOrgTeamApiParams) admin.RenameOrgTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RenameOrgTeamApiRequest)
	}

	return r0
}

// TeamsApi_RenameOrgTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameOrgTeamWithParams'
type TeamsApi_RenameOrgTeamWithParams_Call struct {
	*mock.Call
}

// RenameOrgTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RenameOrgTeamApiParams
func (_e *TeamsApi_Expecter) RenameOrgTeamWithParams(ctx any, args any) *TeamsApi_RenameOrgTeamWithParams_Call {
	return &TeamsApi_RenameOrgTeamWithParams_Call{Call: _e.mock.On("RenameOrgTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_RenameOrgTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.RenameOrgTeamApiParams)) *TeamsApi_RenameOrgTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RenameOrgTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_RenameOrgTeamWithParams_Call) Return(_a0 admin.RenameOrgTeamApiRequest) *TeamsApi_RenameOrgTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_RenameOrgTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.RenameOrgTeamApiParams) admin.RenameOrgTeamApiRequest) *TeamsApi_RenameOrgTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupTeam provides a mock function with given fields: ctx, groupId, teamId, teamRole
func (_m *TeamsApi) UpdateGroupTeam(ctx context.Context, groupId string, teamId string, teamRole *admin.TeamRole) admin.UpdateGroupTeamApiRequest {
	ret := _m.Called(ctx, groupId, teamId, teamRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupTeam")
	}

	var r0 admin.UpdateGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TeamRole) admin.UpdateGroupTeamApiRequest); ok {
		r0 = rf(ctx, groupId, teamId, teamRole)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_UpdateGroupTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupTeam'
type TeamsApi_UpdateGroupTeam_Call struct {
	*mock.Call
}

// UpdateGroupTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - teamId string
//   - teamRole *admin.TeamRole
func (_e *TeamsApi_Expecter) UpdateGroupTeam(ctx any, groupId any, teamId any, teamRole any) *TeamsApi_UpdateGroupTeam_Call {
	return &TeamsApi_UpdateGroupTeam_Call{Call: _e.mock.On("UpdateGroupTeam", ctx, groupId, teamId, teamRole)}
}

func (_c *TeamsApi_UpdateGroupTeam_Call) Run(run func(ctx context.Context, groupId string, teamId string, teamRole *admin.TeamRole)) *TeamsApi_UpdateGroupTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TeamRole))
	})
	return _c
}

func (_c *TeamsApi_UpdateGroupTeam_Call) Return(_a0 admin.UpdateGroupTeamApiRequest) *TeamsApi_UpdateGroupTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_UpdateGroupTeam_Call) RunAndReturn(run func(context.Context, string, string, *admin.TeamRole) admin.UpdateGroupTeamApiRequest) *TeamsApi_UpdateGroupTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupTeamExecute provides a mock function with given fields: r
func (_m *TeamsApi) UpdateGroupTeamExecute(r admin.UpdateGroupTeamApiRequest) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupTeamExecute")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupTeamApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateGroupTeamApiRequest) *admin.PaginatedTeamRole); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateGroupTeamApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateGroupTeamApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TeamsApi_UpdateGroupTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupTeamExecute'
type TeamsApi_UpdateGroupTeamExecute_Call struct {
	*mock.Call
}

// UpdateGroupTeamExecute is a helper method to define mock.On call
//   - r admin.UpdateGroupTeamApiRequest
func (_e *TeamsApi_Expecter) UpdateGroupTeamExecute(r any) *TeamsApi_UpdateGroupTeamExecute_Call {
	return &TeamsApi_UpdateGroupTeamExecute_Call{Call: _e.mock.On("UpdateGroupTeamExecute", r)}
}

func (_c *TeamsApi_UpdateGroupTeamExecute_Call) Run(run func(r admin.UpdateGroupTeamApiRequest)) *TeamsApi_UpdateGroupTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateGroupTeamApiRequest))
	})
	return _c
}

func (_c *TeamsApi_UpdateGroupTeamExecute_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *TeamsApi_UpdateGroupTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TeamsApi_UpdateGroupTeamExecute_Call) RunAndReturn(run func(admin.UpdateGroupTeamApiRequest) (*admin.PaginatedTeamRole, *http.Response, error)) *TeamsApi_UpdateGroupTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupTeamWithParams provides a mock function with given fields: ctx, args
func (_m *TeamsApi) UpdateGroupTeamWithParams(ctx context.Context, args *admin.UpdateGroupTeamApiParams) admin.UpdateGroupTeamApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupTeamWithParams")
	}

	var r0 admin.UpdateGroupTeamApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateGroupTeamApiParams) admin.UpdateGroupTeamApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateGroupTeamApiRequest)
	}

	return r0
}

// TeamsApi_UpdateGroupTeamWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupTeamWithParams'
type TeamsApi_UpdateGroupTeamWithParams_Call struct {
	*mock.Call
}

// UpdateGroupTeamWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateGroupTeamApiParams
func (_e *TeamsApi_Expecter) UpdateGroupTeamWithParams(ctx any, args any) *TeamsApi_UpdateGroupTeamWithParams_Call {
	return &TeamsApi_UpdateGroupTeamWithParams_Call{Call: _e.mock.On("UpdateGroupTeamWithParams", ctx, args)}
}

func (_c *TeamsApi_UpdateGroupTeamWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateGroupTeamApiParams)) *TeamsApi_UpdateGroupTeamWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateGroupTeamApiParams))
	})
	return _c
}

func (_c *TeamsApi_UpdateGroupTeamWithParams_Call) Return(_a0 admin.UpdateGroupTeamApiRequest) *TeamsApi_UpdateGroupTeamWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamsApi_UpdateGroupTeamWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateGroupTeamApiParams) admin.UpdateGroupTeamApiRequest) *TeamsApi_UpdateGroupTeamWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeamsApi creates a new instance of TeamsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamsApi {
	mock := &TeamsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
