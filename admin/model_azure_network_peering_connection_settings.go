// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package admin

import (
	"encoding/json"
)

// checks if the AzureNetworkPeeringConnectionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureNetworkPeeringConnectionSettings{}

// AzureNetworkPeeringConnectionSettings Group of Network Peering connection settings.
type AzureNetworkPeeringConnectionSettings struct {
	// Unique string that identifies the Azure AD directory in which the VNet peered with the MongoDB Cloud VNet resides.
	AzureDirectoryId string `json:"azureDirectoryId"`
	// Unique string that identifies the Azure subscription in which the VNet you peered with the MongoDB Cloud VNet resides.
	AzureSubscriptionId string `json:"azureSubscriptionId"`
	// Unique 24-hexadecimal digit string that identifies the MongoDB Cloud network container that contains the specified network peering connection.
	ContainerId string `json:"containerId"`
	// Error message returned when a requested Azure network peering resource returns `\"status\" : \"FAILED\"`. The resource returns `null` if the request succeeded.
	ErrorState *string `json:"errorState,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the network peering connection.
	Id *string `json:"id,omitempty"`
	// Cloud service provider that serves the requested network peering connection.
	ProviderName *string `json:"providerName,omitempty"`
	// Human-readable label that identifies the resource group in which the VNet to peer with the MongoDB Cloud VNet resides.
	ResourceGroupName string `json:"resourceGroupName"`
	// State of the network peering connection at the time you made the request.
	Status *string `json:"status,omitempty"`
	// Human-readable label that identifies the VNet that you want to peer with the MongoDB Cloud VNet.
	VnetName string `json:"vnetName"`
}

// NewAzureNetworkPeeringConnectionSettings instantiates a new AzureNetworkPeeringConnectionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureNetworkPeeringConnectionSettings(azureDirectoryId string, azureSubscriptionId string, containerId string, resourceGroupName string, vnetName string) *AzureNetworkPeeringConnectionSettings {
	this := AzureNetworkPeeringConnectionSettings{}
	this.AzureDirectoryId = azureDirectoryId
	this.AzureSubscriptionId = azureSubscriptionId
	this.ContainerId = containerId
	this.ResourceGroupName = resourceGroupName
	this.VnetName = vnetName
	return &this
}

// NewAzureNetworkPeeringConnectionSettingsWithDefaults instantiates a new AzureNetworkPeeringConnectionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureNetworkPeeringConnectionSettingsWithDefaults() *AzureNetworkPeeringConnectionSettings {
	this := AzureNetworkPeeringConnectionSettings{}
	return &this
}

// GetAzureDirectoryId returns the AzureDirectoryId field value
func (o *AzureNetworkPeeringConnectionSettings) GetAzureDirectoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzureDirectoryId
}

// GetAzureDirectoryIdOk returns a tuple with the AzureDirectoryId field value
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetAzureDirectoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureDirectoryId, true
}

// SetAzureDirectoryId sets field value
func (o *AzureNetworkPeeringConnectionSettings) SetAzureDirectoryId(v string) {
	o.AzureDirectoryId = v
}

// GetAzureSubscriptionId returns the AzureSubscriptionId field value
func (o *AzureNetworkPeeringConnectionSettings) GetAzureSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzureSubscriptionId
}

// GetAzureSubscriptionIdOk returns a tuple with the AzureSubscriptionId field value
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetAzureSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureSubscriptionId, true
}

// SetAzureSubscriptionId sets field value
func (o *AzureNetworkPeeringConnectionSettings) SetAzureSubscriptionId(v string) {
	o.AzureSubscriptionId = v
}

// GetContainerId returns the ContainerId field value
func (o *AzureNetworkPeeringConnectionSettings) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetContainerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *AzureNetworkPeeringConnectionSettings) SetContainerId(v string) {
	o.ContainerId = v
}

// GetErrorState returns the ErrorState field value if set, zero value otherwise.
func (o *AzureNetworkPeeringConnectionSettings) GetErrorState() string {
	if o == nil || IsNil(o.ErrorState) {
		var ret string
		return ret
	}
	return *o.ErrorState
}

// GetErrorStateOk returns a tuple with the ErrorState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetErrorStateOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorState) {
		return nil, false
	}
	return o.ErrorState, true
}

// HasErrorState returns a boolean if a field has been set.
func (o *AzureNetworkPeeringConnectionSettings) HasErrorState() bool {
	if o != nil && !IsNil(o.ErrorState) {
		return true
	}

	return false
}

// SetErrorState gets a reference to the given string and assigns it to the ErrorState field.
func (o *AzureNetworkPeeringConnectionSettings) SetErrorState(v string) {
	o.ErrorState = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AzureNetworkPeeringConnectionSettings) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AzureNetworkPeeringConnectionSettings) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AzureNetworkPeeringConnectionSettings) SetId(v string) {
	o.Id = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *AzureNetworkPeeringConnectionSettings) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *AzureNetworkPeeringConnectionSettings) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *AzureNetworkPeeringConnectionSettings) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetResourceGroupName returns the ResourceGroupName field value
func (o *AzureNetworkPeeringConnectionSettings) GetResourceGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetResourceGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroupName, true
}

// SetResourceGroupName sets field value
func (o *AzureNetworkPeeringConnectionSettings) SetResourceGroupName(v string) {
	o.ResourceGroupName = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AzureNetworkPeeringConnectionSettings) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AzureNetworkPeeringConnectionSettings) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AzureNetworkPeeringConnectionSettings) SetStatus(v string) {
	o.Status = &v
}

// GetVnetName returns the VnetName field value
func (o *AzureNetworkPeeringConnectionSettings) GetVnetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VnetName
}

// GetVnetNameOk returns a tuple with the VnetName field value
// and a boolean to check if the value has been set.
func (o *AzureNetworkPeeringConnectionSettings) GetVnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VnetName, true
}

// SetVnetName sets field value
func (o *AzureNetworkPeeringConnectionSettings) SetVnetName(v string) {
	o.VnetName = v
}

func (o AzureNetworkPeeringConnectionSettings) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o AzureNetworkPeeringConnectionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["azureDirectoryId"] = o.AzureDirectoryId
	toSerialize["azureSubscriptionId"] = o.AzureSubscriptionId
	toSerialize["containerId"] = o.ContainerId
	if !IsNil(o.ProviderName) {
		toSerialize["providerName"] = o.ProviderName
	}
	toSerialize["resourceGroupName"] = o.ResourceGroupName
	toSerialize["vnetName"] = o.VnetName
	return toSerialize, nil
}

type NullableAzureNetworkPeeringConnectionSettings struct {
	value *AzureNetworkPeeringConnectionSettings
	isSet bool
}

func (v NullableAzureNetworkPeeringConnectionSettings) Get() *AzureNetworkPeeringConnectionSettings {
	return v.value
}

func (v *NullableAzureNetworkPeeringConnectionSettings) Set(val *AzureNetworkPeeringConnectionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureNetworkPeeringConnectionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureNetworkPeeringConnectionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureNetworkPeeringConnectionSettings(val *AzureNetworkPeeringConnectionSettings) *NullableAzureNetworkPeeringConnectionSettings {
	return &NullableAzureNetworkPeeringConnectionSettings{value: val, isSet: true}
}

func (v NullableAzureNetworkPeeringConnectionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureNetworkPeeringConnectionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
