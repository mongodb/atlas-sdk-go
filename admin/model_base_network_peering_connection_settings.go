// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package admin

import (
	"encoding/json"
	"fmt"
)

// BaseNetworkPeeringConnectionSettings - struct for BaseNetworkPeeringConnectionSettings
type BaseNetworkPeeringConnectionSettings struct {
	AwsNetworkPeeringConnectionSettings   *AwsNetworkPeeringConnectionSettings
	AzureNetworkPeeringConnectionSettings *AzureNetworkPeeringConnectionSettings
	GCPNetworkPeeringConnectionSettings   *GCPNetworkPeeringConnectionSettings
}

// AwsNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings is a convenience function that returns AwsNetworkPeeringConnectionSettings wrapped in BaseNetworkPeeringConnectionSettings
func AwsNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings(v *AwsNetworkPeeringConnectionSettings) BaseNetworkPeeringConnectionSettings {
	return BaseNetworkPeeringConnectionSettings{
		AwsNetworkPeeringConnectionSettings: v,
	}
}

// AzureNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings is a convenience function that returns AzureNetworkPeeringConnectionSettings wrapped in BaseNetworkPeeringConnectionSettings
func AzureNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings(v *AzureNetworkPeeringConnectionSettings) BaseNetworkPeeringConnectionSettings {
	return BaseNetworkPeeringConnectionSettings{
		AzureNetworkPeeringConnectionSettings: v,
	}
}

// GCPNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings is a convenience function that returns GCPNetworkPeeringConnectionSettings wrapped in BaseNetworkPeeringConnectionSettings
func GCPNetworkPeeringConnectionSettingsAsBaseNetworkPeeringConnectionSettings(v *GCPNetworkPeeringConnectionSettings) BaseNetworkPeeringConnectionSettings {
	return BaseNetworkPeeringConnectionSettings{
		GCPNetworkPeeringConnectionSettings: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseNetworkPeeringConnectionSettings) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["providerName"] == "AWS" {
		// try to unmarshal JSON data into AwsNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.AwsNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.AwsNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.AwsNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as AwsNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["providerName"] == "AZURE" {
		// try to unmarshal JSON data into AzureNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.AzureNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.AzureNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.AzureNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as AzureNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AwsNetworkPeeringConnectionSettings'
	if jsonDict["providerName"] == "AwsNetworkPeeringConnectionSettings" {
		// try to unmarshal JSON data into AwsNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.AwsNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.AwsNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.AwsNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as AwsNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureNetworkPeeringConnectionSettings'
	if jsonDict["providerName"] == "AzureNetworkPeeringConnectionSettings" {
		// try to unmarshal JSON data into AzureNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.AzureNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.AzureNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.AzureNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as AzureNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["providerName"] == "GCP" {
		// try to unmarshal JSON data into GCPNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.GCPNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.GCPNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.GCPNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as GCPNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCPNetworkPeeringConnectionSettings'
	if jsonDict["providerName"] == "GCPNetworkPeeringConnectionSettings" {
		// try to unmarshal JSON data into GCPNetworkPeeringConnectionSettings
		err = json.Unmarshal(data, &dst.GCPNetworkPeeringConnectionSettings)
		if err == nil {
			return nil // data stored in dst.GCPNetworkPeeringConnectionSettings, return on the first match
		} else {
			dst.GCPNetworkPeeringConnectionSettings = nil
			return fmt.Errorf("failed to unmarshal BaseNetworkPeeringConnectionSettings as GCPNetworkPeeringConnectionSettings: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseNetworkPeeringConnectionSettings) MarshalJSON() ([]byte, error) {
	if src.AwsNetworkPeeringConnectionSettings != nil {
		return json.Marshal(&src.AwsNetworkPeeringConnectionSettings)
	}

	if src.AzureNetworkPeeringConnectionSettings != nil {
		return json.Marshal(&src.AzureNetworkPeeringConnectionSettings)
	}

	if src.GCPNetworkPeeringConnectionSettings != nil {
		return json.Marshal(&src.GCPNetworkPeeringConnectionSettings)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseNetworkPeeringConnectionSettings) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AwsNetworkPeeringConnectionSettings != nil {
		return obj.AwsNetworkPeeringConnectionSettings
	}

	if obj.AzureNetworkPeeringConnectionSettings != nil {
		return obj.AzureNetworkPeeringConnectionSettings
	}

	if obj.GCPNetworkPeeringConnectionSettings != nil {
		return obj.GCPNetworkPeeringConnectionSettings
	}

	// all schemas are nil
	return nil
}

type NullableBaseNetworkPeeringConnectionSettings struct {
	value *BaseNetworkPeeringConnectionSettings
	isSet bool
}

func (v NullableBaseNetworkPeeringConnectionSettings) Get() *BaseNetworkPeeringConnectionSettings {
	return v.value
}

func (v *NullableBaseNetworkPeeringConnectionSettings) Set(val *BaseNetworkPeeringConnectionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseNetworkPeeringConnectionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseNetworkPeeringConnectionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseNetworkPeeringConnectionSettings(val *BaseNetworkPeeringConnectionSettings) *NullableBaseNetworkPeeringConnectionSettings {
	return &NullableBaseNetworkPeeringConnectionSettings{value: val, isSet: true}
}

func (v NullableBaseNetworkPeeringConnectionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseNetworkPeeringConnectionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
