version: "2"
linters:
  default: none
  enable:
    - bodyclose
    - dogsled
    - errcheck
    - errorlint
    - gochecknoinits
    - gocritic
    - goprintffuncname
    - gosec
    - govet
    - misspell
    - nakedret
    - nolintlint
    - revive
    - rowserrcheck
    - staticcheck
    - thelper
    - unconvert
    - unparam
    - unused
  settings:
    gocritic:
      disabled-checks:
        - octalLiteral
        # We cannot control OpenAPI format
        - hugeParam
        # Types are dynamic/OpenAPI driven.
        - paramTypeCombine
        - wrapperFunc
        - ptrToRefParam
        - emptyFallthrough
        - nestingReduce
        - sloppyReassign
        - typeAssertChain
        - builtinShadow
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style
    gocyclo:
      min-complexity: 15
    revive:
      severity: warning
      rules:
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        - name: errorf
        - name: exported
        - name: if-return
        - name: increment-decrement
        - name: package-comments
        - name: range
        - name: time-naming
        - name: unexported-return
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: struct-tag
        # OpenAPI paths can have 0 parameters
        # - name: unused-parameter
        # We still want empty methods for consistency - do not control if method will be empty.
        # - name: unused-receiver
        - name: unreachable-code
        # We want to maintain OpenAPI consistency and ignore golang standards
        # - name: var-naming
        # - name: var-declaration
        # - name: receiver-naming
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules: # Exceptions for auto-generated code from OpenAPI spec
      - text: "ST1023:"
        path: (.+)\.go$
        comment: "ST1023: should omit type XXX from declaration; it will be inferred from the right-hand side (staticcheck)"
      - text: "QF1011:"
        path: (.+)\.go$
        comment: "QF1011: could omit type XXX from declaration; it will be inferred from the right-hand side (staticcheck)"
      - text: "QF1004:"
        path: (.+)\.go$
        comment: "QF1004: could use strings.ReplaceAll instead (staticcheck)"
formatters:
  enable:
    - gofmt
    - goimports
